
STM32H745_ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800da60  0800da60  0001da60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf8  0800daf8  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800daf8  0800daf8  0001daf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db00  0800db00  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db04  0800db04  0001db04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800db08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  0800db68  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  0800dbc8  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000029a0  24000120  0800dc28  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24002ac0  0800dc28  00022ac0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000223e9  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000399f  00000000  00000000  0004257a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017b8  00000000  00000000  00045f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000125e  00000000  00000000  000476d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003e4b9  00000000  00000000  00048936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00020216  00000000  00000000  00086def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019cdd5  00000000  00000000  000a7005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006bd0  00000000  00000000  00243ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  0024a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da48 	.word	0x0800da48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800da48 	.word	0x0800da48

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <myprintf2>:
  _write(0, (char*)buffer,len);
  //HAL_USART_Transmit(&husart2, (uint8_t*)buffer, len, -1);

}

void myprintf2(const char *fmt, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <myprintf2+0x44>)
 80007ce:	f00c fca9 	bl	800d124 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <myprintf2+0x44>)
 80007d4:	f7ff fd84 	bl	80002e0 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <myprintf2+0x44>)
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <myprintf2+0x48>)
 80007e8:	f009 fd8d 	bl	800a306 <HAL_UART_Transmit>

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24002900 	.word	0x24002900
 8000800:	24002348 	.word	0x24002348

08000804 <HAL_UART_RxCpltCallback>:
#endif

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_UART_RxCpltCallback+0x44>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d110      	bne.n	8000836 <HAL_UART_RxCpltCallback+0x32>
	{
		if(uart3_raw[0] == 'a')
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_UART_RxCpltCallback+0x48>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b61      	cmp	r3, #97	; 0x61
 800081a:	d102      	bne.n	8000822 <HAL_UART_RxCpltCallback+0x1e>
		{
			rx_flagA = 1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_UART_RxCpltCallback+0x4c>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		if(uart3_raw[0] == 'b')
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_UART_RxCpltCallback+0x48>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b62      	cmp	r3, #98	; 0x62
 8000828:	d102      	bne.n	8000830 <HAL_UART_RxCpltCallback+0x2c>
		{
			rx_flagB = 1;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_UART_RxCpltCallback+0x50>)
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		rx_flagG = 1;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_UART_RxCpltCallback+0x54>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <HAL_UART_RxCpltCallback+0x48>)
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <HAL_UART_RxCpltCallback+0x44>)
 800083c:	f009 fdf2 	bl	800a424 <HAL_UART_Receive_IT>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	24002348 	.word	0x24002348
 800084c:	240028e8 	.word	0x240028e8
 8000850:	240028f4 	.word	0x240028f4
 8000854:	240028f8 	.word	0x240028f8
 8000858:	240028fc 	.word	0x240028fc

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef _time;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000866:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000868:	bf00      	nop
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <main+0x110>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d004      	beq.n	8000880 <main+0x24>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	61fa      	str	r2, [r7, #28]
 800087c:	2b00      	cmp	r3, #0
 800087e:	dcf4      	bgt.n	800086a <main+0xe>
  if ( timeout < 0 )
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da01      	bge.n	800088a <main+0x2e>
  {
  Error_Handler();
 8000886:	f000 fc01 	bl	800108c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f000 fff7 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f881 	bl	8000994 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000892:	f000 f8fb 	bl	8000a8c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <main+0x110>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089c:	4a33      	ldr	r2, [pc, #204]	; (800096c <main+0x110>)
 800089e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <main+0x110>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f005 fb6d 	bl	8005f94 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2000      	movs	r0, #0
 80008be:	f005 fb83 	bl	8005fc8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c6:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008c8:	bf00      	nop
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <main+0x110>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <main+0x84>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	61fa      	str	r2, [r7, #28]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dcf4      	bgt.n	80008ca <main+0x6e>
if ( timeout < 0 )
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	da01      	bge.n	80008ea <main+0x8e>
{
Error_Handler();
 80008e6:	f000 fbd1 	bl	800108c <Error_Handler>
  //SWD_Init();
  //write(0,"Hello",5);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ea:	f000 fb41 	bl	8000f70 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ee:	f000 fb17 	bl	8000f20 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008f2:	f000 fa97 	bl	8000e24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008f6:	f000 fae1 	bl	8000ebc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80008fa:	f000 f8f7 	bl	8000aec <MX_ADC1_Init>
  MX_ETH_Init();
 80008fe:	f000 f9df 	bl	8000cc0 <MX_ETH_Init>
  MX_ADC2_Init();
 8000902:	f000 f971 	bl	8000be8 <MX_ADC2_Init>
  MX_RTC_Init();
 8000906:	f000 fa27 	bl	8000d58 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 800090a:	2201      	movs	r2, #1
 800090c:	4918      	ldr	r1, [pc, #96]	; (8000970 <main+0x114>)
 800090e:	4819      	ldr	r0, [pc, #100]	; (8000974 <main+0x118>)
 8000910:	f009 fd88 	bl	800a424 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(rx_flagG == 1)
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <main+0x11c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d1fb      	bne.n	8000914 <main+0xb8>
	  {
		  rx_flagG = 0;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <main+0x11c>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
		  myprintf2("Serial Received ... \r\n");
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <main+0x120>)
 8000924:	f7ff ff48 	bl	80007b8 <myprintf2>

		  if(flag_buffer_complete == 1)
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <main+0x124>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d1f1      	bne.n	8000914 <main+0xb8>
		  {
			  if(rx_flagA == 1)
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <main+0x128>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d108      	bne.n	800094a <main+0xee>
			  {
				  printBuffers(buffer1, buffer2, 1000);
 8000938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800093c:	4912      	ldr	r1, [pc, #72]	; (8000988 <main+0x12c>)
 800093e:	4813      	ldr	r0, [pc, #76]	; (800098c <main+0x130>)
 8000940:	f000 fb7c 	bl	800103c <printBuffers>
				  rx_flagA = 0;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <main+0x128>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
			  }
			  HAL_Delay(5000);
 800094a:	f241 3088 	movw	r0, #5000	; 0x1388
 800094e:	f001 f827 	bl	80019a0 <HAL_Delay>
			  flag_buffer_complete = 0;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <main+0x124>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
			  b_shot  = HAL_GetTick();
 8000958:	f001 f816 	bl	8001988 <HAL_GetTick>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <main+0x134>)
 8000962:	601a      	str	r2, [r3, #0]
			  MX_DMA_Init();
 8000964:	f000 fadc 	bl	8000f20 <MX_DMA_Init>
	  if(rx_flagG == 1)
 8000968:	e7d4      	b.n	8000914 <main+0xb8>
 800096a:	bf00      	nop
 800096c:	58024400 	.word	0x58024400
 8000970:	240028e8 	.word	0x240028e8
 8000974:	24002348 	.word	0x24002348
 8000978:	240028fc 	.word	0x240028fc
 800097c:	0800da60 	.word	0x0800da60
 8000980:	24002080 	.word	0x24002080
 8000984:	240028f4 	.word	0x240028f4
 8000988:	240010dc 	.word	0x240010dc
 800098c:	2400013c 	.word	0x2400013c
 8000990:	2400207c 	.word	0x2400207c

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09c      	sub	sp, #112	; 0x70
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	224c      	movs	r2, #76	; 0x4c
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f00c fbcc 	bl	800d140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2220      	movs	r2, #32
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f00c fbc6 	bl	800d140 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 80009b4:	2001      	movs	r0, #1
 80009b6:	f005 fc63 	bl	8006280 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <SystemClock_Config+0xf0>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a30      	ldr	r2, [pc, #192]	; (8000a84 <SystemClock_Config+0xf0>)
 80009c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b2e      	ldr	r3, [pc, #184]	; (8000a84 <SystemClock_Config+0xf0>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <SystemClock_Config+0xf4>)
 80009d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d8:	4a2b      	ldr	r2, [pc, #172]	; (8000a88 <SystemClock_Config+0xf4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <SystemClock_Config+0xf4>)
 80009e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ec:	bf00      	nop
 80009ee:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <SystemClock_Config+0xf0>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009fa:	d1f8      	bne.n	80009ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80009fc:	2309      	movs	r3, #9
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a00:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a06:	2301      	movs	r3, #1
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a16:	2378      	movs	r3, #120	; 0x78
 8000a18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a22:	2302      	movs	r3, #2
 8000a24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a26:	230c      	movs	r3, #12
 8000a28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 fc8c 	bl	8006354 <HAL_RCC_OscConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a42:	f000 fb23 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	233f      	movs	r3, #63	; 0x3f
 8000a48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a52:	2308      	movs	r3, #8
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a64:	2340      	movs	r3, #64	; 0x40
 8000a66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 f8cb 	bl	8006c08 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a78:	f000 fb08 	bl	800108c <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3770      	adds	r7, #112	; 0x70
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	58024800 	.word	0x58024800
 8000a88:	58000400 	.word	0x58000400

08000a8c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b0b0      	sub	sp, #192	; 0xc0
 8000a90:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a92:	463b      	mov	r3, r7
 8000a94:	22c0      	movs	r2, #192	; 0xc0
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00c fb51 	bl	800d140 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000aa2:	f04f 0300 	mov.w	r3, #0
 8000aa6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 21;
 8000aae:	2315      	movs	r3, #21
 8000ab0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000abe:	23c0      	movs	r3, #192	; 0xc0
 8000ac0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 7168;
 8000ac6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f006 fc23 	bl	8007320 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000ae0:	f000 fad4 	bl	800108c <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	37c0      	adds	r7, #192	; 0xc0
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000afe:	463b      	mov	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b12:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <MX_ADC1_Init+0xf4>)
 8000b14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b16:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b52:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b54:	2203      	movs	r2, #3
 8000b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6c:	481b      	ldr	r0, [pc, #108]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b6e:	f001 f90d 	bl	8001d8c <HAL_ADC_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b78:	f000 fa88 	bl	800108c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000b80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b84:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4812      	ldr	r0, [pc, #72]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000b92:	f002 f817 	bl	8002bc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000b9c:	f000 fa76 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <MX_ADC1_Init+0xf8>)
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba4:	2306      	movs	r3, #6
 8000ba6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_ADC1_Init+0xf0>)
 8000bc4:	f001 fa84 	bl	80020d0 <HAL_ADC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000bce:	f000 fa5d 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240020bc 	.word	0x240020bc
 8000be0:	40022000 	.word	0x40022000
 8000be4:	4fb80000 	.word	0x4fb80000

08000be8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c02:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <MX_ADC2_Init+0xd0>)
 8000c04:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c0e:	2208      	movs	r2, #8
 8000c10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c18:	4b26      	ldr	r3, [pc, #152]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c24:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c38:	2203      	movs	r2, #3
 8000c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c50:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c52:	f001 f89b 	bl	8001d8c <HAL_ADC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000c5c:	f000 fa16 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_ADC2_Init+0xd4>)
 8000c62:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2306      	movs	r3, #6
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c70:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c72:	2304      	movs	r3, #4
 8000c74:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c84:	f001 fa24 	bl	80020d0 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000c8e:	f000 f9fd 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000c92:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_ADC2_Init+0xcc>)
 8000c9c:	f001 ff2e 	bl	8002afc <HAL_ADCEx_Calibration_Start>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC2_Init+0xc2>
  {
    /* Calibration Error */
    Error_Handler();
 8000ca6:	f000 f9f1 	bl	800108c <Error_Handler>
  }
  /* USER CODE END ADC2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24002120 	.word	0x24002120
 8000cb8:	40022100 	.word	0x40022100
 8000cbc:	0c900008 	.word	0x0c900008

08000cc0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_ETH_Init+0x80>)
 8000cc6:	4a1f      	ldr	r2, [pc, #124]	; (8000d44 <MX_ETH_Init+0x84>)
 8000cc8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_ETH_Init+0x88>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ETH_Init+0x88>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_ETH_Init+0x88>)
 8000cd8:	22e1      	movs	r2, #225	; 0xe1
 8000cda:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_ETH_Init+0x88>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_ETH_Init+0x88>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_ETH_Init+0x88>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_ETH_Init+0x80>)
 8000cf0:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <MX_ETH_Init+0x88>)
 8000cf2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_ETH_Init+0x80>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_ETH_Init+0x80>)
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <MX_ETH_Init+0x8c>)
 8000cfe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_ETH_Init+0x80>)
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_ETH_Init+0x90>)
 8000d04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_ETH_Init+0x80>)
 8000d08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <MX_ETH_Init+0x80>)
 8000d10:	f004 fb6c 	bl	80053ec <HAL_ETH_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d1a:	f000 f9b7 	bl	800108c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d1e:	2238      	movs	r2, #56	; 0x38
 8000d20:	2100      	movs	r1, #0
 8000d22:	480c      	ldr	r0, [pc, #48]	; (8000d54 <MX_ETH_Init+0x94>)
 8000d24:	f00c fa0c 	bl	800d140 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_ETH_Init+0x94>)
 8000d2a:	2221      	movs	r2, #33	; 0x21
 8000d2c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_ETH_Init+0x94>)
 8000d30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d34:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <MX_ETH_Init+0x94>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24002274 	.word	0x24002274
 8000d44:	40028000 	.word	0x40028000
 8000d48:	24002964 	.word	0x24002964
 8000d4c:	240000c0 	.word	0x240000c0
 8000d50:	24000060 	.word	0x24000060
 8000d54:	24002084 	.word	0x24002084

08000d58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d72:	4a2b      	ldr	r2, [pc, #172]	; (8000e20 <MX_RTC_Init+0xc8>)
 8000d74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d7e:	227f      	movs	r2, #127	; 0x7f
 8000d80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d84:	22ff      	movs	r2, #255	; 0xff
 8000d86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000da0:	481e      	ldr	r0, [pc, #120]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000da2:	f008 ffbb 	bl	8009d1c <HAL_RTC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000dac:	f000 f96e 	bl	800108c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000dcc:	f009 f828 	bl	8009e20 <HAL_RTC_SetTime>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000dd6:	f000 f959 	bl	800108c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000dde:	2301      	movs	r3, #1
 8000de0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	2201      	movs	r2, #1
 8000dee:	4619      	mov	r1, r3
 8000df0:	480a      	ldr	r0, [pc, #40]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000df2:	f009 f8b3 	bl	8009f5c <HAL_RTC_SetDate>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000dfc:	f000 f946 	bl	800108c <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000e00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_RTC_Init+0xc4>)
 8000e06:	f009 f9e7 	bl	800a1d8 <HAL_RTCEx_SetCalibrationOutPut>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000e10:	f000 f93c 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24002324 	.word	0x24002324
 8000e20:	58004000 	.word	0x58004000

08000e24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e2a:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <MX_USART3_UART_Init+0x94>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e6c:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e6e:	f009 f9fa 	bl	800a266 <HAL_UART_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e78:	f000 f908 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e80:	f00b fd4f 	bl	800c922 <HAL_UARTEx_SetTxFifoThreshold>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e8a:	f000 f8ff 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000e92:	f00b fd84 	bl	800c99e <HAL_UARTEx_SetRxFifoThreshold>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e9c:	f000 f8f6 	bl	800108c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_USART3_UART_Init+0x90>)
 8000ea2:	f00b fd05 	bl	800c8b0 <HAL_UARTEx_DisableFifoMode>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000eac:	f000 f8ee 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	24002348 	.word	0x24002348
 8000eb8:	40004800 	.word	0x40004800

08000ebc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec8:	2209      	movs	r2, #9
 8000eca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eda:	2202      	movs	r2, #2
 8000edc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f04:	f005 f874 	bl	8005ff0 <HAL_PCD_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f0e:	f000 f8bd 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	240023dc 	.word	0x240023dc
 8000f1c:	40080000 	.word	0x40080000

08000f20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_DMA_Init+0x4c>)
 8000f28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <MX_DMA_Init+0x4c>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <MX_DMA_Init+0x4c>)
 8000f38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	200b      	movs	r0, #11
 8000f4a:	f001 fff4 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f4e:	200b      	movs	r0, #11
 8000f50:	f002 f80b 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	200c      	movs	r0, #12
 8000f5a:	f001 ffec 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f5e:	200c      	movs	r0, #12
 8000f60:	f002 f803 	bl	8002f6a <HAL_NVIC_EnableIRQ>

}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	58024400 	.word	0x58024400

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	4a2e      	ldr	r2, [pc, #184]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f86:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	4a27      	ldr	r2, [pc, #156]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	4a10      	ldr	r2, [pc, #64]	; (8001038 <MX_GPIO_Init+0xc8>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_GPIO_Init+0xc8>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_GPIO_Init+0xc8>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	4a09      	ldr	r2, [pc, #36]	; (8001038 <MX_GPIO_Init+0xc8>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_GPIO_Init+0xc8>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102a:	bf00      	nop
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	58024400 	.word	0x58024400

0800103c <printBuffers>:


}

void printBuffers(uint32_t *bfr1, uint32_t *bfr2, int size)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	int lidx = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

	for(lidx=0;lidx < size; lidx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e010      	b.n	8001074 <printBuffers+0x38>
	{
		myprintf2("%d, %d\r\n", bfr1[lidx], bfr2[lidx]);
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	6819      	ldr	r1, [r3, #0]
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	4413      	add	r3, r2
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4807      	ldr	r0, [pc, #28]	; (8001088 <printBuffers+0x4c>)
 800106a:	f7ff fba5 	bl	80007b8 <myprintf2>
	for(lidx=0;lidx < size; lidx++)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	429a      	cmp	r2, r3
 800107a:	dbea      	blt.n	8001052 <printBuffers+0x16>
	}
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	0800da78 	.word	0x0800da78

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_MspInit+0x30>)
 80010a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a4:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x30>)
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x30>)
 80010b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	58024400 	.word	0x58024400

080010cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a71      	ldr	r2, [pc, #452]	; (80012b0 <HAL_ADC_MspInit+0x1e4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d173      	bne.n	80011d6 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80010ee:	4b71      	ldr	r3, [pc, #452]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 80010f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010f4:	4a6f      	ldr	r2, [pc, #444]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010fe:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800110c:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3301      	adds	r3, #1
 8001112:	4a69      	ldr	r2, [pc, #420]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 8001114:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001116:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d10e      	bne.n	800113c <HAL_ADC_MspInit+0x70>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800111e:	4b65      	ldr	r3, [pc, #404]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001124:	4a63      	ldr	r2, [pc, #396]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001126:	f043 0320 	orr.w	r3, r3, #32
 800112a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800112e:	4b61      	ldr	r3, [pc, #388]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	4a5c      	ldr	r2, [pc, #368]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114c:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800115a:	2320      	movs	r3, #32
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	4619      	mov	r1, r3
 800116c:	4853      	ldr	r0, [pc, #332]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 800116e:	f004 fd61 	bl	8005c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001172:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001174:	4a53      	ldr	r2, [pc, #332]	; (80012c4 <HAL_ADC_MspInit+0x1f8>)
 8001176:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001178:	4b51      	ldr	r3, [pc, #324]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 800117a:	2209      	movs	r2, #9
 800117c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117e:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800118a:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 800118c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001190:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001192:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 8001194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001198:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800119a:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 800119c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b2:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b8:	4841      	ldr	r0, [pc, #260]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011ba:	f001 fef1 	bl	8002fa0 <HAL_DMA_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80011c4:	f7ff ff62 	bl	800108c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ce:	4a3c      	ldr	r2, [pc, #240]	; (80012c0 <HAL_ADC_MspInit+0x1f4>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6393      	str	r3, [r2, #56]	; 0x38
    // HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
    // HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011d4:	e067      	b.n	80012a6 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a3b      	ldr	r2, [pc, #236]	; (80012c8 <HAL_ADC_MspInit+0x1fc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d162      	bne.n	80012a6 <HAL_ADC_MspInit+0x1da>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3301      	adds	r3, #1
 80011e6:	4a34      	ldr	r2, [pc, #208]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 80011e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <HAL_ADC_MspInit+0x1ec>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d10e      	bne.n	8001210 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 80011f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011f8:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 80011fa:	f043 0320 	orr.w	r3, r3, #32
 80011fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_ADC_MspInit+0x1e8>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800122e:	2340      	movs	r3, #64	; 0x40
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	481e      	ldr	r0, [pc, #120]	; (80012bc <HAL_ADC_MspInit+0x1f0>)
 8001242:	f004 fcf7 	bl	8005c34 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_ADC_MspInit+0x204>)
 800124a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_ADC_MspInit+0x200>)
 800124e:	220a      	movs	r2, #10
 8001250:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_ADC_MspInit+0x200>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001264:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800126e:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001274:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_ADC_MspInit+0x200>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800128a:	4810      	ldr	r0, [pc, #64]	; (80012cc <HAL_ADC_MspInit+0x200>)
 800128c:	f001 fe88 	bl	8002fa0 <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_ADC_MspInit+0x1ce>
      Error_Handler();
 8001296:	f7ff fef9 	bl	800108c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <HAL_ADC_MspInit+0x200>)
 800129e:	64da      	str	r2, [r3, #76]	; 0x4c
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_ADC_MspInit+0x200>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012a6:	bf00      	nop
 80012a8:	3730      	adds	r7, #48	; 0x30
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000
 80012b4:	58024400 	.word	0x58024400
 80012b8:	2400296c 	.word	0x2400296c
 80012bc:	58020000 	.word	0x58020000
 80012c0:	24002184 	.word	0x24002184
 80012c4:	40020010 	.word	0x40020010
 80012c8:	40022100 	.word	0x40022100
 80012cc:	240021fc 	.word	0x240021fc
 80012d0:	40020028 	.word	0x40020028

080012d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08e      	sub	sp, #56	; 0x38
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a59      	ldr	r2, [pc, #356]	; (8001458 <HAL_ETH_MspInit+0x184>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f040 80ab 	bne.w	800144e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80012f8:	4b58      	ldr	r3, [pc, #352]	; (800145c <HAL_ETH_MspInit+0x188>)
 80012fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012fe:	4a57      	ldr	r2, [pc, #348]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001304:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001308:	4b54      	ldr	r3, [pc, #336]	; (800145c <HAL_ETH_MspInit+0x188>)
 800130a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800130e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001312:	623b      	str	r3, [r7, #32]
 8001314:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001316:	4b51      	ldr	r3, [pc, #324]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001318:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800131c:	4a4f      	ldr	r2, [pc, #316]	; (800145c <HAL_ETH_MspInit+0x188>)
 800131e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001322:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001326:	4b4d      	ldr	r3, [pc, #308]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001334:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800133a:	4a48      	ldr	r2, [pc, #288]	; (800145c <HAL_ETH_MspInit+0x188>)
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001346:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b42      	ldr	r3, [pc, #264]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	4a40      	ldr	r2, [pc, #256]	; (800145c <HAL_ETH_MspInit+0x188>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001362:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b3a      	ldr	r3, [pc, #232]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a39      	ldr	r2, [pc, #228]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	4a31      	ldr	r2, [pc, #196]	; (800145c <HAL_ETH_MspInit+0x188>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139e:	4b2f      	ldr	r3, [pc, #188]	; (800145c <HAL_ETH_MspInit+0x188>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_ETH_MspInit+0x188>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	4a2a      	ldr	r2, [pc, #168]	; (800145c <HAL_ETH_MspInit+0x188>)
 80013b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <HAL_ETH_MspInit+0x188>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80013ca:	2332      	movs	r3, #50	; 0x32
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013da:	230b      	movs	r3, #11
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	481e      	ldr	r0, [pc, #120]	; (8001460 <HAL_ETH_MspInit+0x18c>)
 80013e6:	f004 fc25 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80013ea:	2386      	movs	r3, #134	; 0x86
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fa:	230b      	movs	r3, #11
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	4817      	ldr	r0, [pc, #92]	; (8001464 <HAL_ETH_MspInit+0x190>)
 8001406:	f004 fc15 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800141c:	230b      	movs	r3, #11
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	4810      	ldr	r0, [pc, #64]	; (8001468 <HAL_ETH_MspInit+0x194>)
 8001428:	f004 fc04 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800142c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800143e:	230b      	movs	r3, #11
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <HAL_ETH_MspInit+0x198>)
 800144a:	f004 fbf3 	bl	8005c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800144e:	bf00      	nop
 8001450:	3738      	adds	r7, #56	; 0x38
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40028000 	.word	0x40028000
 800145c:	58024400 	.word	0x58024400
 8001460:	58020800 	.word	0x58020800
 8001464:	58020000 	.word	0x58020000
 8001468:	58020400 	.word	0x58020400
 800146c:	58021800 	.word	0x58021800

08001470 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0ba      	sub	sp, #232	; 0xe8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	22c0      	movs	r2, #192	; 0xc0
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f00b fe55 	bl	800d140 <memset>
  if(hrtc->Instance==RTC)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a22      	ldr	r2, [pc, #136]	; (8001524 <HAL_RTC_MspInit+0xb4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d13d      	bne.n	800151c <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 ff31 	bl	8007320 <HAL_RCCEx_PeriphCLKConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 80014c4:	f7ff fde2 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_RTC_MspInit+0xb8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a16      	ldr	r2, [pc, #88]	; (8001528 <HAL_RTC_MspInit+0xb8>)
 80014ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_RTC_MspInit+0xb8>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a13      	ldr	r2, [pc, #76]	; (8001528 <HAL_RTC_MspInit+0xb8>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_RTC_MspInit+0xb8>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f2:	2304      	movs	r3, #4
 80014f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001514:	4619      	mov	r1, r3
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_RTC_MspInit+0xbc>)
 8001518:	f004 fb8c 	bl	8005c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	37e8      	adds	r7, #232	; 0xe8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	58004000 	.word	0x58004000
 8001528:	58024400 	.word	0x58024400
 800152c:	58020400 	.word	0x58020400

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0ba      	sub	sp, #232	; 0xe8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	22c0      	movs	r2, #192	; 0xc0
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f00b fdf5 	bl	800d140 <memset>
  if(huart->Instance==USART3)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2b      	ldr	r2, [pc, #172]	; (8001608 <HAL_UART_MspInit+0xd8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d14e      	bne.n	80015fe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001560:	f04f 0202 	mov.w	r2, #2
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4618      	mov	r0, r3
 8001578:	f005 fed2 	bl	8007320 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001582:	f7ff fd83 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_UART_MspInit+0xdc>)
 8001588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800158c:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_UART_MspInit+0xdc>)
 800158e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001592:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_UART_MspInit+0xdc>)
 8001598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800159c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015aa:	4a18      	ldr	r2, [pc, #96]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015ac:	f043 0308 	orr.w	r3, r3, #8
 80015b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0xdc>)
 80015b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015dc:	2307      	movs	r3, #7
 80015de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <HAL_UART_MspInit+0xe0>)
 80015ea:	f004 fb23 	bl	8005c34 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2027      	movs	r0, #39	; 0x27
 80015f4:	f001 fc9f 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015f8:	2027      	movs	r0, #39	; 0x27
 80015fa:	f001 fcb6 	bl	8002f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015fe:	bf00      	nop
 8001600:	37e8      	adds	r7, #232	; 0xe8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004800 	.word	0x40004800
 800160c:	58024400 	.word	0x58024400
 8001610:	58020c00 	.word	0x58020c00

08001614 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0ba      	sub	sp, #232	; 0xe8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	22c0      	movs	r2, #192	; 0xc0
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f00b fd83 	bl	800d140 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a38      	ldr	r2, [pc, #224]	; (8001720 <HAL_PCD_MspInit+0x10c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d169      	bne.n	8001718 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001644:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001650:	2301      	movs	r3, #1
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001654:	2312      	movs	r3, #18
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800165c:	2303      	movs	r3, #3
 800165e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001660:	2302      	movs	r3, #2
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001664:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800166a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800166e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001670:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4618      	mov	r0, r3
 800167e:	f005 fe4f 	bl	8007320 <HAL_RCCEx_PeriphCLKConfig>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001688:	f7ff fd00 	bl	800108c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800168c:	f004 fe52 	bl	8006334 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_PCD_MspInit+0x110>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_PCD_MspInit+0x110>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_PCD_MspInit+0x110>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80016ae:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80016b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80016c8:	230a      	movs	r3, #10
 80016ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4814      	ldr	r0, [pc, #80]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016d6:	f004 faad 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <HAL_PCD_MspInit+0x114>)
 80016f6:	f004 fa9d 	bl	8005c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_PCD_MspInit+0x110>)
 80016fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001700:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_PCD_MspInit+0x110>)
 8001702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001706:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_PCD_MspInit+0x110>)
 800170c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	37e8      	adds	r7, #232	; 0xe8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40080000 	.word	0x40080000
 8001724:	58024400 	.word	0x58024400
 8001728:	58020000 	.word	0x58020000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f8f2 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <DMA1_Stream0_IRQHandler+0x10>)
 8001786:	f002 fccb 	bl	8004120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	24002184 	.word	0x24002184

08001794 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Stream1_IRQHandler+0x10>)
 800179a:	f002 fcc1 	bl	8004120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	240021fc 	.word	0x240021fc

080017a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <USART3_IRQHandler+0x10>)
 80017ae:	f008 fe85 	bl	800a4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24002348 	.word	0x24002348

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f00b fcb0 	bl	800d150 <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	24080000 	.word	0x24080000
 800181c:	00000400 	.word	0x00000400
 8001820:	24002970 	.word	0x24002970
 8001824:	24002ac0 	.word	0x24002ac0

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800182c:	f7fe ff2e 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001856:	f00b fc81 	bl	800d15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7fe ffff 	bl	800085c <main>
  bx  lr
 800185e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001864:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001868:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800186c:	0800db08 	.word	0x0800db08
  ldr r2, =_sbss
 8001870:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001874:	24002ac0 	.word	0x24002ac0

08001878 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC3_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001882:	2003      	movs	r0, #3
 8001884:	f001 fb4c 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001888:	f005 fb74 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_Init+0x68>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	0a1b      	lsrs	r3, r3, #8
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	4913      	ldr	r1, [pc, #76]	; (80018e8 <HAL_Init+0x6c>)
 800189a:	5ccb      	ldrb	r3, [r1, r3]
 800189c:	f003 031f 	and.w	r3, r3, #31
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_Init+0x68>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_Init+0x6c>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_Init+0x70>)
 80018be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018c0:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_Init+0x74>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f814 	bl	80018f4 <HAL_InitTick>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e002      	b.n	80018dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018d6:	f7ff fbdf 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	58024400 	.word	0x58024400
 80018e8:	0800da84 	.word	0x0800da84
 80018ec:	24000004 	.word	0x24000004
 80018f0:	24000000 	.word	0x24000000

080018f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_InitTick+0x60>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e021      	b.n	800194c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <HAL_InitTick+0x64>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_InitTick+0x60>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f001 fb31 	bl	8002f86 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f001 fafb 	bl	8002f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x68>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2400000c 	.word	0x2400000c
 8001958:	24000000 	.word	0x24000000
 800195c:	24000008 	.word	0x24000008

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	2400000c 	.word	0x2400000c
 8001984:	24002974 	.word	0x24002974

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	24002974 	.word	0x24002974

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff ffee 	bl	8001988 <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_Delay+0x44>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffde 	bl	8001988 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2400000c 	.word	0x2400000c

080019e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <HAL_GetREVID+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0c1b      	lsrs	r3, r3, #16
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	5c001000 	.word	0x5c001000

08001a00 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a10:	4904      	ldr	r1, [pc, #16]	; (8001a24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	58000400 	.word	0x58000400

08001a28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	609a      	str	r2, [r3, #8]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
 8001a9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3360      	adds	r3, #96	; 0x60
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f003 031f 	and.w	r3, r3, #31
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3360      	adds	r3, #96	; 0x60
 8001b12:	461a      	mov	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3330      	adds	r3, #48	; 0x30
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	211f      	movs	r1, #31
 8001b64:	fa01 f303 	lsl.w	r3, r1, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	0e9b      	lsrs	r3, r3, #26
 8001b70:	f003 011f 	and.w	r1, r3, #31
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3314      	adds	r3, #20
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	0e5b      	lsrs	r3, r3, #25
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	0d1b      	lsrs	r3, r3, #20
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2107      	movs	r1, #7
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	0d1b      	lsrs	r3, r3, #20
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f003 0318 	and.w	r3, r3, #24
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c0c:	40d9      	lsrs	r1, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	400b      	ands	r3, r1
 8001c12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c16:	431a      	orrs	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	000fffff 	.word	0x000fffff

08001c30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6093      	str	r3, [r2, #8]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	5fffffc0 	.word	0x5fffffc0

08001c54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c68:	d101      	bne.n	8001c6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	6fffffc0 	.word	0x6fffffc0

08001ca4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001cb8:	d101      	bne.n	8001cbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <LL_ADC_Disable+0x24>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	7fffffc0 	.word	0x7fffffc0

08001cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <LL_ADC_IsEnabled+0x18>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_ADC_IsEnabled+0x1a>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d101      	bne.n	8001d32 <LL_ADC_IsDisableOngoing+0x18>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <LL_ADC_IsDisableOngoing+0x1a>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d101      	bne.n	8001d58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d101      	bne.n	8001d7e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e18f      	b.n	80020c6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff f989 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff41 	bl	8001c54 <LL_ADC_IsDeepPowerDownEnabled>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff27 	bl	8001c30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff5c 	bl	8001ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d114      	bne.n	8001e1c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff40 	bl	8001c7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dfc:	4b87      	ldr	r3, [pc, #540]	; (800201c <HAL_ADC_Init+0x290>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	099b      	lsrs	r3, r3, #6
 8001e02:	4a87      	ldr	r2, [pc, #540]	; (8002020 <HAL_ADC_Init+0x294>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e0e:	e002      	b.n	8001e16 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f9      	bne.n	8001e10 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff3f 	bl	8001ca4 <LL_ADC_IsInternalRegulatorEnabled>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10d      	bne.n	8001e48 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff77 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8001e52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e58:	f003 0310 	and.w	r3, r3, #16
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 8129 	bne.w	80020b4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 8125 	bne.w	80020b4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e72:	f043 0202 	orr.w	r2, r3, #2
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff38 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d136      	bne.n	8001ef8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a65      	ldr	r2, [pc, #404]	; (8002024 <HAL_ADC_Init+0x298>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d004      	beq.n	8001e9e <HAL_ADC_Init+0x112>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a63      	ldr	r2, [pc, #396]	; (8002028 <HAL_ADC_Init+0x29c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10e      	bne.n	8001ebc <HAL_ADC_Init+0x130>
 8001e9e:	4861      	ldr	r0, [pc, #388]	; (8002024 <HAL_ADC_Init+0x298>)
 8001ea0:	f7ff ff28 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	4860      	ldr	r0, [pc, #384]	; (8002028 <HAL_ADC_Init+0x29c>)
 8001ea8:	f7ff ff24 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4323      	orrs	r3, r4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e008      	b.n	8001ece <HAL_ADC_Init+0x142>
 8001ebc:	485b      	ldr	r0, [pc, #364]	; (800202c <HAL_ADC_Init+0x2a0>)
 8001ebe:	f7ff ff19 	bl	8001cf4 <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d012      	beq.n	8001ef8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a53      	ldr	r2, [pc, #332]	; (8002024 <HAL_ADC_Init+0x298>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d004      	beq.n	8001ee6 <HAL_ADC_Init+0x15a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a51      	ldr	r2, [pc, #324]	; (8002028 <HAL_ADC_Init+0x29c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Init+0x15e>
 8001ee6:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_ADC_Init+0x2a4>)
 8001ee8:	e000      	b.n	8001eec <HAL_ADC_Init+0x160>
 8001eea:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_ADC_Init+0x2a8>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f7ff fd98 	bl	8001a28 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ef8:	f7ff fd76 	bl	80019e8 <HAL_GetREVID>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d914      	bls.n	8001f30 <HAL_ADC_Init+0x1a4>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d110      	bne.n	8001f30 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7d5b      	ldrb	r3, [r3, #21]
 8001f12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f18:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f1e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7f1b      	ldrb	r3, [r3, #28]
 8001f24:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001f26:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f28:	f043 030c 	orr.w	r3, r3, #12
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	e00d      	b.n	8001f4c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7d5b      	ldrb	r3, [r3, #21]
 8001f34:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f3a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001f40:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7f1b      	ldrb	r3, [r3, #28]
 8001f46:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7f1b      	ldrb	r3, [r3, #28]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d106      	bne.n	8001f62 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	045b      	lsls	r3, r3, #17
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4b2c      	ldr	r3, [pc, #176]	; (8002038 <HAL_ADC_Init+0x2ac>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	69b9      	ldr	r1, [r7, #24]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fed2 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 8001f9c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fedf 	bl	8001d66 <LL_ADC_INJ_IsConversionOngoing>
 8001fa8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d15f      	bne.n	8002070 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d15c      	bne.n	8002070 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	7d1b      	ldrb	r3, [r3, #20]
 8001fba:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <HAL_ADC_Init+0x2b0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d130      	bne.n	8002044 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_ADC_Init+0x2b4>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ff6:	3a01      	subs	r2, #1
 8001ff8:	0411      	lsls	r1, r2, #16
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800200a:	430a      	orrs	r2, r1
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	611a      	str	r2, [r3, #16]
 8002018:	e01c      	b.n	8002054 <HAL_ADC_Init+0x2c8>
 800201a:	bf00      	nop
 800201c:	24000000 	.word	0x24000000
 8002020:	053e2d63 	.word	0x053e2d63
 8002024:	40022000 	.word	0x40022000
 8002028:	40022100 	.word	0x40022100
 800202c:	58026000 	.word	0x58026000
 8002030:	40022300 	.word	0x40022300
 8002034:	58026300 	.word	0x58026300
 8002038:	fff0c003 	.word	0xfff0c003
 800203c:	ffffbffc 	.word	0xffffbffc
 8002040:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691a      	ldr	r2, [r3, #16]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fbe0 	bl	8002830 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10c      	bne.n	8002092 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f023 010f 	bic.w	r1, r3, #15
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	1e5a      	subs	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
 8002090:	e007      	b.n	80020a2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 020f 	bic.w	r2, r2, #15
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
 80020b2:	e007      	b.n	80020c4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b8:	f043 0210 	orr.w	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd90      	pop	{r4, r7, pc}
 80020ce:	bf00      	nop

080020d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b0a1      	sub	sp, #132	; 0x84
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a9d      	ldr	r2, [pc, #628]	; (8002360 <HAL_ADC_ConfigChannel+0x290>)
 80020ea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x2a>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e321      	b.n	800273e <HAL_ADC_ConfigChannel+0x66e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fe1a 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 8306 	bne.w	8002720 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x62>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2201      	movs	r2, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	e016      	b.n	8002160 <HAL_ADC_ConfigChannel+0x90>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002142:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800214a:	2320      	movs	r3, #32
 800214c:	e003      	b.n	8002156 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800214e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	69d1      	ldr	r1, [r2, #28]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	430b      	orrs	r3, r1
 800216c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	6859      	ldr	r1, [r3, #4]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	f7ff fcdc 	bl	8001b38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fddb 	bl	8001d40 <LL_ADC_REG_IsConversionOngoing>
 800218a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fde8 	bl	8001d66 <LL_ADC_INJ_IsConversionOngoing>
 8002196:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80b3 	bne.w	8002306 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 80af 	bne.w	8002306 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6819      	ldr	r1, [r3, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	461a      	mov	r2, r3
 80021b6:	f7ff fceb 	bl	8001b90 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80021ba:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_ADC_ConfigChannel+0x294>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80021c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x110>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	e01d      	b.n	800221c <HAL_ADC_ConfigChannel+0x14c>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x136>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	e00a      	b.n	800221c <HAL_ADC_ConfigChannel+0x14c>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b04      	cmp	r3, #4
 8002224:	d027      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6919      	ldr	r1, [r3, #16]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002234:	f7ff fc2c 	bl	8001a90 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6919      	ldr	r1, [r3, #16]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	7e5b      	ldrb	r3, [r3, #25]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <HAL_ADC_ConfigChannel+0x17e>
 8002248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800224c:	e000      	b.n	8002250 <HAL_ADC_ConfigChannel+0x180>
 800224e:	2300      	movs	r3, #0
 8002250:	461a      	mov	r2, r3
 8002252:	f7ff fc56 	bl	8001b02 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6919      	ldr	r1, [r3, #16]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	7e1b      	ldrb	r3, [r3, #24]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_ADC_ConfigChannel+0x19c>
 8002266:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800226a:	e000      	b.n	800226e <HAL_ADC_ConfigChannel+0x19e>
 800226c:	2300      	movs	r3, #0
 800226e:	461a      	mov	r2, r3
 8002270:	f7ff fc2e 	bl	8001ad0 <LL_ADC_SetDataRightShift>
 8002274:	e047      	b.n	8002306 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	069b      	lsls	r3, r3, #26
 8002286:	429a      	cmp	r2, r3
 8002288:	d107      	bne.n	800229a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002298:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	069b      	lsls	r3, r3, #26
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d107      	bne.n	80022be <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022bc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	069b      	lsls	r3, r3, #26
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d107      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022e0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	069b      	lsls	r3, r3, #26
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d107      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002304:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fcf2 	bl	8001cf4 <LL_ADC_IsEnabled>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 820d 	bne.w	8002732 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6819      	ldr	r1, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	461a      	mov	r2, r3
 8002326:	f7ff fc5f 	bl	8001be8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <HAL_ADC_ConfigChannel+0x290>)
 8002330:	4293      	cmp	r3, r2
 8002332:	f040 8133 	bne.w	800259c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002342:	2b00      	cmp	r3, #0
 8002344:	d110      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x298>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	0e9b      	lsrs	r3, r3, #26
 800234c:	3301      	adds	r3, #1
 800234e:	f003 031f 	and.w	r3, r3, #31
 8002352:	2b09      	cmp	r3, #9
 8002354:	bf94      	ite	ls
 8002356:	2301      	movls	r3, #1
 8002358:	2300      	movhi	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	e01e      	b.n	800239c <HAL_ADC_ConfigChannel+0x2cc>
 800235e:	bf00      	nop
 8002360:	47ff0000 	.word	0x47ff0000
 8002364:	5c001000 	.word	0x5c001000
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002378:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800237a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e003      	b.n	800238c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2b09      	cmp	r3, #9
 8002394:	bf94      	ite	ls
 8002396:	2301      	movls	r3, #1
 8002398:	2300      	movhi	r3, #0
 800239a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800239c:	2b00      	cmp	r3, #0
 800239e:	d079      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2ec>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	0e9b      	lsrs	r3, r3, #26
 80023b2:	3301      	adds	r3, #1
 80023b4:	069b      	lsls	r3, r3, #26
 80023b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023ba:	e015      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x318>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c4:	fa93 f3a3 	rbit	r3, r3
 80023c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80023ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80023ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80023d4:	2320      	movs	r3, #32
 80023d6:	e003      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80023d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	069b      	lsls	r3, r3, #26
 80023e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x338>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	e017      	b.n	8002438 <HAL_ADC_ConfigChannel+0x368>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002418:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800241a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002420:	2320      	movs	r3, #32
 8002422:	e003      	b.n	800242c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	ea42 0103 	orr.w	r1, r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <HAL_ADC_ConfigChannel+0x38e>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0e9b      	lsrs	r3, r3, #26
 800244e:	3301      	adds	r3, #1
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	051b      	lsls	r3, r3, #20
 800245c:	e018      	b.n	8002490 <HAL_ADC_ConfigChannel+0x3c0>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002466:	fa93 f3a3 	rbit	r3, r3
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002476:	2320      	movs	r3, #32
 8002478:	e003      	b.n	8002482 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	fab3 f383 	clz	r3, r3
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3301      	adds	r3, #1
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002490:	430b      	orrs	r3, r1
 8002492:	e07e      	b.n	8002592 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800249c:	2b00      	cmp	r3, #0
 800249e:	d107      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x3e0>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0e9b      	lsrs	r3, r3, #26
 80024a6:	3301      	adds	r3, #1
 80024a8:	069b      	lsls	r3, r3, #26
 80024aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ae:	e015      	b.n	80024dc <HAL_ADC_ConfigChannel+0x40c>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024c8:	2320      	movs	r3, #32
 80024ca:	e003      	b.n	80024d4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x42c>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2101      	movs	r1, #1
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	e017      	b.n	800252c <HAL_ADC_ConfigChannel+0x45c>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	61bb      	str	r3, [r7, #24]
  return result;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	2101      	movs	r1, #1
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	ea42 0103 	orr.w	r1, r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10d      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x488>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	3301      	adds	r3, #1
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	3b1e      	subs	r3, #30
 8002550:	051b      	lsls	r3, r3, #20
 8002552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002556:	e01b      	b.n	8002590 <HAL_ADC_ConfigChannel+0x4c0>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	60fb      	str	r3, [r7, #12]
  return result;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e003      	b.n	800257c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f003 021f 	and.w	r2, r3, #31
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	3b1e      	subs	r3, #30
 800258a:	051b      	lsls	r3, r3, #20
 800258c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002590:	430b      	orrs	r3, r1
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	6892      	ldr	r2, [r2, #8]
 8002596:	4619      	mov	r1, r3
 8002598:	f7ff fafa 	bl	8001b90 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f280 80c6 	bge.w	8002732 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a67      	ldr	r2, [pc, #412]	; (8002748 <HAL_ADC_ConfigChannel+0x678>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x4ea>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a65      	ldr	r2, [pc, #404]	; (800274c <HAL_ADC_ConfigChannel+0x67c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x4ee>
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <HAL_ADC_ConfigChannel+0x680>)
 80025bc:	e000      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x4f0>
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_ADC_ConfigChannel+0x684>)
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fa57 	bl	8001a74 <LL_ADC_GetCommonPathInternalCh>
 80025c6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a5e      	ldr	r2, [pc, #376]	; (8002748 <HAL_ADC_ConfigChannel+0x678>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_ADC_ConfigChannel+0x50c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a5d      	ldr	r2, [pc, #372]	; (800274c <HAL_ADC_ConfigChannel+0x67c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10e      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x52a>
 80025dc:	485a      	ldr	r0, [pc, #360]	; (8002748 <HAL_ADC_ConfigChannel+0x678>)
 80025de:	f7ff fb89 	bl	8001cf4 <LL_ADC_IsEnabled>
 80025e2:	4604      	mov	r4, r0
 80025e4:	4859      	ldr	r0, [pc, #356]	; (800274c <HAL_ADC_ConfigChannel+0x67c>)
 80025e6:	f7ff fb85 	bl	8001cf4 <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4323      	orrs	r3, r4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	e008      	b.n	800260c <HAL_ADC_ConfigChannel+0x53c>
 80025fa:	4857      	ldr	r0, [pc, #348]	; (8002758 <HAL_ADC_ConfigChannel+0x688>)
 80025fc:	f7ff fb7a 	bl	8001cf4 <LL_ADC_IsEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	d07d      	beq.n	800270c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_ADC_ConfigChannel+0x68c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d130      	bne.n	800267c <HAL_ADC_ConfigChannel+0x5ac>
 800261a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d12b      	bne.n	800267c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_ADC_ConfigChannel+0x688>)
 800262a:	4293      	cmp	r3, r2
 800262c:	f040 8081 	bne.w	8002732 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a44      	ldr	r2, [pc, #272]	; (8002748 <HAL_ADC_ConfigChannel+0x678>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <HAL_ADC_ConfigChannel+0x574>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a43      	ldr	r2, [pc, #268]	; (800274c <HAL_ADC_ConfigChannel+0x67c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x578>
 8002644:	4a42      	ldr	r2, [pc, #264]	; (8002750 <HAL_ADC_ConfigChannel+0x680>)
 8002646:	e000      	b.n	800264a <HAL_ADC_ConfigChannel+0x57a>
 8002648:	4a42      	ldr	r2, [pc, #264]	; (8002754 <HAL_ADC_ConfigChannel+0x684>)
 800264a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800264c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7ff f9fb 	bl	8001a4e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002658:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_ADC_ConfigChannel+0x690>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	4a41      	ldr	r2, [pc, #260]	; (8002764 <HAL_ADC_ConfigChannel+0x694>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800266c:	e002      	b.n	8002674 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3b01      	subs	r3, #1
 8002672:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f9      	bne.n	800266e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267a:	e05a      	b.n	8002732 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a39      	ldr	r2, [pc, #228]	; (8002768 <HAL_ADC_ConfigChannel+0x698>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d11e      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x5f4>
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d119      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a30      	ldr	r2, [pc, #192]	; (8002758 <HAL_ADC_ConfigChannel+0x688>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d14b      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <HAL_ADC_ConfigChannel+0x678>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d004      	beq.n	80026ae <HAL_ADC_ConfigChannel+0x5de>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a28      	ldr	r2, [pc, #160]	; (800274c <HAL_ADC_ConfigChannel+0x67c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x5e2>
 80026ae:	4a28      	ldr	r2, [pc, #160]	; (8002750 <HAL_ADC_ConfigChannel+0x680>)
 80026b0:	e000      	b.n	80026b4 <HAL_ADC_ConfigChannel+0x5e4>
 80026b2:	4a28      	ldr	r2, [pc, #160]	; (8002754 <HAL_ADC_ConfigChannel+0x684>)
 80026b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7ff f9c6 	bl	8001a4e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026c2:	e036      	b.n	8002732 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a28      	ldr	r2, [pc, #160]	; (800276c <HAL_ADC_ConfigChannel+0x69c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d131      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x662>
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d12c      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <HAL_ADC_ConfigChannel+0x688>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d127      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <HAL_ADC_ConfigChannel+0x678>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d004      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x626>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <HAL_ADC_ConfigChannel+0x67c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x62a>
 80026f6:	4a16      	ldr	r2, [pc, #88]	; (8002750 <HAL_ADC_ConfigChannel+0x680>)
 80026f8:	e000      	b.n	80026fc <HAL_ADC_ConfigChannel+0x62c>
 80026fa:	4a16      	ldr	r2, [pc, #88]	; (8002754 <HAL_ADC_ConfigChannel+0x684>)
 80026fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002702:	4619      	mov	r1, r3
 8002704:	4610      	mov	r0, r2
 8002706:	f7ff f9a2 	bl	8001a4e <LL_ADC_SetCommonPathInternalCh>
 800270a:	e012      	b.n	8002732 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0220 	orr.w	r2, r3, #32
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800271e:	e008      	b.n	8002732 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800273a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800273e:	4618      	mov	r0, r3
 8002740:	3784      	adds	r7, #132	; 0x84
 8002742:	46bd      	mov	sp, r7
 8002744:	bd90      	pop	{r4, r7, pc}
 8002746:	bf00      	nop
 8002748:	40022000 	.word	0x40022000
 800274c:	40022100 	.word	0x40022100
 8002750:	40022300 	.word	0x40022300
 8002754:	58026300 	.word	0x58026300
 8002758:	58026000 	.word	0x58026000
 800275c:	cb840000 	.word	0xcb840000
 8002760:	24000000 	.word	0x24000000
 8002764:	053e2d63 	.word	0x053e2d63
 8002768:	c7520000 	.word	0xc7520000
 800276c:	cfb80000 	.word	0xcfb80000

08002770 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff facc 	bl	8001d1a <LL_ADC_IsDisableOngoing>
 8002782:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fab3 	bl	8001cf4 <LL_ADC_IsEnabled>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d047      	beq.n	8002824 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d144      	bne.n	8002824 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030d 	and.w	r3, r3, #13
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10c      	bne.n	80027c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fa8d 	bl	8001ccc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2203      	movs	r2, #3
 80027b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ba:	f7ff f8e5 	bl	8001988 <HAL_GetTick>
 80027be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027c0:	e029      	b.n	8002816 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e023      	b.n	8002826 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027de:	f7ff f8d3 	bl	8001988 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d914      	bls.n	8002816 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fe:	f043 0210 	orr.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e007      	b.n	8002826 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1dc      	bne.n	80027de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7a      	ldr	r2, [pc, #488]	; (8002a28 <ADC_ConfigureBoostMode+0x1f8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d004      	beq.n	800284c <ADC_ConfigureBoostMode+0x1c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a79      	ldr	r2, [pc, #484]	; (8002a2c <ADC_ConfigureBoostMode+0x1fc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d109      	bne.n	8002860 <ADC_ConfigureBoostMode+0x30>
 800284c:	4b78      	ldr	r3, [pc, #480]	; (8002a30 <ADC_ConfigureBoostMode+0x200>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e008      	b.n	8002872 <ADC_ConfigureBoostMode+0x42>
 8002860:	4b74      	ldr	r3, [pc, #464]	; (8002a34 <ADC_ConfigureBoostMode+0x204>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf14      	ite	ne
 800286c:	2301      	movne	r3, #1
 800286e:	2300      	moveq	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01c      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002876:	f004 fcf7 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 800287a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002884:	d010      	beq.n	80028a8 <ADC_ConfigureBoostMode+0x78>
 8002886:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800288a:	d873      	bhi.n	8002974 <ADC_ConfigureBoostMode+0x144>
 800288c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002890:	d002      	beq.n	8002898 <ADC_ConfigureBoostMode+0x68>
 8002892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002896:	d16d      	bne.n	8002974 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	60fb      	str	r3, [r7, #12]
        break;
 80028a6:	e068      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	60fb      	str	r3, [r7, #12]
        break;
 80028ae:	e064      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028b4:	f04f 0100 	mov.w	r1, #0
 80028b8:	f005 ff3c 	bl	8008734 <HAL_RCCEx_GetPeriphCLKFreq>
 80028bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028c6:	d051      	beq.n	800296c <ADC_ConfigureBoostMode+0x13c>
 80028c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80028cc:	d854      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028ce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028d2:	d047      	beq.n	8002964 <ADC_ConfigureBoostMode+0x134>
 80028d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80028d8:	d84e      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028de:	d03d      	beq.n	800295c <ADC_ConfigureBoostMode+0x12c>
 80028e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028e4:	d848      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ea:	d033      	beq.n	8002954 <ADC_ConfigureBoostMode+0x124>
 80028ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028f0:	d842      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028f6:	d029      	beq.n	800294c <ADC_ConfigureBoostMode+0x11c>
 80028f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028fc:	d83c      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 80028fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002902:	d01a      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002904:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002908:	d836      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 800290a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800290e:	d014      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002910:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002914:	d830      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 8002916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291a:	d00e      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 800291c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002920:	d82a      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 8002922:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002926:	d008      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002928:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800292c:	d824      	bhi.n	8002978 <ADC_ConfigureBoostMode+0x148>
 800292e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002932:	d002      	beq.n	800293a <ADC_ConfigureBoostMode+0x10a>
 8002934:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002938:	d11e      	bne.n	8002978 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0c9b      	lsrs	r3, r3, #18
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	60fb      	str	r3, [r7, #12]
        break;
 800294a:	e016      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
        break;
 8002952:	e012      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	60fb      	str	r3, [r7, #12]
        break;
 800295a:	e00e      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	099b      	lsrs	r3, r3, #6
 8002960:	60fb      	str	r3, [r7, #12]
        break;
 8002962:	e00a      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	09db      	lsrs	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
        break;
 800296a:	e006      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	60fb      	str	r3, [r7, #12]
        break;
 8002972:	e002      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002978:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800297a:	f7ff f835 	bl	80019e8 <HAL_GetREVID>
 800297e:	4603      	mov	r3, r0
 8002980:	f241 0203 	movw	r2, #4099	; 0x1003
 8002984:	4293      	cmp	r3, r2
 8002986:	d815      	bhi.n	80029b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <ADC_ConfigureBoostMode+0x208>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d908      	bls.n	80029a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029a0:	e03e      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	609a      	str	r2, [r3, #8]
}
 80029b2:	e035      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <ADC_ConfigureBoostMode+0x20c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d808      	bhi.n	80029d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80029d0:	609a      	str	r2, [r3, #8]
}
 80029d2:	e025      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <ADC_ConfigureBoostMode+0x210>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d80a      	bhi.n	80029f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	e016      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <ADC_ConfigureBoostMode+0x214>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d80a      	bhi.n	8002a10 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0c:	609a      	str	r2, [r3, #8]
}
 8002a0e:	e007      	b.n	8002a20 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40022100 	.word	0x40022100
 8002a30:	40022300 	.word	0x40022300
 8002a34:	58026300 	.word	0x58026300
 8002a38:	01312d00 	.word	0x01312d00
 8002a3c:	005f5e10 	.word	0x005f5e10
 8002a40:	00bebc20 	.word	0x00bebc20
 8002a44:	017d7840 	.word	0x017d7840

08002a48 <LL_ADC_IsEnabled>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <LL_ADC_IsEnabled+0x18>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_ADC_IsEnabled+0x1a>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <LL_ADC_StartCalibration>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <LL_ADC_StartCalibration+0x38>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a90:	430a      	orrs	r2, r1
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	3ffeffc0 	.word	0x3ffeffc0

08002aac <LL_ADC_IsCalibrationOnGoing>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ac0:	d101      	bne.n	8002ac6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d101      	bne.n	8002aec <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADCEx_Calibration_Start+0x1e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e04c      	b.n	8002bb4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff fe24 	bl	8002770 <ADC_Disable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d135      	bne.n	8002b9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_ADCEx_Calibration_Start+0xc0>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	f043 0202 	orr.w	r2, r3, #2
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff90 	bl	8002a70 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b50:	e014      	b.n	8002b7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	3301      	adds	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d30d      	bcc.n	8002b7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b64:	f023 0312 	bic.w	r3, r3, #18
 8002b68:	f043 0210 	orr.w	r2, r3, #16
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e01b      	b.n	8002bb4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff93 	bl	8002aac <LL_ADC_IsCalibrationOnGoing>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e2      	bne.n	8002b52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	f023 0303 	bic.w	r3, r3, #3
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b9c:	e005      	b.n	8002baa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	ffffeefd 	.word	0xffffeefd
 8002bc0:	25c3f800 	.word	0x25c3f800

08002bc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b09f      	sub	sp, #124	; 0x7c
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e0be      	b.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d102      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bfc:	4b5b      	ldr	r3, [pc, #364]	; (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	e001      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e09d      	b.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff54 	bl	8002ad4 <LL_ADC_REG_IsConversionOngoing>
 8002c2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff4e 	bl	8002ad4 <LL_ADC_REG_IsConversionOngoing>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d17f      	bne.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d17c      	bne.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c58:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c5a:	e000      	b.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c5c:	4b45      	ldr	r3, [pc, #276]	; (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d039      	beq.n	8002cdc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	431a      	orrs	r2, r3
 8002c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c78:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a38      	ldr	r2, [pc, #224]	; (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10e      	bne.n	8002cac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c8e:	4836      	ldr	r0, [pc, #216]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c90:	f7ff feda 	bl	8002a48 <LL_ADC_IsEnabled>
 8002c94:	4604      	mov	r4, r0
 8002c96:	4835      	ldr	r0, [pc, #212]	; (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c98:	f7ff fed6 	bl	8002a48 <LL_ADC_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4323      	orrs	r3, r4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e008      	b.n	8002cbe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002cac:	4832      	ldr	r0, [pc, #200]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002cae:	f7ff fecb 	bl	8002a48 <LL_ADC_IsEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d047      	beq.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	6811      	ldr	r1, [r2, #0]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cda:	e03a      	b.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10e      	bne.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002cfc:	481a      	ldr	r0, [pc, #104]	; (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cfe:	f7ff fea3 	bl	8002a48 <LL_ADC_IsEnabled>
 8002d02:	4604      	mov	r4, r0
 8002d04:	4819      	ldr	r0, [pc, #100]	; (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d06:	f7ff fe9f 	bl	8002a48 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4323      	orrs	r3, r4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf0c      	ite	eq
 8002d12:	2301      	moveq	r3, #1
 8002d14:	2300      	movne	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	e008      	b.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d1a:	4817      	ldr	r0, [pc, #92]	; (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d1c:	f7ff fe94 	bl	8002a48 <LL_ADC_IsEnabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bf0c      	ite	eq
 8002d26:	2301      	moveq	r3, #1
 8002d28:	2300      	movne	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d3c:	e009      	b.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d50:	e000      	b.n	8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	377c      	adds	r7, #124	; 0x7c
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd90      	pop	{r4, r7, pc}
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	40022100 	.word	0x40022100
 8002d70:	40022300 	.word	0x40022300
 8002d74:	58026300 	.word	0x58026300
 8002d78:	58026000 	.word	0x58026000
 8002d7c:	fffff0e0 	.word	0xfffff0e0

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dae:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <__NVIC_SetPriorityGrouping+0x40>)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	60d3      	str	r3, [r2, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00
 8002dc4:	05fa0000 	.word	0x05fa0000

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0b      	blt.n	8002e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4907      	ldr	r1, [pc, #28]	; (8002e1c <__NVIC_EnableIRQ+0x38>)
 8002dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	; (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	; (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eec:	d301      	bcc.n	8002ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	; (8002f1c <SysTick_Config+0x40>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efa:	210f      	movs	r1, #15
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f7ff ff8e 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <SysTick_Config+0x40>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <SysTick_Config+0x40>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff29 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f44:	f7ff ff40 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff90 	bl	8002e74 <NVIC_EncodePriority>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff5f 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff33 	bl	8002de4 <__NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffa4 	bl	8002edc <SysTick_Config>
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7fe fcee 	bl	8001988 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e316      	b.n	80035e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a66      	ldr	r2, [pc, #408]	; (8003158 <HAL_DMA_Init+0x1b8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a65      	ldr	r2, [pc, #404]	; (800315c <HAL_DMA_Init+0x1bc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_DMA_Init+0x1c0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a62      	ldr	r2, [pc, #392]	; (8003164 <HAL_DMA_Init+0x1c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a60      	ldr	r2, [pc, #384]	; (8003168 <HAL_DMA_Init+0x1c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5f      	ldr	r2, [pc, #380]	; (800316c <HAL_DMA_Init+0x1cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <HAL_DMA_Init+0x1d0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5c      	ldr	r2, [pc, #368]	; (8003174 <HAL_DMA_Init+0x1d4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_DMA_Init+0x1d8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a59      	ldr	r2, [pc, #356]	; (800317c <HAL_DMA_Init+0x1dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_DMA_Init+0x1e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_DMA_Init+0x1e4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a54      	ldr	r2, [pc, #336]	; (8003188 <HAL_DMA_Init+0x1e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a53      	ldr	r2, [pc, #332]	; (800318c <HAL_DMA_Init+0x1ec>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a51      	ldr	r2, [pc, #324]	; (8003190 <HAL_DMA_Init+0x1f0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a50      	ldr	r2, [pc, #320]	; (8003194 <HAL_DMA_Init+0x1f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_DMA_Init+0xbc>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_DMA_Init+0xbe>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 813b 	beq.w	80032da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a37      	ldr	r2, [pc, #220]	; (8003158 <HAL_DMA_Init+0x1b8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d04a      	beq.n	8003114 <HAL_DMA_Init+0x174>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a36      	ldr	r2, [pc, #216]	; (800315c <HAL_DMA_Init+0x1bc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d045      	beq.n	8003114 <HAL_DMA_Init+0x174>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a34      	ldr	r2, [pc, #208]	; (8003160 <HAL_DMA_Init+0x1c0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d040      	beq.n	8003114 <HAL_DMA_Init+0x174>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a33      	ldr	r2, [pc, #204]	; (8003164 <HAL_DMA_Init+0x1c4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d03b      	beq.n	8003114 <HAL_DMA_Init+0x174>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a31      	ldr	r2, [pc, #196]	; (8003168 <HAL_DMA_Init+0x1c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d036      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a30      	ldr	r2, [pc, #192]	; (800316c <HAL_DMA_Init+0x1cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d031      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <HAL_DMA_Init+0x1d0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02c      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <HAL_DMA_Init+0x1d4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d027      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_DMA_Init+0x1d8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d022      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_DMA_Init+0x1dc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d01d      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <HAL_DMA_Init+0x1e0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d018      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_DMA_Init+0x1e4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a25      	ldr	r2, [pc, #148]	; (8003188 <HAL_DMA_Init+0x1e8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00e      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a24      	ldr	r2, [pc, #144]	; (800318c <HAL_DMA_Init+0x1ec>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_DMA_Init+0x174>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <HAL_DMA_Init+0x1f0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_DMA_Init+0x174>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a21      	ldr	r2, [pc, #132]	; (8003194 <HAL_DMA_Init+0x1f4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d108      	bne.n	8003126 <HAL_DMA_Init+0x186>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e007      	b.n	8003136 <HAL_DMA_Init+0x196>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003136:	e02f      	b.n	8003198 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003138:	f7fe fc26 	bl	8001988 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b05      	cmp	r3, #5
 8003144:	d928      	bls.n	8003198 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e246      	b.n	80035e6 <HAL_DMA_Init+0x646>
 8003158:	40020010 	.word	0x40020010
 800315c:	40020028 	.word	0x40020028
 8003160:	40020040 	.word	0x40020040
 8003164:	40020058 	.word	0x40020058
 8003168:	40020070 	.word	0x40020070
 800316c:	40020088 	.word	0x40020088
 8003170:	400200a0 	.word	0x400200a0
 8003174:	400200b8 	.word	0x400200b8
 8003178:	40020410 	.word	0x40020410
 800317c:	40020428 	.word	0x40020428
 8003180:	40020440 	.word	0x40020440
 8003184:	40020458 	.word	0x40020458
 8003188:	40020470 	.word	0x40020470
 800318c:	40020488 	.word	0x40020488
 8003190:	400204a0 	.word	0x400204a0
 8003194:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1c8      	bne.n	8003138 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4b83      	ldr	r3, [pc, #524]	; (80033c0 <HAL_DMA_Init+0x420>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d107      	bne.n	80031fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4313      	orrs	r3, r2
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80031fc:	4b71      	ldr	r3, [pc, #452]	; (80033c4 <HAL_DMA_Init+0x424>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b71      	ldr	r3, [pc, #452]	; (80033c8 <HAL_DMA_Init+0x428>)
 8003202:	4013      	ands	r3, r2
 8003204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003208:	d328      	bcc.n	800325c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b28      	cmp	r3, #40	; 0x28
 8003210:	d903      	bls.n	800321a <HAL_DMA_Init+0x27a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b2e      	cmp	r3, #46	; 0x2e
 8003218:	d917      	bls.n	800324a <HAL_DMA_Init+0x2aa>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b3e      	cmp	r3, #62	; 0x3e
 8003220:	d903      	bls.n	800322a <HAL_DMA_Init+0x28a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b42      	cmp	r3, #66	; 0x42
 8003228:	d90f      	bls.n	800324a <HAL_DMA_Init+0x2aa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b46      	cmp	r3, #70	; 0x46
 8003230:	d903      	bls.n	800323a <HAL_DMA_Init+0x29a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b48      	cmp	r3, #72	; 0x48
 8003238:	d907      	bls.n	800324a <HAL_DMA_Init+0x2aa>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b4e      	cmp	r3, #78	; 0x4e
 8003240:	d905      	bls.n	800324e <HAL_DMA_Init+0x2ae>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b52      	cmp	r3, #82	; 0x52
 8003248:	d801      	bhi.n	800324e <HAL_DMA_Init+0x2ae>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_DMA_Init+0x2b0>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f023 0307 	bic.w	r3, r3, #7
 8003272:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b04      	cmp	r3, #4
 8003284:	d117      	bne.n	80032b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f001 ff1d 	bl	80050d8 <DMA_CheckFifoParam>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2240      	movs	r2, #64	; 0x40
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e197      	b.n	80035e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f001 fe58 	bl	8004f74 <DMA_CalcBaseAndBitshift>
 80032c4:	4603      	mov	r3, r0
 80032c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	223f      	movs	r2, #63	; 0x3f
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	e0cd      	b.n	8003476 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a3b      	ldr	r2, [pc, #236]	; (80033cc <HAL_DMA_Init+0x42c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <HAL_DMA_Init+0x38a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a39      	ldr	r2, [pc, #228]	; (80033d0 <HAL_DMA_Init+0x430>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01d      	beq.n	800332a <HAL_DMA_Init+0x38a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a38      	ldr	r2, [pc, #224]	; (80033d4 <HAL_DMA_Init+0x434>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d018      	beq.n	800332a <HAL_DMA_Init+0x38a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a36      	ldr	r2, [pc, #216]	; (80033d8 <HAL_DMA_Init+0x438>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_DMA_Init+0x38a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a35      	ldr	r2, [pc, #212]	; (80033dc <HAL_DMA_Init+0x43c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Init+0x38a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a33      	ldr	r2, [pc, #204]	; (80033e0 <HAL_DMA_Init+0x440>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_DMA_Init+0x38a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a32      	ldr	r2, [pc, #200]	; (80033e4 <HAL_DMA_Init+0x444>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_DMA_Init+0x38a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <HAL_DMA_Init+0x448>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d101      	bne.n	800332e <HAL_DMA_Init+0x38e>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_DMA_Init+0x390>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8097 	beq.w	8003464 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a24      	ldr	r2, [pc, #144]	; (80033cc <HAL_DMA_Init+0x42c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d021      	beq.n	8003384 <HAL_DMA_Init+0x3e4>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <HAL_DMA_Init+0x430>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d01c      	beq.n	8003384 <HAL_DMA_Init+0x3e4>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <HAL_DMA_Init+0x434>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d017      	beq.n	8003384 <HAL_DMA_Init+0x3e4>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <HAL_DMA_Init+0x438>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d012      	beq.n	8003384 <HAL_DMA_Init+0x3e4>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <HAL_DMA_Init+0x43c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00d      	beq.n	8003384 <HAL_DMA_Init+0x3e4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_DMA_Init+0x440>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d008      	beq.n	8003384 <HAL_DMA_Init+0x3e4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_DMA_Init+0x444>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d003      	beq.n	8003384 <HAL_DMA_Init+0x3e4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_DMA_Init+0x448>)
 8003382:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_DMA_Init+0x44c>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d021      	beq.n	80033f0 <HAL_DMA_Init+0x450>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b80      	cmp	r3, #128	; 0x80
 80033b2:	d102      	bne.n	80033ba <HAL_DMA_Init+0x41a>
 80033b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033b8:	e01b      	b.n	80033f2 <HAL_DMA_Init+0x452>
 80033ba:	2300      	movs	r3, #0
 80033bc:	e019      	b.n	80033f2 <HAL_DMA_Init+0x452>
 80033be:	bf00      	nop
 80033c0:	fe10803f 	.word	0xfe10803f
 80033c4:	5c001000 	.word	0x5c001000
 80033c8:	ffff0000 	.word	0xffff0000
 80033cc:	58025408 	.word	0x58025408
 80033d0:	5802541c 	.word	0x5802541c
 80033d4:	58025430 	.word	0x58025430
 80033d8:	58025444 	.word	0x58025444
 80033dc:	58025458 	.word	0x58025458
 80033e0:	5802546c 	.word	0x5802546c
 80033e4:	58025480 	.word	0x58025480
 80033e8:	58025494 	.word	0x58025494
 80033ec:	fffe000f 	.word	0xfffe000f
 80033f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68d2      	ldr	r2, [r2, #12]
 80033f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003408:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003410:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003418:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003420:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_DMA_Init+0x650>)
 8003438:	4413      	add	r3, r2
 800343a:	4a6e      	ldr	r2, [pc, #440]	; (80035f4 <HAL_DMA_Init+0x654>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	009a      	lsls	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f001 fd93 	bl	8004f74 <DMA_CalcBaseAndBitshift>
 800344e:	4603      	mov	r3, r0
 8003450:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	2201      	movs	r2, #1
 800345c:	409a      	lsls	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	e008      	b.n	8003476 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2203      	movs	r2, #3
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0b7      	b.n	80035e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5f      	ldr	r2, [pc, #380]	; (80035f8 <HAL_DMA_Init+0x658>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d072      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5d      	ldr	r2, [pc, #372]	; (80035fc <HAL_DMA_Init+0x65c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d06d      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a5c      	ldr	r2, [pc, #368]	; (8003600 <HAL_DMA_Init+0x660>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d068      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a5a      	ldr	r2, [pc, #360]	; (8003604 <HAL_DMA_Init+0x664>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d063      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a59      	ldr	r2, [pc, #356]	; (8003608 <HAL_DMA_Init+0x668>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d05e      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a57      	ldr	r2, [pc, #348]	; (800360c <HAL_DMA_Init+0x66c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d059      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a56      	ldr	r2, [pc, #344]	; (8003610 <HAL_DMA_Init+0x670>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d054      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a54      	ldr	r2, [pc, #336]	; (8003614 <HAL_DMA_Init+0x674>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d04f      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a53      	ldr	r2, [pc, #332]	; (8003618 <HAL_DMA_Init+0x678>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d04a      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a51      	ldr	r2, [pc, #324]	; (800361c <HAL_DMA_Init+0x67c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d045      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a50      	ldr	r2, [pc, #320]	; (8003620 <HAL_DMA_Init+0x680>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d040      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a4e      	ldr	r2, [pc, #312]	; (8003624 <HAL_DMA_Init+0x684>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d03b      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4d      	ldr	r2, [pc, #308]	; (8003628 <HAL_DMA_Init+0x688>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d036      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_DMA_Init+0x68c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d031      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_DMA_Init+0x690>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d02c      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a48      	ldr	r2, [pc, #288]	; (8003634 <HAL_DMA_Init+0x694>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d027      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a47      	ldr	r2, [pc, #284]	; (8003638 <HAL_DMA_Init+0x698>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d022      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a45      	ldr	r2, [pc, #276]	; (800363c <HAL_DMA_Init+0x69c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01d      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a44      	ldr	r2, [pc, #272]	; (8003640 <HAL_DMA_Init+0x6a0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d018      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a42      	ldr	r2, [pc, #264]	; (8003644 <HAL_DMA_Init+0x6a4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a41      	ldr	r2, [pc, #260]	; (8003648 <HAL_DMA_Init+0x6a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00e      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a3f      	ldr	r2, [pc, #252]	; (800364c <HAL_DMA_Init+0x6ac>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d009      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3e      	ldr	r2, [pc, #248]	; (8003650 <HAL_DMA_Init+0x6b0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d004      	beq.n	8003566 <HAL_DMA_Init+0x5c6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a3c      	ldr	r2, [pc, #240]	; (8003654 <HAL_DMA_Init+0x6b4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_DMA_Init+0x5ca>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_DMA_Init+0x5cc>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d032      	beq.n	80035d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f001 fe2d 	bl	80051d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b80      	cmp	r3, #128	; 0x80
 800357c:	d102      	bne.n	8003584 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003598:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d010      	beq.n	80035c4 <HAL_DMA_Init+0x624>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d80c      	bhi.n	80035c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f001 feaa 	bl	8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e008      	b.n	80035d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	a7fdabf8 	.word	0xa7fdabf8
 80035f4:	cccccccd 	.word	0xcccccccd
 80035f8:	40020010 	.word	0x40020010
 80035fc:	40020028 	.word	0x40020028
 8003600:	40020040 	.word	0x40020040
 8003604:	40020058 	.word	0x40020058
 8003608:	40020070 	.word	0x40020070
 800360c:	40020088 	.word	0x40020088
 8003610:	400200a0 	.word	0x400200a0
 8003614:	400200b8 	.word	0x400200b8
 8003618:	40020410 	.word	0x40020410
 800361c:	40020428 	.word	0x40020428
 8003620:	40020440 	.word	0x40020440
 8003624:	40020458 	.word	0x40020458
 8003628:	40020470 	.word	0x40020470
 800362c:	40020488 	.word	0x40020488
 8003630:	400204a0 	.word	0x400204a0
 8003634:	400204b8 	.word	0x400204b8
 8003638:	58025408 	.word	0x58025408
 800363c:	5802541c 	.word	0x5802541c
 8003640:	58025430 	.word	0x58025430
 8003644:	58025444 	.word	0x58025444
 8003648:	58025458 	.word	0x58025458
 800364c:	5802546c 	.word	0x5802546c
 8003650:	58025480 	.word	0x58025480
 8003654:	58025494 	.word	0x58025494

08003658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003660:	f7fe f992 	bl	8001988 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e2dc      	b.n	8003c2a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d008      	beq.n	800368e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e2cd      	b.n	8003c2a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a76      	ldr	r2, [pc, #472]	; (800386c <HAL_DMA_Abort+0x214>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04a      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a74      	ldr	r2, [pc, #464]	; (8003870 <HAL_DMA_Abort+0x218>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d045      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a73      	ldr	r2, [pc, #460]	; (8003874 <HAL_DMA_Abort+0x21c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d040      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a71      	ldr	r2, [pc, #452]	; (8003878 <HAL_DMA_Abort+0x220>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03b      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a70      	ldr	r2, [pc, #448]	; (800387c <HAL_DMA_Abort+0x224>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d036      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6e      	ldr	r2, [pc, #440]	; (8003880 <HAL_DMA_Abort+0x228>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a6d      	ldr	r2, [pc, #436]	; (8003884 <HAL_DMA_Abort+0x22c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d02c      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6b      	ldr	r2, [pc, #428]	; (8003888 <HAL_DMA_Abort+0x230>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d027      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6a      	ldr	r2, [pc, #424]	; (800388c <HAL_DMA_Abort+0x234>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a68      	ldr	r2, [pc, #416]	; (8003890 <HAL_DMA_Abort+0x238>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01d      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a67      	ldr	r2, [pc, #412]	; (8003894 <HAL_DMA_Abort+0x23c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a65      	ldr	r2, [pc, #404]	; (8003898 <HAL_DMA_Abort+0x240>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a64      	ldr	r2, [pc, #400]	; (800389c <HAL_DMA_Abort+0x244>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a62      	ldr	r2, [pc, #392]	; (80038a0 <HAL_DMA_Abort+0x248>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a61      	ldr	r2, [pc, #388]	; (80038a4 <HAL_DMA_Abort+0x24c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_DMA_Abort+0xd6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5f      	ldr	r2, [pc, #380]	; (80038a8 <HAL_DMA_Abort+0x250>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_DMA_Abort+0xda>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_DMA_Abort+0xdc>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d013      	beq.n	8003760 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 021e 	bic.w	r2, r2, #30
 8003746:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003756:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e00a      	b.n	8003776 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 020e 	bic.w	r2, r2, #14
 800376e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3c      	ldr	r2, [pc, #240]	; (800386c <HAL_DMA_Abort+0x214>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d072      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <HAL_DMA_Abort+0x218>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d06d      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a39      	ldr	r2, [pc, #228]	; (8003874 <HAL_DMA_Abort+0x21c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d068      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a37      	ldr	r2, [pc, #220]	; (8003878 <HAL_DMA_Abort+0x220>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d063      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a36      	ldr	r2, [pc, #216]	; (800387c <HAL_DMA_Abort+0x224>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d05e      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a34      	ldr	r2, [pc, #208]	; (8003880 <HAL_DMA_Abort+0x228>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d059      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a33      	ldr	r2, [pc, #204]	; (8003884 <HAL_DMA_Abort+0x22c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d054      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a31      	ldr	r2, [pc, #196]	; (8003888 <HAL_DMA_Abort+0x230>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d04f      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a30      	ldr	r2, [pc, #192]	; (800388c <HAL_DMA_Abort+0x234>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04a      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a2e      	ldr	r2, [pc, #184]	; (8003890 <HAL_DMA_Abort+0x238>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d045      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_DMA_Abort+0x23c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d040      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2b      	ldr	r2, [pc, #172]	; (8003898 <HAL_DMA_Abort+0x240>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d03b      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2a      	ldr	r2, [pc, #168]	; (800389c <HAL_DMA_Abort+0x244>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d036      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <HAL_DMA_Abort+0x248>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d031      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <HAL_DMA_Abort+0x24c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d02c      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <HAL_DMA_Abort+0x250>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a24      	ldr	r2, [pc, #144]	; (80038ac <HAL_DMA_Abort+0x254>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d022      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_DMA_Abort+0x258>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <HAL_DMA_Abort+0x25c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_DMA_Abort+0x260>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_DMA_Abort+0x264>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_DMA_Abort+0x268>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_DMA_Abort+0x26c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_DMA_Abort+0x20e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_DMA_Abort+0x270>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d132      	bne.n	80038cc <HAL_DMA_Abort+0x274>
 8003866:	2301      	movs	r3, #1
 8003868:	e031      	b.n	80038ce <HAL_DMA_Abort+0x276>
 800386a:	bf00      	nop
 800386c:	40020010 	.word	0x40020010
 8003870:	40020028 	.word	0x40020028
 8003874:	40020040 	.word	0x40020040
 8003878:	40020058 	.word	0x40020058
 800387c:	40020070 	.word	0x40020070
 8003880:	40020088 	.word	0x40020088
 8003884:	400200a0 	.word	0x400200a0
 8003888:	400200b8 	.word	0x400200b8
 800388c:	40020410 	.word	0x40020410
 8003890:	40020428 	.word	0x40020428
 8003894:	40020440 	.word	0x40020440
 8003898:	40020458 	.word	0x40020458
 800389c:	40020470 	.word	0x40020470
 80038a0:	40020488 	.word	0x40020488
 80038a4:	400204a0 	.word	0x400204a0
 80038a8:	400204b8 	.word	0x400204b8
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a6d      	ldr	r2, [pc, #436]	; (8003a9c <HAL_DMA_Abort+0x444>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04a      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a6b      	ldr	r2, [pc, #428]	; (8003aa0 <HAL_DMA_Abort+0x448>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d045      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6a      	ldr	r2, [pc, #424]	; (8003aa4 <HAL_DMA_Abort+0x44c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <HAL_DMA_Abort+0x450>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d03b      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a67      	ldr	r2, [pc, #412]	; (8003aac <HAL_DMA_Abort+0x454>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d036      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a65      	ldr	r2, [pc, #404]	; (8003ab0 <HAL_DMA_Abort+0x458>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d031      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a64      	ldr	r2, [pc, #400]	; (8003ab4 <HAL_DMA_Abort+0x45c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d02c      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a62      	ldr	r2, [pc, #392]	; (8003ab8 <HAL_DMA_Abort+0x460>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d027      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a61      	ldr	r2, [pc, #388]	; (8003abc <HAL_DMA_Abort+0x464>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5f      	ldr	r2, [pc, #380]	; (8003ac0 <HAL_DMA_Abort+0x468>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01d      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <HAL_DMA_Abort+0x46c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a5c      	ldr	r2, [pc, #368]	; (8003ac8 <HAL_DMA_Abort+0x470>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a5b      	ldr	r2, [pc, #364]	; (8003acc <HAL_DMA_Abort+0x474>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a59      	ldr	r2, [pc, #356]	; (8003ad0 <HAL_DMA_Abort+0x478>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_DMA_Abort+0x47c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Abort+0x32a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_DMA_Abort+0x480>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <HAL_DMA_Abort+0x33c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e007      	b.n	80039a4 <HAL_DMA_Abort+0x34c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039a4:	e013      	b.n	80039ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039a6:	f7fd ffef 	bl	8001988 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d90c      	bls.n	80039ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2203      	movs	r2, #3
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e12d      	b.n	8003c2a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e5      	bne.n	80039a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2f      	ldr	r2, [pc, #188]	; (8003a9c <HAL_DMA_Abort+0x444>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2d      	ldr	r2, [pc, #180]	; (8003aa0 <HAL_DMA_Abort+0x448>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2c      	ldr	r2, [pc, #176]	; (8003aa4 <HAL_DMA_Abort+0x44c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <HAL_DMA_Abort+0x450>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a29      	ldr	r2, [pc, #164]	; (8003aac <HAL_DMA_Abort+0x454>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a27      	ldr	r2, [pc, #156]	; (8003ab0 <HAL_DMA_Abort+0x458>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a26      	ldr	r2, [pc, #152]	; (8003ab4 <HAL_DMA_Abort+0x45c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a24      	ldr	r2, [pc, #144]	; (8003ab8 <HAL_DMA_Abort+0x460>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a23      	ldr	r2, [pc, #140]	; (8003abc <HAL_DMA_Abort+0x464>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <HAL_DMA_Abort+0x468>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_DMA_Abort+0x46c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1e      	ldr	r2, [pc, #120]	; (8003ac8 <HAL_DMA_Abort+0x470>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <HAL_DMA_Abort+0x474>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_DMA_Abort+0x478>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_DMA_Abort+0x47c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_Abort+0x422>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_DMA_Abort+0x480>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_DMA_Abort+0x426>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_DMA_Abort+0x428>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02b      	beq.n	8003adc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	223f      	movs	r2, #63	; 0x3f
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	e02a      	b.n	8003af2 <HAL_DMA_Abort+0x49a>
 8003a9c:	40020010 	.word	0x40020010
 8003aa0:	40020028 	.word	0x40020028
 8003aa4:	40020040 	.word	0x40020040
 8003aa8:	40020058 	.word	0x40020058
 8003aac:	40020070 	.word	0x40020070
 8003ab0:	40020088 	.word	0x40020088
 8003ab4:	400200a0 	.word	0x400200a0
 8003ab8:	400200b8 	.word	0x400200b8
 8003abc:	40020410 	.word	0x40020410
 8003ac0:	40020428 	.word	0x40020428
 8003ac4:	40020440 	.word	0x40020440
 8003ac8:	40020458 	.word	0x40020458
 8003acc:	40020470 	.word	0x40020470
 8003ad0:	40020488 	.word	0x40020488
 8003ad4:	400204a0 	.word	0x400204a0
 8003ad8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2201      	movs	r2, #1
 8003aec:	409a      	lsls	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a4f      	ldr	r2, [pc, #316]	; (8003c34 <HAL_DMA_Abort+0x5dc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d072      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a4d      	ldr	r2, [pc, #308]	; (8003c38 <HAL_DMA_Abort+0x5e0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d06d      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a4c      	ldr	r2, [pc, #304]	; (8003c3c <HAL_DMA_Abort+0x5e4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d068      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a4a      	ldr	r2, [pc, #296]	; (8003c40 <HAL_DMA_Abort+0x5e8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d063      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a49      	ldr	r2, [pc, #292]	; (8003c44 <HAL_DMA_Abort+0x5ec>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d05e      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a47      	ldr	r2, [pc, #284]	; (8003c48 <HAL_DMA_Abort+0x5f0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d059      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a46      	ldr	r2, [pc, #280]	; (8003c4c <HAL_DMA_Abort+0x5f4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d054      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <HAL_DMA_Abort+0x5f8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d04f      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a43      	ldr	r2, [pc, #268]	; (8003c54 <HAL_DMA_Abort+0x5fc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d04a      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a41      	ldr	r2, [pc, #260]	; (8003c58 <HAL_DMA_Abort+0x600>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d045      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <HAL_DMA_Abort+0x604>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d040      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a3e      	ldr	r2, [pc, #248]	; (8003c60 <HAL_DMA_Abort+0x608>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d03b      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a3d      	ldr	r2, [pc, #244]	; (8003c64 <HAL_DMA_Abort+0x60c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d036      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_DMA_Abort+0x610>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d031      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3a      	ldr	r2, [pc, #232]	; (8003c6c <HAL_DMA_Abort+0x614>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d02c      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a38      	ldr	r2, [pc, #224]	; (8003c70 <HAL_DMA_Abort+0x618>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d027      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a37      	ldr	r2, [pc, #220]	; (8003c74 <HAL_DMA_Abort+0x61c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d022      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a35      	ldr	r2, [pc, #212]	; (8003c78 <HAL_DMA_Abort+0x620>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01d      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a34      	ldr	r2, [pc, #208]	; (8003c7c <HAL_DMA_Abort+0x624>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d018      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a32      	ldr	r2, [pc, #200]	; (8003c80 <HAL_DMA_Abort+0x628>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <HAL_DMA_Abort+0x62c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <HAL_DMA_Abort+0x630>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <HAL_DMA_Abort+0x634>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_DMA_Abort+0x58a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2c      	ldr	r2, [pc, #176]	; (8003c90 <HAL_DMA_Abort+0x638>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_DMA_Abort+0x58e>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_DMA_Abort+0x590>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d015      	beq.n	8003c18 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003bf4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c16:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40020010 	.word	0x40020010
 8003c38:	40020028 	.word	0x40020028
 8003c3c:	40020040 	.word	0x40020040
 8003c40:	40020058 	.word	0x40020058
 8003c44:	40020070 	.word	0x40020070
 8003c48:	40020088 	.word	0x40020088
 8003c4c:	400200a0 	.word	0x400200a0
 8003c50:	400200b8 	.word	0x400200b8
 8003c54:	40020410 	.word	0x40020410
 8003c58:	40020428 	.word	0x40020428
 8003c5c:	40020440 	.word	0x40020440
 8003c60:	40020458 	.word	0x40020458
 8003c64:	40020470 	.word	0x40020470
 8003c68:	40020488 	.word	0x40020488
 8003c6c:	400204a0 	.word	0x400204a0
 8003c70:	400204b8 	.word	0x400204b8
 8003c74:	58025408 	.word	0x58025408
 8003c78:	5802541c 	.word	0x5802541c
 8003c7c:	58025430 	.word	0x58025430
 8003c80:	58025444 	.word	0x58025444
 8003c84:	58025458 	.word	0x58025458
 8003c88:	5802546c 	.word	0x5802546c
 8003c8c:	58025480 	.word	0x58025480
 8003c90:	58025494 	.word	0x58025494

08003c94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e237      	b.n	8004116 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d004      	beq.n	8003cbc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e22c      	b.n	8004116 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a5c      	ldr	r2, [pc, #368]	; (8003e34 <HAL_DMA_Abort_IT+0x1a0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d04a      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a5b      	ldr	r2, [pc, #364]	; (8003e38 <HAL_DMA_Abort_IT+0x1a4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d045      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a59      	ldr	r2, [pc, #356]	; (8003e3c <HAL_DMA_Abort_IT+0x1a8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d040      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <HAL_DMA_Abort_IT+0x1ac>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d03b      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a56      	ldr	r2, [pc, #344]	; (8003e44 <HAL_DMA_Abort_IT+0x1b0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d036      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a55      	ldr	r2, [pc, #340]	; (8003e48 <HAL_DMA_Abort_IT+0x1b4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d031      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a53      	ldr	r2, [pc, #332]	; (8003e4c <HAL_DMA_Abort_IT+0x1b8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d02c      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a52      	ldr	r2, [pc, #328]	; (8003e50 <HAL_DMA_Abort_IT+0x1bc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d027      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a50      	ldr	r2, [pc, #320]	; (8003e54 <HAL_DMA_Abort_IT+0x1c0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d022      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a4f      	ldr	r2, [pc, #316]	; (8003e58 <HAL_DMA_Abort_IT+0x1c4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d01d      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a4d      	ldr	r2, [pc, #308]	; (8003e5c <HAL_DMA_Abort_IT+0x1c8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d018      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4c      	ldr	r2, [pc, #304]	; (8003e60 <HAL_DMA_Abort_IT+0x1cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a4a      	ldr	r2, [pc, #296]	; (8003e64 <HAL_DMA_Abort_IT+0x1d0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00e      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a49      	ldr	r2, [pc, #292]	; (8003e68 <HAL_DMA_Abort_IT+0x1d4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d009      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a47      	ldr	r2, [pc, #284]	; (8003e6c <HAL_DMA_Abort_IT+0x1d8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_DMA_Abort_IT+0xc8>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a46      	ldr	r2, [pc, #280]	; (8003e70 <HAL_DMA_Abort_IT+0x1dc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_DMA_Abort_IT+0xcc>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <HAL_DMA_Abort_IT+0xce>
 8003d60:	2300      	movs	r3, #0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8086 	beq.w	8003e74 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <HAL_DMA_Abort_IT+0x1a0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d04a      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a2e      	ldr	r2, [pc, #184]	; (8003e38 <HAL_DMA_Abort_IT+0x1a4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d045      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a2c      	ldr	r2, [pc, #176]	; (8003e3c <HAL_DMA_Abort_IT+0x1a8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d040      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a2b      	ldr	r2, [pc, #172]	; (8003e40 <HAL_DMA_Abort_IT+0x1ac>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d03b      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <HAL_DMA_Abort_IT+0x1b0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d036      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <HAL_DMA_Abort_IT+0x1b4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d031      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <HAL_DMA_Abort_IT+0x1b8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d02c      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a25      	ldr	r2, [pc, #148]	; (8003e50 <HAL_DMA_Abort_IT+0x1bc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d027      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a23      	ldr	r2, [pc, #140]	; (8003e54 <HAL_DMA_Abort_IT+0x1c0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d022      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a22      	ldr	r2, [pc, #136]	; (8003e58 <HAL_DMA_Abort_IT+0x1c4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d01d      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a20      	ldr	r2, [pc, #128]	; (8003e5c <HAL_DMA_Abort_IT+0x1c8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d018      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <HAL_DMA_Abort_IT+0x1cc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1d      	ldr	r2, [pc, #116]	; (8003e64 <HAL_DMA_Abort_IT+0x1d0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00e      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <HAL_DMA_Abort_IT+0x1d4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d009      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <HAL_DMA_Abort_IT+0x1d8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_DMA_Abort_IT+0x17c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a19      	ldr	r2, [pc, #100]	; (8003e70 <HAL_DMA_Abort_IT+0x1dc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <HAL_DMA_Abort_IT+0x18e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0201 	bic.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e178      	b.n	8004114 <HAL_DMA_Abort_IT+0x480>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e16f      	b.n	8004114 <HAL_DMA_Abort_IT+0x480>
 8003e34:	40020010 	.word	0x40020010
 8003e38:	40020028 	.word	0x40020028
 8003e3c:	40020040 	.word	0x40020040
 8003e40:	40020058 	.word	0x40020058
 8003e44:	40020070 	.word	0x40020070
 8003e48:	40020088 	.word	0x40020088
 8003e4c:	400200a0 	.word	0x400200a0
 8003e50:	400200b8 	.word	0x400200b8
 8003e54:	40020410 	.word	0x40020410
 8003e58:	40020428 	.word	0x40020428
 8003e5c:	40020440 	.word	0x40020440
 8003e60:	40020458 	.word	0x40020458
 8003e64:	40020470 	.word	0x40020470
 8003e68:	40020488 	.word	0x40020488
 8003e6c:	400204a0 	.word	0x400204a0
 8003e70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 020e 	bic.w	r2, r2, #14
 8003e82:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a6c      	ldr	r2, [pc, #432]	; (800403c <HAL_DMA_Abort_IT+0x3a8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d04a      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6b      	ldr	r2, [pc, #428]	; (8004040 <HAL_DMA_Abort_IT+0x3ac>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d045      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a69      	ldr	r2, [pc, #420]	; (8004044 <HAL_DMA_Abort_IT+0x3b0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d040      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a68      	ldr	r2, [pc, #416]	; (8004048 <HAL_DMA_Abort_IT+0x3b4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d03b      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a66      	ldr	r2, [pc, #408]	; (800404c <HAL_DMA_Abort_IT+0x3b8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d036      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a65      	ldr	r2, [pc, #404]	; (8004050 <HAL_DMA_Abort_IT+0x3bc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d031      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a63      	ldr	r2, [pc, #396]	; (8004054 <HAL_DMA_Abort_IT+0x3c0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02c      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a62      	ldr	r2, [pc, #392]	; (8004058 <HAL_DMA_Abort_IT+0x3c4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d027      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a60      	ldr	r2, [pc, #384]	; (800405c <HAL_DMA_Abort_IT+0x3c8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d022      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a5f      	ldr	r2, [pc, #380]	; (8004060 <HAL_DMA_Abort_IT+0x3cc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d01d      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <HAL_DMA_Abort_IT+0x3d0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d018      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a5c      	ldr	r2, [pc, #368]	; (8004068 <HAL_DMA_Abort_IT+0x3d4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d013      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a5a      	ldr	r2, [pc, #360]	; (800406c <HAL_DMA_Abort_IT+0x3d8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00e      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a59      	ldr	r2, [pc, #356]	; (8004070 <HAL_DMA_Abort_IT+0x3dc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d009      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a57      	ldr	r2, [pc, #348]	; (8004074 <HAL_DMA_Abort_IT+0x3e0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x290>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a56      	ldr	r2, [pc, #344]	; (8004078 <HAL_DMA_Abort_IT+0x3e4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d108      	bne.n	8003f36 <HAL_DMA_Abort_IT+0x2a2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e007      	b.n	8003f46 <HAL_DMA_Abort_IT+0x2b2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3c      	ldr	r2, [pc, #240]	; (800403c <HAL_DMA_Abort_IT+0x3a8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d072      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <HAL_DMA_Abort_IT+0x3ac>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d06d      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a39      	ldr	r2, [pc, #228]	; (8004044 <HAL_DMA_Abort_IT+0x3b0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d068      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a37      	ldr	r2, [pc, #220]	; (8004048 <HAL_DMA_Abort_IT+0x3b4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d063      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a36      	ldr	r2, [pc, #216]	; (800404c <HAL_DMA_Abort_IT+0x3b8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d05e      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a34      	ldr	r2, [pc, #208]	; (8004050 <HAL_DMA_Abort_IT+0x3bc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d059      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a33      	ldr	r2, [pc, #204]	; (8004054 <HAL_DMA_Abort_IT+0x3c0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d054      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a31      	ldr	r2, [pc, #196]	; (8004058 <HAL_DMA_Abort_IT+0x3c4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d04f      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a30      	ldr	r2, [pc, #192]	; (800405c <HAL_DMA_Abort_IT+0x3c8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d04a      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2e      	ldr	r2, [pc, #184]	; (8004060 <HAL_DMA_Abort_IT+0x3cc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d045      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2d      	ldr	r2, [pc, #180]	; (8004064 <HAL_DMA_Abort_IT+0x3d0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d040      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2b      	ldr	r2, [pc, #172]	; (8004068 <HAL_DMA_Abort_IT+0x3d4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d03b      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	; (800406c <HAL_DMA_Abort_IT+0x3d8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d036      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a28      	ldr	r2, [pc, #160]	; (8004070 <HAL_DMA_Abort_IT+0x3dc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d031      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a27      	ldr	r2, [pc, #156]	; (8004074 <HAL_DMA_Abort_IT+0x3e0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d02c      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a25      	ldr	r2, [pc, #148]	; (8004078 <HAL_DMA_Abort_IT+0x3e4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d027      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a24      	ldr	r2, [pc, #144]	; (800407c <HAL_DMA_Abort_IT+0x3e8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d022      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a22      	ldr	r2, [pc, #136]	; (8004080 <HAL_DMA_Abort_IT+0x3ec>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	; (8004084 <HAL_DMA_Abort_IT+0x3f0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_DMA_Abort_IT+0x3f4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_DMA_Abort_IT+0x3f8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <HAL_DMA_Abort_IT+0x3fc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <HAL_DMA_Abort_IT+0x400>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_DMA_Abort_IT+0x3a2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a19      	ldr	r2, [pc, #100]	; (8004098 <HAL_DMA_Abort_IT+0x404>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d132      	bne.n	800409c <HAL_DMA_Abort_IT+0x408>
 8004036:	2301      	movs	r3, #1
 8004038:	e031      	b.n	800409e <HAL_DMA_Abort_IT+0x40a>
 800403a:	bf00      	nop
 800403c:	40020010 	.word	0x40020010
 8004040:	40020028 	.word	0x40020028
 8004044:	40020040 	.word	0x40020040
 8004048:	40020058 	.word	0x40020058
 800404c:	40020070 	.word	0x40020070
 8004050:	40020088 	.word	0x40020088
 8004054:	400200a0 	.word	0x400200a0
 8004058:	400200b8 	.word	0x400200b8
 800405c:	40020410 	.word	0x40020410
 8004060:	40020428 	.word	0x40020428
 8004064:	40020440 	.word	0x40020440
 8004068:	40020458 	.word	0x40020458
 800406c:	40020470 	.word	0x40020470
 8004070:	40020488 	.word	0x40020488
 8004074:	400204a0 	.word	0x400204a0
 8004078:	400204b8 	.word	0x400204b8
 800407c:	58025408 	.word	0x58025408
 8004080:	5802541c 	.word	0x5802541c
 8004084:	58025430 	.word	0x58025430
 8004088:	58025444 	.word	0x58025444
 800408c:	58025458 	.word	0x58025458
 8004090:	5802546c 	.word	0x5802546c
 8004094:	58025480 	.word	0x58025480
 8004098:	58025494 	.word	0x58025494
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d028      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop

08004120 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800412c:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_DMA_IRQHandler+0x1ac>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a67      	ldr	r2, [pc, #412]	; (80042d0 <HAL_DMA_IRQHandler+0x1b0>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	0a9b      	lsrs	r3, r3, #10
 8004138:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004144:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a5f      	ldr	r2, [pc, #380]	; (80042d4 <HAL_DMA_IRQHandler+0x1b4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d04a      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a5d      	ldr	r2, [pc, #372]	; (80042d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d045      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a5c      	ldr	r2, [pc, #368]	; (80042dc <HAL_DMA_IRQHandler+0x1bc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d040      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a5a      	ldr	r2, [pc, #360]	; (80042e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d03b      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a59      	ldr	r2, [pc, #356]	; (80042e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d036      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a57      	ldr	r2, [pc, #348]	; (80042e8 <HAL_DMA_IRQHandler+0x1c8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d031      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a56      	ldr	r2, [pc, #344]	; (80042ec <HAL_DMA_IRQHandler+0x1cc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d02c      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a54      	ldr	r2, [pc, #336]	; (80042f0 <HAL_DMA_IRQHandler+0x1d0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d027      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a53      	ldr	r2, [pc, #332]	; (80042f4 <HAL_DMA_IRQHandler+0x1d4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a51      	ldr	r2, [pc, #324]	; (80042f8 <HAL_DMA_IRQHandler+0x1d8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a50      	ldr	r2, [pc, #320]	; (80042fc <HAL_DMA_IRQHandler+0x1dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a4e      	ldr	r2, [pc, #312]	; (8004300 <HAL_DMA_IRQHandler+0x1e0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a4d      	ldr	r2, [pc, #308]	; (8004304 <HAL_DMA_IRQHandler+0x1e4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <HAL_DMA_IRQHandler+0x1e8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_DMA_IRQHandler+0x1ec>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_DMA_IRQHandler+0xd2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a48      	ldr	r2, [pc, #288]	; (8004310 <HAL_DMA_IRQHandler+0x1f0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA_IRQHandler+0xd6>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_DMA_IRQHandler+0xd8>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 842b 	beq.w	8004a54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2208      	movs	r2, #8
 8004208:	409a      	lsls	r2, r3
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80a2 	beq.w	8004358 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2e      	ldr	r2, [pc, #184]	; (80042d4 <HAL_DMA_IRQHandler+0x1b4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d04a      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2d      	ldr	r2, [pc, #180]	; (80042d8 <HAL_DMA_IRQHandler+0x1b8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d045      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a2b      	ldr	r2, [pc, #172]	; (80042dc <HAL_DMA_IRQHandler+0x1bc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d040      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <HAL_DMA_IRQHandler+0x1c0>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d03b      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a28      	ldr	r2, [pc, #160]	; (80042e4 <HAL_DMA_IRQHandler+0x1c4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d036      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <HAL_DMA_IRQHandler+0x1c8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d031      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a25      	ldr	r2, [pc, #148]	; (80042ec <HAL_DMA_IRQHandler+0x1cc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d02c      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <HAL_DMA_IRQHandler+0x1d0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d027      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a22      	ldr	r2, [pc, #136]	; (80042f4 <HAL_DMA_IRQHandler+0x1d4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d022      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a21      	ldr	r2, [pc, #132]	; (80042f8 <HAL_DMA_IRQHandler+0x1d8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d01d      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1f      	ldr	r2, [pc, #124]	; (80042fc <HAL_DMA_IRQHandler+0x1dc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d018      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <HAL_DMA_IRQHandler+0x1e0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d013      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <HAL_DMA_IRQHandler+0x1e4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00e      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_DMA_IRQHandler+0x1e8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_DMA_IRQHandler+0x1ec>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x194>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_DMA_IRQHandler+0x1f0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d12f      	bne.n	8004314 <HAL_DMA_IRQHandler+0x1f4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf14      	ite	ne
 80042c2:	2301      	movne	r3, #1
 80042c4:	2300      	moveq	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	e02e      	b.n	8004328 <HAL_DMA_IRQHandler+0x208>
 80042ca:	bf00      	nop
 80042cc:	24000000 	.word	0x24000000
 80042d0:	1b4e81b5 	.word	0x1b4e81b5
 80042d4:	40020010 	.word	0x40020010
 80042d8:	40020028 	.word	0x40020028
 80042dc:	40020040 	.word	0x40020040
 80042e0:	40020058 	.word	0x40020058
 80042e4:	40020070 	.word	0x40020070
 80042e8:	40020088 	.word	0x40020088
 80042ec:	400200a0 	.word	0x400200a0
 80042f0:	400200b8 	.word	0x400200b8
 80042f4:	40020410 	.word	0x40020410
 80042f8:	40020428 	.word	0x40020428
 80042fc:	40020440 	.word	0x40020440
 8004300:	40020458 	.word	0x40020458
 8004304:	40020470 	.word	0x40020470
 8004308:	40020488 	.word	0x40020488
 800430c:	400204a0 	.word	0x400204a0
 8004310:	400204b8 	.word	0x400204b8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0204 	bic.w	r2, r2, #4
 800433a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2208      	movs	r2, #8
 8004346:	409a      	lsls	r2, r3
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d06e      	beq.n	800444c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a69      	ldr	r2, [pc, #420]	; (8004518 <HAL_DMA_IRQHandler+0x3f8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d04a      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a67      	ldr	r2, [pc, #412]	; (800451c <HAL_DMA_IRQHandler+0x3fc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d045      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a66      	ldr	r2, [pc, #408]	; (8004520 <HAL_DMA_IRQHandler+0x400>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d040      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a64      	ldr	r2, [pc, #400]	; (8004524 <HAL_DMA_IRQHandler+0x404>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d03b      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a63      	ldr	r2, [pc, #396]	; (8004528 <HAL_DMA_IRQHandler+0x408>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d036      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a61      	ldr	r2, [pc, #388]	; (800452c <HAL_DMA_IRQHandler+0x40c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d031      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a60      	ldr	r2, [pc, #384]	; (8004530 <HAL_DMA_IRQHandler+0x410>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d02c      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a5e      	ldr	r2, [pc, #376]	; (8004534 <HAL_DMA_IRQHandler+0x414>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d027      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a5d      	ldr	r2, [pc, #372]	; (8004538 <HAL_DMA_IRQHandler+0x418>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a5b      	ldr	r2, [pc, #364]	; (800453c <HAL_DMA_IRQHandler+0x41c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01d      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a5a      	ldr	r2, [pc, #360]	; (8004540 <HAL_DMA_IRQHandler+0x420>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d018      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a58      	ldr	r2, [pc, #352]	; (8004544 <HAL_DMA_IRQHandler+0x424>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a57      	ldr	r2, [pc, #348]	; (8004548 <HAL_DMA_IRQHandler+0x428>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a55      	ldr	r2, [pc, #340]	; (800454c <HAL_DMA_IRQHandler+0x42c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a54      	ldr	r2, [pc, #336]	; (8004550 <HAL_DMA_IRQHandler+0x430>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_DMA_IRQHandler+0x2ee>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_DMA_IRQHandler+0x434>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d10a      	bne.n	8004424 <HAL_DMA_IRQHandler+0x304>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e003      	b.n	800442c <HAL_DMA_IRQHandler+0x30c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00d      	beq.n	800444c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	2201      	movs	r2, #1
 800443a:	409a      	lsls	r2, r3
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0202 	orr.w	r2, r3, #2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	2204      	movs	r2, #4
 8004456:	409a      	lsls	r2, r3
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 808f 	beq.w	8004580 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a2c      	ldr	r2, [pc, #176]	; (8004518 <HAL_DMA_IRQHandler+0x3f8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d04a      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2a      	ldr	r2, [pc, #168]	; (800451c <HAL_DMA_IRQHandler+0x3fc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d045      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a29      	ldr	r2, [pc, #164]	; (8004520 <HAL_DMA_IRQHandler+0x400>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d040      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a27      	ldr	r2, [pc, #156]	; (8004524 <HAL_DMA_IRQHandler+0x404>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d03b      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_DMA_IRQHandler+0x408>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d036      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a24      	ldr	r2, [pc, #144]	; (800452c <HAL_DMA_IRQHandler+0x40c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d031      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <HAL_DMA_IRQHandler+0x410>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d02c      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <HAL_DMA_IRQHandler+0x414>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d027      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a20      	ldr	r2, [pc, #128]	; (8004538 <HAL_DMA_IRQHandler+0x418>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d022      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1e      	ldr	r2, [pc, #120]	; (800453c <HAL_DMA_IRQHandler+0x41c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01d      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_DMA_IRQHandler+0x420>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <HAL_DMA_IRQHandler+0x424>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_DMA_IRQHandler+0x428>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_DMA_IRQHandler+0x42c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <HAL_DMA_IRQHandler+0x430>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_DMA_IRQHandler+0x3e2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_DMA_IRQHandler+0x434>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d12a      	bne.n	8004558 <HAL_DMA_IRQHandler+0x438>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	e023      	b.n	8004560 <HAL_DMA_IRQHandler+0x440>
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2204      	movs	r2, #4
 800456e:	409a      	lsls	r2, r3
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0204 	orr.w	r2, r3, #4
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2210      	movs	r2, #16
 800458a:	409a      	lsls	r2, r3
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80a6 	beq.w	80046e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a85      	ldr	r2, [pc, #532]	; (80047b0 <HAL_DMA_IRQHandler+0x690>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d04a      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a83      	ldr	r2, [pc, #524]	; (80047b4 <HAL_DMA_IRQHandler+0x694>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d045      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a82      	ldr	r2, [pc, #520]	; (80047b8 <HAL_DMA_IRQHandler+0x698>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d040      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a80      	ldr	r2, [pc, #512]	; (80047bc <HAL_DMA_IRQHandler+0x69c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d03b      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7f      	ldr	r2, [pc, #508]	; (80047c0 <HAL_DMA_IRQHandler+0x6a0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d036      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7d      	ldr	r2, [pc, #500]	; (80047c4 <HAL_DMA_IRQHandler+0x6a4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d031      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_DMA_IRQHandler+0x6a8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d02c      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7a      	ldr	r2, [pc, #488]	; (80047cc <HAL_DMA_IRQHandler+0x6ac>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d027      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a79      	ldr	r2, [pc, #484]	; (80047d0 <HAL_DMA_IRQHandler+0x6b0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a77      	ldr	r2, [pc, #476]	; (80047d4 <HAL_DMA_IRQHandler+0x6b4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01d      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a76      	ldr	r2, [pc, #472]	; (80047d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a74      	ldr	r2, [pc, #464]	; (80047dc <HAL_DMA_IRQHandler+0x6bc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a73      	ldr	r2, [pc, #460]	; (80047e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a71      	ldr	r2, [pc, #452]	; (80047e4 <HAL_DMA_IRQHandler+0x6c4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a70      	ldr	r2, [pc, #448]	; (80047e8 <HAL_DMA_IRQHandler+0x6c8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_DMA_IRQHandler+0x516>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_DMA_IRQHandler+0x6cc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10a      	bne.n	800464c <HAL_DMA_IRQHandler+0x52c>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e009      	b.n	8004660 <HAL_DMA_IRQHandler+0x540>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2301      	movne	r3, #1
 800465c:	2300      	moveq	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03e      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	2210      	movs	r2, #16
 800466e:	409a      	lsls	r2, r3
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d018      	beq.n	80046b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d024      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	4798      	blx	r3
 80046a0:	e01f      	b.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	4798      	blx	r3
 80046b2:	e016      	b.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d107      	bne.n	80046d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0208 	bic.w	r2, r2, #8
 80046d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	2220      	movs	r2, #32
 80046ec:	409a      	lsls	r2, r3
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8110 	beq.w	8004918 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <HAL_DMA_IRQHandler+0x690>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <HAL_DMA_IRQHandler+0x694>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a29      	ldr	r2, [pc, #164]	; (80047b8 <HAL_DMA_IRQHandler+0x698>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a28      	ldr	r2, [pc, #160]	; (80047bc <HAL_DMA_IRQHandler+0x69c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a26      	ldr	r2, [pc, #152]	; (80047c0 <HAL_DMA_IRQHandler+0x6a0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a25      	ldr	r2, [pc, #148]	; (80047c4 <HAL_DMA_IRQHandler+0x6a4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a23      	ldr	r2, [pc, #140]	; (80047c8 <HAL_DMA_IRQHandler+0x6a8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a22      	ldr	r2, [pc, #136]	; (80047cc <HAL_DMA_IRQHandler+0x6ac>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <HAL_DMA_IRQHandler+0x6b0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <HAL_DMA_IRQHandler+0x6b4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1d      	ldr	r2, [pc, #116]	; (80047d8 <HAL_DMA_IRQHandler+0x6b8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1c      	ldr	r2, [pc, #112]	; (80047dc <HAL_DMA_IRQHandler+0x6bc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1a      	ldr	r2, [pc, #104]	; (80047e0 <HAL_DMA_IRQHandler+0x6c0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <HAL_DMA_IRQHandler+0x6c4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <HAL_DMA_IRQHandler+0x6c8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_IRQHandler+0x678>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <HAL_DMA_IRQHandler+0x6cc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d12b      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x6d0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e02a      	b.n	8004804 <HAL_DMA_IRQHandler+0x6e4>
 80047ae:	bf00      	nop
 80047b0:	40020010 	.word	0x40020010
 80047b4:	40020028 	.word	0x40020028
 80047b8:	40020040 	.word	0x40020040
 80047bc:	40020058 	.word	0x40020058
 80047c0:	40020070 	.word	0x40020070
 80047c4:	40020088 	.word	0x40020088
 80047c8:	400200a0 	.word	0x400200a0
 80047cc:	400200b8 	.word	0x400200b8
 80047d0:	40020410 	.word	0x40020410
 80047d4:	40020428 	.word	0x40020428
 80047d8:	40020440 	.word	0x40020440
 80047dc:	40020458 	.word	0x40020458
 80047e0:	40020470 	.word	0x40020470
 80047e4:	40020488 	.word	0x40020488
 80047e8:	400204a0 	.word	0x400204a0
 80047ec:	400204b8 	.word	0x400204b8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8087 	beq.w	8004918 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	2220      	movs	r2, #32
 8004814:	409a      	lsls	r2, r3
 8004816:	6a3b      	ldr	r3, [r7, #32]
 8004818:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b04      	cmp	r3, #4
 8004824:	d139      	bne.n	800489a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0216 	bic.w	r2, r2, #22
 8004834:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004844:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <HAL_DMA_IRQHandler+0x736>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0208 	bic.w	r2, r2, #8
 8004864:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	223f      	movs	r2, #63	; 0x3f
 8004870:	409a      	lsls	r2, r3
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 834a 	beq.w	8004f24 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
          }
          return;
 8004898:	e344      	b.n	8004f24 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d018      	beq.n	80048da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02c      	beq.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
 80048c6:	e027      	b.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d023      	beq.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	4798      	blx	r3
 80048d8:	e01e      	b.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0210 	bic.w	r2, r2, #16
 80048f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8306 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8088 	beq.w	8004a40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2204      	movs	r2, #4
 8004934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7a      	ldr	r2, [pc, #488]	; (8004b28 <HAL_DMA_IRQHandler+0xa08>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d04a      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <HAL_DMA_IRQHandler+0xa0c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d045      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a77      	ldr	r2, [pc, #476]	; (8004b30 <HAL_DMA_IRQHandler+0xa10>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d040      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a76      	ldr	r2, [pc, #472]	; (8004b34 <HAL_DMA_IRQHandler+0xa14>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d03b      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a74      	ldr	r2, [pc, #464]	; (8004b38 <HAL_DMA_IRQHandler+0xa18>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d036      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a73      	ldr	r2, [pc, #460]	; (8004b3c <HAL_DMA_IRQHandler+0xa1c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d031      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a71      	ldr	r2, [pc, #452]	; (8004b40 <HAL_DMA_IRQHandler+0xa20>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d02c      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a70      	ldr	r2, [pc, #448]	; (8004b44 <HAL_DMA_IRQHandler+0xa24>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d027      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a6e      	ldr	r2, [pc, #440]	; (8004b48 <HAL_DMA_IRQHandler+0xa28>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d022      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a6d      	ldr	r2, [pc, #436]	; (8004b4c <HAL_DMA_IRQHandler+0xa2c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d01d      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a6b      	ldr	r2, [pc, #428]	; (8004b50 <HAL_DMA_IRQHandler+0xa30>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d018      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6a      	ldr	r2, [pc, #424]	; (8004b54 <HAL_DMA_IRQHandler+0xa34>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a68      	ldr	r2, [pc, #416]	; (8004b58 <HAL_DMA_IRQHandler+0xa38>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00e      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a67      	ldr	r2, [pc, #412]	; (8004b5c <HAL_DMA_IRQHandler+0xa3c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a65      	ldr	r2, [pc, #404]	; (8004b60 <HAL_DMA_IRQHandler+0xa40>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x8b8>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a64      	ldr	r2, [pc, #400]	; (8004b64 <HAL_DMA_IRQHandler+0xa44>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d108      	bne.n	80049ea <HAL_DMA_IRQHandler+0x8ca>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e007      	b.n	80049fa <HAL_DMA_IRQHandler+0x8da>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d307      	bcc.n	8004a16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f2      	bne.n	80049fa <HAL_DMA_IRQHandler+0x8da>
 8004a14:	e000      	b.n	8004a18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a2e:	e003      	b.n	8004a38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8272 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4798      	blx	r3
 8004a52:	e26c      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a43      	ldr	r2, [pc, #268]	; (8004b68 <HAL_DMA_IRQHandler+0xa48>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d022      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a42      	ldr	r2, [pc, #264]	; (8004b6c <HAL_DMA_IRQHandler+0xa4c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d01d      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a40      	ldr	r2, [pc, #256]	; (8004b70 <HAL_DMA_IRQHandler+0xa50>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a3f      	ldr	r2, [pc, #252]	; (8004b74 <HAL_DMA_IRQHandler+0xa54>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d013      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a3d      	ldr	r2, [pc, #244]	; (8004b78 <HAL_DMA_IRQHandler+0xa58>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <HAL_DMA_IRQHandler+0xa5c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3a      	ldr	r2, [pc, #232]	; (8004b80 <HAL_DMA_IRQHandler+0xa60>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_DMA_IRQHandler+0x984>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a39      	ldr	r2, [pc, #228]	; (8004b84 <HAL_DMA_IRQHandler+0xa64>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0x988>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <HAL_DMA_IRQHandler+0x98a>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 823f 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80cd 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xb48>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80c7 	beq.w	8004c68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d049      	beq.n	8004b88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8210 	beq.w	8004f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b10:	e20a      	b.n	8004f28 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8206 	beq.w	8004f28 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b24:	e200      	b.n	8004f28 <HAL_DMA_IRQHandler+0xe08>
 8004b26:	bf00      	nop
 8004b28:	40020010 	.word	0x40020010
 8004b2c:	40020028 	.word	0x40020028
 8004b30:	40020040 	.word	0x40020040
 8004b34:	40020058 	.word	0x40020058
 8004b38:	40020070 	.word	0x40020070
 8004b3c:	40020088 	.word	0x40020088
 8004b40:	400200a0 	.word	0x400200a0
 8004b44:	400200b8 	.word	0x400200b8
 8004b48:	40020410 	.word	0x40020410
 8004b4c:	40020428 	.word	0x40020428
 8004b50:	40020440 	.word	0x40020440
 8004b54:	40020458 	.word	0x40020458
 8004b58:	40020470 	.word	0x40020470
 8004b5c:	40020488 	.word	0x40020488
 8004b60:	400204a0 	.word	0x400204a0
 8004b64:	400204b8 	.word	0x400204b8
 8004b68:	58025408 	.word	0x58025408
 8004b6c:	5802541c 	.word	0x5802541c
 8004b70:	58025430 	.word	0x58025430
 8004b74:	58025444 	.word	0x58025444
 8004b78:	58025458 	.word	0x58025458
 8004b7c:	5802546c 	.word	0x5802546c
 8004b80:	58025480 	.word	0x58025480
 8004b84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d160      	bne.n	8004c54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7f      	ldr	r2, [pc, #508]	; (8004d94 <HAL_DMA_IRQHandler+0xc74>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d04a      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7d      	ldr	r2, [pc, #500]	; (8004d98 <HAL_DMA_IRQHandler+0xc78>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d045      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7c      	ldr	r2, [pc, #496]	; (8004d9c <HAL_DMA_IRQHandler+0xc7c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d040      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7a      	ldr	r2, [pc, #488]	; (8004da0 <HAL_DMA_IRQHandler+0xc80>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d03b      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a79      	ldr	r2, [pc, #484]	; (8004da4 <HAL_DMA_IRQHandler+0xc84>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d036      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a77      	ldr	r2, [pc, #476]	; (8004da8 <HAL_DMA_IRQHandler+0xc88>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d031      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a76      	ldr	r2, [pc, #472]	; (8004dac <HAL_DMA_IRQHandler+0xc8c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d02c      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a74      	ldr	r2, [pc, #464]	; (8004db0 <HAL_DMA_IRQHandler+0xc90>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d027      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a73      	ldr	r2, [pc, #460]	; (8004db4 <HAL_DMA_IRQHandler+0xc94>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d022      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a71      	ldr	r2, [pc, #452]	; (8004db8 <HAL_DMA_IRQHandler+0xc98>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01d      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a70      	ldr	r2, [pc, #448]	; (8004dbc <HAL_DMA_IRQHandler+0xc9c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d018      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a6e      	ldr	r2, [pc, #440]	; (8004dc0 <HAL_DMA_IRQHandler+0xca0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6d      	ldr	r2, [pc, #436]	; (8004dc4 <HAL_DMA_IRQHandler+0xca4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	; (8004dc8 <HAL_DMA_IRQHandler+0xca8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a6a      	ldr	r2, [pc, #424]	; (8004dcc <HAL_DMA_IRQHandler+0xcac>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d004      	beq.n	8004c32 <HAL_DMA_IRQHandler+0xb12>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a68      	ldr	r2, [pc, #416]	; (8004dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <HAL_DMA_IRQHandler+0xb24>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0208 	bic.w	r2, r2, #8
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e007      	b.n	8004c54 <HAL_DMA_IRQHandler+0xb34>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8165 	beq.w	8004f28 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c66:	e15f      	b.n	8004f28 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6c:	f003 031f 	and.w	r3, r3, #31
 8004c70:	2202      	movs	r2, #2
 8004c72:	409a      	lsls	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80c5 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xce8>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80bf 	beq.w	8004e08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2202      	movs	r2, #2
 8004c94:	409a      	lsls	r2, r3
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d018      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 813a 	beq.w	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cc0:	e134      	b.n	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8130 	beq.w	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd4:	e12a      	b.n	8004f2c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f040 8089 	bne.w	8004df4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <HAL_DMA_IRQHandler+0xc74>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d04a      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <HAL_DMA_IRQHandler+0xc78>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d045      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <HAL_DMA_IRQHandler+0xc7c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d040      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a26      	ldr	r2, [pc, #152]	; (8004da0 <HAL_DMA_IRQHandler+0xc80>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d03b      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a25      	ldr	r2, [pc, #148]	; (8004da4 <HAL_DMA_IRQHandler+0xc84>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d036      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a23      	ldr	r2, [pc, #140]	; (8004da8 <HAL_DMA_IRQHandler+0xc88>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d031      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_DMA_IRQHandler+0xc8c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d02c      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a20      	ldr	r2, [pc, #128]	; (8004db0 <HAL_DMA_IRQHandler+0xc90>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d027      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <HAL_DMA_IRQHandler+0xc94>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d022      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <HAL_DMA_IRQHandler+0xc98>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_DMA_IRQHandler+0xc9c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d018      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1a      	ldr	r2, [pc, #104]	; (8004dc0 <HAL_DMA_IRQHandler+0xca0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_DMA_IRQHandler+0xca4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <HAL_DMA_IRQHandler+0xca8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a16      	ldr	r2, [pc, #88]	; (8004dcc <HAL_DMA_IRQHandler+0xcac>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_DMA_IRQHandler+0xc62>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <HAL_DMA_IRQHandler+0xcb0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d128      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0xcb4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0214 	bic.w	r2, r2, #20
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e027      	b.n	8004de4 <HAL_DMA_IRQHandler+0xcc4>
 8004d94:	40020010 	.word	0x40020010
 8004d98:	40020028 	.word	0x40020028
 8004d9c:	40020040 	.word	0x40020040
 8004da0:	40020058 	.word	0x40020058
 8004da4:	40020070 	.word	0x40020070
 8004da8:	40020088 	.word	0x40020088
 8004dac:	400200a0 	.word	0x400200a0
 8004db0:	400200b8 	.word	0x400200b8
 8004db4:	40020410 	.word	0x40020410
 8004db8:	40020428 	.word	0x40020428
 8004dbc:	40020440 	.word	0x40020440
 8004dc0:	40020458 	.word	0x40020458
 8004dc4:	40020470 	.word	0x40020470
 8004dc8:	40020488 	.word	0x40020488
 8004dcc:	400204a0 	.word	0x400204a0
 8004dd0:	400204b8 	.word	0x400204b8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 020a 	bic.w	r2, r2, #10
 8004de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8097 	beq.w	8004f2c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e06:	e091      	b.n	8004f2c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2208      	movs	r2, #8
 8004e12:	409a      	lsls	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8088 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8082 	beq.w	8004f2e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a41      	ldr	r2, [pc, #260]	; (8004f34 <HAL_DMA_IRQHandler+0xe14>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d04a      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3f      	ldr	r2, [pc, #252]	; (8004f38 <HAL_DMA_IRQHandler+0xe18>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d045      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a3e      	ldr	r2, [pc, #248]	; (8004f3c <HAL_DMA_IRQHandler+0xe1c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d040      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <HAL_DMA_IRQHandler+0xe20>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d03b      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <HAL_DMA_IRQHandler+0xe24>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d036      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a39      	ldr	r2, [pc, #228]	; (8004f48 <HAL_DMA_IRQHandler+0xe28>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d031      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a38      	ldr	r2, [pc, #224]	; (8004f4c <HAL_DMA_IRQHandler+0xe2c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d02c      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a36      	ldr	r2, [pc, #216]	; (8004f50 <HAL_DMA_IRQHandler+0xe30>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d027      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a35      	ldr	r2, [pc, #212]	; (8004f54 <HAL_DMA_IRQHandler+0xe34>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d022      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a33      	ldr	r2, [pc, #204]	; (8004f58 <HAL_DMA_IRQHandler+0xe38>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d01d      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a32      	ldr	r2, [pc, #200]	; (8004f5c <HAL_DMA_IRQHandler+0xe3c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d018      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a30      	ldr	r2, [pc, #192]	; (8004f60 <HAL_DMA_IRQHandler+0xe40>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <HAL_DMA_IRQHandler+0xe44>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <HAL_DMA_IRQHandler+0xe48>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d009      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2c      	ldr	r2, [pc, #176]	; (8004f6c <HAL_DMA_IRQHandler+0xe4c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_DMA_IRQHandler+0xdaa>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <HAL_DMA_IRQHandler+0xe50>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <HAL_DMA_IRQHandler+0xdbc>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 021c 	bic.w	r2, r2, #28
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e007      	b.n	8004eec <HAL_DMA_IRQHandler+0xdcc>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 020e 	bic.w	r2, r2, #14
 8004eea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
 8004f22:	e004      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f24:	bf00      	nop
 8004f26:	e002      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f2c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f2e:	3728      	adds	r7, #40	; 0x28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40020010 	.word	0x40020010
 8004f38:	40020028 	.word	0x40020028
 8004f3c:	40020040 	.word	0x40020040
 8004f40:	40020058 	.word	0x40020058
 8004f44:	40020070 	.word	0x40020070
 8004f48:	40020088 	.word	0x40020088
 8004f4c:	400200a0 	.word	0x400200a0
 8004f50:	400200b8 	.word	0x400200b8
 8004f54:	40020410 	.word	0x40020410
 8004f58:	40020428 	.word	0x40020428
 8004f5c:	40020440 	.word	0x40020440
 8004f60:	40020458 	.word	0x40020458
 8004f64:	40020470 	.word	0x40020470
 8004f68:	40020488 	.word	0x40020488
 8004f6c:	400204a0 	.word	0x400204a0
 8004f70:	400204b8 	.word	0x400204b8

08004f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a42      	ldr	r2, [pc, #264]	; (800508c <DMA_CalcBaseAndBitshift+0x118>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d04a      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a41      	ldr	r2, [pc, #260]	; (8005090 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d045      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a3f      	ldr	r2, [pc, #252]	; (8005094 <DMA_CalcBaseAndBitshift+0x120>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d040      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <DMA_CalcBaseAndBitshift+0x124>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d03b      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a3c      	ldr	r2, [pc, #240]	; (800509c <DMA_CalcBaseAndBitshift+0x128>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d036      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a3b      	ldr	r2, [pc, #236]	; (80050a0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d031      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a39      	ldr	r2, [pc, #228]	; (80050a4 <DMA_CalcBaseAndBitshift+0x130>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02c      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a38      	ldr	r2, [pc, #224]	; (80050a8 <DMA_CalcBaseAndBitshift+0x134>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d027      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a36      	ldr	r2, [pc, #216]	; (80050ac <DMA_CalcBaseAndBitshift+0x138>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a35      	ldr	r2, [pc, #212]	; (80050b0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d01d      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a33      	ldr	r2, [pc, #204]	; (80050b4 <DMA_CalcBaseAndBitshift+0x140>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a32      	ldr	r2, [pc, #200]	; (80050b8 <DMA_CalcBaseAndBitshift+0x144>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a30      	ldr	r2, [pc, #192]	; (80050bc <DMA_CalcBaseAndBitshift+0x148>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2d      	ldr	r2, [pc, #180]	; (80050c4 <DMA_CalcBaseAndBitshift+0x150>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <DMA_CalcBaseAndBitshift+0xa8>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2c      	ldr	r2, [pc, #176]	; (80050c8 <DMA_CalcBaseAndBitshift+0x154>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d101      	bne.n	8005020 <DMA_CalcBaseAndBitshift+0xac>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <DMA_CalcBaseAndBitshift+0xae>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d024      	beq.n	8005070 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	3b10      	subs	r3, #16
 800502e:	4a27      	ldr	r2, [pc, #156]	; (80050cc <DMA_CalcBaseAndBitshift+0x158>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005040:	5cd3      	ldrb	r3, [r2, r3]
 8005042:	461a      	mov	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d908      	bls.n	8005060 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <DMA_CalcBaseAndBitshift+0x160>)
 8005056:	4013      	ands	r3, r2
 8005058:	1d1a      	adds	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	659a      	str	r2, [r3, #88]	; 0x58
 800505e:	e00d      	b.n	800507c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <DMA_CalcBaseAndBitshift+0x160>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6593      	str	r3, [r2, #88]	; 0x58
 800506e:	e005      	b.n	800507c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40020010 	.word	0x40020010
 8005090:	40020028 	.word	0x40020028
 8005094:	40020040 	.word	0x40020040
 8005098:	40020058 	.word	0x40020058
 800509c:	40020070 	.word	0x40020070
 80050a0:	40020088 	.word	0x40020088
 80050a4:	400200a0 	.word	0x400200a0
 80050a8:	400200b8 	.word	0x400200b8
 80050ac:	40020410 	.word	0x40020410
 80050b0:	40020428 	.word	0x40020428
 80050b4:	40020440 	.word	0x40020440
 80050b8:	40020458 	.word	0x40020458
 80050bc:	40020470 	.word	0x40020470
 80050c0:	40020488 	.word	0x40020488
 80050c4:	400204a0 	.word	0x400204a0
 80050c8:	400204b8 	.word	0x400204b8
 80050cc:	aaaaaaab 	.word	0xaaaaaaab
 80050d0:	0800da94 	.word	0x0800da94
 80050d4:	fffffc00 	.word	0xfffffc00

080050d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d120      	bne.n	800512e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d858      	bhi.n	80051a6 <DMA_CheckFifoParam+0xce>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <DMA_CheckFifoParam+0x24>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	0800511f 	.word	0x0800511f
 8005104:	0800510d 	.word	0x0800510d
 8005108:	080051a7 	.word	0x080051a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d048      	beq.n	80051aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800511c:	e045      	b.n	80051aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005126:	d142      	bne.n	80051ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800512c:	e03f      	b.n	80051ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005136:	d123      	bne.n	8005180 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	2b03      	cmp	r3, #3
 800513e:	d838      	bhi.n	80051b2 <DMA_CheckFifoParam+0xda>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <DMA_CheckFifoParam+0x70>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	08005159 	.word	0x08005159
 800514c:	0800515f 	.word	0x0800515f
 8005150:	08005159 	.word	0x08005159
 8005154:	08005171 	.word	0x08005171
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
        break;
 800515c:	e030      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d025      	beq.n	80051b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800516e:	e022      	b.n	80051b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005178:	d11f      	bne.n	80051ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800517e:	e01c      	b.n	80051ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	2b02      	cmp	r3, #2
 8005186:	d902      	bls.n	800518e <DMA_CheckFifoParam+0xb6>
 8005188:	2b03      	cmp	r3, #3
 800518a:	d003      	beq.n	8005194 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800518c:	e018      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
        break;
 8005192:	e015      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
    break;
 80051a4:	e00b      	b.n	80051be <DMA_CheckFifoParam+0xe6>
        break;
 80051a6:	bf00      	nop
 80051a8:	e00a      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
        break;
 80051aa:	bf00      	nop
 80051ac:	e008      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
        break;
 80051ae:	bf00      	nop
 80051b0:	e006      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
        break;
 80051b2:	bf00      	nop
 80051b4:	e004      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
        break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
        break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <DMA_CheckFifoParam+0xe8>
    break;
 80051be:	bf00      	nop
    }
  }

  return status;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop

080051d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a38      	ldr	r2, [pc, #224]	; (80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d022      	beq.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a36      	ldr	r2, [pc, #216]	; (80052c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01d      	beq.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a35      	ldr	r2, [pc, #212]	; (80052cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d018      	beq.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a32      	ldr	r2, [pc, #200]	; (80052d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a30      	ldr	r2, [pc, #192]	; (80052d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2f      	ldr	r2, [pc, #188]	; (80052dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01a      	beq.n	800526e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	3b08      	subs	r3, #8
 8005240:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a24      	ldr	r2, [pc, #144]	; (80052ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800525c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	2201      	movs	r2, #1
 8005266:	409a      	lsls	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800526c:	e024      	b.n	80052b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	3b10      	subs	r3, #16
 8005276:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	4a1c      	ldr	r2, [pc, #112]	; (80052f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d806      	bhi.n	8005296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d902      	bls.n	8005296 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3308      	adds	r3, #8
 8005294:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4b18      	ldr	r3, [pc, #96]	; (80052fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	461a      	mov	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a16      	ldr	r2, [pc, #88]	; (8005300 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2201      	movs	r2, #1
 80052b2:	409a      	lsls	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	58025408 	.word	0x58025408
 80052c8:	5802541c 	.word	0x5802541c
 80052cc:	58025430 	.word	0x58025430
 80052d0:	58025444 	.word	0x58025444
 80052d4:	58025458 	.word	0x58025458
 80052d8:	5802546c 	.word	0x5802546c
 80052dc:	58025480 	.word	0x58025480
 80052e0:	58025494 	.word	0x58025494
 80052e4:	cccccccd 	.word	0xcccccccd
 80052e8:	16009600 	.word	0x16009600
 80052ec:	58025880 	.word	0x58025880
 80052f0:	aaaaaaab 	.word	0xaaaaaaab
 80052f4:	400204b8 	.word	0x400204b8
 80052f8:	4002040f 	.word	0x4002040f
 80052fc:	10008200 	.word	0x10008200
 8005300:	40020880 	.word	0x40020880

08005304 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d04a      	beq.n	80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d847      	bhi.n	80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a25      	ldr	r2, [pc, #148]	; (80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a24      	ldr	r2, [pc, #144]	; (80053c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d01d      	beq.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a22      	ldr	r2, [pc, #136]	; (80053c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d101      	bne.n	8005374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4b17      	ldr	r3, [pc, #92]	; (80053dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	461a      	mov	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800538c:	671a      	str	r2, [r3, #112]	; 0x70
 800538e:	e009      	b.n	80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4b14      	ldr	r3, [pc, #80]	; (80053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	461a      	mov	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	2201      	movs	r2, #1
 80053aa:	409a      	lsls	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	58025408 	.word	0x58025408
 80053c0:	5802541c 	.word	0x5802541c
 80053c4:	58025430 	.word	0x58025430
 80053c8:	58025444 	.word	0x58025444
 80053cc:	58025458 	.word	0x58025458
 80053d0:	5802546c 	.word	0x5802546c
 80053d4:	58025480 	.word	0x58025480
 80053d8:	58025494 	.word	0x58025494
 80053dc:	1600963f 	.word	0x1600963f
 80053e0:	58025940 	.word	0x58025940
 80053e4:	1000823f 	.word	0x1000823f
 80053e8:	40020940 	.word	0x40020940

080053ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0cf      	b.n	800559e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2223      	movs	r2, #35	; 0x23
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fb ff5f 	bl	80012d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005416:	4b64      	ldr	r3, [pc, #400]	; (80055a8 <HAL_ETH_Init+0x1bc>)
 8005418:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800541c:	4a62      	ldr	r2, [pc, #392]	; (80055a8 <HAL_ETH_Init+0x1bc>)
 800541e:	f043 0302 	orr.w	r3, r3, #2
 8005422:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005426:	4b60      	ldr	r3, [pc, #384]	; (80055a8 <HAL_ETH_Init+0x1bc>)
 8005428:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	7a1b      	ldrb	r3, [r3, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800543c:	2000      	movs	r0, #0
 800543e:	f7fc fadf 	bl	8001a00 <HAL_SYSCFG_ETHInterfaceSelect>
 8005442:	e003      	b.n	800544c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005444:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005448:	f7fc fada 	bl	8001a00 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800544c:	4b57      	ldr	r3, [pc, #348]	; (80055ac <HAL_ETH_Init+0x1c0>)
 800544e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	f043 0301 	orr.w	r3, r3, #1
 8005462:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005468:	f7fc fa8e 	bl	8001988 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800546e:	e011      	b.n	8005494 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005470:	f7fc fa8a 	bl	8001988 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800547e:	d909      	bls.n	8005494 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2204      	movs	r2, #4
 8005484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	22e0      	movs	r2, #224	; 0xe0
 800548c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e084      	b.n	800559e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e4      	bne.n	8005470 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f886 	bl	80055b8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80054ac:	f001 fedc 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80054b0:	4603      	mov	r3, r0
 80054b2:	4a3f      	ldr	r2, [pc, #252]	; (80055b0 <HAL_ETH_Init+0x1c4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	0c9a      	lsrs	r2, r3, #18
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3a01      	subs	r2, #1
 80054c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fa71 	bl	80059ac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80054d6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6812      	ldr	r2, [r2, #0]
 80054de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054e6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	22e0      	movs	r2, #224	; 0xe0
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e049      	b.n	800559e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005512:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005516:	4b27      	ldr	r3, [pc, #156]	; (80055b4 <HAL_ETH_Init+0x1c8>)
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6952      	ldr	r2, [r2, #20]
 800551e:	0051      	lsls	r1, r2, #1
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	430b      	orrs	r3, r1
 8005526:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800552a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fad9 	bl	8005ae6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fb1f 	bl	8005b78 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	3305      	adds	r3, #5
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	3304      	adds	r3, #4
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	4619      	mov	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	3303      	adds	r3, #3
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	061a      	lsls	r2, r3, #24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	3302      	adds	r3, #2
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	3301      	adds	r3, #1
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005578:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005586:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005588:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2210      	movs	r2, #16
 8005598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	58024400 	.word	0x58024400
 80055ac:	58000400 	.word	0x58000400
 80055b0:	431bde83 	.word	0x431bde83
 80055b4:	ffff8001 	.word	0xffff8001

080055b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80055d2:	f001 fe49 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80055d6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d908      	bls.n	80055f2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d804      	bhi.n	80055f2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	e027      	b.n	8005642 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4a18      	ldr	r2, [pc, #96]	; (8005658 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d908      	bls.n	800560c <HAL_ETH_SetMDIOClockRange+0x54>
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4a17      	ldr	r2, [pc, #92]	; (800565c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d204      	bcs.n	800560c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e01a      	b.n	8005642 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4a13      	ldr	r2, [pc, #76]	; (800565c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d303      	bcc.n	800561c <HAL_ETH_SetMDIOClockRange+0x64>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d911      	bls.n	8005640 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a10      	ldr	r2, [pc, #64]	; (8005660 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d908      	bls.n	8005636 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d804      	bhi.n	8005636 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e005      	b.n	8005642 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	e000      	b.n	8005642 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005640:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	01312cff 	.word	0x01312cff
 8005658:	02160ebf 	.word	0x02160ebf
 800565c:	03938700 	.word	0x03938700
 8005660:	05f5e0ff 	.word	0x05f5e0ff
 8005664:	08f0d17f 	.word	0x08f0d17f

08005668 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800567a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	791b      	ldrb	r3, [r3, #4]
 8005680:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005682:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	7b1b      	ldrb	r3, [r3, #12]
 8005688:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800568a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	7b5b      	ldrb	r3, [r3, #13]
 8005690:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005692:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	7b9b      	ldrb	r3, [r3, #14]
 8005698:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800569a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	7bdb      	ldrb	r3, [r3, #15]
 80056a0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80056a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	7c12      	ldrb	r2, [r2, #16]
 80056a8:	2a00      	cmp	r2, #0
 80056aa:	d102      	bne.n	80056b2 <ETH_SetMACConfig+0x4a>
 80056ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80056b0:	e000      	b.n	80056b4 <ETH_SetMACConfig+0x4c>
 80056b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	7c52      	ldrb	r2, [r2, #17]
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	d102      	bne.n	80056c4 <ETH_SetMACConfig+0x5c>
 80056be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056c2:	e000      	b.n	80056c6 <ETH_SetMACConfig+0x5e>
 80056c4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	7c9b      	ldrb	r3, [r3, #18]
 80056cc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056ce:	431a      	orrs	r2, r3
               macconf->Speed |
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80056d4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80056da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	7f1b      	ldrb	r3, [r3, #28]
 80056e0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80056e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	7f5b      	ldrb	r3, [r3, #29]
 80056e8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	7f92      	ldrb	r2, [r2, #30]
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	d102      	bne.n	80056fa <ETH_SetMACConfig+0x92>
 80056f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056f8:	e000      	b.n	80056fc <ETH_SetMACConfig+0x94>
 80056fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	7fdb      	ldrb	r3, [r3, #31]
 8005702:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005704:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	f892 2020 	ldrb.w	r2, [r2, #32]
 800570c:	2a00      	cmp	r2, #0
 800570e:	d102      	bne.n	8005716 <ETH_SetMACConfig+0xae>
 8005710:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005714:	e000      	b.n	8005718 <ETH_SetMACConfig+0xb0>
 8005716:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005718:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800571e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005726:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005728:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	4b56      	ldr	r3, [pc, #344]	; (8005894 <ETH_SetMACConfig+0x22c>)
 800573a:	4013      	ands	r3, r2
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	68f9      	ldr	r1, [r7, #12]
 8005742:	430b      	orrs	r3, r1
 8005744:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005752:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005754:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800575c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800575e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005766:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005768:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005770:	2a00      	cmp	r2, #0
 8005772:	d102      	bne.n	800577a <ETH_SetMACConfig+0x112>
 8005774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005778:	e000      	b.n	800577c <ETH_SetMACConfig+0x114>
 800577a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800577c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	4b42      	ldr	r3, [pc, #264]	; (8005898 <ETH_SetMACConfig+0x230>)
 800578e:	4013      	ands	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	430b      	orrs	r3, r1
 8005798:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057a0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	4b3a      	ldr	r3, [pc, #232]	; (800589c <ETH_SetMACConfig+0x234>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	430b      	orrs	r3, r1
 80057bc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80057c4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d101      	bne.n	80057da <ETH_SetMACConfig+0x172>
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	e000      	b.n	80057dc <ETH_SetMACConfig+0x174>
 80057da:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80057dc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057ee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80057f2:	4013      	ands	r3, r2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	430b      	orrs	r3, r1
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005804:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800580c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f023 0103 	bic.w	r1, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	430a      	orrs	r2, r1
 8005826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005832:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800584e:	2a00      	cmp	r2, #0
 8005850:	d101      	bne.n	8005856 <ETH_SetMACConfig+0x1ee>
 8005852:	2240      	movs	r2, #64	; 0x40
 8005854:	e000      	b.n	8005858 <ETH_SetMACConfig+0x1f0>
 8005856:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005858:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005860:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800586a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005878:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	430a      	orrs	r2, r1
 8005884:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	00048083 	.word	0x00048083
 8005898:	c0f88000 	.word	0xc0f88000
 800589c:	fffffef0 	.word	0xfffffef0

080058a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b38      	ldr	r3, [pc, #224]	; (8005998 <ETH_SetDMAConfig+0xf8>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	6811      	ldr	r1, [r2, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	430b      	orrs	r3, r1
 80058c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058c6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	791b      	ldrb	r3, [r3, #4]
 80058cc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	7b1b      	ldrb	r3, [r3, #12]
 80058d8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	4b2c      	ldr	r3, [pc, #176]	; (800599c <ETH_SetDMAConfig+0xfc>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	68f9      	ldr	r1, [r7, #12]
 80058f2:	430b      	orrs	r3, r1
 80058f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058f8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	7b5b      	ldrb	r3, [r3, #13]
 80058fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005910:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005914:	4b22      	ldr	r3, [pc, #136]	; (80059a0 <ETH_SetDMAConfig+0x100>)
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	430b      	orrs	r3, r1
 8005920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005924:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	7d1b      	ldrb	r3, [r3, #20]
 8005930:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005932:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	7f5b      	ldrb	r3, [r3, #29]
 8005938:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800594a:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <ETH_SetDMAConfig+0x104>)
 800594c:	4013      	ands	r3, r2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6812      	ldr	r2, [r2, #0]
 8005952:	68f9      	ldr	r1, [r7, #12]
 8005954:	430b      	orrs	r3, r1
 8005956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800595a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	7f1b      	ldrb	r3, [r3, #28]
 8005962:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005978:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <ETH_SetDMAConfig+0x108>)
 800597a:	4013      	ands	r3, r2
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	430b      	orrs	r3, r1
 8005984:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005988:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	ffff87fd 	.word	0xffff87fd
 800599c:	ffff2ffe 	.word	0xffff2ffe
 80059a0:	fffec000 	.word	0xfffec000
 80059a4:	ffc0efef 	.word	0xffc0efef
 80059a8:	7fc0ffff 	.word	0x7fc0ffff

080059ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b0a4      	sub	sp, #144	; 0x90
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80059ba:	2300      	movs	r3, #0
 80059bc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80059e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005a04:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005a08:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005a10:	2300      	movs	r3, #0
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005a26:	2300      	movs	r3, #0
 8005a28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005a44:	2320      	movs	r3, #32
 8005a46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a56:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a60:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a86:	2300      	movs	r3, #0
 8005a88:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff fde6 	bl	8005668 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005ab6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005aba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005ac0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ac4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005acc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005ad0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005ad2:	f107 0308 	add.w	r3, r7, #8
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff fee1 	bl	80058a0 <ETH_SetDMAConfig>
}
 8005ade:	bf00      	nop
 8005ae0:	3790      	adds	r7, #144	; 0x90
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e01d      	b.n	8005b30 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68d9      	ldr	r1, [r3, #12]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	440b      	add	r3, r1
 8005b04:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2200      	movs	r2, #0
 8005b16:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b1e:	68b9      	ldr	r1, [r7, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	3206      	adds	r2, #6
 8005b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d9de      	bls.n	8005af4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b44:	461a      	mov	r2, r3
 8005b46:	2303      	movs	r3, #3
 8005b48:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b58:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b68:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e023      	b.n	8005bce <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6919      	ldr	r1, [r3, #16]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	4413      	add	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	440b      	add	r3, r1
 8005b96:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2200      	movs	r2, #0
 8005bae:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	3212      	adds	r2, #18
 8005bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d9d8      	bls.n	8005b86 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c22:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005c26:	bf00      	nop
 8005c28:	3714      	adds	r7, #20
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b089      	sub	sp, #36	; 0x24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c42:	4b89      	ldr	r3, [pc, #548]	; (8005e68 <HAL_GPIO_Init+0x234>)
 8005c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c46:	e194      	b.n	8005f72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	fa01 f303 	lsl.w	r3, r1, r3
 8005c54:	4013      	ands	r3, r2
 8005c56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8186 	beq.w	8005f6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d005      	beq.n	8005c78 <HAL_GPIO_Init+0x44>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 0303 	and.w	r3, r3, #3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d130      	bne.n	8005cda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	2203      	movs	r2, #3
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cae:	2201      	movs	r2, #1
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f003 0201 	and.w	r2, r3, #1
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d017      	beq.n	8005d16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d123      	bne.n	8005d6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	08da      	lsrs	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3208      	adds	r2, #8
 8005d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	220f      	movs	r2, #15
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43db      	mvns	r3, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4013      	ands	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	fa02 f303 	lsl.w	r3, r2, r3
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	08da      	lsrs	r2, r3, #3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3208      	adds	r2, #8
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	2203      	movs	r2, #3
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 0203 	and.w	r2, r3, #3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80e0 	beq.w	8005f6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dac:	4b2f      	ldr	r3, [pc, #188]	; (8005e6c <HAL_GPIO_Init+0x238>)
 8005dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005db2:	4a2e      	ldr	r2, [pc, #184]	; (8005e6c <HAL_GPIO_Init+0x238>)
 8005db4:	f043 0302 	orr.w	r3, r3, #2
 8005db8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dbc:	4b2b      	ldr	r3, [pc, #172]	; (8005e6c <HAL_GPIO_Init+0x238>)
 8005dbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dca:	4a29      	ldr	r2, [pc, #164]	; (8005e70 <HAL_GPIO_Init+0x23c>)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	089b      	lsrs	r3, r3, #2
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	220f      	movs	r2, #15
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <HAL_GPIO_Init+0x240>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d052      	beq.n	8005e9c <HAL_GPIO_Init+0x268>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <HAL_GPIO_Init+0x244>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d031      	beq.n	8005e62 <HAL_GPIO_Init+0x22e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <HAL_GPIO_Init+0x248>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d02b      	beq.n	8005e5e <HAL_GPIO_Init+0x22a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <HAL_GPIO_Init+0x24c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d025      	beq.n	8005e5a <HAL_GPIO_Init+0x226>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <HAL_GPIO_Init+0x250>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d01f      	beq.n	8005e56 <HAL_GPIO_Init+0x222>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1b      	ldr	r2, [pc, #108]	; (8005e88 <HAL_GPIO_Init+0x254>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d019      	beq.n	8005e52 <HAL_GPIO_Init+0x21e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1a      	ldr	r2, [pc, #104]	; (8005e8c <HAL_GPIO_Init+0x258>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_GPIO_Init+0x21a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <HAL_GPIO_Init+0x25c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d00d      	beq.n	8005e4a <HAL_GPIO_Init+0x216>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <HAL_GPIO_Init+0x260>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <HAL_GPIO_Init+0x212>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <HAL_GPIO_Init+0x264>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <HAL_GPIO_Init+0x20e>
 8005e3e:	2309      	movs	r3, #9
 8005e40:	e02d      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e42:	230a      	movs	r3, #10
 8005e44:	e02b      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e46:	2308      	movs	r3, #8
 8005e48:	e029      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e4a:	2307      	movs	r3, #7
 8005e4c:	e027      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e4e:	2306      	movs	r3, #6
 8005e50:	e025      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e52:	2305      	movs	r3, #5
 8005e54:	e023      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e56:	2304      	movs	r3, #4
 8005e58:	e021      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e01f      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e01d      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e01b      	b.n	8005e9e <HAL_GPIO_Init+0x26a>
 8005e66:	bf00      	nop
 8005e68:	58000080 	.word	0x58000080
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	58000400 	.word	0x58000400
 8005e74:	58020000 	.word	0x58020000
 8005e78:	58020400 	.word	0x58020400
 8005e7c:	58020800 	.word	0x58020800
 8005e80:	58020c00 	.word	0x58020c00
 8005e84:	58021000 	.word	0x58021000
 8005e88:	58021400 	.word	0x58021400
 8005e8c:	58021800 	.word	0x58021800
 8005e90:	58021c00 	.word	0x58021c00
 8005e94:	58022000 	.word	0x58022000
 8005e98:	58022400 	.word	0x58022400
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	f002 0203 	and.w	r2, r2, #3
 8005ea4:	0092      	lsls	r2, r2, #2
 8005ea6:	4093      	lsls	r3, r2
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005eae:	4938      	ldr	r1, [pc, #224]	; (8005f90 <HAL_GPIO_Init+0x35c>)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4013      	ands	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	43db      	mvns	r3, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f ae63 	bne.w	8005c48 <HAL_GPIO_Init+0x14>
  }
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	3724      	adds	r7, #36	; 0x24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	58000400 	.word	0x58000400

08005f94 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f9c:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <HAL_HSEM_FastTake+0x2c>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3320      	adds	r3, #32
 8005fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa6:	4a07      	ldr	r2, [pc, #28]	; (8005fc4 <HAL_HSEM_FastTake+0x30>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d101      	bne.n	8005fb0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e000      	b.n	8005fb2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	58026400 	.word	0x58026400
 8005fc4:	80000300 	.word	0x80000300

08005fc8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005fd2:	4906      	ldr	r1, [pc, #24]	; (8005fec <HAL_HSEM_Release+0x24>)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	58026400 	.word	0x58026400

08005ff0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff2:	b08f      	sub	sp, #60	; 0x3c
 8005ff4:	af0a      	add	r7, sp, #40	; 0x28
 8005ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e116      	b.n	8006230 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fb faf9 	bl	8001614 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2203      	movs	r2, #3
 8006026:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f006 fda7 	bl	800cb94 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	687e      	ldr	r6, [r7, #4]
 800604e:	466d      	mov	r5, sp
 8006050:	f106 0410 	add.w	r4, r6, #16
 8006054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800605a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800605c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006060:	e885 0003 	stmia.w	r5, {r0, r1}
 8006064:	1d33      	adds	r3, r6, #4
 8006066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006068:	6838      	ldr	r0, [r7, #0]
 800606a:	f006 fd25 	bl	800cab8 <USB_CoreInit>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0d7      	b.n	8006230 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f006 fd95 	bl	800cbb6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	73fb      	strb	r3, [r7, #15]
 8006090:	e04a      	b.n	8006128 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006092:	7bfa      	ldrb	r2, [r7, #15]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	333d      	adds	r3, #61	; 0x3d
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060a6:	7bfa      	ldrb	r2, [r7, #15]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	333c      	adds	r3, #60	; 0x3c
 80060b6:	7bfa      	ldrb	r2, [r7, #15]
 80060b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060ba:	7bfa      	ldrb	r2, [r7, #15]
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	b298      	uxth	r0, r3
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3356      	adds	r3, #86	; 0x56
 80060ce:	4602      	mov	r2, r0
 80060d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	3340      	adds	r3, #64	; 0x40
 80060e2:	2200      	movs	r2, #0
 80060e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060e6:	7bfa      	ldrb	r2, [r7, #15]
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	3344      	adds	r3, #68	; 0x44
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060fa:	7bfa      	ldrb	r2, [r7, #15]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	3348      	adds	r3, #72	; 0x48
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800610e:	7bfa      	ldrb	r2, [r7, #15]
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	4613      	mov	r3, r2
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	334c      	adds	r3, #76	; 0x4c
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	3301      	adds	r3, #1
 8006126:	73fb      	strb	r3, [r7, #15]
 8006128:	7bfa      	ldrb	r2, [r7, #15]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	429a      	cmp	r2, r3
 8006130:	d3af      	bcc.n	8006092 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
 8006136:	e044      	b.n	80061c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006138:	7bfa      	ldrb	r2, [r7, #15]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	4413      	add	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800614a:	2200      	movs	r2, #0
 800614c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800614e:	7bfa      	ldrb	r2, [r7, #15]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006160:	7bfa      	ldrb	r2, [r7, #15]
 8006162:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006164:	7bfa      	ldrb	r2, [r7, #15]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800617a:	7bfa      	ldrb	r2, [r7, #15]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006190:	7bfa      	ldrb	r2, [r7, #15]
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061a6:	7bfa      	ldrb	r2, [r7, #15]
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	440b      	add	r3, r1
 80061b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	3301      	adds	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
 80061c2:	7bfa      	ldrb	r2, [r7, #15]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3b5      	bcc.n	8006138 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	687e      	ldr	r6, [r7, #4]
 80061d4:	466d      	mov	r5, sp
 80061d6:	f106 0410 	add.w	r4, r6, #16
 80061da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80061ea:	1d33      	adds	r3, r6, #4
 80061ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061ee:	6838      	ldr	r0, [r7, #0]
 80061f0:	f006 fd2e 	bl	800cc50 <USB_DevInit>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e014      	b.n	8006230 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b01      	cmp	r3, #1
 800621c:	d102      	bne.n	8006224 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f80a 	bl	8006238 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f006 feec 	bl	800d006 <USB_DevDisconnect>

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006238 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_PCDEx_ActivateLPM+0x44>)
 8006268:	4313      	orrs	r3, r2
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	10000003 	.word	0x10000003

08006280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006288:	4b29      	ldr	r3, [pc, #164]	; (8006330 <HAL_PWREx_ConfigSupply+0xb0>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	2b06      	cmp	r3, #6
 8006292:	d00a      	beq.n	80062aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006294:	4b26      	ldr	r3, [pc, #152]	; (8006330 <HAL_PWREx_ConfigSupply+0xb0>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d001      	beq.n	80062a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e040      	b.n	8006328 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e03e      	b.n	8006328 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <HAL_PWREx_ConfigSupply+0xb0>)
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80062b2:	491f      	ldr	r1, [pc, #124]	; (8006330 <HAL_PWREx_ConfigSupply+0xb0>)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062ba:	f7fb fb65 	bl	8001988 <HAL_GetTick>
 80062be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062c0:	e009      	b.n	80062d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062c2:	f7fb fb61 	bl	8001988 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d0:	d901      	bls.n	80062d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e028      	b.n	8006328 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <HAL_PWREx_ConfigSupply+0xb0>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e2:	d1ee      	bne.n	80062c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b1e      	cmp	r3, #30
 80062e8:	d008      	beq.n	80062fc <HAL_PWREx_ConfigSupply+0x7c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b2e      	cmp	r3, #46	; 0x2e
 80062ee:	d005      	beq.n	80062fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b1d      	cmp	r3, #29
 80062f4:	d002      	beq.n	80062fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b2d      	cmp	r3, #45	; 0x2d
 80062fa:	d114      	bne.n	8006326 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80062fc:	f7fb fb44 	bl	8001988 <HAL_GetTick>
 8006300:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006302:	e009      	b.n	8006318 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006304:	f7fb fb40 	bl	8001988 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006312:	d901      	bls.n	8006318 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e007      	b.n	8006328 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <HAL_PWREx_ConfigSupply+0xb0>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006324:	d1ee      	bne.n	8006304 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	58024800 	.word	0x58024800

08006334 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a04      	ldr	r2, [pc, #16]	; (8006350 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800633e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006342:	60d3      	str	r3, [r2, #12]
}
 8006344:	bf00      	nop
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	58024800 	.word	0x58024800

08006354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08c      	sub	sp, #48	; 0x30
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f000 bc48 	b.w	8006bf8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 8088 	beq.w	8006486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006376:	4b99      	ldr	r3, [pc, #612]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006380:	4b96      	ldr	r3, [pc, #600]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	2b10      	cmp	r3, #16
 800638a:	d007      	beq.n	800639c <HAL_RCC_OscConfig+0x48>
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	2b18      	cmp	r3, #24
 8006390:	d111      	bne.n	80063b6 <HAL_RCC_OscConfig+0x62>
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d10c      	bne.n	80063b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800639c:	4b8f      	ldr	r3, [pc, #572]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d06d      	beq.n	8006484 <HAL_RCC_OscConfig+0x130>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d169      	bne.n	8006484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f000 bc21 	b.w	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063be:	d106      	bne.n	80063ce <HAL_RCC_OscConfig+0x7a>
 80063c0:	4b86      	ldr	r3, [pc, #536]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a85      	ldr	r2, [pc, #532]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80063c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	e02e      	b.n	800642c <HAL_RCC_OscConfig+0xd8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x9c>
 80063d6:	4b81      	ldr	r3, [pc, #516]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a80      	ldr	r2, [pc, #512]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80063dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b7e      	ldr	r3, [pc, #504]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a7d      	ldr	r2, [pc, #500]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80063e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e01d      	b.n	800642c <HAL_RCC_OscConfig+0xd8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0xc0>
 80063fa:	4b78      	ldr	r3, [pc, #480]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a77      	ldr	r2, [pc, #476]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b75      	ldr	r3, [pc, #468]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a74      	ldr	r2, [pc, #464]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 800640c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e00b      	b.n	800642c <HAL_RCC_OscConfig+0xd8>
 8006414:	4b71      	ldr	r3, [pc, #452]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a70      	ldr	r2, [pc, #448]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 800641a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	4b6e      	ldr	r3, [pc, #440]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a6d      	ldr	r2, [pc, #436]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800642a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d013      	beq.n	800645c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006434:	f7fb faa8 	bl	8001988 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800643c:	f7fb faa4 	bl	8001988 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b64      	cmp	r3, #100	; 0x64
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e3d4      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800644e:	4b63      	ldr	r3, [pc, #396]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d0f0      	beq.n	800643c <HAL_RCC_OscConfig+0xe8>
 800645a:	e014      	b.n	8006486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645c:	f7fb fa94 	bl	8001988 <HAL_GetTick>
 8006460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006464:	f7fb fa90 	bl	8001988 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b64      	cmp	r3, #100	; 0x64
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e3c0      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006476:	4b59      	ldr	r3, [pc, #356]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f0      	bne.n	8006464 <HAL_RCC_OscConfig+0x110>
 8006482:	e000      	b.n	8006486 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 80ca 	beq.w	8006628 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006494:	4b51      	ldr	r3, [pc, #324]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800649c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800649e:	4b4f      	ldr	r3, [pc, #316]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <HAL_RCC_OscConfig+0x166>
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	2b18      	cmp	r3, #24
 80064ae:	d156      	bne.n	800655e <HAL_RCC_OscConfig+0x20a>
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d151      	bne.n	800655e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064ba:	4b48      	ldr	r3, [pc, #288]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_RCC_OscConfig+0x17e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e392      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064d2:	4b42      	ldr	r3, [pc, #264]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f023 0219 	bic.w	r2, r3, #25
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	493f      	ldr	r1, [pc, #252]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e4:	f7fb fa50 	bl	8001988 <HAL_GetTick>
 80064e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064ea:	e008      	b.n	80064fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ec:	f7fb fa4c 	bl	8001988 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e37c      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064fe:	4b37      	ldr	r3, [pc, #220]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0f0      	beq.n	80064ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800650a:	f7fb fa6d 	bl	80019e8 <HAL_GetREVID>
 800650e:	4603      	mov	r3, r0
 8006510:	f241 0203 	movw	r2, #4099	; 0x1003
 8006514:	4293      	cmp	r3, r2
 8006516:	d817      	bhi.n	8006548 <HAL_RCC_OscConfig+0x1f4>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d108      	bne.n	8006532 <HAL_RCC_OscConfig+0x1de>
 8006520:	4b2e      	ldr	r3, [pc, #184]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006528:	4a2c      	ldr	r2, [pc, #176]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 800652a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006530:	e07a      	b.n	8006628 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006532:	4b2a      	ldr	r3, [pc, #168]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	031b      	lsls	r3, r3, #12
 8006540:	4926      	ldr	r1, [pc, #152]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006542:	4313      	orrs	r3, r2
 8006544:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006546:	e06f      	b.n	8006628 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006548:	4b24      	ldr	r3, [pc, #144]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	4921      	ldr	r1, [pc, #132]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006558:	4313      	orrs	r3, r2
 800655a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800655c:	e064      	b.n	8006628 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d047      	beq.n	80065f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006566:	4b1d      	ldr	r3, [pc, #116]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f023 0219 	bic.w	r2, r3, #25
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	491a      	ldr	r1, [pc, #104]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006574:	4313      	orrs	r3, r2
 8006576:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006578:	f7fb fa06 	bl	8001988 <HAL_GetTick>
 800657c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800657e:	e008      	b.n	8006592 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006580:	f7fb fa02 	bl	8001988 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	2b02      	cmp	r3, #2
 800658c:	d901      	bls.n	8006592 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e332      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006592:	4b12      	ldr	r3, [pc, #72]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0f0      	beq.n	8006580 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800659e:	f7fb fa23 	bl	80019e8 <HAL_GetREVID>
 80065a2:	4603      	mov	r3, r0
 80065a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d819      	bhi.n	80065e0 <HAL_RCC_OscConfig+0x28c>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d108      	bne.n	80065c6 <HAL_RCC_OscConfig+0x272>
 80065b4:	4b09      	ldr	r3, [pc, #36]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065bc:	4a07      	ldr	r2, [pc, #28]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80065be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065c2:	6053      	str	r3, [r2, #4]
 80065c4:	e030      	b.n	8006628 <HAL_RCC_OscConfig+0x2d4>
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	031b      	lsls	r3, r3, #12
 80065d4:	4901      	ldr	r1, [pc, #4]	; (80065dc <HAL_RCC_OscConfig+0x288>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	604b      	str	r3, [r1, #4]
 80065da:	e025      	b.n	8006628 <HAL_RCC_OscConfig+0x2d4>
 80065dc:	58024400 	.word	0x58024400
 80065e0:	4b9a      	ldr	r3, [pc, #616]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	061b      	lsls	r3, r3, #24
 80065ee:	4997      	ldr	r1, [pc, #604]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]
 80065f4:	e018      	b.n	8006628 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065f6:	4b95      	ldr	r3, [pc, #596]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a94      	ldr	r2, [pc, #592]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80065fc:	f023 0301 	bic.w	r3, r3, #1
 8006600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006602:	f7fb f9c1 	bl	8001988 <HAL_GetTick>
 8006606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006608:	e008      	b.n	800661c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800660a:	f7fb f9bd 	bl	8001988 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e2ed      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800661c:	4b8b      	ldr	r3, [pc, #556]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f0      	bne.n	800660a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 80a9 	beq.w	8006788 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006636:	4b85      	ldr	r3, [pc, #532]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800663e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006640:	4b82      	ldr	r3, [pc, #520]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d007      	beq.n	800665c <HAL_RCC_OscConfig+0x308>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b18      	cmp	r3, #24
 8006650:	d13a      	bne.n	80066c8 <HAL_RCC_OscConfig+0x374>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	2b01      	cmp	r3, #1
 800665a:	d135      	bne.n	80066c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800665c:	4b7b      	ldr	r3, [pc, #492]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_RCC_OscConfig+0x320>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	2b80      	cmp	r3, #128	; 0x80
 800666e:	d001      	beq.n	8006674 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e2c1      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006674:	f7fb f9b8 	bl	80019e8 <HAL_GetREVID>
 8006678:	4603      	mov	r3, r0
 800667a:	f241 0203 	movw	r2, #4099	; 0x1003
 800667e:	4293      	cmp	r3, r2
 8006680:	d817      	bhi.n	80066b2 <HAL_RCC_OscConfig+0x35e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	2b20      	cmp	r3, #32
 8006688:	d108      	bne.n	800669c <HAL_RCC_OscConfig+0x348>
 800668a:	4b70      	ldr	r3, [pc, #448]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006692:	4a6e      	ldr	r2, [pc, #440]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006698:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800669a:	e075      	b.n	8006788 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800669c:	4b6b      	ldr	r3, [pc, #428]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	069b      	lsls	r3, r3, #26
 80066aa:	4968      	ldr	r1, [pc, #416]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066b0:	e06a      	b.n	8006788 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066b2:	4b66      	ldr	r3, [pc, #408]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	4962      	ldr	r1, [pc, #392]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066c6:	e05f      	b.n	8006788 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d042      	beq.n	8006756 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066d0:	4b5e      	ldr	r3, [pc, #376]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a5d      	ldr	r2, [pc, #372]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80066d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066dc:	f7fb f954 	bl	8001988 <HAL_GetTick>
 80066e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066e2:	e008      	b.n	80066f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066e4:	f7fb f950 	bl	8001988 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e280      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066f6:	4b55      	ldr	r3, [pc, #340]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f0      	beq.n	80066e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006702:	f7fb f971 	bl	80019e8 <HAL_GetREVID>
 8006706:	4603      	mov	r3, r0
 8006708:	f241 0203 	movw	r2, #4099	; 0x1003
 800670c:	4293      	cmp	r3, r2
 800670e:	d817      	bhi.n	8006740 <HAL_RCC_OscConfig+0x3ec>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	2b20      	cmp	r3, #32
 8006716:	d108      	bne.n	800672a <HAL_RCC_OscConfig+0x3d6>
 8006718:	4b4c      	ldr	r3, [pc, #304]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006720:	4a4a      	ldr	r2, [pc, #296]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006726:	6053      	str	r3, [r2, #4]
 8006728:	e02e      	b.n	8006788 <HAL_RCC_OscConfig+0x434>
 800672a:	4b48      	ldr	r3, [pc, #288]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	069b      	lsls	r3, r3, #26
 8006738:	4944      	ldr	r1, [pc, #272]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	604b      	str	r3, [r1, #4]
 800673e:	e023      	b.n	8006788 <HAL_RCC_OscConfig+0x434>
 8006740:	4b42      	ldr	r3, [pc, #264]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	493f      	ldr	r1, [pc, #252]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006750:	4313      	orrs	r3, r2
 8006752:	60cb      	str	r3, [r1, #12]
 8006754:	e018      	b.n	8006788 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006756:	4b3d      	ldr	r3, [pc, #244]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a3c      	ldr	r2, [pc, #240]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800675c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fb f911 	bl	8001988 <HAL_GetTick>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800676a:	f7fb f90d 	bl	8001988 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b02      	cmp	r3, #2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e23d      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800677c:	4b33      	ldr	r3, [pc, #204]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f0      	bne.n	800676a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d036      	beq.n	8006802 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d019      	beq.n	80067d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679c:	4b2b      	ldr	r3, [pc, #172]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800679e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a0:	4a2a      	ldr	r2, [pc, #168]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fb f8ee 	bl	8001988 <HAL_GetTick>
 80067ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b0:	f7fb f8ea 	bl	8001988 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e21a      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067c2:	4b22      	ldr	r3, [pc, #136]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80067c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0x45c>
 80067ce:	e018      	b.n	8006802 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d0:	4b1e      	ldr	r3, [pc, #120]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d4:	4a1d      	ldr	r2, [pc, #116]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fb f8d4 	bl	8001988 <HAL_GetTick>
 80067e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e4:	f7fb f8d0 	bl	8001988 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e200      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067f6:	4b15      	ldr	r3, [pc, #84]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 80067f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b00      	cmp	r3, #0
 800680c:	d039      	beq.n	8006882 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01c      	beq.n	8006850 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a0c      	ldr	r2, [pc, #48]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800681c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006820:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006822:	f7fb f8b1 	bl	8001988 <HAL_GetTick>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006828:	e008      	b.n	800683c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800682a:	f7fb f8ad 	bl	8001988 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d901      	bls.n	800683c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e1dd      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800683c:	4b03      	ldr	r3, [pc, #12]	; (800684c <HAL_RCC_OscConfig+0x4f8>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0f0      	beq.n	800682a <HAL_RCC_OscConfig+0x4d6>
 8006848:	e01b      	b.n	8006882 <HAL_RCC_OscConfig+0x52e>
 800684a:	bf00      	nop
 800684c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006850:	4b9b      	ldr	r3, [pc, #620]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a9a      	ldr	r2, [pc, #616]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800685a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800685c:	f7fb f894 	bl	8001988 <HAL_GetTick>
 8006860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006864:	f7fb f890 	bl	8001988 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e1c0      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006876:	4b92      	ldr	r3, [pc, #584]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8081 	beq.w	8006992 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006890:	4b8c      	ldr	r3, [pc, #560]	; (8006ac4 <HAL_RCC_OscConfig+0x770>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a8b      	ldr	r2, [pc, #556]	; (8006ac4 <HAL_RCC_OscConfig+0x770>)
 8006896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800689c:	f7fb f874 	bl	8001988 <HAL_GetTick>
 80068a0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068a4:	f7fb f870 	bl	8001988 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e1a0      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b6:	4b83      	ldr	r3, [pc, #524]	; (8006ac4 <HAL_RCC_OscConfig+0x770>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d106      	bne.n	80068d8 <HAL_RCC_OscConfig+0x584>
 80068ca:	4b7d      	ldr	r3, [pc, #500]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ce:	4a7c      	ldr	r2, [pc, #496]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80068d0:	f043 0301 	orr.w	r3, r3, #1
 80068d4:	6713      	str	r3, [r2, #112]	; 0x70
 80068d6:	e02d      	b.n	8006934 <HAL_RCC_OscConfig+0x5e0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10c      	bne.n	80068fa <HAL_RCC_OscConfig+0x5a6>
 80068e0:	4b77      	ldr	r3, [pc, #476]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80068e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e4:	4a76      	ldr	r2, [pc, #472]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	6713      	str	r3, [r2, #112]	; 0x70
 80068ec:	4b74      	ldr	r3, [pc, #464]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	4a73      	ldr	r2, [pc, #460]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80068f2:	f023 0304 	bic.w	r3, r3, #4
 80068f6:	6713      	str	r3, [r2, #112]	; 0x70
 80068f8:	e01c      	b.n	8006934 <HAL_RCC_OscConfig+0x5e0>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b05      	cmp	r3, #5
 8006900:	d10c      	bne.n	800691c <HAL_RCC_OscConfig+0x5c8>
 8006902:	4b6f      	ldr	r3, [pc, #444]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	4a6e      	ldr	r2, [pc, #440]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006908:	f043 0304 	orr.w	r3, r3, #4
 800690c:	6713      	str	r3, [r2, #112]	; 0x70
 800690e:	4b6c      	ldr	r3, [pc, #432]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	4a6b      	ldr	r2, [pc, #428]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	6713      	str	r3, [r2, #112]	; 0x70
 800691a:	e00b      	b.n	8006934 <HAL_RCC_OscConfig+0x5e0>
 800691c:	4b68      	ldr	r3, [pc, #416]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 800691e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006920:	4a67      	ldr	r2, [pc, #412]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	6713      	str	r3, [r2, #112]	; 0x70
 8006928:	4b65      	ldr	r3, [pc, #404]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	4a64      	ldr	r2, [pc, #400]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 800692e:	f023 0304 	bic.w	r3, r3, #4
 8006932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d015      	beq.n	8006968 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693c:	f7fb f824 	bl	8001988 <HAL_GetTick>
 8006940:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006942:	e00a      	b.n	800695a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006944:	f7fb f820 	bl	8001988 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e14e      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800695a:	4b59      	ldr	r3, [pc, #356]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0ee      	beq.n	8006944 <HAL_RCC_OscConfig+0x5f0>
 8006966:	e014      	b.n	8006992 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006968:	f7fb f80e 	bl	8001988 <HAL_GetTick>
 800696c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800696e:	e00a      	b.n	8006986 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006970:	f7fb f80a 	bl	8001988 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	f241 3288 	movw	r2, #5000	; 0x1388
 800697e:	4293      	cmp	r3, r2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e138      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006986:	4b4e      	ldr	r3, [pc, #312]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1ee      	bne.n	8006970 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 812d 	beq.w	8006bf6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800699c:	4b48      	ldr	r3, [pc, #288]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a4:	2b18      	cmp	r3, #24
 80069a6:	f000 80bd 	beq.w	8006b24 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	f040 809e 	bne.w	8006af0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b4:	4b42      	ldr	r3, [pc, #264]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a41      	ldr	r2, [pc, #260]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80069ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fa ffe2 	bl	8001988 <HAL_GetTick>
 80069c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fa ffde 	bl	8001988 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e10e      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069da:	4b39      	ldr	r3, [pc, #228]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e6:	4b36      	ldr	r3, [pc, #216]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80069e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ea:	4b37      	ldr	r3, [pc, #220]	; (8006ac8 <HAL_RCC_OscConfig+0x774>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	430a      	orrs	r2, r1
 80069fa:	4931      	ldr	r1, [pc, #196]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	3b01      	subs	r3, #1
 8006a06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	025b      	lsls	r3, r3, #9
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	041b      	lsls	r3, r3, #16
 8006a1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	061b      	lsls	r3, r3, #24
 8006a2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a30:	4923      	ldr	r1, [pc, #140]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a36:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	4a21      	ldr	r2, [pc, #132]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a42:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a46:	4b21      	ldr	r3, [pc, #132]	; (8006acc <HAL_RCC_OscConfig+0x778>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a4e:	00d2      	lsls	r2, r2, #3
 8006a50:	491b      	ldr	r1, [pc, #108]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	f023 020c 	bic.w	r2, r3, #12
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	4917      	ldr	r1, [pc, #92]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	f023 0202 	bic.w	r2, r3, #2
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	4912      	ldr	r1, [pc, #72]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a7a:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a92:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	4a07      	ldr	r2, [pc, #28]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006aa4:	f043 0301 	orr.w	r3, r3, #1
 8006aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a04      	ldr	r2, [pc, #16]	; (8006ac0 <HAL_RCC_OscConfig+0x76c>)
 8006ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab6:	f7fa ff67 	bl	8001988 <HAL_GetTick>
 8006aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006abc:	e011      	b.n	8006ae2 <HAL_RCC_OscConfig+0x78e>
 8006abe:	bf00      	nop
 8006ac0:	58024400 	.word	0x58024400
 8006ac4:	58024800 	.word	0x58024800
 8006ac8:	fffffc0c 	.word	0xfffffc0c
 8006acc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad0:	f7fa ff5a 	bl	8001988 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e08a      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ae2:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f0      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x77c>
 8006aee:	e082      	b.n	8006bf6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af0:	4b43      	ldr	r3, [pc, #268]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a42      	ldr	r2, [pc, #264]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afc:	f7fa ff44 	bl	8001988 <HAL_GetTick>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b04:	f7fa ff40 	bl	8001988 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e070      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b16:	4b3a      	ldr	r3, [pc, #232]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f0      	bne.n	8006b04 <HAL_RCC_OscConfig+0x7b0>
 8006b22:	e068      	b.n	8006bf6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b24:	4b36      	ldr	r3, [pc, #216]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b2a:	4b35      	ldr	r3, [pc, #212]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d031      	beq.n	8006b9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f003 0203 	and.w	r2, r3, #3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d12a      	bne.n	8006b9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	091b      	lsrs	r3, r3, #4
 8006b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d122      	bne.n	8006b9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d11a      	bne.n	8006b9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	0a5b      	lsrs	r3, r3, #9
 8006b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d111      	bne.n	8006b9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d108      	bne.n	8006b9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	0e1b      	lsrs	r3, r3, #24
 8006b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e02b      	b.n	8006bf8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006ba0:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba4:	08db      	lsrs	r3, r3, #3
 8006ba6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006baa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d01f      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bb6:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	4a11      	ldr	r2, [pc, #68]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bc2:	f7fa fee1 	bl	8001988 <HAL_GetTick>
 8006bc6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006bc8:	bf00      	nop
 8006bca:	f7fa fedd 	bl	8001988 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d0f9      	beq.n	8006bca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bda:	4b0a      	ldr	r3, [pc, #40]	; (8006c04 <HAL_RCC_OscConfig+0x8b0>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006be2:	00d2      	lsls	r2, r2, #3
 8006be4:	4906      	ldr	r1, [pc, #24]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <HAL_RCC_OscConfig+0x8ac>)
 8006bf0:	f043 0301 	orr.w	r3, r3, #1
 8006bf4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3730      	adds	r7, #48	; 0x30
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	58024400 	.word	0x58024400
 8006c04:	ffff0007 	.word	0xffff0007

08006c08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e19c      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c1c:	4b8a      	ldr	r3, [pc, #552]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d910      	bls.n	8006c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c2a:	4b87      	ldr	r3, [pc, #540]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 020f 	bic.w	r2, r3, #15
 8006c32:	4985      	ldr	r1, [pc, #532]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3a:	4b83      	ldr	r3, [pc, #524]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e184      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	4b7b      	ldr	r3, [pc, #492]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d908      	bls.n	8006c7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c68:	4b78      	ldr	r3, [pc, #480]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	4975      	ldr	r1, [pc, #468]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d010      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	4b70      	ldr	r3, [pc, #448]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d908      	bls.n	8006ca8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c96:	4b6d      	ldr	r3, [pc, #436]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	496a      	ldr	r1, [pc, #424]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d010      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699a      	ldr	r2, [r3, #24]
 8006cb8:	4b64      	ldr	r3, [pc, #400]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d908      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cc4:	4b61      	ldr	r3, [pc, #388]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	495e      	ldr	r1, [pc, #376]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d010      	beq.n	8006d04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69da      	ldr	r2, [r3, #28]
 8006ce6:	4b59      	ldr	r3, [pc, #356]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d908      	bls.n	8006d04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cf2:	4b56      	ldr	r3, [pc, #344]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	4953      	ldr	r1, [pc, #332]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d010      	beq.n	8006d32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	4b4d      	ldr	r3, [pc, #308]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d908      	bls.n	8006d32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d20:	4b4a      	ldr	r3, [pc, #296]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f023 020f 	bic.w	r2, r3, #15
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4947      	ldr	r1, [pc, #284]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d055      	beq.n	8006dea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d3e:	4b43      	ldr	r3, [pc, #268]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	4940      	ldr	r1, [pc, #256]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d107      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d58:	4b3c      	ldr	r3, [pc, #240]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d121      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0f6      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d70:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d115      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0ea      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d107      	bne.n	8006d98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d88:	4b30      	ldr	r3, [pc, #192]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0de      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d98:	4b2c      	ldr	r3, [pc, #176]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0d6      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006da8:	4b28      	ldr	r3, [pc, #160]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f023 0207 	bic.w	r2, r3, #7
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	4925      	ldr	r1, [pc, #148]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dba:	f7fa fde5 	bl	8001988 <HAL_GetTick>
 8006dbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc0:	e00a      	b.n	8006dd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc2:	f7fa fde1 	bl	8001988 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e0be      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd8:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d1eb      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d010      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d208      	bcs.n	8006e18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e06:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f023 020f 	bic.w	r2, r3, #15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	490e      	ldr	r1, [pc, #56]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d214      	bcs.n	8006e50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	4906      	ldr	r1, [pc, #24]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d005      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e086      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
 8006e48:	52002000 	.word	0x52002000
 8006e4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	4b3f      	ldr	r3, [pc, #252]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d208      	bcs.n	8006e7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e6c:	4b3c      	ldr	r3, [pc, #240]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	4939      	ldr	r1, [pc, #228]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d010      	beq.n	8006eac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d208      	bcs.n	8006eac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e9a:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	492e      	ldr	r1, [pc, #184]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d010      	beq.n	8006eda <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	4b28      	ldr	r3, [pc, #160]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d208      	bcs.n	8006eda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ec8:	4b25      	ldr	r3, [pc, #148]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	4922      	ldr	r1, [pc, #136]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d208      	bcs.n	8006f08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4917      	ldr	r1, [pc, #92]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f08:	f000 f834 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	4912      	ldr	r1, [pc, #72]	; (8006f64 <HAL_RCC_ClockConfig+0x35c>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f26:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	4a0d      	ldr	r2, [pc, #52]	; (8006f64 <HAL_RCC_ClockConfig+0x35c>)
 8006f30:	5cd3      	ldrb	r3, [r2, r3]
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3c:	4a0a      	ldr	r2, [pc, #40]	; (8006f68 <HAL_RCC_ClockConfig+0x360>)
 8006f3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f40:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <HAL_RCC_ClockConfig+0x364>)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f46:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <HAL_RCC_ClockConfig+0x368>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fa fcd2 	bl	80018f4 <HAL_InitTick>
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	58024400 	.word	0x58024400
 8006f64:	0800da84 	.word	0x0800da84
 8006f68:	24000004 	.word	0x24000004
 8006f6c:	24000000 	.word	0x24000000
 8006f70:	24000008 	.word	0x24000008

08006f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	; 0x24
 8006f78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f7a:	4bb3      	ldr	r3, [pc, #716]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f82:	2b18      	cmp	r3, #24
 8006f84:	f200 8155 	bhi.w	8007232 <HAL_RCC_GetSysClockFreq+0x2be>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08007233 	.word	0x08007233
 8006f98:	08007233 	.word	0x08007233
 8006f9c:	08007233 	.word	0x08007233
 8006fa0:	08007233 	.word	0x08007233
 8006fa4:	08007233 	.word	0x08007233
 8006fa8:	08007233 	.word	0x08007233
 8006fac:	08007233 	.word	0x08007233
 8006fb0:	0800701b 	.word	0x0800701b
 8006fb4:	08007233 	.word	0x08007233
 8006fb8:	08007233 	.word	0x08007233
 8006fbc:	08007233 	.word	0x08007233
 8006fc0:	08007233 	.word	0x08007233
 8006fc4:	08007233 	.word	0x08007233
 8006fc8:	08007233 	.word	0x08007233
 8006fcc:	08007233 	.word	0x08007233
 8006fd0:	08007021 	.word	0x08007021
 8006fd4:	08007233 	.word	0x08007233
 8006fd8:	08007233 	.word	0x08007233
 8006fdc:	08007233 	.word	0x08007233
 8006fe0:	08007233 	.word	0x08007233
 8006fe4:	08007233 	.word	0x08007233
 8006fe8:	08007233 	.word	0x08007233
 8006fec:	08007233 	.word	0x08007233
 8006ff0:	08007027 	.word	0x08007027
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff4:	4b94      	ldr	r3, [pc, #592]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007000:	4b91      	ldr	r3, [pc, #580]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	4a90      	ldr	r2, [pc, #576]	; (800724c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
 8007010:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007012:	e111      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007014:	4b8d      	ldr	r3, [pc, #564]	; (800724c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007016:	61bb      	str	r3, [r7, #24]
      break;
 8007018:	e10e      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800701a:	4b8d      	ldr	r3, [pc, #564]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800701c:	61bb      	str	r3, [r7, #24]
      break;
 800701e:	e10b      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007020:	4b8c      	ldr	r3, [pc, #560]	; (8007254 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007022:	61bb      	str	r3, [r7, #24]
      break;
 8007024:	e108      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007026:	4b88      	ldr	r3, [pc, #544]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007030:	4b85      	ldr	r3, [pc, #532]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800703a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800703c:	4b82      	ldr	r3, [pc, #520]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007046:	4b80      	ldr	r3, [pc, #512]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	08db      	lsrs	r3, r3, #3
 800704c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80e1 	beq.w	800722c <HAL_RCC_GetSysClockFreq+0x2b8>
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b02      	cmp	r3, #2
 800706e:	f000 8083 	beq.w	8007178 <HAL_RCC_GetSysClockFreq+0x204>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f200 80a1 	bhi.w	80071bc <HAL_RCC_GetSysClockFreq+0x248>
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_RCC_GetSysClockFreq+0x114>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d056      	beq.n	8007134 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007086:	e099      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007088:	4b6f      	ldr	r3, [pc, #444]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02d      	beq.n	80070f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007094:	4b6c      	ldr	r3, [pc, #432]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	08db      	lsrs	r3, r3, #3
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	4a6b      	ldr	r2, [pc, #428]	; (800724c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
 80070a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b62      	ldr	r3, [pc, #392]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80070ee:	e087      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800725c <HAL_RCC_GetSysClockFreq+0x2e8>
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b51      	ldr	r3, [pc, #324]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a02 	vldr	s12, [r7, #8]
 8007116:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007132:	e065      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b40      	ldr	r3, [pc, #256]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a02 	vldr	s12, [r7, #8]
 800715a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007176:	e043      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007264 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b2f      	ldr	r3, [pc, #188]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a02 	vldr	s12, [r7, #8]
 800719e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071ba:	e021      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b1e      	ldr	r3, [pc, #120]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007200:	4b11      	ldr	r3, [pc, #68]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	0a5b      	lsrs	r3, r3, #9
 8007206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720a:	3301      	adds	r3, #1
 800720c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007218:	edd7 6a07 	vldr	s13, [r7, #28]
 800721c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007224:	ee17 3a90 	vmov	r3, s15
 8007228:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800722a:	e005      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]
      break;
 8007230:	e002      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007234:	61bb      	str	r3, [r7, #24]
      break;
 8007236:	bf00      	nop
  }

  return sysclockfreq;
 8007238:	69bb      	ldr	r3, [r7, #24]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3724      	adds	r7, #36	; 0x24
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
 800724c:	03d09000 	.word	0x03d09000
 8007250:	003d0900 	.word	0x003d0900
 8007254:	007a1200 	.word	0x007a1200
 8007258:	46000000 	.word	0x46000000
 800725c:	4c742400 	.word	0x4c742400
 8007260:	4a742400 	.word	0x4a742400
 8007264:	4af42400 	.word	0x4af42400

08007268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800726e:	f7ff fe81 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
 8007272:	4602      	mov	r2, r0
 8007274:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	490f      	ldr	r1, [pc, #60]	; (80072bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007280:	5ccb      	ldrb	r3, [r1, r3]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	4a09      	ldr	r2, [pc, #36]	; (80072bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007296:	5cd3      	ldrb	r3, [r2, r3]
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	4a07      	ldr	r2, [pc, #28]	; (80072c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072a6:	4a07      	ldr	r2, [pc, #28]	; (80072c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	58024400 	.word	0x58024400
 80072bc:	0800da84 	.word	0x0800da84
 80072c0:	24000004 	.word	0x24000004
 80072c4:	24000000 	.word	0x24000000

080072c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072cc:	f7ff ffcc 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4b06      	ldr	r3, [pc, #24]	; (80072ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	4904      	ldr	r1, [pc, #16]	; (80072f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072de:	5ccb      	ldrb	r3, [r1, r3]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	58024400 	.word	0x58024400
 80072f0:	0800da84 	.word	0x0800da84

080072f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072f8:	f7ff ffb6 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4904      	ldr	r1, [pc, #16]	; (800731c <HAL_RCC_GetPCLK2Freq+0x28>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	58024400 	.word	0x58024400
 800731c:	0800da84 	.word	0x0800da84

08007320 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007324:	b0ca      	sub	sp, #296	; 0x128
 8007326:	af00      	add	r7, sp, #0
 8007328:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800732c:	2300      	movs	r3, #0
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007332:	2300      	movs	r3, #0
 8007334:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007344:	2500      	movs	r5, #0
 8007346:	ea54 0305 	orrs.w	r3, r4, r5
 800734a:	d049      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007356:	d02f      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800735c:	d828      	bhi.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800735e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007362:	d01a      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007368:	d822      	bhi.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800736e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007372:	d007      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007374:	e01c      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007376:	4bb8      	ldr	r3, [pc, #736]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	4ab7      	ldr	r2, [pc, #732]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800737c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007380:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007382:	e01a      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007388:	3308      	adds	r3, #8
 800738a:	2102      	movs	r1, #2
 800738c:	4618      	mov	r0, r3
 800738e:	f002 fb61 	bl	8009a54 <RCCEx_PLL2_Config>
 8007392:	4603      	mov	r3, r0
 8007394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007398:	e00f      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739e:	3328      	adds	r3, #40	; 0x28
 80073a0:	2102      	movs	r1, #2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f002 fc08 	bl	8009bb8 <RCCEx_PLL3_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073ae:	e004      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073b6:	e000      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073c2:	4ba5      	ldr	r3, [pc, #660]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d0:	4aa1      	ldr	r2, [pc, #644]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073d2:	430b      	orrs	r3, r1
 80073d4:	6513      	str	r3, [r2, #80]	; 0x50
 80073d6:	e003      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80073ec:	f04f 0900 	mov.w	r9, #0
 80073f0:	ea58 0309 	orrs.w	r3, r8, r9
 80073f4:	d047      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d82a      	bhi.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007400:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	0800741d 	.word	0x0800741d
 800740c:	0800742b 	.word	0x0800742b
 8007410:	08007441 	.word	0x08007441
 8007414:	0800745f 	.word	0x0800745f
 8007418:	0800745f 	.word	0x0800745f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741c:	4b8e      	ldr	r3, [pc, #568]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007420:	4a8d      	ldr	r2, [pc, #564]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007428:	e01a      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742e:	3308      	adds	r3, #8
 8007430:	2100      	movs	r1, #0
 8007432:	4618      	mov	r0, r3
 8007434:	f002 fb0e 	bl	8009a54 <RCCEx_PLL2_Config>
 8007438:	4603      	mov	r3, r0
 800743a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800743e:	e00f      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007444:	3328      	adds	r3, #40	; 0x28
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f002 fbb5 	bl	8009bb8 <RCCEx_PLL3_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007454:	e004      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800745c:	e000      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800745e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007468:	4b7b      	ldr	r3, [pc, #492]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800746a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746c:	f023 0107 	bic.w	r1, r3, #7
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	4a78      	ldr	r2, [pc, #480]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007478:	430b      	orrs	r3, r1
 800747a:	6513      	str	r3, [r2, #80]	; 0x50
 800747c:	e003      	b.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007482:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007492:	f04f 0b00 	mov.w	fp, #0
 8007496:	ea5a 030b 	orrs.w	r3, sl, fp
 800749a:	d04c      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a6:	d030      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80074a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ac:	d829      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074ae:	2bc0      	cmp	r3, #192	; 0xc0
 80074b0:	d02d      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074b2:	2bc0      	cmp	r3, #192	; 0xc0
 80074b4:	d825      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074b6:	2b80      	cmp	r3, #128	; 0x80
 80074b8:	d018      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80074ba:	2b80      	cmp	r3, #128	; 0x80
 80074bc:	d821      	bhi.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d007      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074c6:	e01c      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b63      	ldr	r3, [pc, #396]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a62      	ldr	r2, [pc, #392]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074d4:	e01c      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074da:	3308      	adds	r3, #8
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f002 fab8 	bl	8009a54 <RCCEx_PLL2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074ea:	e011      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f0:	3328      	adds	r3, #40	; 0x28
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f002 fb5f 	bl	8009bb8 <RCCEx_PLL3_Config>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007500:	e006      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007508:	e002      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800750e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007518:	4b4f      	ldr	r3, [pc, #316]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800751a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007526:	4a4c      	ldr	r2, [pc, #304]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007528:	430b      	orrs	r3, r1
 800752a:	6513      	str	r3, [r2, #80]	; 0x50
 800752c:	e003      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007532:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007546:	2300      	movs	r3, #0
 8007548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800754c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d053      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800755e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007562:	d035      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007564:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007568:	d82e      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800756a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800756e:	d031      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007570:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007574:	d828      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800757a:	d01a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800757c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007580:	d822      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800758a:	d007      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800758c:	e01c      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758e:	4b32      	ldr	r3, [pc, #200]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	4a31      	ldr	r2, [pc, #196]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007598:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800759a:	e01c      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a0:	3308      	adds	r3, #8
 80075a2:	2100      	movs	r1, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f002 fa55 	bl	8009a54 <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075b0:	e011      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b6:	3328      	adds	r3, #40	; 0x28
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f002 fafc 	bl	8009bb8 <RCCEx_PLL3_Config>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075c6:	e006      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075ce:	e002      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075d0:	bf00      	nop
 80075d2:	e000      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10b      	bne.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075de:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80075e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075ee:	4a1a      	ldr	r2, [pc, #104]	; (8007658 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6593      	str	r3, [r2, #88]	; 0x58
 80075f4:	e003      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800760a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800760e:	2300      	movs	r3, #0
 8007610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007614:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007618:	460b      	mov	r3, r1
 800761a:	4313      	orrs	r3, r2
 800761c:	d056      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007622:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800762a:	d038      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800762c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007630:	d831      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007632:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007636:	d034      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007638:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800763c:	d82b      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800763e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007642:	d01d      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007648:	d825      	bhi.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d006      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800764e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007652:	d00a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007654:	e01f      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765c:	4ba2      	ldr	r3, [pc, #648]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4aa1      	ldr	r2, [pc, #644]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007668:	e01c      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800766a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766e:	3308      	adds	r3, #8
 8007670:	2100      	movs	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f002 f9ee 	bl	8009a54 <RCCEx_PLL2_Config>
 8007678:	4603      	mov	r3, r0
 800767a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800767e:	e011      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007684:	3328      	adds	r3, #40	; 0x28
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f002 fa95 	bl	8009bb8 <RCCEx_PLL3_Config>
 800768e:	4603      	mov	r3, r0
 8007690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007694:	e006      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800769c:	e002      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10b      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076ac:	4b8e      	ldr	r3, [pc, #568]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076bc:	4a8a      	ldr	r2, [pc, #552]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076be:	430b      	orrs	r3, r1
 80076c0:	6593      	str	r3, [r2, #88]	; 0x58
 80076c2:	e003      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80076d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076dc:	2300      	movs	r3, #0
 80076de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80076e6:	460b      	mov	r3, r1
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d03a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	2b30      	cmp	r3, #48	; 0x30
 80076f4:	d01f      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80076f6:	2b30      	cmp	r3, #48	; 0x30
 80076f8:	d819      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d00c      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80076fe:	2b20      	cmp	r3, #32
 8007700:	d815      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d019      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007706:	2b10      	cmp	r3, #16
 8007708:	d111      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800770a:	4b77      	ldr	r3, [pc, #476]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	4a76      	ldr	r2, [pc, #472]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007716:	e011      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771c:	3308      	adds	r3, #8
 800771e:	2102      	movs	r1, #2
 8007720:	4618      	mov	r0, r3
 8007722:	f002 f997 	bl	8009a54 <RCCEx_PLL2_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800772c:	e006      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007734:	e002      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007736:	bf00      	nop
 8007738:	e000      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800773a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800773c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007744:	4b68      	ldr	r3, [pc, #416]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007748:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800774c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007752:	4a65      	ldr	r2, [pc, #404]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007754:	430b      	orrs	r3, r1
 8007756:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007758:	e003      	b.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800775a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800775e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800776e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007772:	2300      	movs	r3, #0
 8007774:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007778:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800777c:	460b      	mov	r3, r1
 800777e:	4313      	orrs	r3, r2
 8007780:	d051      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800778c:	d035      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800778e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007792:	d82e      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007794:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007798:	d031      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800779a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800779e:	d828      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077a4:	d01a      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80077a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077aa:	d822      	bhi.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d003      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80077b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b4:	d007      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077b6:	e01c      	b.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077b8:	4b4b      	ldr	r3, [pc, #300]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a4a      	ldr	r2, [pc, #296]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077c4:	e01c      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ca:	3308      	adds	r3, #8
 80077cc:	2100      	movs	r1, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f002 f940 	bl	8009a54 <RCCEx_PLL2_Config>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077da:	e011      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077e0:	3328      	adds	r3, #40	; 0x28
 80077e2:	2100      	movs	r1, #0
 80077e4:	4618      	mov	r0, r3
 80077e6:	f002 f9e7 	bl	8009bb8 <RCCEx_PLL3_Config>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077f0:	e006      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077f8:	e002      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077fa:	bf00      	nop
 80077fc:	e000      	b.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007808:	4b37      	ldr	r3, [pc, #220]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007816:	4a34      	ldr	r2, [pc, #208]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007818:	430b      	orrs	r3, r1
 800781a:	6513      	str	r3, [r2, #80]	; 0x50
 800781c:	e003      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007832:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007836:	2300      	movs	r3, #0
 8007838:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800783c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007840:	460b      	mov	r3, r1
 8007842:	4313      	orrs	r3, r2
 8007844:	d056      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800784a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800784c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007850:	d033      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007856:	d82c      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800785c:	d02f      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800785e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007862:	d826      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007864:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007868:	d02b      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800786a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800786e:	d820      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007874:	d012      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800787a:	d81a      	bhi.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d022      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007884:	d115      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800788a:	3308      	adds	r3, #8
 800788c:	2101      	movs	r1, #1
 800788e:	4618      	mov	r0, r3
 8007890:	f002 f8e0 	bl	8009a54 <RCCEx_PLL2_Config>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800789a:	e015      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a0:	3328      	adds	r3, #40	; 0x28
 80078a2:	2101      	movs	r1, #1
 80078a4:	4618      	mov	r0, r3
 80078a6:	f002 f987 	bl	8009bb8 <RCCEx_PLL3_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078b0:	e00a      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078ba:	bf00      	nop
 80078bc:	e004      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10d      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80078d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078de:	4a02      	ldr	r2, [pc, #8]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6513      	str	r3, [r2, #80]	; 0x50
 80078e4:	e006      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078e6:	bf00      	nop
 80078e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007904:	2300      	movs	r3, #0
 8007906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800790a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800790e:	460b      	mov	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	d055      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007918:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800791c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007920:	d033      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007926:	d82c      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d02f      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800792e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007932:	d826      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007934:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007938:	d02b      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800793a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800793e:	d820      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007944:	d012      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800794a:	d81a      	bhi.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d022      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007954:	d115      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800795a:	3308      	adds	r3, #8
 800795c:	2101      	movs	r1, #1
 800795e:	4618      	mov	r0, r3
 8007960:	f002 f878 	bl	8009a54 <RCCEx_PLL2_Config>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800796a:	e015      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007970:	3328      	adds	r3, #40	; 0x28
 8007972:	2101      	movs	r1, #1
 8007974:	4618      	mov	r0, r3
 8007976:	f002 f91f 	bl	8009bb8 <RCCEx_PLL3_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007980:	e00a      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007988:	e006      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800798a:	bf00      	nop
 800798c:	e004      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800798e:	bf00      	nop
 8007990:	e002      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007992:	bf00      	nop
 8007994:	e000      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10b      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079a0:	4ba3      	ldr	r3, [pc, #652]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079b0:	4a9f      	ldr	r2, [pc, #636]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b2:	430b      	orrs	r3, r1
 80079b4:	6593      	str	r3, [r2, #88]	; 0x58
 80079b6:	e003      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80079cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079da:	460b      	mov	r3, r1
 80079dc:	4313      	orrs	r3, r2
 80079de:	d037      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ea:	d00e      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80079ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f0:	d816      	bhi.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d018      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80079f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079fa:	d111      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fc:	4b8c      	ldr	r3, [pc, #560]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4a8b      	ldr	r2, [pc, #556]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a08:	e00f      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	3308      	adds	r3, #8
 8007a10:	2101      	movs	r1, #1
 8007a12:	4618      	mov	r0, r3
 8007a14:	f002 f81e 	bl	8009a54 <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a1e:	e004      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a26:	e000      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10a      	bne.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a32:	4b7f      	ldr	r3, [pc, #508]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	4a7b      	ldr	r2, [pc, #492]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a42:	430b      	orrs	r3, r1
 8007a44:	6513      	str	r3, [r2, #80]	; 0x50
 8007a46:	e003      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a60:	2300      	movs	r3, #0
 8007a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	d039      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a76:	2b03      	cmp	r3, #3
 8007a78:	d81c      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a7a:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007abd 	.word	0x08007abd
 8007a84:	08007a91 	.word	0x08007a91
 8007a88:	08007a9f 	.word	0x08007a9f
 8007a8c:	08007abd 	.word	0x08007abd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a90:	4b67      	ldr	r3, [pc, #412]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	4a66      	ldr	r2, [pc, #408]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a9c:	e00f      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f001 ffd4 	bl	8009a54 <RCCEx_PLL2_Config>
 8007aac:	4603      	mov	r3, r0
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ab2:	e004      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007aba:	e000      	b.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ac6:	4b5a      	ldr	r3, [pc, #360]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aca:	f023 0103 	bic.w	r1, r3, #3
 8007ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad4:	4a56      	ldr	r2, [pc, #344]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ada:	e003      	b.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007afa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007afe:	460b      	mov	r3, r1
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f000 809f 	beq.w	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b06:	4b4b      	ldr	r3, [pc, #300]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a4a      	ldr	r2, [pc, #296]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b12:	f7f9 ff39 	bl	8001988 <HAL_GetTick>
 8007b16:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b1a:	e00b      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b1c:	f7f9 ff34 	bl	8001988 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b64      	cmp	r3, #100	; 0x64
 8007b2a:	d903      	bls.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b32:	e005      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b34:	4b3f      	ldr	r3, [pc, #252]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d0ed      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d179      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b48:	4b39      	ldr	r3, [pc, #228]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b54:	4053      	eors	r3, r2
 8007b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d015      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b5e:	4b34      	ldr	r3, [pc, #208]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b6a:	4b31      	ldr	r3, [pc, #196]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	4a30      	ldr	r2, [pc, #192]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b76:	4b2e      	ldr	r3, [pc, #184]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	4a2d      	ldr	r2, [pc, #180]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b82:	4a2b      	ldr	r2, [pc, #172]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b96:	d118      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b98:	f7f9 fef6 	bl	8001988 <HAL_GetTick>
 8007b9c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba0:	e00d      	b.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ba2:	f7f9 fef1 	bl	8001988 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007bac:	1ad2      	subs	r2, r2, r3
 8007bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d903      	bls.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007bbc:	e005      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0eb      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d129      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be2:	d10e      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007be4:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bf4:	091a      	lsrs	r2, r3, #4
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	4a0d      	ldr	r2, [pc, #52]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6113      	str	r3, [r2, #16]
 8007c00:	e005      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c02:	4b0b      	ldr	r3, [pc, #44]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	4a0a      	ldr	r2, [pc, #40]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c0c:	6113      	str	r3, [r2, #16]
 8007c0e:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c1e:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c20:	430b      	orrs	r3, r1
 8007c22:	6713      	str	r3, [r2, #112]	; 0x70
 8007c24:	e00e      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007c2e:	e009      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c30:	58024400 	.word	0x58024400
 8007c34:	58024800 	.word	0x58024800
 8007c38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f002 0301 	and.w	r3, r2, #1
 8007c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c54:	2300      	movs	r3, #0
 8007c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f000 8089 	beq.w	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c6c:	2b28      	cmp	r3, #40	; 0x28
 8007c6e:	d86b      	bhi.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007d51 	.word	0x08007d51
 8007c7c:	08007d49 	.word	0x08007d49
 8007c80:	08007d49 	.word	0x08007d49
 8007c84:	08007d49 	.word	0x08007d49
 8007c88:	08007d49 	.word	0x08007d49
 8007c8c:	08007d49 	.word	0x08007d49
 8007c90:	08007d49 	.word	0x08007d49
 8007c94:	08007d49 	.word	0x08007d49
 8007c98:	08007d1d 	.word	0x08007d1d
 8007c9c:	08007d49 	.word	0x08007d49
 8007ca0:	08007d49 	.word	0x08007d49
 8007ca4:	08007d49 	.word	0x08007d49
 8007ca8:	08007d49 	.word	0x08007d49
 8007cac:	08007d49 	.word	0x08007d49
 8007cb0:	08007d49 	.word	0x08007d49
 8007cb4:	08007d49 	.word	0x08007d49
 8007cb8:	08007d33 	.word	0x08007d33
 8007cbc:	08007d49 	.word	0x08007d49
 8007cc0:	08007d49 	.word	0x08007d49
 8007cc4:	08007d49 	.word	0x08007d49
 8007cc8:	08007d49 	.word	0x08007d49
 8007ccc:	08007d49 	.word	0x08007d49
 8007cd0:	08007d49 	.word	0x08007d49
 8007cd4:	08007d49 	.word	0x08007d49
 8007cd8:	08007d51 	.word	0x08007d51
 8007cdc:	08007d49 	.word	0x08007d49
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007d49 	.word	0x08007d49
 8007ce8:	08007d49 	.word	0x08007d49
 8007cec:	08007d49 	.word	0x08007d49
 8007cf0:	08007d49 	.word	0x08007d49
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007d51 	.word	0x08007d51
 8007cfc:	08007d49 	.word	0x08007d49
 8007d00:	08007d49 	.word	0x08007d49
 8007d04:	08007d49 	.word	0x08007d49
 8007d08:	08007d49 	.word	0x08007d49
 8007d0c:	08007d49 	.word	0x08007d49
 8007d10:	08007d49 	.word	0x08007d49
 8007d14:	08007d49 	.word	0x08007d49
 8007d18:	08007d51 	.word	0x08007d51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d20:	3308      	adds	r3, #8
 8007d22:	2101      	movs	r1, #1
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 fe95 	bl	8009a54 <RCCEx_PLL2_Config>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d30:	e00f      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d36:	3328      	adds	r3, #40	; 0x28
 8007d38:	2101      	movs	r1, #1
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f001 ff3c 	bl	8009bb8 <RCCEx_PLL3_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d46:	e004      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d4e:	e000      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10a      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d5a:	4bbf      	ldr	r3, [pc, #764]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d68:	4abb      	ldr	r2, [pc, #748]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d6a:	430b      	orrs	r3, r1
 8007d6c:	6553      	str	r3, [r2, #84]	; 0x54
 8007d6e:	e003      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	f002 0302 	and.w	r3, r2, #2
 8007d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d88:	2300      	movs	r3, #0
 8007d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007d92:	460b      	mov	r3, r1
 8007d94:	4313      	orrs	r3, r2
 8007d96:	d041      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d824      	bhi.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007da2:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007df5 	.word	0x08007df5
 8007dac:	08007dc1 	.word	0x08007dc1
 8007db0:	08007dd7 	.word	0x08007dd7
 8007db4:	08007df5 	.word	0x08007df5
 8007db8:	08007df5 	.word	0x08007df5
 8007dbc:	08007df5 	.word	0x08007df5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dc4:	3308      	adds	r3, #8
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 fe43 	bl	8009a54 <RCCEx_PLL2_Config>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dd4:	e00f      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dda:	3328      	adds	r3, #40	; 0x28
 8007ddc:	2101      	movs	r1, #1
 8007dde:	4618      	mov	r0, r3
 8007de0:	f001 feea 	bl	8009bb8 <RCCEx_PLL3_Config>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dea:	e004      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007df2:	e000      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dfe:	4b96      	ldr	r3, [pc, #600]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e02:	f023 0107 	bic.w	r1, r3, #7
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0c:	4a92      	ldr	r2, [pc, #584]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e0e:	430b      	orrs	r3, r1
 8007e10:	6553      	str	r3, [r2, #84]	; 0x54
 8007e12:	e003      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f002 0304 	and.w	r3, r2, #4
 8007e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	d044      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	d825      	bhi.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e9d 	.word	0x08007e9d
 8007e54:	08007e69 	.word	0x08007e69
 8007e58:	08007e7f 	.word	0x08007e7f
 8007e5c:	08007e9d 	.word	0x08007e9d
 8007e60:	08007e9d 	.word	0x08007e9d
 8007e64:	08007e9d 	.word	0x08007e9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e6c:	3308      	adds	r3, #8
 8007e6e:	2101      	movs	r1, #1
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 fdef 	bl	8009a54 <RCCEx_PLL2_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e7c:	e00f      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e82:	3328      	adds	r3, #40	; 0x28
 8007e84:	2101      	movs	r1, #1
 8007e86:	4618      	mov	r0, r3
 8007e88:	f001 fe96 	bl	8009bb8 <RCCEx_PLL3_Config>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e92:	e004      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e9a:	e000      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10b      	bne.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ea6:	4b6c      	ldr	r3, [pc, #432]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eaa:	f023 0107 	bic.w	r1, r3, #7
 8007eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eb6:	4a68      	ldr	r2, [pc, #416]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6593      	str	r3, [r2, #88]	; 0x58
 8007ebc:	e003      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ec2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	f002 0320 	and.w	r3, r2, #32
 8007ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	d055      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ef2:	d033      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ef8:	d82c      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d02f      	beq.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f04:	d826      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f0a:	d02b      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f10:	d820      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f16:	d012      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f1c:	d81a      	bhi.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d022      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f26:	d115      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 fd8f 	bl	8009a54 <RCCEx_PLL2_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f3c:	e015      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f42:	3328      	adds	r3, #40	; 0x28
 8007f44:	2102      	movs	r1, #2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 fe36 	bl	8009bb8 <RCCEx_PLL3_Config>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f52:	e00a      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f5a:	e006      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f5c:	bf00      	nop
 8007f5e:	e004      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f60:	bf00      	nop
 8007f62:	e002      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f64:	bf00      	nop
 8007f66:	e000      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10b      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f72:	4b39      	ldr	r3, [pc, #228]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f76:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f82:	4a35      	ldr	r2, [pc, #212]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f84:	430b      	orrs	r3, r1
 8007f86:	6553      	str	r3, [r2, #84]	; 0x54
 8007f88:	e003      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	d058      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fbe:	d033      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007fc0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fc4:	d82c      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fca:	d02f      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd0:	d826      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fd6:	d02b      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fdc:	d820      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe2:	d012      	beq.n	800800a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe8:	d81a      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d022      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff2:	d115      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f001 fd29 	bl	8009a54 <RCCEx_PLL2_Config>
 8008002:	4603      	mov	r3, r0
 8008004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008008:	e015      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800e:	3328      	adds	r3, #40	; 0x28
 8008010:	2102      	movs	r1, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fdd0 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800801e:	e00a      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008026:	e006      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008028:	bf00      	nop
 800802a:	e004      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10e      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800803e:	4b06      	ldr	r3, [pc, #24]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800804a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800804e:	4a02      	ldr	r2, [pc, #8]	; (8008058 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008050:	430b      	orrs	r3, r1
 8008052:	6593      	str	r3, [r2, #88]	; 0x58
 8008054:	e006      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008056:	bf00      	nop
 8008058:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008074:	2300      	movs	r3, #0
 8008076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800807a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800807e:	460b      	mov	r3, r1
 8008080:	4313      	orrs	r3, r2
 8008082:	d055      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008088:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800808c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008090:	d033      	beq.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008092:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008096:	d82c      	bhi.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809c:	d02f      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800809e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a2:	d826      	bhi.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080a8:	d02b      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80080aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080ae:	d820      	bhi.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b4:	d012      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80080b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ba:	d81a      	bhi.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d022      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d115      	bne.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080ca:	3308      	adds	r3, #8
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 fcc0 	bl	8009a54 <RCCEx_PLL2_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080da:	e015      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e0:	3328      	adds	r3, #40	; 0x28
 80080e2:	2102      	movs	r1, #2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 fd67 	bl	8009bb8 <RCCEx_PLL3_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080f0:	e00a      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080f8:	e006      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080fa:	bf00      	nop
 80080fc:	e004      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080fe:	bf00      	nop
 8008100:	e002      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008102:	bf00      	nop
 8008104:	e000      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008110:	4ba1      	ldr	r3, [pc, #644]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008114:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800811c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008120:	4a9d      	ldr	r2, [pc, #628]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008122:	430b      	orrs	r3, r1
 8008124:	6593      	str	r3, [r2, #88]	; 0x58
 8008126:	e003      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800812c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f002 0308 	and.w	r3, r2, #8
 800813c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008140:	2300      	movs	r3, #0
 8008142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008146:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800814a:	460b      	mov	r3, r1
 800814c:	4313      	orrs	r3, r2
 800814e:	d01e      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815c:	d10c      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800815e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008162:	3328      	adds	r3, #40	; 0x28
 8008164:	2102      	movs	r1, #2
 8008166:	4618      	mov	r0, r3
 8008168:	f001 fd26 	bl	8009bb8 <RCCEx_PLL3_Config>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008178:	4b87      	ldr	r3, [pc, #540]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800817a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008188:	4a83      	ldr	r2, [pc, #524]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818a:	430b      	orrs	r3, r1
 800818c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800818e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	f002 0310 	and.w	r3, r2, #16
 800819a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800819e:	2300      	movs	r3, #0
 80081a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80081a8:	460b      	mov	r3, r1
 80081aa:	4313      	orrs	r3, r2
 80081ac:	d01e      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ba:	d10c      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c0:	3328      	adds	r3, #40	; 0x28
 80081c2:	2102      	movs	r1, #2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f001 fcf7 	bl	8009bb8 <RCCEx_PLL3_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081d6:	4b70      	ldr	r3, [pc, #448]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081e6:	4a6c      	ldr	r2, [pc, #432]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081e8:	430b      	orrs	r3, r1
 80081ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80081f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008202:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008206:	460b      	mov	r3, r1
 8008208:	4313      	orrs	r3, r2
 800820a:	d03e      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800820c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008210:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008218:	d022      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800821a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800821e:	d81b      	bhi.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008228:	d00b      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800822a:	e015      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008230:	3308      	adds	r3, #8
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f001 fc0d 	bl	8009a54 <RCCEx_PLL2_Config>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008240:	e00f      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008246:	3328      	adds	r3, #40	; 0x28
 8008248:	2102      	movs	r1, #2
 800824a:	4618      	mov	r0, r3
 800824c:	f001 fcb4 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008256:	e004      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800825e:	e000      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800826a:	4b4b      	ldr	r3, [pc, #300]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008276:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800827a:	4a47      	ldr	r2, [pc, #284]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800827c:	430b      	orrs	r3, r1
 800827e:	6593      	str	r3, [r2, #88]	; 0x58
 8008280:	e003      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008296:	67bb      	str	r3, [r7, #120]	; 0x78
 8008298:	2300      	movs	r3, #0
 800829a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800829c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80082a0:	460b      	mov	r3, r1
 80082a2:	4313      	orrs	r3, r2
 80082a4:	d03b      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082b2:	d01f      	beq.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80082b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082b8:	d818      	bhi.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80082ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082be:	d003      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80082c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082c4:	d007      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082c6:	e011      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082c8:	4b33      	ldr	r3, [pc, #204]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	4a32      	ldr	r2, [pc, #200]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082d4:	e00f      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082da:	3328      	adds	r3, #40	; 0x28
 80082dc:	2101      	movs	r1, #1
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fc6a 	bl	8009bb8 <RCCEx_PLL3_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80082ea:	e004      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082f2:	e000      	b.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80082f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10b      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082fe:	4b26      	ldr	r3, [pc, #152]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008302:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800830a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830e:	4a22      	ldr	r2, [pc, #136]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008310:	430b      	orrs	r3, r1
 8008312:	6553      	str	r3, [r2, #84]	; 0x54
 8008314:	e003      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800831a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800831e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008326:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800832a:	673b      	str	r3, [r7, #112]	; 0x70
 800832c:	2300      	movs	r3, #0
 800832e:	677b      	str	r3, [r7, #116]	; 0x74
 8008330:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008334:	460b      	mov	r3, r1
 8008336:	4313      	orrs	r3, r2
 8008338:	d034      	beq.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008348:	d007      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800834a:	e011      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834c:	4b12      	ldr	r3, [pc, #72]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a11      	ldr	r2, [pc, #68]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008358:	e00e      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835e:	3308      	adds	r3, #8
 8008360:	2102      	movs	r1, #2
 8008362:	4618      	mov	r0, r3
 8008364:	f001 fb76 	bl	8009a54 <RCCEx_PLL2_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800836e:	e003      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10d      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008380:	4b05      	ldr	r3, [pc, #20]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008384:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838e:	4a02      	ldr	r2, [pc, #8]	; (8008398 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008390:	430b      	orrs	r3, r1
 8008392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008394:	e006      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008396:	bf00      	nop
 8008398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80083b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083b2:	2300      	movs	r3, #0
 80083b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80083ba:	460b      	mov	r3, r1
 80083bc:	4313      	orrs	r3, r2
 80083be:	d00c      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c4:	3328      	adds	r3, #40	; 0x28
 80083c6:	2102      	movs	r1, #2
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fbf5 	bl	8009bb8 <RCCEx_PLL3_Config>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80083e6:	663b      	str	r3, [r7, #96]	; 0x60
 80083e8:	2300      	movs	r3, #0
 80083ea:	667b      	str	r3, [r7, #100]	; 0x64
 80083ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80083f0:	460b      	mov	r3, r1
 80083f2:	4313      	orrs	r3, r2
 80083f4:	d038      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008402:	d018      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008408:	d811      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800840a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840e:	d014      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008414:	d80b      	bhi.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d011      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800841a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800841e:	d106      	bne.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008420:	4bc3      	ldr	r3, [pc, #780]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	4ac2      	ldr	r2, [pc, #776]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800842a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800842c:	e008      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008434:	e004      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008436:	bf00      	nop
 8008438:	e002      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800843e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10b      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008448:	4bb9      	ldr	r3, [pc, #740]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800844a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008458:	4ab5      	ldr	r2, [pc, #724]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800845a:	430b      	orrs	r3, r1
 800845c:	6553      	str	r3, [r2, #84]	; 0x54
 800845e:	e003      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008474:	65bb      	str	r3, [r7, #88]	; 0x58
 8008476:	2300      	movs	r3, #0
 8008478:	65fb      	str	r3, [r7, #92]	; 0x5c
 800847a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800847e:	460b      	mov	r3, r1
 8008480:	4313      	orrs	r3, r2
 8008482:	d009      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008484:	4baa      	ldr	r3, [pc, #680]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800848c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008492:	4aa7      	ldr	r2, [pc, #668]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008494:	430b      	orrs	r3, r1
 8008496:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80084a4:	653b      	str	r3, [r7, #80]	; 0x50
 80084a6:	2300      	movs	r3, #0
 80084a8:	657b      	str	r3, [r7, #84]	; 0x54
 80084aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80084ae:	460b      	mov	r3, r1
 80084b0:	4313      	orrs	r3, r2
 80084b2:	d00a      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084b4:	4b9e      	ldr	r3, [pc, #632]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80084bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084c4:	4a9a      	ldr	r2, [pc, #616]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084c6:	430b      	orrs	r3, r1
 80084c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80084d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80084d8:	2300      	movs	r3, #0
 80084da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80084e0:	460b      	mov	r3, r1
 80084e2:	4313      	orrs	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084e6:	4b92      	ldr	r3, [pc, #584]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80084ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f4:	4a8e      	ldr	r2, [pc, #568]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084f6:	430b      	orrs	r3, r1
 80084f8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008506:	643b      	str	r3, [r7, #64]	; 0x40
 8008508:	2300      	movs	r3, #0
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
 800850c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008510:	460b      	mov	r3, r1
 8008512:	4313      	orrs	r3, r2
 8008514:	d00e      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008516:	4b86      	ldr	r3, [pc, #536]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	4a85      	ldr	r2, [pc, #532]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800851c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008520:	6113      	str	r3, [r2, #16]
 8008522:	4b83      	ldr	r3, [pc, #524]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008524:	6919      	ldr	r1, [r3, #16]
 8008526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800852a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800852e:	4a80      	ldr	r2, [pc, #512]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008530:	430b      	orrs	r3, r1
 8008532:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008540:	63bb      	str	r3, [r7, #56]	; 0x38
 8008542:	2300      	movs	r3, #0
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008546:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800854a:	460b      	mov	r3, r1
 800854c:	4313      	orrs	r3, r2
 800854e:	d009      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008550:	4b77      	ldr	r3, [pc, #476]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008554:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800855c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800855e:	4a74      	ldr	r2, [pc, #464]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008560:	430b      	orrs	r3, r1
 8008562:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008570:	633b      	str	r3, [r7, #48]	; 0x30
 8008572:	2300      	movs	r3, #0
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
 8008576:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800857a:	460b      	mov	r3, r1
 800857c:	4313      	orrs	r3, r2
 800857e:	d00a      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008580:	4b6b      	ldr	r3, [pc, #428]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008584:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800858c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008590:	4a67      	ldr	r2, [pc, #412]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008592:	430b      	orrs	r3, r1
 8008594:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	2100      	movs	r1, #0
 80085a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80085ac:	460b      	mov	r3, r1
 80085ae:	4313      	orrs	r3, r2
 80085b0:	d011      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b6:	3308      	adds	r3, #8
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fa4a 	bl	8009a54 <RCCEx_PLL2_Config>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	2100      	movs	r1, #0
 80085e0:	6239      	str	r1, [r7, #32]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
 80085e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085ec:	460b      	mov	r3, r1
 80085ee:	4313      	orrs	r3, r2
 80085f0:	d011      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f6:	3308      	adds	r3, #8
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 fa2a 	bl	8009a54 <RCCEx_PLL2_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800860e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	2100      	movs	r1, #0
 8008620:	61b9      	str	r1, [r7, #24]
 8008622:	f003 0304 	and.w	r3, r3, #4
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800862c:	460b      	mov	r3, r1
 800862e:	4313      	orrs	r3, r2
 8008630:	d011      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008636:	3308      	adds	r3, #8
 8008638:	2102      	movs	r1, #2
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fa0a 	bl	8009a54 <RCCEx_PLL2_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	2100      	movs	r1, #0
 8008660:	6139      	str	r1, [r7, #16]
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800866c:	460b      	mov	r3, r1
 800866e:	4313      	orrs	r3, r2
 8008670:	d011      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008676:	3328      	adds	r3, #40	; 0x28
 8008678:	2100      	movs	r1, #0
 800867a:	4618      	mov	r0, r3
 800867c:	f001 fa9c 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	2100      	movs	r1, #0
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086ac:	460b      	mov	r3, r1
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d011      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b6:	3328      	adds	r3, #40	; 0x28
 80086b8:	2101      	movs	r1, #1
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fa7c 	bl	8009bb8 <RCCEx_PLL3_Config>
 80086c0:	4603      	mov	r3, r0
 80086c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80086c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	2100      	movs	r1, #0
 80086e0:	6039      	str	r1, [r7, #0]
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	607b      	str	r3, [r7, #4]
 80086e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086ec:	460b      	mov	r3, r1
 80086ee:	4313      	orrs	r3, r2
 80086f0:	d011      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f6:	3328      	adds	r3, #40	; 0x28
 80086f8:	2102      	movs	r1, #2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 fa5c 	bl	8009bb8 <RCCEx_PLL3_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008716:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	e000      	b.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
}
 8008724:	4618      	mov	r0, r3
 8008726:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800872a:	46bd      	mov	sp, r7
 800872c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008730:	58024400 	.word	0x58024400

08008734 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b090      	sub	sp, #64	; 0x40
 8008738:	af00      	add	r7, sp, #0
 800873a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800873e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008742:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008746:	430b      	orrs	r3, r1
 8008748:	f040 8094 	bne.w	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800874c:	4b9e      	ldr	r3, [pc, #632]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800874e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008750:	f003 0307 	and.w	r3, r3, #7
 8008754:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	2b04      	cmp	r3, #4
 800875a:	f200 8087 	bhi.w	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800875e:	a201      	add	r2, pc, #4	; (adr r2, 8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008764:	08008779 	.word	0x08008779
 8008768:	080087a1 	.word	0x080087a1
 800876c:	080087c9 	.word	0x080087c9
 8008770:	08008865 	.word	0x08008865
 8008774:	080087f1 	.word	0x080087f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008778:	4b93      	ldr	r3, [pc, #588]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008784:	d108      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800878a:	4618      	mov	r0, r3
 800878c:	f001 f810 	bl	80097b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008794:	f000 bd45 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800879c:	f000 bd41 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087a0:	4b89      	ldr	r3, [pc, #548]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ac:	d108      	bne.n	80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ae:	f107 0318 	add.w	r3, r7, #24
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fd54 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087bc:	f000 bd31 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087c4:	f000 bd2d 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087c8:	4b7f      	ldr	r3, [pc, #508]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087d4:	d108      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fe94 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087e4:	f000 bd1d 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087ec:	f000 bd19 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087f0:	4b75      	ldr	r3, [pc, #468]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087fa:	4b73      	ldr	r3, [pc, #460]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b04      	cmp	r3, #4
 8008804:	d10c      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	2b00      	cmp	r3, #0
 800880a:	d109      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800880c:	4b6e      	ldr	r3, [pc, #440]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	08db      	lsrs	r3, r3, #3
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	4a6d      	ldr	r2, [pc, #436]	; (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008818:	fa22 f303 	lsr.w	r3, r2, r3
 800881c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800881e:	e01f      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008820:	4b69      	ldr	r3, [pc, #420]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800882c:	d106      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800882e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008834:	d102      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008836:	4b66      	ldr	r3, [pc, #408]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883a:	e011      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800883c:	4b62      	ldr	r3, [pc, #392]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008848:	d106      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800884a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008850:	d102      	bne.n	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008852:	4b60      	ldr	r3, [pc, #384]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008856:	e003      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800885c:	f000 bce1 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008860:	f000 bcdf 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008864:	4b5c      	ldr	r3, [pc, #368]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008868:	f000 bcdb 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008870:	f000 bcd7 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008878:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800887c:	430b      	orrs	r3, r1
 800887e:	f040 80ad 	bne.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008882:	4b51      	ldr	r3, [pc, #324]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008886:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800888a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008892:	d056      	beq.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800889a:	f200 8090 	bhi.w	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2bc0      	cmp	r3, #192	; 0xc0
 80088a2:	f000 8088 	beq.w	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	2bc0      	cmp	r3, #192	; 0xc0
 80088aa:	f200 8088 	bhi.w	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	2b80      	cmp	r3, #128	; 0x80
 80088b2:	d032      	beq.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	2b80      	cmp	r3, #128	; 0x80
 80088b8:	f200 8081 	bhi.w	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d014      	beq.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088c8:	e079      	b.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088ca:	4b3f      	ldr	r3, [pc, #252]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d6:	d108      	bne.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088dc:	4618      	mov	r0, r3
 80088de:	f000 ff67 	bl	80097b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088e6:	f000 bc9c 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088ee:	f000 bc98 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088f2:	4b35      	ldr	r3, [pc, #212]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088fe:	d108      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008900:	f107 0318 	add.w	r3, r7, #24
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fcab 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800890e:	f000 bc88 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008916:	f000 bc84 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800891a:	4b2b      	ldr	r3, [pc, #172]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008926:	d108      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008928:	f107 030c 	add.w	r3, r7, #12
 800892c:	4618      	mov	r0, r3
 800892e:	f000 fdeb 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008936:	f000 bc74 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800893e:	f000 bc70 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008942:	4b21      	ldr	r3, [pc, #132]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800894a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800894c:	4b1e      	ldr	r3, [pc, #120]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b04      	cmp	r3, #4
 8008956:	d10c      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800895e:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	08db      	lsrs	r3, r3, #3
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	4a18      	ldr	r2, [pc, #96]	; (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800896a:	fa22 f303 	lsr.w	r3, r2, r3
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008970:	e01f      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008972:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800897a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897e:	d106      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008986:	d102      	bne.n	800898e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008988:	4b11      	ldr	r3, [pc, #68]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800898a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800898c:	e011      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800898e:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800899a:	d106      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a2:	d102      	bne.n	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089a4:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a8:	e003      	b.n	80089b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089ae:	f000 bc38 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089b2:	f000 bc36 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089b6:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ba:	f000 bc32 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c2:	f000 bc2e 	b.w	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089c6:	bf00      	nop
 80089c8:	58024400 	.word	0x58024400
 80089cc:	03d09000 	.word	0x03d09000
 80089d0:	003d0900 	.word	0x003d0900
 80089d4:	007a1200 	.word	0x007a1200
 80089d8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80089e4:	430b      	orrs	r3, r1
 80089e6:	f040 809c 	bne.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089ea:	4b9e      	ldr	r3, [pc, #632]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80089f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089fa:	d054      	beq.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a02:	f200 808b 	bhi.w	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a0c:	f000 8083 	beq.w	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a16:	f200 8081 	bhi.w	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a20:	d02f      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a28:	d878      	bhi.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d004      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a36:	d012      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a38:	e070      	b.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a3a:	4b8a      	ldr	r3, [pc, #552]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a46:	d107      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 feaf 	bl	80097b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a56:	e3e4      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a5c:	e3e1      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a5e:	4b81      	ldr	r3, [pc, #516]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a6c:	f107 0318 	add.w	r3, r7, #24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fbf5 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a7a:	e3d2      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a80:	e3cf      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a82:	4b78      	ldr	r3, [pc, #480]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a8e:	d107      	bne.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fd37 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a9e:	e3c0      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aa4:	e3bd      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aa6:	4b6f      	ldr	r3, [pc, #444]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008aae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ab0:	4b6c      	ldr	r3, [pc, #432]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d10c      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ac2:	4b68      	ldr	r3, [pc, #416]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	08db      	lsrs	r3, r3, #3
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	4a66      	ldr	r2, [pc, #408]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ace:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ad4:	e01e      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ad6:	4b63      	ldr	r3, [pc, #396]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae2:	d106      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aea:	d102      	bne.n	8008af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008aec:	4b5f      	ldr	r3, [pc, #380]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af0:	e010      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008af2:	4b5c      	ldr	r3, [pc, #368]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008afa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008afe:	d106      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b06:	d102      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b08:	4b59      	ldr	r3, [pc, #356]	; (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b0c:	e002      	b.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b12:	e386      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b14:	e385      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b16:	4b57      	ldr	r3, [pc, #348]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b1a:	e382      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b20:	e37f      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b26:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	f040 80a7 	bne.w	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b30:	4b4c      	ldr	r3, [pc, #304]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b34:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b40:	d055      	beq.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b48:	f200 8096 	bhi.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b52:	f000 8084 	beq.w	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b5c:	f200 808c 	bhi.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b66:	d030      	beq.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b6e:	f200 8083 	bhi.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d004      	beq.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b7e:	d012      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008b80:	e07a      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b82:	4b38      	ldr	r3, [pc, #224]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b8e:	d107      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 fe0b 	bl	80097b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9e:	e340      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba4:	e33d      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bb2:	d107      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bb4:	f107 0318 	add.w	r3, r7, #24
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fb51 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc2:	e32e      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc8:	e32b      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bca:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bd6:	d107      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bd8:	f107 030c 	add.w	r3, r7, #12
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fc93 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be6:	e31c      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bec:	e319      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bee:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bf6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008bf8:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d10c      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c0a:	4b16      	ldr	r3, [pc, #88]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	08db      	lsrs	r3, r3, #3
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c16:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c1c:	e01e      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c1e:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c2a:	d106      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c32:	d102      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c34:	4b0d      	ldr	r3, [pc, #52]	; (8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c38:	e010      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c46:	d106      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c4e:	d102      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c54:	e002      	b.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c5a:	e2e2      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c5c:	e2e1      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c62:	e2de      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c64:	58024400 	.word	0x58024400
 8008c68:	03d09000 	.word	0x03d09000
 8008c6c:	003d0900 	.word	0x003d0900
 8008c70:	007a1200 	.word	0x007a1200
 8008c74:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7c:	e2d1      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c82:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c86:	430b      	orrs	r3, r1
 8008c88:	f040 809c 	bne.w	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008c8c:	4b93      	ldr	r3, [pc, #588]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008c94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c9c:	d054      	beq.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ca4:	f200 808b 	bhi.w	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cae:	f000 8083 	beq.w	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cb8:	f200 8081 	bhi.w	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc2:	d02f      	beq.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cca:	d878      	bhi.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cd8:	d012      	beq.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008cda:	e070      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cdc:	4b7f      	ldr	r3, [pc, #508]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ce8:	d107      	bne.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fd5e 	bl	80097b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf8:	e293      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cfe:	e290      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d00:	4b76      	ldr	r3, [pc, #472]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d0c:	d107      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d0e:	f107 0318 	add.w	r3, r7, #24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 faa4 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1c:	e281      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d22:	e27e      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d24:	4b6d      	ldr	r3, [pc, #436]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d30:	d107      	bne.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d32:	f107 030c 	add.w	r3, r7, #12
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 fbe6 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d40:	e26f      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d46:	e26c      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d48:	4b64      	ldr	r3, [pc, #400]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d52:	4b62      	ldr	r3, [pc, #392]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0304 	and.w	r3, r3, #4
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	d10c      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d109      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d64:	4b5d      	ldr	r3, [pc, #372]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	08db      	lsrs	r3, r3, #3
 8008d6a:	f003 0303 	and.w	r3, r3, #3
 8008d6e:	4a5c      	ldr	r2, [pc, #368]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d70:	fa22 f303 	lsr.w	r3, r2, r3
 8008d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d76:	e01e      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d78:	4b58      	ldr	r3, [pc, #352]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d84:	d106      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d8c:	d102      	bne.n	8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d8e:	4b55      	ldr	r3, [pc, #340]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d92:	e010      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d94:	4b51      	ldr	r3, [pc, #324]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da0:	d106      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008da8:	d102      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008daa:	4b4f      	ldr	r3, [pc, #316]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dae:	e002      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008db4:	e235      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008db6:	e234      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008db8:	4b4c      	ldr	r3, [pc, #304]	; (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dbc:	e231      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dc2:	e22e      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	f040 808f 	bne.w	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008dd2:	4b42      	ldr	r3, [pc, #264]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008dda:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008de2:	d06b      	beq.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dea:	d874      	bhi.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008df2:	d056      	beq.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008dfa:	d86c      	bhi.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e02:	d03b      	beq.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e0a:	d864      	bhi.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e12:	d021      	beq.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e1a:	d85c      	bhi.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d004      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e28:	d004      	beq.n	8008e34 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008e2a:	e054      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e2c:	f7fe fa4c 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 8008e30:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e32:	e1f6      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e34:	4b29      	ldr	r3, [pc, #164]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e40:	d107      	bne.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e42:	f107 0318 	add.w	r3, r7, #24
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fa0a 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e50:	e1e7      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e56:	e1e4      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e58:	4b20      	ldr	r3, [pc, #128]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e64:	d107      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e66:	f107 030c 	add.w	r3, r7, #12
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fb4c 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e74:	e1d5      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e7a:	e1d2      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e7c:	4b17      	ldr	r3, [pc, #92]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d109      	bne.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e88:	4b14      	ldr	r3, [pc, #80]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	08db      	lsrs	r3, r3, #3
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	4a13      	ldr	r2, [pc, #76]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008e94:	fa22 f303 	lsr.w	r3, r2, r3
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e9a:	e1c2      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ea0:	e1bf      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ea2:	4b0e      	ldr	r3, [pc, #56]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eae:	d102      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008eb0:	4b0c      	ldr	r3, [pc, #48]	; (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eb4:	e1b5      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eba:	e1b2      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ebc:	4b07      	ldr	r3, [pc, #28]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec8:	d102      	bne.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008eca:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ece:	e1a8      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed4:	e1a5      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eda:	e1a2      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008edc:	58024400 	.word	0x58024400
 8008ee0:	03d09000 	.word	0x03d09000
 8008ee4:	003d0900 	.word	0x003d0900
 8008ee8:	007a1200 	.word	0x007a1200
 8008eec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	d173      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008efc:	4b9c      	ldr	r3, [pc, #624]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f04:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f0c:	d02f      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f14:	d863      	bhi.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f22:	d012      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008f24:	e05b      	b.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f26:	4b92      	ldr	r3, [pc, #584]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f32:	d107      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f34:	f107 0318 	add.w	r3, r7, #24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 f991 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f42:	e16e      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f48:	e16b      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f4a:	4b89      	ldr	r3, [pc, #548]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f56:	d107      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f58:	f107 030c 	add.w	r3, r7, #12
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fad3 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f66:	e15c      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f6c:	e159      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f6e:	4b80      	ldr	r3, [pc, #512]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f78:	4b7d      	ldr	r3, [pc, #500]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 0304 	and.w	r3, r3, #4
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d10c      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f8a:	4b79      	ldr	r3, [pc, #484]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	08db      	lsrs	r3, r3, #3
 8008f90:	f003 0303 	and.w	r3, r3, #3
 8008f94:	4a77      	ldr	r2, [pc, #476]	; (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f9c:	e01e      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f9e:	4b74      	ldr	r3, [pc, #464]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008faa:	d106      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fb2:	d102      	bne.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fb4:	4b70      	ldr	r3, [pc, #448]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb8:	e010      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fba:	4b6d      	ldr	r3, [pc, #436]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fc6:	d106      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fce:	d102      	bne.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fd0:	4b6a      	ldr	r3, [pc, #424]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fd4:	e002      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fda:	e122      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008fdc:	e121      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe2:	e11e      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fe8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008fec:	430b      	orrs	r3, r1
 8008fee:	d133      	bne.n	8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008ff0:	4b5f      	ldr	r3, [pc, #380]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ff8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009006:	d012      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009008:	e023      	b.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800900a:	4b59      	ldr	r3, [pc, #356]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009016:	d107      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fbc7 	bl	80097b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009026:	e0fc      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800902c:	e0f9      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800902e:	4b50      	ldr	r3, [pc, #320]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800903a:	d107      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800903c:	f107 0318 	add.w	r3, r7, #24
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f90d 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800904a:	e0ea      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009050:	e0e7      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009056:	e0e4      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800905c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009060:	430b      	orrs	r3, r1
 8009062:	f040 808d 	bne.w	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009066:	4b42      	ldr	r3, [pc, #264]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800906e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009076:	d06b      	beq.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800907e:	d874      	bhi.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009086:	d056      	beq.n	8009136 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800908e:	d86c      	bhi.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009092:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009096:	d03b      	beq.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800909e:	d864      	bhi.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a6:	d021      	beq.n	80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ae:	d85c      	bhi.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090bc:	d004      	beq.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80090be:	e054      	b.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090c0:	f000 f8b8 	bl	8009234 <HAL_RCCEx_GetD3PCLK1Freq>
 80090c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090c6:	e0ac      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090c8:	4b29      	ldr	r3, [pc, #164]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090d4:	d107      	bne.n	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d6:	f107 0318 	add.w	r3, r7, #24
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f8c0 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090e4:	e09d      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090e6:	2300      	movs	r3, #0
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090ea:	e09a      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090ec:	4b20      	ldr	r3, [pc, #128]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090f8:	d107      	bne.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090fa:	f107 030c 	add.w	r3, r7, #12
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fa02 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009108:	e08b      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800910a:	2300      	movs	r3, #0
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800910e:	e088      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009110:	4b17      	ldr	r3, [pc, #92]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0304 	and.w	r3, r3, #4
 8009118:	2b04      	cmp	r3, #4
 800911a:	d109      	bne.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800911c:	4b14      	ldr	r3, [pc, #80]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	08db      	lsrs	r3, r3, #3
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	4a13      	ldr	r2, [pc, #76]	; (8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009128:	fa22 f303 	lsr.w	r3, r2, r3
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800912e:	e078      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009134:	e075      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009136:	4b0e      	ldr	r3, [pc, #56]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	d102      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009148:	e06b      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800914a:	2300      	movs	r3, #0
 800914c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800914e:	e068      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800915c:	d102      	bne.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800915e:	4b07      	ldr	r3, [pc, #28]	; (800917c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009162:	e05e      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009168:	e05b      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800916e:	e058      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009170:	58024400 	.word	0x58024400
 8009174:	03d09000 	.word	0x03d09000
 8009178:	003d0900 	.word	0x003d0900
 800917c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009184:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009188:	430b      	orrs	r3, r1
 800918a:	d148      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800918c:	4b27      	ldr	r3, [pc, #156]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800918e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009190:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009194:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800919c:	d02a      	beq.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a4:	d838      	bhi.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091b2:	d00d      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80091b4:	e030      	b.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091b6:	4b1d      	ldr	r3, [pc, #116]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091c2:	d102      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80091c4:	4b1a      	ldr	r3, [pc, #104]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c8:	e02b      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ce:	e028      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091d0:	4b16      	ldr	r3, [pc, #88]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091dc:	d107      	bne.n	80091ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fae4 	bl	80097b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091ec:	e019      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f2:	e016      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091f4:	4b0d      	ldr	r3, [pc, #52]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009200:	d107      	bne.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009202:	f107 0318 	add.w	r3, r7, #24
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f82a 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009210:	e007      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009212:	2300      	movs	r3, #0
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009216:	e004      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800921c:	e001      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009224:	4618      	mov	r0, r3
 8009226:	3740      	adds	r7, #64	; 0x40
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	58024400 	.word	0x58024400
 8009230:	007a1200 	.word	0x007a1200

08009234 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009238:	f7fe f816 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 800923c:	4602      	mov	r2, r0
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	091b      	lsrs	r3, r3, #4
 8009244:	f003 0307 	and.w	r3, r3, #7
 8009248:	4904      	ldr	r1, [pc, #16]	; (800925c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800924a:	5ccb      	ldrb	r3, [r1, r3]
 800924c:	f003 031f 	and.w	r3, r3, #31
 8009250:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009254:	4618      	mov	r0, r3
 8009256:	bd80      	pop	{r7, pc}
 8009258:	58024400 	.word	0x58024400
 800925c:	0800da84 	.word	0x0800da84

08009260 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009260:	b480      	push	{r7}
 8009262:	b089      	sub	sp, #36	; 0x24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009268:	4ba1      	ldr	r3, [pc, #644]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800926a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009272:	4b9f      	ldr	r3, [pc, #636]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009276:	0b1b      	lsrs	r3, r3, #12
 8009278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800927c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800927e:	4b9c      	ldr	r3, [pc, #624]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009282:	091b      	lsrs	r3, r3, #4
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800928a:	4b99      	ldr	r3, [pc, #612]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800928c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928e:	08db      	lsrs	r3, r3, #3
 8009290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	fb02 f303 	mul.w	r3, r2, r3
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 8111 	beq.w	80094d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	f000 8083 	beq.w	80093bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	f200 80a1 	bhi.w	8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d056      	beq.n	8009378 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092ca:	e099      	b.n	8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092cc:	4b88      	ldr	r3, [pc, #544]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0320 	and.w	r3, r3, #32
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d02d      	beq.n	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092d8:	4b85      	ldr	r3, [pc, #532]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	08db      	lsrs	r3, r3, #3
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	4a84      	ldr	r2, [pc, #528]	; (80094f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092e4:	fa22 f303 	lsr.w	r3, r2, r3
 80092e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	ee07 3a90 	vmov	s15, r3
 80092f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	ee07 3a90 	vmov	s15, r3
 80092fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009302:	4b7b      	ldr	r3, [pc, #492]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009312:	ed97 6a03 	vldr	s12, [r7, #12]
 8009316:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800931a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800931e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800932e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009332:	e087      	b.n	8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009346:	4b6a      	ldr	r3, [pc, #424]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800934e:	ee07 3a90 	vmov	s15, r3
 8009352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009356:	ed97 6a03 	vldr	s12, [r7, #12]
 800935a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800935e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800936a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800936e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009376:	e065      	b.n	8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009382:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938a:	4b59      	ldr	r3, [pc, #356]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009392:	ee07 3a90 	vmov	s15, r3
 8009396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939a:	ed97 6a03 	vldr	s12, [r7, #12]
 800939e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ba:	e043      	b.n	8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ce:	4b48      	ldr	r3, [pc, #288]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093de:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093fe:	e021      	b.n	8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800940e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009412:	4b37      	ldr	r3, [pc, #220]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009422:	ed97 6a03 	vldr	s12, [r7, #12]
 8009426:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800942a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009442:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009444:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009448:	0a5b      	lsrs	r3, r3, #9
 800944a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800945a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800945e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800946a:	ee17 2a90 	vmov	r2, s15
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009472:	4b1f      	ldr	r3, [pc, #124]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009476:	0c1b      	lsrs	r3, r3, #16
 8009478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947c:	ee07 3a90 	vmov	s15, r3
 8009480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009484:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009488:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009498:	ee17 2a90 	vmov	r2, s15
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094a0:	4b13      	ldr	r3, [pc, #76]	; (80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a4:	0e1b      	lsrs	r3, r3, #24
 80094a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80094be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c6:	ee17 2a90 	vmov	r2, s15
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094ce:	e008      	b.n	80094e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	609a      	str	r2, [r3, #8]
}
 80094e2:	bf00      	nop
 80094e4:	3724      	adds	r7, #36	; 0x24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	58024400 	.word	0x58024400
 80094f4:	03d09000 	.word	0x03d09000
 80094f8:	46000000 	.word	0x46000000
 80094fc:	4c742400 	.word	0x4c742400
 8009500:	4a742400 	.word	0x4a742400
 8009504:	4af42400 	.word	0x4af42400

08009508 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009508:	b480      	push	{r7}
 800950a:	b089      	sub	sp, #36	; 0x24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009510:	4ba1      	ldr	r3, [pc, #644]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009514:	f003 0303 	and.w	r3, r3, #3
 8009518:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800951a:	4b9f      	ldr	r3, [pc, #636]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	0d1b      	lsrs	r3, r3, #20
 8009520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009524:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009526:	4b9c      	ldr	r3, [pc, #624]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952a:	0a1b      	lsrs	r3, r3, #8
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009532:	4b99      	ldr	r3, [pc, #612]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009536:	08db      	lsrs	r3, r3, #3
 8009538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	fb02 f303 	mul.w	r3, r2, r3
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 8111 	beq.w	8009778 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	2b02      	cmp	r3, #2
 800955a:	f000 8083 	beq.w	8009664 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b02      	cmp	r3, #2
 8009562:	f200 80a1 	bhi.w	80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d003      	beq.n	8009574 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d056      	beq.n	8009620 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009572:	e099      	b.n	80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009574:	4b88      	ldr	r3, [pc, #544]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0320 	and.w	r3, r3, #32
 800957c:	2b00      	cmp	r3, #0
 800957e:	d02d      	beq.n	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009580:	4b85      	ldr	r3, [pc, #532]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	08db      	lsrs	r3, r3, #3
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	4a84      	ldr	r2, [pc, #528]	; (800979c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800958c:	fa22 f303 	lsr.w	r3, r2, r3
 8009590:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	ee07 3a90 	vmov	s15, r3
 8009598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	ee07 3a90 	vmov	s15, r3
 80095a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095aa:	4b7b      	ldr	r3, [pc, #492]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80095be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095da:	e087      	b.n	80096ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80097a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ee:	4b6a      	ldr	r3, [pc, #424]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f6:	ee07 3a90 	vmov	s15, r3
 80095fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009602:	eddf 5a67 	vldr	s11, [pc, #412]	; 80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800960a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800961a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800961e:	e065      	b.n	80096ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800962a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800962e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009632:	4b59      	ldr	r3, [pc, #356]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800963a:	ee07 3a90 	vmov	s15, r3
 800963e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009642:	ed97 6a03 	vldr	s12, [r7, #12]
 8009646:	eddf 5a56 	vldr	s11, [pc, #344]	; 80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800964a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800965a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009662:	e043      	b.n	80096ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009676:	4b48      	ldr	r3, [pc, #288]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009686:	ed97 6a03 	vldr	s12, [r7, #12]
 800968a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800968e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800969a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096a6:	e021      	b.n	80096ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80097a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ba:	4b37      	ldr	r3, [pc, #220]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80096ec:	4b2a      	ldr	r3, [pc, #168]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f0:	0a5b      	lsrs	r3, r3, #9
 80096f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009706:	edd7 6a07 	vldr	s13, [r7, #28]
 800970a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800970e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009712:	ee17 2a90 	vmov	r2, s15
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800971a:	4b1f      	ldr	r3, [pc, #124]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009724:	ee07 3a90 	vmov	s15, r3
 8009728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009734:	edd7 6a07 	vldr	s13, [r7, #28]
 8009738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800973c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009740:	ee17 2a90 	vmov	r2, s15
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009748:	4b13      	ldr	r3, [pc, #76]	; (8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800974a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974c:	0e1b      	lsrs	r3, r3, #24
 800974e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800975a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800975e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009762:	edd7 6a07 	vldr	s13, [r7, #28]
 8009766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800976a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800976e:	ee17 2a90 	vmov	r2, s15
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009776:	e008      	b.n	800978a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	609a      	str	r2, [r3, #8]
}
 800978a:	bf00      	nop
 800978c:	3724      	adds	r7, #36	; 0x24
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	58024400 	.word	0x58024400
 800979c:	03d09000 	.word	0x03d09000
 80097a0:	46000000 	.word	0x46000000
 80097a4:	4c742400 	.word	0x4c742400
 80097a8:	4a742400 	.word	0x4a742400
 80097ac:	4af42400 	.word	0x4af42400

080097b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b089      	sub	sp, #36	; 0x24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097b8:	4ba0      	ldr	r3, [pc, #640]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097bc:	f003 0303 	and.w	r3, r3, #3
 80097c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097c2:	4b9e      	ldr	r3, [pc, #632]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c6:	091b      	lsrs	r3, r3, #4
 80097c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097ce:	4b9b      	ldr	r3, [pc, #620]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097d8:	4b98      	ldr	r3, [pc, #608]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097dc:	08db      	lsrs	r3, r3, #3
 80097de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	fb02 f303 	mul.w	r3, r2, r3
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 8111 	beq.w	8009a1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	f000 8083 	beq.w	800990a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	2b02      	cmp	r3, #2
 8009808:	f200 80a1 	bhi.w	800994e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d056      	beq.n	80098c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009818:	e099      	b.n	800994e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800981a:	4b88      	ldr	r3, [pc, #544]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0320 	and.w	r3, r3, #32
 8009822:	2b00      	cmp	r3, #0
 8009824:	d02d      	beq.n	8009882 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009826:	4b85      	ldr	r3, [pc, #532]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	08db      	lsrs	r3, r3, #3
 800982c:	f003 0303 	and.w	r3, r3, #3
 8009830:	4a83      	ldr	r2, [pc, #524]	; (8009a40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009832:	fa22 f303 	lsr.w	r3, r2, r3
 8009836:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	ee07 3a90 	vmov	s15, r3
 800983e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009850:	4b7a      	ldr	r3, [pc, #488]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009860:	ed97 6a03 	vldr	s12, [r7, #12]
 8009864:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800986c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009880:	e087      	b.n	8009992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	ee07 3a90 	vmov	s15, r3
 8009888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800988c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009894:	4b69      	ldr	r3, [pc, #420]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989c:	ee07 3a90 	vmov	s15, r3
 80098a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80098a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098c4:	e065      	b.n	8009992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	ee07 3a90 	vmov	s15, r3
 80098cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098d8:	4b58      	ldr	r3, [pc, #352]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e0:	ee07 3a90 	vmov	s15, r3
 80098e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009904:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009908:	e043      	b.n	8009992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	ee07 3a90 	vmov	s15, r3
 8009910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009914:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991c:	4b47      	ldr	r3, [pc, #284]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800991e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009924:	ee07 3a90 	vmov	s15, r3
 8009928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009930:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009948:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800994c:	e021      	b.n	8009992 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	ee07 3a90 	vmov	s15, r3
 8009954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009958:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800995c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009960:	4b36      	ldr	r3, [pc, #216]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009968:	ee07 3a90 	vmov	s15, r3
 800996c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009970:	ed97 6a03 	vldr	s12, [r7, #12]
 8009974:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009990:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009992:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009996:	0a5b      	lsrs	r3, r3, #9
 8009998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999c:	ee07 3a90 	vmov	s15, r3
 80099a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80099b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099b8:	ee17 2a90 	vmov	r2, s15
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099c0:	4b1e      	ldr	r3, [pc, #120]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099c4:	0c1b      	lsrs	r3, r3, #16
 80099c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ca:	ee07 3a90 	vmov	s15, r3
 80099ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099da:	edd7 6a07 	vldr	s13, [r7, #28]
 80099de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099e6:	ee17 2a90 	vmov	r2, s15
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f2:	0e1b      	lsrs	r3, r3, #24
 80099f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f8:	ee07 3a90 	vmov	s15, r3
 80099fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a14:	ee17 2a90 	vmov	r2, s15
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a1c:	e008      	b.n	8009a30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	609a      	str	r2, [r3, #8]
}
 8009a30:	bf00      	nop
 8009a32:	3724      	adds	r7, #36	; 0x24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	03d09000 	.word	0x03d09000
 8009a44:	46000000 	.word	0x46000000
 8009a48:	4c742400 	.word	0x4c742400
 8009a4c:	4a742400 	.word	0x4a742400
 8009a50:	4af42400 	.word	0x4af42400

08009a54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a62:	4b53      	ldr	r3, [pc, #332]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b03      	cmp	r3, #3
 8009a6c:	d101      	bne.n	8009a72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e099      	b.n	8009ba6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a72:	4b4f      	ldr	r3, [pc, #316]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a4e      	ldr	r2, [pc, #312]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a7e:	f7f7 ff83 	bl	8001988 <HAL_GetTick>
 8009a82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a84:	e008      	b.n	8009a98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a86:	f7f7 ff7f 	bl	8001988 <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d901      	bls.n	8009a98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e086      	b.n	8009ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a98:	4b45      	ldr	r3, [pc, #276]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f0      	bne.n	8009a86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009aa4:	4b42      	ldr	r3, [pc, #264]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	031b      	lsls	r3, r3, #12
 8009ab2:	493f      	ldr	r1, [pc, #252]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	025b      	lsls	r3, r3, #9
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	041b      	lsls	r3, r3, #16
 8009ad6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ada:	431a      	orrs	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	061b      	lsls	r3, r3, #24
 8009ae4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ae8:	4931      	ldr	r1, [pc, #196]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009aee:	4b30      	ldr	r3, [pc, #192]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	492d      	ldr	r1, [pc, #180]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b00:	4b2b      	ldr	r3, [pc, #172]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	f023 0220 	bic.w	r2, r3, #32
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	4928      	ldr	r1, [pc, #160]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b12:	4b27      	ldr	r3, [pc, #156]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	4a26      	ldr	r2, [pc, #152]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b18:	f023 0310 	bic.w	r3, r3, #16
 8009b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b1e:	4b24      	ldr	r3, [pc, #144]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b22:	4b24      	ldr	r3, [pc, #144]	; (8009bb4 <RCCEx_PLL2_Config+0x160>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	69d2      	ldr	r2, [r2, #28]
 8009b2a:	00d2      	lsls	r2, r2, #3
 8009b2c:	4920      	ldr	r1, [pc, #128]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b32:	4b1f      	ldr	r3, [pc, #124]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b36:	4a1e      	ldr	r2, [pc, #120]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	f043 0310 	orr.w	r3, r3, #16
 8009b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d106      	bne.n	8009b52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b44:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b48:	4a19      	ldr	r2, [pc, #100]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b50:	e00f      	b.n	8009b72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d106      	bne.n	8009b66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b58:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	4a14      	ldr	r2, [pc, #80]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b64:	e005      	b.n	8009b72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b66:	4b12      	ldr	r3, [pc, #72]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	4a11      	ldr	r2, [pc, #68]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b72:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a0e      	ldr	r2, [pc, #56]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b7e:	f7f7 ff03 	bl	8001988 <HAL_GetTick>
 8009b82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b84:	e008      	b.n	8009b98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b86:	f7f7 feff 	bl	8001988 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e006      	b.n	8009ba6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <RCCEx_PLL2_Config+0x15c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0f0      	beq.n	8009b86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	58024400 	.word	0x58024400
 8009bb4:	ffff0007 	.word	0xffff0007

08009bb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bc6:	4b53      	ldr	r3, [pc, #332]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	f003 0303 	and.w	r3, r3, #3
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d101      	bne.n	8009bd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e099      	b.n	8009d0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bd6:	4b4f      	ldr	r3, [pc, #316]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a4e      	ldr	r2, [pc, #312]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009be2:	f7f7 fed1 	bl	8001988 <HAL_GetTick>
 8009be6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009be8:	e008      	b.n	8009bfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bea:	f7f7 fecd 	bl	8001988 <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d901      	bls.n	8009bfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e086      	b.n	8009d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bfc:	4b45      	ldr	r3, [pc, #276]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1f0      	bne.n	8009bea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c08:	4b42      	ldr	r3, [pc, #264]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	051b      	lsls	r3, r3, #20
 8009c16:	493f      	ldr	r1, [pc, #252]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	628b      	str	r3, [r1, #40]	; 0x28
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	3b01      	subs	r3, #1
 8009c22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	025b      	lsls	r3, r3, #9
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	431a      	orrs	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	061b      	lsls	r3, r3, #24
 8009c48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c4c:	4931      	ldr	r1, [pc, #196]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c52:	4b30      	ldr	r3, [pc, #192]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	492d      	ldr	r1, [pc, #180]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c64:	4b2b      	ldr	r3, [pc, #172]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	4928      	ldr	r1, [pc, #160]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c76:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	4a26      	ldr	r2, [pc, #152]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c82:	4b24      	ldr	r3, [pc, #144]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c86:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <RCCEx_PLL3_Config+0x160>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	69d2      	ldr	r2, [r2, #28]
 8009c8e:	00d2      	lsls	r2, r2, #3
 8009c90:	4920      	ldr	r1, [pc, #128]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c96:	4b1f      	ldr	r3, [pc, #124]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	4a1e      	ldr	r2, [pc, #120]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d106      	bne.n	8009cb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ca8:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cac:	4a19      	ldr	r2, [pc, #100]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cb4:	e00f      	b.n	8009cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d106      	bne.n	8009cca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009cbc:	4b15      	ldr	r3, [pc, #84]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a14      	ldr	r2, [pc, #80]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cc8:	e005      	b.n	8009cd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cca:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cce:	4a11      	ldr	r2, [pc, #68]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a0e      	ldr	r2, [pc, #56]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce2:	f7f7 fe51 	bl	8001988 <HAL_GetTick>
 8009ce6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ce8:	e008      	b.n	8009cfc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cea:	f7f7 fe4d 	bl	8001988 <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d901      	bls.n	8009cfc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e006      	b.n	8009d0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cfc:	4b05      	ldr	r3, [pc, #20]	; (8009d14 <RCCEx_PLL3_Config+0x15c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d0f0      	beq.n	8009cea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	58024400 	.word	0x58024400
 8009d18:	ffff0007 	.word	0xffff0007

08009d1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d071      	beq.n	8009e12 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d106      	bne.n	8009d48 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7f7 fb94 	bl	8001470 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f003 0310 	and.w	r3, r3, #16
 8009d5a:	2b10      	cmp	r3, #16
 8009d5c:	d050      	beq.n	8009e00 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	22ca      	movs	r2, #202	; 0xca
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2253      	movs	r2, #83	; 0x53
 8009d6c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f9a0 	bl	800a0b4 <RTC_EnterInitMode>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009d78:	7bfb      	ldrb	r3, [r7, #15]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d124      	bne.n	8009dc8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6899      	ldr	r1, [r3, #8]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	4b24      	ldr	r3, [pc, #144]	; (8009e1c <HAL_RTC_Init+0x100>)
 8009d8a:	400b      	ands	r3, r1
 8009d8c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6899      	ldr	r1, [r3, #8]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	699b      	ldr	r3, [r3, #24]
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	430a      	orrs	r2, r1
 8009daa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	0419      	lsls	r1, r3, #16
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f9ac 	bl	800a11c <RTC_ExitInitMode>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d113      	bne.n	8009df6 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f022 0203 	bic.w	r2, r2, #3
 8009ddc:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	69da      	ldr	r2, [r3, #28]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	431a      	orrs	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	430a      	orrs	r2, r1
 8009df4:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	22ff      	movs	r2, #255	; 0xff
 8009dfc:	625a      	str	r2, [r3, #36]	; 0x24
 8009dfe:	e001      	b.n	8009e04 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d103      	bne.n	8009e12 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	ff8fffbf 	.word	0xff8fffbf

08009e20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e20:	b590      	push	{r4, r7, lr}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_RTC_SetTime+0x1a>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e089      	b.n	8009f4e <HAL_RTC_SetTime+0x12e>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2202      	movs	r2, #2
 8009e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	22ca      	movs	r2, #202	; 0xca
 8009e50:	625a      	str	r2, [r3, #36]	; 0x24
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2253      	movs	r2, #83	; 0x53
 8009e58:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 f92a 	bl	800a0b4 <RTC_EnterInitMode>
 8009e60:	4603      	mov	r3, r0
 8009e62:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009e64:	7cfb      	ldrb	r3, [r7, #19]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d161      	bne.n	8009f2e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d126      	bne.n	8009ebe <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d102      	bne.n	8009e84 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 f985 	bl	800a198 <RTC_ByteToBcd2>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 f97e 	bl	800a198 <RTC_ByteToBcd2>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ea0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	789b      	ldrb	r3, [r3, #2]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 f976 	bl	800a198 <RTC_ByteToBcd2>
 8009eac:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009eae:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	78db      	ldrb	r3, [r3, #3]
 8009eb6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	e018      	b.n	8009ef0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ede:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ee4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	78db      	ldrb	r3, [r3, #3]
 8009eea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	6979      	ldr	r1, [r7, #20]
 8009ef6:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <HAL_RTC_SetTime+0x138>)
 8009ef8:	400b      	ands	r3, r1
 8009efa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6899      	ldr	r1, [r3, #8]
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	68da      	ldr	r2, [r3, #12]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f8f9 	bl	800a11c <RTC_ExitInitMode>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	22ff      	movs	r2, #255	; 0xff
 8009f34:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009f36:	7cfb      	ldrb	r3, [r7, #19]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d103      	bne.n	8009f44 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009f4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd90      	pop	{r4, r7, pc}
 8009f56:	bf00      	nop
 8009f58:	007f7f7f 	.word	0x007f7f7f

08009f5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f5c:	b590      	push	{r4, r7, lr}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d101      	bne.n	8009f76 <HAL_RTC_SetDate+0x1a>
 8009f72:	2302      	movs	r3, #2
 8009f74:	e073      	b.n	800a05e <HAL_RTC_SetDate+0x102>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2202      	movs	r2, #2
 8009f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10e      	bne.n	8009faa <HAL_RTC_SetDate+0x4e>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	785b      	ldrb	r3, [r3, #1]
 8009f90:	f003 0310 	and.w	r3, r3, #16
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d008      	beq.n	8009faa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	785b      	ldrb	r3, [r3, #1]
 8009f9c:	f023 0310 	bic.w	r3, r3, #16
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	330a      	adds	r3, #10
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d11c      	bne.n	8009fea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	78db      	ldrb	r3, [r3, #3]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 f8ef 	bl	800a198 <RTC_ByteToBcd2>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	785b      	ldrb	r3, [r3, #1]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f8e8 	bl	800a198 <RTC_ByteToBcd2>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fcc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	789b      	ldrb	r3, [r3, #2]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 f8e0 	bl	800a198 <RTC_ByteToBcd2>
 8009fd8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009fda:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	617b      	str	r3, [r7, #20]
 8009fe8:	e00e      	b.n	800a008 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	78db      	ldrb	r3, [r3, #3]
 8009fee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ff6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ffc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a004:	4313      	orrs	r3, r2
 800a006:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	22ca      	movs	r2, #202	; 0xca
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2253      	movs	r2, #83	; 0x53
 800a016:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 f84b 	bl	800a0b4 <RTC_EnterInitMode>
 800a01e:	4603      	mov	r3, r0
 800a020:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a022:	7cfb      	ldrb	r3, [r7, #19]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	6979      	ldr	r1, [r7, #20]
 800a02e:	4b0e      	ldr	r3, [pc, #56]	; (800a068 <HAL_RTC_SetDate+0x10c>)
 800a030:	400b      	ands	r3, r1
 800a032:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 f871 	bl	800a11c <RTC_ExitInitMode>
 800a03a:	4603      	mov	r3, r0
 800a03c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	22ff      	movs	r2, #255	; 0xff
 800a044:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a046:	7cfb      	ldrb	r3, [r7, #19]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d103      	bne.n	800a054 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800a05c:	7cfb      	ldrb	r3, [r7, #19]


}
 800a05e:	4618      	mov	r0, r3
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	bd90      	pop	{r4, r7, pc}
 800a066:	bf00      	nop
 800a068:	00ffff3f 	.word	0x00ffff3f

0800a06c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a0d      	ldr	r2, [pc, #52]	; (800a0b0 <HAL_RTC_WaitForSynchro+0x44>)
 800a07a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a07c:	f7f7 fc84 	bl	8001988 <HAL_GetTick>
 800a080:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a082:	e009      	b.n	800a098 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a084:	f7f7 fc80 	bl	8001988 <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a092:	d901      	bls.n	800a098 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a094:	2303      	movs	r3, #3
 800a096:	e007      	b.n	800a0a8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f003 0320 	and.w	r3, r3, #32
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0ee      	beq.n	800a084 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	0003ff5f 	.word	0x0003ff5f

0800a0b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d120      	bne.n	800a110 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a0d8:	f7f7 fc56 	bl	8001988 <HAL_GetTick>
 800a0dc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a0de:	e00d      	b.n	800a0fc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a0e0:	f7f7 fc52 	bl	8001988 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0ee:	d905      	bls.n	800a0fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <RTC_EnterInitMode+0x5c>
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d1e7      	bne.n	800a0e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a110:	7bfb      	ldrb	r3, [r7, #15]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a128:	4b1a      	ldr	r3, [pc, #104]	; (800a194 <RTC_ExitInitMode+0x78>)
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	4a19      	ldr	r2, [pc, #100]	; (800a194 <RTC_ExitInitMode+0x78>)
 800a12e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a132:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a134:	4b17      	ldr	r3, [pc, #92]	; (800a194 <RTC_ExitInitMode+0x78>)
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f003 0320 	and.w	r3, r3, #32
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10c      	bne.n	800a15a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7ff ff93 	bl	800a06c <HAL_RTC_WaitForSynchro>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d01e      	beq.n	800a18a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2203      	movs	r2, #3
 800a150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a154:	2303      	movs	r3, #3
 800a156:	73fb      	strb	r3, [r7, #15]
 800a158:	e017      	b.n	800a18a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a15a:	4b0e      	ldr	r3, [pc, #56]	; (800a194 <RTC_ExitInitMode+0x78>)
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	4a0d      	ldr	r2, [pc, #52]	; (800a194 <RTC_ExitInitMode+0x78>)
 800a160:	f023 0320 	bic.w	r3, r3, #32
 800a164:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff ff80 	bl	800a06c <HAL_RTC_WaitForSynchro>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d005      	beq.n	800a17e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2203      	movs	r2, #3
 800a176:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a17e:	4b05      	ldr	r3, [pc, #20]	; (800a194 <RTC_ExitInitMode+0x78>)
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	4a04      	ldr	r2, [pc, #16]	; (800a194 <RTC_ExitInitMode+0x78>)
 800a184:	f043 0320 	orr.w	r3, r3, #32
 800a188:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	58004000 	.word	0x58004000

0800a198 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800a1aa:	e005      	b.n	800a1b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800a1b2:	7afb      	ldrb	r3, [r7, #11]
 800a1b4:	3b0a      	subs	r3, #10
 800a1b6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	d8f6      	bhi.n	800a1ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	011b      	lsls	r3, r3, #4
 800a1c4:	b2da      	uxtb	r2, r3
 800a1c6:	7afb      	ldrb	r3, [r7, #11]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	b2db      	uxtb	r3, r3
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d101      	bne.n	800a1f0 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	e034      	b.n	800a25a <HAL_RTCEx_SetCalibrationOutPut+0x82>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	22ca      	movs	r2, #202	; 0xca
 800a206:	625a      	str	r2, [r3, #36]	; 0x24
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2253      	movs	r2, #83	; 0x53
 800a20e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800a21e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6899      	ldr	r1, [r3, #8]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	689a      	ldr	r2, [r3, #8]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a23e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	22ff      	movs	r2, #255	; 0xff
 800a246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e042      	b.n	800a2fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7f7 f950 	bl	8001530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2224      	movs	r2, #36	; 0x24
 800a294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f022 0201 	bic.w	r2, r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fce1 	bl	800ac70 <UART_SetConfig>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d101      	bne.n	800a2b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e022      	b.n	800a2fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 fa3d 	bl	800b740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a2e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f042 0201 	orr.w	r2, r2, #1
 800a2f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 fac4 	bl	800b884 <UART_CheckIdleState>
 800a2fc:	4603      	mov	r3, r0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b08a      	sub	sp, #40	; 0x28
 800a30a:	af02      	add	r7, sp, #8
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	603b      	str	r3, [r7, #0]
 800a312:	4613      	mov	r3, r2
 800a314:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	d17b      	bne.n	800a418 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <HAL_UART_Transmit+0x26>
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e074      	b.n	800a41a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2221      	movs	r2, #33	; 0x21
 800a33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a340:	f7f7 fb22 	bl	8001988 <HAL_GetTick>
 800a344:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	88fa      	ldrh	r2, [r7, #6]
 800a34a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a35e:	d108      	bne.n	800a372 <HAL_UART_Transmit+0x6c>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d104      	bne.n	800a372 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a368:	2300      	movs	r3, #0
 800a36a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	61bb      	str	r3, [r7, #24]
 800a370:	e003      	b.n	800a37a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a376:	2300      	movs	r3, #0
 800a378:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a37a:	e030      	b.n	800a3de <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2200      	movs	r2, #0
 800a384:	2180      	movs	r1, #128	; 0x80
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f001 fb26 	bl	800b9d8 <UART_WaitOnFlagUntilTimeout>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d005      	beq.n	800a39e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2220      	movs	r2, #32
 800a396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e03d      	b.n	800a41a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d10b      	bne.n	800a3bc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	881b      	ldrh	r3, [r3, #0]
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	61bb      	str	r3, [r7, #24]
 800a3ba:	e007      	b.n	800a3cc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	781a      	ldrb	r2, [r3, #0]
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1c8      	bne.n	800a37c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	2140      	movs	r1, #64	; 0x40
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f001 faef 	bl	800b9d8 <UART_WaitOnFlagUntilTimeout>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d005      	beq.n	800a40c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2220      	movs	r2, #32
 800a404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e006      	b.n	800a41a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2220      	movs	r2, #32
 800a410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	e000      	b.n	800a41a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a418:	2302      	movs	r3, #2
  }
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
	...

0800a424 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b08a      	sub	sp, #40	; 0x28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	4613      	mov	r3, r2
 800a430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a438:	2b20      	cmp	r3, #32
 800a43a:	d137      	bne.n	800a4ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <HAL_UART_Receive_IT+0x24>
 800a442:	88fb      	ldrh	r3, [r7, #6]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e030      	b.n	800a4ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a18      	ldr	r2, [pc, #96]	; (800a4b8 <HAL_UART_Receive_IT+0x94>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d01f      	beq.n	800a49c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d018      	beq.n	800a49c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	613b      	str	r3, [r7, #16]
   return(result);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	623b      	str	r3, [r7, #32]
 800a48a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	69f9      	ldr	r1, [r7, #28]
 800a48e:	6a3a      	ldr	r2, [r7, #32]
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	61bb      	str	r3, [r7, #24]
   return(result);
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e6      	bne.n	800a46a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f001 fb00 	bl	800baa8 <UART_Start_Receive_IT>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	e000      	b.n	800a4ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4ac:	2302      	movs	r3, #2
  }
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3728      	adds	r7, #40	; 0x28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	58000c00 	.word	0x58000c00

0800a4bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b0ba      	sub	sp, #232	; 0xe8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69db      	ldr	r3, [r3, #28]
 800a4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a4e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a4e6:	f640 030f 	movw	r3, #2063	; 0x80f
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a4f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d11b      	bne.n	800a530 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4fc:	f003 0320 	and.w	r3, r3, #32
 800a500:	2b00      	cmp	r3, #0
 800a502:	d015      	beq.n	800a530 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d105      	bne.n	800a51c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d009      	beq.n	800a530 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 8377 	beq.w	800ac14 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	4798      	blx	r3
      }
      return;
 800a52e:	e371      	b.n	800ac14 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 8123 	beq.w	800a780 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a53a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a53e:	4b8d      	ldr	r3, [pc, #564]	; (800a774 <HAL_UART_IRQHandler+0x2b8>)
 800a540:	4013      	ands	r3, r2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a546:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a54a:	4b8b      	ldr	r3, [pc, #556]	; (800a778 <HAL_UART_IRQHandler+0x2bc>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 8116 	beq.w	800a780 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d011      	beq.n	800a584 <HAL_UART_IRQHandler+0xc8>
 800a560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00b      	beq.n	800a584 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2201      	movs	r2, #1
 800a572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a57a:	f043 0201 	orr.w	r2, r3, #1
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d011      	beq.n	800a5b4 <HAL_UART_IRQHandler+0xf8>
 800a590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00b      	beq.n	800a5b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5aa:	f043 0204 	orr.w	r2, r3, #4
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d011      	beq.n	800a5e4 <HAL_UART_IRQHandler+0x128>
 800a5c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5c4:	f003 0301 	and.w	r3, r3, #1
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00b      	beq.n	800a5e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2204      	movs	r2, #4
 800a5d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5da:	f043 0202 	orr.w	r2, r3, #2
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a5e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d017      	beq.n	800a620 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a5f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5f4:	f003 0320 	and.w	r3, r3, #32
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d105      	bne.n	800a608 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a5fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a600:	4b5c      	ldr	r3, [pc, #368]	; (800a774 <HAL_UART_IRQHandler+0x2b8>)
 800a602:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00b      	beq.n	800a620 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2208      	movs	r2, #8
 800a60e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a616:	f043 0208 	orr.w	r2, r3, #8
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d012      	beq.n	800a652 <HAL_UART_IRQHandler+0x196>
 800a62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00c      	beq.n	800a652 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a648:	f043 0220 	orr.w	r2, r3, #32
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 82dd 	beq.w	800ac18 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a662:	f003 0320 	and.w	r3, r3, #32
 800a666:	2b00      	cmp	r3, #0
 800a668:	d013      	beq.n	800a692 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a66a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b00      	cmp	r3, #0
 800a674:	d105      	bne.n	800a682 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a67a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d007      	beq.n	800a692 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a6:	2b40      	cmp	r3, #64	; 0x40
 800a6a8:	d005      	beq.n	800a6b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d054      	beq.n	800a760 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 fb18 	bl	800bcec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	d146      	bne.n	800a758 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a6d8:	e853 3f00 	ldrex	r3, [r3]
 800a6dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a6e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a6e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3308      	adds	r3, #8
 800a6f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a6f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a6fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a706:	e841 2300 	strex	r3, r2, [r1]
 800a70a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a70e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1d9      	bne.n	800a6ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d017      	beq.n	800a750 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a726:	4a15      	ldr	r2, [pc, #84]	; (800a77c <HAL_UART_IRQHandler+0x2c0>)
 800a728:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a730:	4618      	mov	r0, r3
 800a732:	f7f9 faaf 	bl	8003c94 <HAL_DMA_Abort_IT>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d019      	beq.n	800a770 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a74a:	4610      	mov	r0, r2
 800a74c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a74e:	e00f      	b.n	800a770 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fa77 	bl	800ac44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a756:	e00b      	b.n	800a770 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fa73 	bl	800ac44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a75e:	e007      	b.n	800a770 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fa6f 	bl	800ac44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a76e:	e253      	b.n	800ac18 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a770:	bf00      	nop
    return;
 800a772:	e251      	b.n	800ac18 <HAL_UART_IRQHandler+0x75c>
 800a774:	10000001 	.word	0x10000001
 800a778:	04000120 	.word	0x04000120
 800a77c:	0800bdb9 	.word	0x0800bdb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a784:	2b01      	cmp	r3, #1
 800a786:	f040 81e7 	bne.w	800ab58 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78e:	f003 0310 	and.w	r3, r3, #16
 800a792:	2b00      	cmp	r3, #0
 800a794:	f000 81e0 	beq.w	800ab58 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79c:	f003 0310 	and.w	r3, r3, #16
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 81d9 	beq.w	800ab58 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2210      	movs	r2, #16
 800a7ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b8:	2b40      	cmp	r3, #64	; 0x40
 800a7ba:	f040 8151 	bne.w	800aa60 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a96      	ldr	r2, [pc, #600]	; (800aa20 <HAL_UART_IRQHandler+0x564>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d068      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a93      	ldr	r2, [pc, #588]	; (800aa24 <HAL_UART_IRQHandler+0x568>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d061      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a91      	ldr	r2, [pc, #580]	; (800aa28 <HAL_UART_IRQHandler+0x56c>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d05a      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a8e      	ldr	r2, [pc, #568]	; (800aa2c <HAL_UART_IRQHandler+0x570>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d053      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a8c      	ldr	r2, [pc, #560]	; (800aa30 <HAL_UART_IRQHandler+0x574>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d04c      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a89      	ldr	r2, [pc, #548]	; (800aa34 <HAL_UART_IRQHandler+0x578>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d045      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a87      	ldr	r2, [pc, #540]	; (800aa38 <HAL_UART_IRQHandler+0x57c>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d03e      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a84      	ldr	r2, [pc, #528]	; (800aa3c <HAL_UART_IRQHandler+0x580>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d037      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a82      	ldr	r2, [pc, #520]	; (800aa40 <HAL_UART_IRQHandler+0x584>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d030      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a7f      	ldr	r2, [pc, #508]	; (800aa44 <HAL_UART_IRQHandler+0x588>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d029      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a7d      	ldr	r2, [pc, #500]	; (800aa48 <HAL_UART_IRQHandler+0x58c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d022      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a7a      	ldr	r2, [pc, #488]	; (800aa4c <HAL_UART_IRQHandler+0x590>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d01b      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a78      	ldr	r2, [pc, #480]	; (800aa50 <HAL_UART_IRQHandler+0x594>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d014      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a75      	ldr	r2, [pc, #468]	; (800aa54 <HAL_UART_IRQHandler+0x598>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d00d      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a73      	ldr	r2, [pc, #460]	; (800aa58 <HAL_UART_IRQHandler+0x59c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d006      	beq.n	800a89e <HAL_UART_IRQHandler+0x3e2>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a70      	ldr	r2, [pc, #448]	; (800aa5c <HAL_UART_IRQHandler+0x5a0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d106      	bne.n	800a8ac <HAL_UART_IRQHandler+0x3f0>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	e005      	b.n	800a8b8 <HAL_UART_IRQHandler+0x3fc>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 81ab 	beq.w	800ac1c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	f080 81a3 	bcs.w	800ac1c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ec:	f000 8087 	beq.w	800a9fe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8fc:	e853 3f00 	ldrex	r3, [r3]
 800a900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a90c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a91a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a91e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a926:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a92a:	e841 2300 	strex	r3, r2, [r1]
 800a92e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a932:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1da      	bne.n	800a8f0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3308      	adds	r3, #8
 800a940:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a944:	e853 3f00 	ldrex	r3, [r3]
 800a948:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a94a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a94c:	f023 0301 	bic.w	r3, r3, #1
 800a950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3308      	adds	r3, #8
 800a95a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a95e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a962:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a964:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a966:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e1      	bne.n	800a93a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	3308      	adds	r3, #8
 800a97c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a980:	e853 3f00 	ldrex	r3, [r3]
 800a984:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a98c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3308      	adds	r3, #8
 800a996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a99a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a99c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9a2:	e841 2300 	strex	r3, r2, [r1]
 800a9a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1e3      	bne.n	800a976 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9cc:	f023 0310 	bic.w	r3, r3, #16
 800a9d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9de:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e4      	bne.n	800a9bc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7f8 fe2d 	bl	8003658 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2202      	movs	r2, #2
 800aa02:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f91d 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa1e:	e0fd      	b.n	800ac1c <HAL_UART_IRQHandler+0x760>
 800aa20:	40020010 	.word	0x40020010
 800aa24:	40020028 	.word	0x40020028
 800aa28:	40020040 	.word	0x40020040
 800aa2c:	40020058 	.word	0x40020058
 800aa30:	40020070 	.word	0x40020070
 800aa34:	40020088 	.word	0x40020088
 800aa38:	400200a0 	.word	0x400200a0
 800aa3c:	400200b8 	.word	0x400200b8
 800aa40:	40020410 	.word	0x40020410
 800aa44:	40020428 	.word	0x40020428
 800aa48:	40020440 	.word	0x40020440
 800aa4c:	40020458 	.word	0x40020458
 800aa50:	40020470 	.word	0x40020470
 800aa54:	40020488 	.word	0x40020488
 800aa58:	400204a0 	.word	0x400204a0
 800aa5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80cf 	beq.w	800ac20 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800aa82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 80ca 	beq.w	800ac20 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aaae:	647b      	str	r3, [r7, #68]	; 0x44
 800aab0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aabc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1e4      	bne.n	800aa8c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3308      	adds	r3, #8
 800aac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	e853 3f00 	ldrex	r3, [r3]
 800aad0:	623b      	str	r3, [r7, #32]
   return(result);
 800aad2:	6a3a      	ldr	r2, [r7, #32]
 800aad4:	4b55      	ldr	r3, [pc, #340]	; (800ac2c <HAL_UART_IRQHandler+0x770>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3308      	adds	r3, #8
 800aae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aae6:	633a      	str	r2, [r7, #48]	; 0x30
 800aae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaee:	e841 2300 	strex	r3, r2, [r1]
 800aaf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1e3      	bne.n	800aac2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2220      	movs	r2, #32
 800aafe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	e853 3f00 	ldrex	r3, [r3]
 800ab1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f023 0310 	bic.w	r3, r3, #16
 800ab22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	69b9      	ldr	r1, [r7, #24]
 800ab36:	69fa      	ldr	r2, [r7, #28]
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e4      	bne.n	800ab0e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f881 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab56:	e063      	b.n	800ac20 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00e      	beq.n	800ab82 <HAL_UART_IRQHandler+0x6c6>
 800ab64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d008      	beq.n	800ab82 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ab78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f001 fe7a 	bl	800c874 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab80:	e051      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ab82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d014      	beq.n	800abb8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d105      	bne.n	800aba6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ab9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d008      	beq.n	800abb8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d03a      	beq.n	800ac24 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
    }
    return;
 800abb6:	e035      	b.n	800ac24 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d009      	beq.n	800abd8 <HAL_UART_IRQHandler+0x71c>
 800abc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d003      	beq.n	800abd8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 f907 	bl	800bde4 <UART_EndTransmit_IT>
    return;
 800abd6:	e026      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800abd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d009      	beq.n	800abf8 <HAL_UART_IRQHandler+0x73c>
 800abe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f001 fe53 	bl	800c89c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abf6:	e016      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800abf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d010      	beq.n	800ac26 <HAL_UART_IRQHandler+0x76a>
 800ac04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da0c      	bge.n	800ac26 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f001 fe3b 	bl	800c888 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac12:	e008      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
      return;
 800ac14:	bf00      	nop
 800ac16:	e006      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
    return;
 800ac18:	bf00      	nop
 800ac1a:	e004      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
      return;
 800ac1c:	bf00      	nop
 800ac1e:	e002      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
      return;
 800ac20:	bf00      	nop
 800ac22:	e000      	b.n	800ac26 <HAL_UART_IRQHandler+0x76a>
    return;
 800ac24:	bf00      	nop
  }
}
 800ac26:	37e8      	adds	r7, #232	; 0xe8
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	effffffe 	.word	0xeffffffe

0800ac30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac74:	b092      	sub	sp, #72	; 0x48
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	4bbe      	ldr	r3, [pc, #760]	; (800af98 <UART_SetConfig+0x328>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	6812      	ldr	r2, [r2, #0]
 800aca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4ab3      	ldr	r2, [pc, #716]	; (800af9c <UART_SetConfig+0x32c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d004      	beq.n	800acdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acd8:	4313      	orrs	r3, r2
 800acda:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689a      	ldr	r2, [r3, #8]
 800ace2:	4baf      	ldr	r3, [pc, #700]	; (800afa0 <UART_SetConfig+0x330>)
 800ace4:	4013      	ands	r3, r2
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	6812      	ldr	r2, [r2, #0]
 800acea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800acec:	430b      	orrs	r3, r1
 800acee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf6:	f023 010f 	bic.w	r1, r3, #15
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4aa6      	ldr	r2, [pc, #664]	; (800afa4 <UART_SetConfig+0x334>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d177      	bne.n	800ae00 <UART_SetConfig+0x190>
 800ad10:	4ba5      	ldr	r3, [pc, #660]	; (800afa8 <UART_SetConfig+0x338>)
 800ad12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ad18:	2b28      	cmp	r3, #40	; 0x28
 800ad1a:	d86d      	bhi.n	800adf8 <UART_SetConfig+0x188>
 800ad1c:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <UART_SetConfig+0xb4>)
 800ad1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad22:	bf00      	nop
 800ad24:	0800adc9 	.word	0x0800adc9
 800ad28:	0800adf9 	.word	0x0800adf9
 800ad2c:	0800adf9 	.word	0x0800adf9
 800ad30:	0800adf9 	.word	0x0800adf9
 800ad34:	0800adf9 	.word	0x0800adf9
 800ad38:	0800adf9 	.word	0x0800adf9
 800ad3c:	0800adf9 	.word	0x0800adf9
 800ad40:	0800adf9 	.word	0x0800adf9
 800ad44:	0800add1 	.word	0x0800add1
 800ad48:	0800adf9 	.word	0x0800adf9
 800ad4c:	0800adf9 	.word	0x0800adf9
 800ad50:	0800adf9 	.word	0x0800adf9
 800ad54:	0800adf9 	.word	0x0800adf9
 800ad58:	0800adf9 	.word	0x0800adf9
 800ad5c:	0800adf9 	.word	0x0800adf9
 800ad60:	0800adf9 	.word	0x0800adf9
 800ad64:	0800add9 	.word	0x0800add9
 800ad68:	0800adf9 	.word	0x0800adf9
 800ad6c:	0800adf9 	.word	0x0800adf9
 800ad70:	0800adf9 	.word	0x0800adf9
 800ad74:	0800adf9 	.word	0x0800adf9
 800ad78:	0800adf9 	.word	0x0800adf9
 800ad7c:	0800adf9 	.word	0x0800adf9
 800ad80:	0800adf9 	.word	0x0800adf9
 800ad84:	0800ade1 	.word	0x0800ade1
 800ad88:	0800adf9 	.word	0x0800adf9
 800ad8c:	0800adf9 	.word	0x0800adf9
 800ad90:	0800adf9 	.word	0x0800adf9
 800ad94:	0800adf9 	.word	0x0800adf9
 800ad98:	0800adf9 	.word	0x0800adf9
 800ad9c:	0800adf9 	.word	0x0800adf9
 800ada0:	0800adf9 	.word	0x0800adf9
 800ada4:	0800ade9 	.word	0x0800ade9
 800ada8:	0800adf9 	.word	0x0800adf9
 800adac:	0800adf9 	.word	0x0800adf9
 800adb0:	0800adf9 	.word	0x0800adf9
 800adb4:	0800adf9 	.word	0x0800adf9
 800adb8:	0800adf9 	.word	0x0800adf9
 800adbc:	0800adf9 	.word	0x0800adf9
 800adc0:	0800adf9 	.word	0x0800adf9
 800adc4:	0800adf1 	.word	0x0800adf1
 800adc8:	2301      	movs	r3, #1
 800adca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adce:	e222      	b.n	800b216 <UART_SetConfig+0x5a6>
 800add0:	2304      	movs	r3, #4
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800add6:	e21e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800add8:	2308      	movs	r3, #8
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adde:	e21a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ade0:	2310      	movs	r3, #16
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ade6:	e216      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ade8:	2320      	movs	r3, #32
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adee:	e212      	b.n	800b216 <UART_SetConfig+0x5a6>
 800adf0:	2340      	movs	r3, #64	; 0x40
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adf6:	e20e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800adf8:	2380      	movs	r3, #128	; 0x80
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adfe:	e20a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a69      	ldr	r2, [pc, #420]	; (800afac <UART_SetConfig+0x33c>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d130      	bne.n	800ae6c <UART_SetConfig+0x1fc>
 800ae0a:	4b67      	ldr	r3, [pc, #412]	; (800afa8 <UART_SetConfig+0x338>)
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0e:	f003 0307 	and.w	r3, r3, #7
 800ae12:	2b05      	cmp	r3, #5
 800ae14:	d826      	bhi.n	800ae64 <UART_SetConfig+0x1f4>
 800ae16:	a201      	add	r2, pc, #4	; (adr r2, 800ae1c <UART_SetConfig+0x1ac>)
 800ae18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1c:	0800ae35 	.word	0x0800ae35
 800ae20:	0800ae3d 	.word	0x0800ae3d
 800ae24:	0800ae45 	.word	0x0800ae45
 800ae28:	0800ae4d 	.word	0x0800ae4d
 800ae2c:	0800ae55 	.word	0x0800ae55
 800ae30:	0800ae5d 	.word	0x0800ae5d
 800ae34:	2300      	movs	r3, #0
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae3a:	e1ec      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae3c:	2304      	movs	r3, #4
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae42:	e1e8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae44:	2308      	movs	r3, #8
 800ae46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae4a:	e1e4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae4c:	2310      	movs	r3, #16
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae52:	e1e0      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae54:	2320      	movs	r3, #32
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5a:	e1dc      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae5c:	2340      	movs	r3, #64	; 0x40
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae62:	e1d8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae64:	2380      	movs	r3, #128	; 0x80
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae6a:	e1d4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a4f      	ldr	r2, [pc, #316]	; (800afb0 <UART_SetConfig+0x340>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d130      	bne.n	800aed8 <UART_SetConfig+0x268>
 800ae76:	4b4c      	ldr	r3, [pc, #304]	; (800afa8 <UART_SetConfig+0x338>)
 800ae78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7a:	f003 0307 	and.w	r3, r3, #7
 800ae7e:	2b05      	cmp	r3, #5
 800ae80:	d826      	bhi.n	800aed0 <UART_SetConfig+0x260>
 800ae82:	a201      	add	r2, pc, #4	; (adr r2, 800ae88 <UART_SetConfig+0x218>)
 800ae84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae88:	0800aea1 	.word	0x0800aea1
 800ae8c:	0800aea9 	.word	0x0800aea9
 800ae90:	0800aeb1 	.word	0x0800aeb1
 800ae94:	0800aeb9 	.word	0x0800aeb9
 800ae98:	0800aec1 	.word	0x0800aec1
 800ae9c:	0800aec9 	.word	0x0800aec9
 800aea0:	2300      	movs	r3, #0
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aea6:	e1b6      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aea8:	2304      	movs	r3, #4
 800aeaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeae:	e1b2      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aeb0:	2308      	movs	r3, #8
 800aeb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb6:	e1ae      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aeb8:	2310      	movs	r3, #16
 800aeba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aebe:	e1aa      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aec0:	2320      	movs	r3, #32
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec6:	e1a6      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aec8:	2340      	movs	r3, #64	; 0x40
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aece:	e1a2      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aed0:	2380      	movs	r3, #128	; 0x80
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aed6:	e19e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a35      	ldr	r2, [pc, #212]	; (800afb4 <UART_SetConfig+0x344>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d130      	bne.n	800af44 <UART_SetConfig+0x2d4>
 800aee2:	4b31      	ldr	r3, [pc, #196]	; (800afa8 <UART_SetConfig+0x338>)
 800aee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee6:	f003 0307 	and.w	r3, r3, #7
 800aeea:	2b05      	cmp	r3, #5
 800aeec:	d826      	bhi.n	800af3c <UART_SetConfig+0x2cc>
 800aeee:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <UART_SetConfig+0x284>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af0d 	.word	0x0800af0d
 800aef8:	0800af15 	.word	0x0800af15
 800aefc:	0800af1d 	.word	0x0800af1d
 800af00:	0800af25 	.word	0x0800af25
 800af04:	0800af2d 	.word	0x0800af2d
 800af08:	0800af35 	.word	0x0800af35
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af12:	e180      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af14:	2304      	movs	r3, #4
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1a:	e17c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af1c:	2308      	movs	r3, #8
 800af1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af22:	e178      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af24:	2310      	movs	r3, #16
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2a:	e174      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af2c:	2320      	movs	r3, #32
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af32:	e170      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af34:	2340      	movs	r3, #64	; 0x40
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3a:	e16c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af3c:	2380      	movs	r3, #128	; 0x80
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af42:	e168      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1b      	ldr	r2, [pc, #108]	; (800afb8 <UART_SetConfig+0x348>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d142      	bne.n	800afd4 <UART_SetConfig+0x364>
 800af4e:	4b16      	ldr	r3, [pc, #88]	; (800afa8 <UART_SetConfig+0x338>)
 800af50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	2b05      	cmp	r3, #5
 800af58:	d838      	bhi.n	800afcc <UART_SetConfig+0x35c>
 800af5a:	a201      	add	r2, pc, #4	; (adr r2, 800af60 <UART_SetConfig+0x2f0>)
 800af5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af60:	0800af79 	.word	0x0800af79
 800af64:	0800af81 	.word	0x0800af81
 800af68:	0800af89 	.word	0x0800af89
 800af6c:	0800af91 	.word	0x0800af91
 800af70:	0800afbd 	.word	0x0800afbd
 800af74:	0800afc5 	.word	0x0800afc5
 800af78:	2300      	movs	r3, #0
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7e:	e14a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af80:	2304      	movs	r3, #4
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af86:	e146      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af88:	2308      	movs	r3, #8
 800af8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af8e:	e142      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af90:	2310      	movs	r3, #16
 800af92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af96:	e13e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800af98:	cfff69f3 	.word	0xcfff69f3
 800af9c:	58000c00 	.word	0x58000c00
 800afa0:	11fff4ff 	.word	0x11fff4ff
 800afa4:	40011000 	.word	0x40011000
 800afa8:	58024400 	.word	0x58024400
 800afac:	40004400 	.word	0x40004400
 800afb0:	40004800 	.word	0x40004800
 800afb4:	40004c00 	.word	0x40004c00
 800afb8:	40005000 	.word	0x40005000
 800afbc:	2320      	movs	r3, #32
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afc2:	e128      	b.n	800b216 <UART_SetConfig+0x5a6>
 800afc4:	2340      	movs	r3, #64	; 0x40
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afca:	e124      	b.n	800b216 <UART_SetConfig+0x5a6>
 800afcc:	2380      	movs	r3, #128	; 0x80
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800afd2:	e120      	b.n	800b216 <UART_SetConfig+0x5a6>
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4acb      	ldr	r2, [pc, #812]	; (800b308 <UART_SetConfig+0x698>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d176      	bne.n	800b0cc <UART_SetConfig+0x45c>
 800afde:	4bcb      	ldr	r3, [pc, #812]	; (800b30c <UART_SetConfig+0x69c>)
 800afe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afe6:	2b28      	cmp	r3, #40	; 0x28
 800afe8:	d86c      	bhi.n	800b0c4 <UART_SetConfig+0x454>
 800afea:	a201      	add	r2, pc, #4	; (adr r2, 800aff0 <UART_SetConfig+0x380>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b095 	.word	0x0800b095
 800aff4:	0800b0c5 	.word	0x0800b0c5
 800aff8:	0800b0c5 	.word	0x0800b0c5
 800affc:	0800b0c5 	.word	0x0800b0c5
 800b000:	0800b0c5 	.word	0x0800b0c5
 800b004:	0800b0c5 	.word	0x0800b0c5
 800b008:	0800b0c5 	.word	0x0800b0c5
 800b00c:	0800b0c5 	.word	0x0800b0c5
 800b010:	0800b09d 	.word	0x0800b09d
 800b014:	0800b0c5 	.word	0x0800b0c5
 800b018:	0800b0c5 	.word	0x0800b0c5
 800b01c:	0800b0c5 	.word	0x0800b0c5
 800b020:	0800b0c5 	.word	0x0800b0c5
 800b024:	0800b0c5 	.word	0x0800b0c5
 800b028:	0800b0c5 	.word	0x0800b0c5
 800b02c:	0800b0c5 	.word	0x0800b0c5
 800b030:	0800b0a5 	.word	0x0800b0a5
 800b034:	0800b0c5 	.word	0x0800b0c5
 800b038:	0800b0c5 	.word	0x0800b0c5
 800b03c:	0800b0c5 	.word	0x0800b0c5
 800b040:	0800b0c5 	.word	0x0800b0c5
 800b044:	0800b0c5 	.word	0x0800b0c5
 800b048:	0800b0c5 	.word	0x0800b0c5
 800b04c:	0800b0c5 	.word	0x0800b0c5
 800b050:	0800b0ad 	.word	0x0800b0ad
 800b054:	0800b0c5 	.word	0x0800b0c5
 800b058:	0800b0c5 	.word	0x0800b0c5
 800b05c:	0800b0c5 	.word	0x0800b0c5
 800b060:	0800b0c5 	.word	0x0800b0c5
 800b064:	0800b0c5 	.word	0x0800b0c5
 800b068:	0800b0c5 	.word	0x0800b0c5
 800b06c:	0800b0c5 	.word	0x0800b0c5
 800b070:	0800b0b5 	.word	0x0800b0b5
 800b074:	0800b0c5 	.word	0x0800b0c5
 800b078:	0800b0c5 	.word	0x0800b0c5
 800b07c:	0800b0c5 	.word	0x0800b0c5
 800b080:	0800b0c5 	.word	0x0800b0c5
 800b084:	0800b0c5 	.word	0x0800b0c5
 800b088:	0800b0c5 	.word	0x0800b0c5
 800b08c:	0800b0c5 	.word	0x0800b0c5
 800b090:	0800b0bd 	.word	0x0800b0bd
 800b094:	2301      	movs	r3, #1
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b09a:	e0bc      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b09c:	2304      	movs	r3, #4
 800b09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0a2:	e0b8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0a4:	2308      	movs	r3, #8
 800b0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0aa:	e0b4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0ac:	2310      	movs	r3, #16
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b2:	e0b0      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0b4:	2320      	movs	r3, #32
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ba:	e0ac      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0bc:	2340      	movs	r3, #64	; 0x40
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c2:	e0a8      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0c4:	2380      	movs	r3, #128	; 0x80
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ca:	e0a4      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a8f      	ldr	r2, [pc, #572]	; (800b310 <UART_SetConfig+0x6a0>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d130      	bne.n	800b138 <UART_SetConfig+0x4c8>
 800b0d6:	4b8d      	ldr	r3, [pc, #564]	; (800b30c <UART_SetConfig+0x69c>)
 800b0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0da:	f003 0307 	and.w	r3, r3, #7
 800b0de:	2b05      	cmp	r3, #5
 800b0e0:	d826      	bhi.n	800b130 <UART_SetConfig+0x4c0>
 800b0e2:	a201      	add	r2, pc, #4	; (adr r2, 800b0e8 <UART_SetConfig+0x478>)
 800b0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e8:	0800b101 	.word	0x0800b101
 800b0ec:	0800b109 	.word	0x0800b109
 800b0f0:	0800b111 	.word	0x0800b111
 800b0f4:	0800b119 	.word	0x0800b119
 800b0f8:	0800b121 	.word	0x0800b121
 800b0fc:	0800b129 	.word	0x0800b129
 800b100:	2300      	movs	r3, #0
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b106:	e086      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b108:	2304      	movs	r3, #4
 800b10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b10e:	e082      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b110:	2308      	movs	r3, #8
 800b112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b116:	e07e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b118:	2310      	movs	r3, #16
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b11e:	e07a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b120:	2320      	movs	r3, #32
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b126:	e076      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b128:	2340      	movs	r3, #64	; 0x40
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12e:	e072      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b130:	2380      	movs	r3, #128	; 0x80
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b136:	e06e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a75      	ldr	r2, [pc, #468]	; (800b314 <UART_SetConfig+0x6a4>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d130      	bne.n	800b1a4 <UART_SetConfig+0x534>
 800b142:	4b72      	ldr	r3, [pc, #456]	; (800b30c <UART_SetConfig+0x69c>)
 800b144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b146:	f003 0307 	and.w	r3, r3, #7
 800b14a:	2b05      	cmp	r3, #5
 800b14c:	d826      	bhi.n	800b19c <UART_SetConfig+0x52c>
 800b14e:	a201      	add	r2, pc, #4	; (adr r2, 800b154 <UART_SetConfig+0x4e4>)
 800b150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b154:	0800b16d 	.word	0x0800b16d
 800b158:	0800b175 	.word	0x0800b175
 800b15c:	0800b17d 	.word	0x0800b17d
 800b160:	0800b185 	.word	0x0800b185
 800b164:	0800b18d 	.word	0x0800b18d
 800b168:	0800b195 	.word	0x0800b195
 800b16c:	2300      	movs	r3, #0
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b172:	e050      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b174:	2304      	movs	r3, #4
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b17a:	e04c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b17c:	2308      	movs	r3, #8
 800b17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b182:	e048      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b184:	2310      	movs	r3, #16
 800b186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b18a:	e044      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b18c:	2320      	movs	r3, #32
 800b18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b192:	e040      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b194:	2340      	movs	r3, #64	; 0x40
 800b196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b19a:	e03c      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b19c:	2380      	movs	r3, #128	; 0x80
 800b19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1a2:	e038      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a5b      	ldr	r2, [pc, #364]	; (800b318 <UART_SetConfig+0x6a8>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d130      	bne.n	800b210 <UART_SetConfig+0x5a0>
 800b1ae:	4b57      	ldr	r3, [pc, #348]	; (800b30c <UART_SetConfig+0x69c>)
 800b1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	2b05      	cmp	r3, #5
 800b1b8:	d826      	bhi.n	800b208 <UART_SetConfig+0x598>
 800b1ba:	a201      	add	r2, pc, #4	; (adr r2, 800b1c0 <UART_SetConfig+0x550>)
 800b1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c0:	0800b1d9 	.word	0x0800b1d9
 800b1c4:	0800b1e1 	.word	0x0800b1e1
 800b1c8:	0800b1e9 	.word	0x0800b1e9
 800b1cc:	0800b1f1 	.word	0x0800b1f1
 800b1d0:	0800b1f9 	.word	0x0800b1f9
 800b1d4:	0800b201 	.word	0x0800b201
 800b1d8:	2302      	movs	r3, #2
 800b1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1de:	e01a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1e0:	2304      	movs	r3, #4
 800b1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1e6:	e016      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1e8:	2308      	movs	r3, #8
 800b1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1ee:	e012      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1f6:	e00e      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b1f8:	2320      	movs	r3, #32
 800b1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b1fe:	e00a      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b200:	2340      	movs	r3, #64	; 0x40
 800b202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b206:	e006      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b208:	2380      	movs	r3, #128	; 0x80
 800b20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b20e:	e002      	b.n	800b216 <UART_SetConfig+0x5a6>
 800b210:	2380      	movs	r3, #128	; 0x80
 800b212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a3f      	ldr	r2, [pc, #252]	; (800b318 <UART_SetConfig+0x6a8>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	f040 80f8 	bne.w	800b412 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b222:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b226:	2b20      	cmp	r3, #32
 800b228:	dc46      	bgt.n	800b2b8 <UART_SetConfig+0x648>
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	f2c0 8082 	blt.w	800b334 <UART_SetConfig+0x6c4>
 800b230:	3b02      	subs	r3, #2
 800b232:	2b1e      	cmp	r3, #30
 800b234:	d87e      	bhi.n	800b334 <UART_SetConfig+0x6c4>
 800b236:	a201      	add	r2, pc, #4	; (adr r2, 800b23c <UART_SetConfig+0x5cc>)
 800b238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23c:	0800b2bf 	.word	0x0800b2bf
 800b240:	0800b335 	.word	0x0800b335
 800b244:	0800b2c7 	.word	0x0800b2c7
 800b248:	0800b335 	.word	0x0800b335
 800b24c:	0800b335 	.word	0x0800b335
 800b250:	0800b335 	.word	0x0800b335
 800b254:	0800b2d7 	.word	0x0800b2d7
 800b258:	0800b335 	.word	0x0800b335
 800b25c:	0800b335 	.word	0x0800b335
 800b260:	0800b335 	.word	0x0800b335
 800b264:	0800b335 	.word	0x0800b335
 800b268:	0800b335 	.word	0x0800b335
 800b26c:	0800b335 	.word	0x0800b335
 800b270:	0800b335 	.word	0x0800b335
 800b274:	0800b2e7 	.word	0x0800b2e7
 800b278:	0800b335 	.word	0x0800b335
 800b27c:	0800b335 	.word	0x0800b335
 800b280:	0800b335 	.word	0x0800b335
 800b284:	0800b335 	.word	0x0800b335
 800b288:	0800b335 	.word	0x0800b335
 800b28c:	0800b335 	.word	0x0800b335
 800b290:	0800b335 	.word	0x0800b335
 800b294:	0800b335 	.word	0x0800b335
 800b298:	0800b335 	.word	0x0800b335
 800b29c:	0800b335 	.word	0x0800b335
 800b2a0:	0800b335 	.word	0x0800b335
 800b2a4:	0800b335 	.word	0x0800b335
 800b2a8:	0800b335 	.word	0x0800b335
 800b2ac:	0800b335 	.word	0x0800b335
 800b2b0:	0800b335 	.word	0x0800b335
 800b2b4:	0800b327 	.word	0x0800b327
 800b2b8:	2b40      	cmp	r3, #64	; 0x40
 800b2ba:	d037      	beq.n	800b32c <UART_SetConfig+0x6bc>
 800b2bc:	e03a      	b.n	800b334 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b2be:	f7fd ffb9 	bl	8009234 <HAL_RCCEx_GetD3PCLK1Freq>
 800b2c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b2c4:	e03c      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fd ffc8 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d4:	e034      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2d6:	f107 0318 	add.w	r3, r7, #24
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fe f914 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2e4:	e02c      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2e6:	4b09      	ldr	r3, [pc, #36]	; (800b30c <UART_SetConfig+0x69c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0320 	and.w	r3, r3, #32
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d016      	beq.n	800b320 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2f2:	4b06      	ldr	r3, [pc, #24]	; (800b30c <UART_SetConfig+0x69c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	08db      	lsrs	r3, r3, #3
 800b2f8:	f003 0303 	and.w	r3, r3, #3
 800b2fc:	4a07      	ldr	r2, [pc, #28]	; (800b31c <UART_SetConfig+0x6ac>)
 800b2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b304:	e01c      	b.n	800b340 <UART_SetConfig+0x6d0>
 800b306:	bf00      	nop
 800b308:	40011400 	.word	0x40011400
 800b30c:	58024400 	.word	0x58024400
 800b310:	40007800 	.word	0x40007800
 800b314:	40007c00 	.word	0x40007c00
 800b318:	58000c00 	.word	0x58000c00
 800b31c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b320:	4b9d      	ldr	r3, [pc, #628]	; (800b598 <UART_SetConfig+0x928>)
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b324:	e00c      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b326:	4b9d      	ldr	r3, [pc, #628]	; (800b59c <UART_SetConfig+0x92c>)
 800b328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b32a:	e009      	b.n	800b340 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b32c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b332:	e005      	b.n	800b340 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b334:	2300      	movs	r3, #0
 800b336:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b33e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 81de 	beq.w	800b704 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34c:	4a94      	ldr	r2, [pc, #592]	; (800b5a0 <UART_SetConfig+0x930>)
 800b34e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b352:	461a      	mov	r2, r3
 800b354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b356:	fbb3 f3f2 	udiv	r3, r3, r2
 800b35a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4613      	mov	r3, r2
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	4413      	add	r3, r2
 800b366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b368:	429a      	cmp	r2, r3
 800b36a:	d305      	bcc.n	800b378 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b374:	429a      	cmp	r2, r3
 800b376:	d903      	bls.n	800b380 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b37e:	e1c1      	b.n	800b704 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b382:	2200      	movs	r2, #0
 800b384:	60bb      	str	r3, [r7, #8]
 800b386:	60fa      	str	r2, [r7, #12]
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38c:	4a84      	ldr	r2, [pc, #528]	; (800b5a0 <UART_SetConfig+0x930>)
 800b38e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b392:	b29b      	uxth	r3, r3
 800b394:	2200      	movs	r2, #0
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	607a      	str	r2, [r7, #4]
 800b39a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b39e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3a2:	f7f4 fff5 	bl	8000390 <__aeabi_uldivmod>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f04f 0200 	mov.w	r2, #0
 800b3b2:	f04f 0300 	mov.w	r3, #0
 800b3b6:	020b      	lsls	r3, r1, #8
 800b3b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3bc:	0202      	lsls	r2, r0, #8
 800b3be:	6979      	ldr	r1, [r7, #20]
 800b3c0:	6849      	ldr	r1, [r1, #4]
 800b3c2:	0849      	lsrs	r1, r1, #1
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	eb12 0804 	adds.w	r8, r2, r4
 800b3ce:	eb43 0905 	adc.w	r9, r3, r5
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	469a      	mov	sl, r3
 800b3da:	4693      	mov	fp, r2
 800b3dc:	4652      	mov	r2, sl
 800b3de:	465b      	mov	r3, fp
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	f7f4 ffd4 	bl	8000390 <__aeabi_uldivmod>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3f6:	d308      	bcc.n	800b40a <UART_SetConfig+0x79a>
 800b3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3fe:	d204      	bcs.n	800b40a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b406:	60da      	str	r2, [r3, #12]
 800b408:	e17c      	b.n	800b704 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b410:	e178      	b.n	800b704 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	69db      	ldr	r3, [r3, #28]
 800b416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b41a:	f040 80c5 	bne.w	800b5a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b41e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b422:	2b20      	cmp	r3, #32
 800b424:	dc48      	bgt.n	800b4b8 <UART_SetConfig+0x848>
 800b426:	2b00      	cmp	r3, #0
 800b428:	db7b      	blt.n	800b522 <UART_SetConfig+0x8b2>
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	d879      	bhi.n	800b522 <UART_SetConfig+0x8b2>
 800b42e:	a201      	add	r2, pc, #4	; (adr r2, 800b434 <UART_SetConfig+0x7c4>)
 800b430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b434:	0800b4bf 	.word	0x0800b4bf
 800b438:	0800b4c7 	.word	0x0800b4c7
 800b43c:	0800b523 	.word	0x0800b523
 800b440:	0800b523 	.word	0x0800b523
 800b444:	0800b4cf 	.word	0x0800b4cf
 800b448:	0800b523 	.word	0x0800b523
 800b44c:	0800b523 	.word	0x0800b523
 800b450:	0800b523 	.word	0x0800b523
 800b454:	0800b4df 	.word	0x0800b4df
 800b458:	0800b523 	.word	0x0800b523
 800b45c:	0800b523 	.word	0x0800b523
 800b460:	0800b523 	.word	0x0800b523
 800b464:	0800b523 	.word	0x0800b523
 800b468:	0800b523 	.word	0x0800b523
 800b46c:	0800b523 	.word	0x0800b523
 800b470:	0800b523 	.word	0x0800b523
 800b474:	0800b4ef 	.word	0x0800b4ef
 800b478:	0800b523 	.word	0x0800b523
 800b47c:	0800b523 	.word	0x0800b523
 800b480:	0800b523 	.word	0x0800b523
 800b484:	0800b523 	.word	0x0800b523
 800b488:	0800b523 	.word	0x0800b523
 800b48c:	0800b523 	.word	0x0800b523
 800b490:	0800b523 	.word	0x0800b523
 800b494:	0800b523 	.word	0x0800b523
 800b498:	0800b523 	.word	0x0800b523
 800b49c:	0800b523 	.word	0x0800b523
 800b4a0:	0800b523 	.word	0x0800b523
 800b4a4:	0800b523 	.word	0x0800b523
 800b4a8:	0800b523 	.word	0x0800b523
 800b4ac:	0800b523 	.word	0x0800b523
 800b4b0:	0800b523 	.word	0x0800b523
 800b4b4:	0800b515 	.word	0x0800b515
 800b4b8:	2b40      	cmp	r3, #64	; 0x40
 800b4ba:	d02e      	beq.n	800b51a <UART_SetConfig+0x8aa>
 800b4bc:	e031      	b.n	800b522 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4be:	f7fb ff03 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 800b4c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4c4:	e033      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4c6:	f7fb ff15 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 800b4ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b4cc:	e02f      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fd fec4 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4dc:	e027      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4de:	f107 0318 	add.w	r3, r7, #24
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe f810 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ec:	e01f      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ee:	4b2d      	ldr	r3, [pc, #180]	; (800b5a4 <UART_SetConfig+0x934>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d009      	beq.n	800b50e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4fa:	4b2a      	ldr	r3, [pc, #168]	; (800b5a4 <UART_SetConfig+0x934>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	08db      	lsrs	r3, r3, #3
 800b500:	f003 0303 	and.w	r3, r3, #3
 800b504:	4a24      	ldr	r2, [pc, #144]	; (800b598 <UART_SetConfig+0x928>)
 800b506:	fa22 f303 	lsr.w	r3, r2, r3
 800b50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b50c:	e00f      	b.n	800b52e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b50e:	4b22      	ldr	r3, [pc, #136]	; (800b598 <UART_SetConfig+0x928>)
 800b510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b512:	e00c      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b514:	4b21      	ldr	r3, [pc, #132]	; (800b59c <UART_SetConfig+0x92c>)
 800b516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b518:	e009      	b.n	800b52e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b51a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b520:	e005      	b.n	800b52e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b52c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 80e7 	beq.w	800b704 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	4a19      	ldr	r2, [pc, #100]	; (800b5a0 <UART_SetConfig+0x930>)
 800b53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b540:	461a      	mov	r2, r3
 800b542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b544:	fbb3 f3f2 	udiv	r3, r3, r2
 800b548:	005a      	lsls	r2, r3, #1
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	085b      	lsrs	r3, r3, #1
 800b550:	441a      	add	r2, r3
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	2b0f      	cmp	r3, #15
 800b560:	d916      	bls.n	800b590 <UART_SetConfig+0x920>
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b568:	d212      	bcs.n	800b590 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f023 030f 	bic.w	r3, r3, #15
 800b572:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	b29b      	uxth	r3, r3
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	b29a      	uxth	r2, r3
 800b580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b582:	4313      	orrs	r3, r2
 800b584:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b58c:	60da      	str	r2, [r3, #12]
 800b58e:	e0b9      	b.n	800b704 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b596:	e0b5      	b.n	800b704 <UART_SetConfig+0xa94>
 800b598:	03d09000 	.word	0x03d09000
 800b59c:	003d0900 	.word	0x003d0900
 800b5a0:	0800da9c 	.word	0x0800da9c
 800b5a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b5a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5ac:	2b20      	cmp	r3, #32
 800b5ae:	dc49      	bgt.n	800b644 <UART_SetConfig+0x9d4>
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	db7c      	blt.n	800b6ae <UART_SetConfig+0xa3e>
 800b5b4:	2b20      	cmp	r3, #32
 800b5b6:	d87a      	bhi.n	800b6ae <UART_SetConfig+0xa3e>
 800b5b8:	a201      	add	r2, pc, #4	; (adr r2, 800b5c0 <UART_SetConfig+0x950>)
 800b5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5be:	bf00      	nop
 800b5c0:	0800b64b 	.word	0x0800b64b
 800b5c4:	0800b653 	.word	0x0800b653
 800b5c8:	0800b6af 	.word	0x0800b6af
 800b5cc:	0800b6af 	.word	0x0800b6af
 800b5d0:	0800b65b 	.word	0x0800b65b
 800b5d4:	0800b6af 	.word	0x0800b6af
 800b5d8:	0800b6af 	.word	0x0800b6af
 800b5dc:	0800b6af 	.word	0x0800b6af
 800b5e0:	0800b66b 	.word	0x0800b66b
 800b5e4:	0800b6af 	.word	0x0800b6af
 800b5e8:	0800b6af 	.word	0x0800b6af
 800b5ec:	0800b6af 	.word	0x0800b6af
 800b5f0:	0800b6af 	.word	0x0800b6af
 800b5f4:	0800b6af 	.word	0x0800b6af
 800b5f8:	0800b6af 	.word	0x0800b6af
 800b5fc:	0800b6af 	.word	0x0800b6af
 800b600:	0800b67b 	.word	0x0800b67b
 800b604:	0800b6af 	.word	0x0800b6af
 800b608:	0800b6af 	.word	0x0800b6af
 800b60c:	0800b6af 	.word	0x0800b6af
 800b610:	0800b6af 	.word	0x0800b6af
 800b614:	0800b6af 	.word	0x0800b6af
 800b618:	0800b6af 	.word	0x0800b6af
 800b61c:	0800b6af 	.word	0x0800b6af
 800b620:	0800b6af 	.word	0x0800b6af
 800b624:	0800b6af 	.word	0x0800b6af
 800b628:	0800b6af 	.word	0x0800b6af
 800b62c:	0800b6af 	.word	0x0800b6af
 800b630:	0800b6af 	.word	0x0800b6af
 800b634:	0800b6af 	.word	0x0800b6af
 800b638:	0800b6af 	.word	0x0800b6af
 800b63c:	0800b6af 	.word	0x0800b6af
 800b640:	0800b6a1 	.word	0x0800b6a1
 800b644:	2b40      	cmp	r3, #64	; 0x40
 800b646:	d02e      	beq.n	800b6a6 <UART_SetConfig+0xa36>
 800b648:	e031      	b.n	800b6ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b64a:	f7fb fe3d 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 800b64e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b650:	e033      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b652:	f7fb fe4f 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 800b656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b658:	e02f      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b65a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fd fdfe 	bl	8009260 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b668:	e027      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b66a:	f107 0318 	add.w	r3, r7, #24
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fd ff4a 	bl	8009508 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b678:	e01f      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b67a:	4b2d      	ldr	r3, [pc, #180]	; (800b730 <UART_SetConfig+0xac0>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0320 	and.w	r3, r3, #32
 800b682:	2b00      	cmp	r3, #0
 800b684:	d009      	beq.n	800b69a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b686:	4b2a      	ldr	r3, [pc, #168]	; (800b730 <UART_SetConfig+0xac0>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	08db      	lsrs	r3, r3, #3
 800b68c:	f003 0303 	and.w	r3, r3, #3
 800b690:	4a28      	ldr	r2, [pc, #160]	; (800b734 <UART_SetConfig+0xac4>)
 800b692:	fa22 f303 	lsr.w	r3, r2, r3
 800b696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b698:	e00f      	b.n	800b6ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b69a:	4b26      	ldr	r3, [pc, #152]	; (800b734 <UART_SetConfig+0xac4>)
 800b69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b69e:	e00c      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6a0:	4b25      	ldr	r3, [pc, #148]	; (800b738 <UART_SetConfig+0xac8>)
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6a4:	e009      	b.n	800b6ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6ac:	e005      	b.n	800b6ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b6b8:	bf00      	nop
    }

    if (pclk != 0U)
 800b6ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d021      	beq.n	800b704 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	4a1d      	ldr	r2, [pc, #116]	; (800b73c <UART_SetConfig+0xacc>)
 800b6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	085b      	lsrs	r3, r3, #1
 800b6d8:	441a      	add	r2, r3
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e6:	2b0f      	cmp	r3, #15
 800b6e8:	d909      	bls.n	800b6fe <UART_SetConfig+0xa8e>
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6f0:	d205      	bcs.n	800b6fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	60da      	str	r2, [r3, #12]
 800b6fc:	e002      	b.n	800b704 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2201      	movs	r2, #1
 800b708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	2201      	movs	r2, #1
 800b710:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2200      	movs	r2, #0
 800b718:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b720:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b724:	4618      	mov	r0, r3
 800b726:	3748      	adds	r7, #72	; 0x48
 800b728:	46bd      	mov	sp, r7
 800b72a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b72e:	bf00      	nop
 800b730:	58024400 	.word	0x58024400
 800b734:	03d09000 	.word	0x03d09000
 800b738:	003d0900 	.word	0x003d0900
 800b73c:	0800da9c 	.word	0x0800da9c

0800b740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00a      	beq.n	800b76a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b76e:	f003 0302 	and.w	r3, r3, #2
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00a      	beq.n	800b78c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	430a      	orrs	r2, r1
 800b78a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b790:	f003 0304 	and.w	r3, r3, #4
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00a      	beq.n	800b7ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	430a      	orrs	r2, r1
 800b7ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b2:	f003 0308 	and.w	r3, r3, #8
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7d4:	f003 0310 	and.w	r3, r3, #16
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	430a      	orrs	r2, r1
 800b7f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f6:	f003 0320 	and.w	r3, r3, #32
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	430a      	orrs	r2, r1
 800b812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d01a      	beq.n	800b856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	430a      	orrs	r2, r1
 800b834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b83a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b83e:	d10a      	bne.n	800b856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	430a      	orrs	r2, r1
 800b854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00a      	beq.n	800b878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	430a      	orrs	r2, r1
 800b876:	605a      	str	r2, [r3, #4]
  }
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b098      	sub	sp, #96	; 0x60
 800b888:	af02      	add	r7, sp, #8
 800b88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b894:	f7f6 f878 	bl	8001988 <HAL_GetTick>
 800b898:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0308 	and.w	r3, r3, #8
 800b8a4:	2b08      	cmp	r3, #8
 800b8a6:	d12f      	bne.n	800b908 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f88e 	bl	800b9d8 <UART_WaitOnFlagUntilTimeout>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d022      	beq.n	800b908 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ca:	e853 3f00 	ldrex	r3, [r3]
 800b8ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8d6:	653b      	str	r3, [r7, #80]	; 0x50
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e0:	647b      	str	r3, [r7, #68]	; 0x44
 800b8e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b8e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e6      	bne.n	800b8c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e063      	b.n	800b9d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b04      	cmp	r3, #4
 800b914:	d149      	bne.n	800b9aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b916:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b91e:	2200      	movs	r2, #0
 800b920:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f857 	bl	800b9d8 <UART_WaitOnFlagUntilTimeout>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d03c      	beq.n	800b9aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	623b      	str	r3, [r7, #32]
   return(result);
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b944:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94e:	633b      	str	r3, [r7, #48]	; 0x30
 800b950:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e6      	bne.n	800b930 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	3308      	adds	r3, #8
 800b968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	e853 3f00 	ldrex	r3, [r3]
 800b970:	60fb      	str	r3, [r7, #12]
   return(result);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f023 0301 	bic.w	r3, r3, #1
 800b978:	64bb      	str	r3, [r7, #72]	; 0x48
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3308      	adds	r3, #8
 800b980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b982:	61fa      	str	r2, [r7, #28]
 800b984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b986:	69b9      	ldr	r1, [r7, #24]
 800b988:	69fa      	ldr	r2, [r7, #28]
 800b98a:	e841 2300 	strex	r3, r2, [r1]
 800b98e:	617b      	str	r3, [r7, #20]
   return(result);
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1e5      	bne.n	800b962 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2220      	movs	r2, #32
 800b99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e012      	b.n	800b9d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2220      	movs	r2, #32
 800b9ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2220      	movs	r2, #32
 800b9b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3758      	adds	r7, #88	; 0x58
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	603b      	str	r3, [r7, #0]
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9e8:	e049      	b.n	800ba7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f0:	d045      	beq.n	800ba7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9f2:	f7f5 ffc9 	bl	8001988 <HAL_GetTick>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	69ba      	ldr	r2, [r7, #24]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d302      	bcc.n	800ba08 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d101      	bne.n	800ba0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba08:	2303      	movs	r3, #3
 800ba0a:	e048      	b.n	800ba9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d031      	beq.n	800ba7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	69db      	ldr	r3, [r3, #28]
 800ba20:	f003 0308 	and.w	r3, r3, #8
 800ba24:	2b08      	cmp	r3, #8
 800ba26:	d110      	bne.n	800ba4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2208      	movs	r2, #8
 800ba2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f000 f95b 	bl	800bcec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2208      	movs	r2, #8
 800ba3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e029      	b.n	800ba9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69db      	ldr	r3, [r3, #28]
 800ba50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba58:	d111      	bne.n	800ba7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 f941 	bl	800bcec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2220      	movs	r2, #32
 800ba6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	e00f      	b.n	800ba9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	69da      	ldr	r2, [r3, #28]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	4013      	ands	r3, r2
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	bf0c      	ite	eq
 800ba8e:	2301      	moveq	r3, #1
 800ba90:	2300      	movne	r3, #0
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	461a      	mov	r2, r3
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d0a6      	beq.n	800b9ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b0a3      	sub	sp, #140	; 0x8c
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	60b9      	str	r1, [r7, #8]
 800bab2:	4613      	mov	r3, r2
 800bab4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	88fa      	ldrh	r2, [r7, #6]
 800bac0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	88fa      	ldrh	r2, [r7, #6]
 800bac8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bada:	d10e      	bne.n	800bafa <UART_Start_Receive_IT+0x52>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d105      	bne.n	800baf0 <UART_Start_Receive_IT+0x48>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800baea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baee:	e02d      	b.n	800bb4c <UART_Start_Receive_IT+0xa4>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	22ff      	movs	r2, #255	; 0xff
 800baf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800baf8:	e028      	b.n	800bb4c <UART_Start_Receive_IT+0xa4>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10d      	bne.n	800bb1e <UART_Start_Receive_IT+0x76>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d104      	bne.n	800bb14 <UART_Start_Receive_IT+0x6c>
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	22ff      	movs	r2, #255	; 0xff
 800bb0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb12:	e01b      	b.n	800bb4c <UART_Start_Receive_IT+0xa4>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	227f      	movs	r2, #127	; 0x7f
 800bb18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb1c:	e016      	b.n	800bb4c <UART_Start_Receive_IT+0xa4>
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb26:	d10d      	bne.n	800bb44 <UART_Start_Receive_IT+0x9c>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d104      	bne.n	800bb3a <UART_Start_Receive_IT+0x92>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	227f      	movs	r2, #127	; 0x7f
 800bb34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb38:	e008      	b.n	800bb4c <UART_Start_Receive_IT+0xa4>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	223f      	movs	r2, #63	; 0x3f
 800bb3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bb42:	e003      	b.n	800bb4c <UART_Start_Receive_IT+0xa4>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2222      	movs	r2, #34	; 0x22
 800bb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3308      	adds	r3, #8
 800bb62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb66:	e853 3f00 	ldrex	r3, [r3]
 800bb6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bb6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb6e:	f043 0301 	orr.w	r3, r3, #1
 800bb72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bb80:	673a      	str	r2, [r7, #112]	; 0x70
 800bb82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bb86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bb88:	e841 2300 	strex	r3, r2, [r1]
 800bb8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bb8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1e3      	bne.n	800bb5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb9c:	d14f      	bne.n	800bc3e <UART_Start_Receive_IT+0x196>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bba4:	88fa      	ldrh	r2, [r7, #6]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d349      	bcc.n	800bc3e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb2:	d107      	bne.n	800bbc4 <UART_Start_Receive_IT+0x11c>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d103      	bne.n	800bbc4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4a47      	ldr	r2, [pc, #284]	; (800bcdc <UART_Start_Receive_IT+0x234>)
 800bbc0:	675a      	str	r2, [r3, #116]	; 0x74
 800bbc2:	e002      	b.n	800bbca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	4a46      	ldr	r2, [pc, #280]	; (800bce0 <UART_Start_Receive_IT+0x238>)
 800bbc8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d01a      	beq.n	800bc08 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbda:	e853 3f00 	ldrex	r3, [r3]
 800bbde:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbe6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bbf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bbf6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bbfa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bbfc:	e841 2300 	strex	r3, r2, [r1]
 800bc00:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1e4      	bne.n	800bbd2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc12:	e853 3f00 	ldrex	r3, [r3]
 800bc16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3308      	adds	r3, #8
 800bc26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bc28:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc30:	e841 2300 	strex	r3, r2, [r1]
 800bc34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1e5      	bne.n	800bc08 <UART_Start_Receive_IT+0x160>
 800bc3c:	e046      	b.n	800bccc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc46:	d107      	bne.n	800bc58 <UART_Start_Receive_IT+0x1b0>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d103      	bne.n	800bc58 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4a24      	ldr	r2, [pc, #144]	; (800bce4 <UART_Start_Receive_IT+0x23c>)
 800bc54:	675a      	str	r2, [r3, #116]	; 0x74
 800bc56:	e002      	b.n	800bc5e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	4a23      	ldr	r2, [pc, #140]	; (800bce8 <UART_Start_Receive_IT+0x240>)
 800bc5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d019      	beq.n	800bc9a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	e853 3f00 	ldrex	r3, [r3]
 800bc72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bc7a:	677b      	str	r3, [r7, #116]	; 0x74
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	461a      	mov	r2, r3
 800bc82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
 800bc86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc8c:	e841 2300 	strex	r3, r2, [r1]
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e6      	bne.n	800bc66 <UART_Start_Receive_IT+0x1be>
 800bc98:	e018      	b.n	800bccc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	e853 3f00 	ldrex	r3, [r3]
 800bca6:	613b      	str	r3, [r7, #16]
   return(result);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f043 0320 	orr.w	r3, r3, #32
 800bcae:	67bb      	str	r3, [r7, #120]	; 0x78
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcb8:	623b      	str	r3, [r7, #32]
 800bcba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcbc:	69f9      	ldr	r1, [r7, #28]
 800bcbe:	6a3a      	ldr	r2, [r7, #32]
 800bcc0:	e841 2300 	strex	r3, r2, [r1]
 800bcc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d1e6      	bne.n	800bc9a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	378c      	adds	r7, #140	; 0x8c
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	0800c50d 	.word	0x0800c50d
 800bce0:	0800c1ad 	.word	0x0800c1ad
 800bce4:	0800bff5 	.word	0x0800bff5
 800bce8:	0800be3d 	.word	0x0800be3d

0800bcec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b095      	sub	sp, #84	; 0x54
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcfc:	e853 3f00 	ldrex	r3, [r3]
 800bd00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd12:	643b      	str	r3, [r7, #64]	; 0x40
 800bd14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd1a:	e841 2300 	strex	r3, r2, [r1]
 800bd1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1e6      	bne.n	800bcf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	3308      	adds	r3, #8
 800bd2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2e:	6a3b      	ldr	r3, [r7, #32]
 800bd30:	e853 3f00 	ldrex	r3, [r3]
 800bd34:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd36:	69fa      	ldr	r2, [r7, #28]
 800bd38:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <UART_EndRxTransfer+0xc8>)
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3308      	adds	r3, #8
 800bd44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd46:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd4e:	e841 2300 	strex	r3, r2, [r1]
 800bd52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1e5      	bne.n	800bd26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d118      	bne.n	800bd94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	e853 3f00 	ldrex	r3, [r3]
 800bd6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f023 0310 	bic.w	r3, r3, #16
 800bd76:	647b      	str	r3, [r7, #68]	; 0x44
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd80:	61bb      	str	r3, [r7, #24]
 800bd82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd84:	6979      	ldr	r1, [r7, #20]
 800bd86:	69ba      	ldr	r2, [r7, #24]
 800bd88:	e841 2300 	strex	r3, r2, [r1]
 800bd8c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d1e6      	bne.n	800bd62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2220      	movs	r2, #32
 800bd98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bda8:	bf00      	nop
 800bdaa:	3754      	adds	r7, #84	; 0x54
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	effffffe 	.word	0xeffffffe

0800bdb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f7fe ff34 	bl	800ac44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bddc:	bf00      	nop
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b088      	sub	sp, #32
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	e853 3f00 	ldrex	r3, [r3]
 800bdf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	461a      	mov	r2, r3
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	61bb      	str	r3, [r7, #24]
 800be0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0e:	6979      	ldr	r1, [r7, #20]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	e841 2300 	strex	r3, r2, [r1]
 800be16:	613b      	str	r3, [r7, #16]
   return(result);
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1e6      	bne.n	800bdec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2220      	movs	r2, #32
 800be22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f7fe feff 	bl	800ac30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be32:	bf00      	nop
 800be34:	3720      	adds	r7, #32
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
	...

0800be3c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b09c      	sub	sp, #112	; 0x70
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be54:	2b22      	cmp	r3, #34	; 0x22
 800be56:	f040 80be 	bne.w	800bfd6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be60:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800be68:	b2d9      	uxtb	r1, r3
 800be6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be74:	400a      	ands	r2, r1
 800be76:	b2d2      	uxtb	r2, r2
 800be78:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	3b01      	subs	r3, #1
 800be8e:	b29a      	uxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f040 80a1 	bne.w	800bfe6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beac:	e853 3f00 	ldrex	r3, [r3]
 800beb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800beb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beb8:	66bb      	str	r3, [r7, #104]	; 0x68
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	461a      	mov	r2, r3
 800bec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bec2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bec4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e6      	bne.n	800bea4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3308      	adds	r3, #8
 800bedc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee8:	f023 0301 	bic.w	r3, r3, #1
 800beec:	667b      	str	r3, [r7, #100]	; 0x64
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	3308      	adds	r3, #8
 800bef4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bef6:	647a      	str	r2, [r7, #68]	; 0x44
 800bef8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800befc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e5      	bne.n	800bed6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2220      	movs	r2, #32
 800bf0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a33      	ldr	r2, [pc, #204]	; (800bff0 <UART_RxISR_8BIT+0x1b4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d01f      	beq.n	800bf68 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d018      	beq.n	800bf68 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	e853 3f00 	ldrex	r3, [r3]
 800bf42:	623b      	str	r3, [r7, #32]
   return(result);
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf4a:	663b      	str	r3, [r7, #96]	; 0x60
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	461a      	mov	r2, r3
 800bf52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf54:	633b      	str	r3, [r7, #48]	; 0x30
 800bf56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf5c:	e841 2300 	strex	r3, r2, [r1]
 800bf60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d1e6      	bne.n	800bf36 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d12e      	bne.n	800bfce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f023 0310 	bic.w	r3, r3, #16
 800bf8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	461a      	mov	r2, r3
 800bf92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf94:	61fb      	str	r3, [r7, #28]
 800bf96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	69b9      	ldr	r1, [r7, #24]
 800bf9a:	69fa      	ldr	r2, [r7, #28]
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	617b      	str	r3, [r7, #20]
   return(result);
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e6      	bne.n	800bf76 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	69db      	ldr	r3, [r3, #28]
 800bfae:	f003 0310 	and.w	r3, r3, #16
 800bfb2:	2b10      	cmp	r3, #16
 800bfb4:	d103      	bne.n	800bfbe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2210      	movs	r2, #16
 800bfbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f7fe fe46 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfcc:	e00b      	b.n	800bfe6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7f4 fc18 	bl	8000804 <HAL_UART_RxCpltCallback>
}
 800bfd4:	e007      	b.n	800bfe6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f042 0208 	orr.w	r2, r2, #8
 800bfe4:	619a      	str	r2, [r3, #24]
}
 800bfe6:	bf00      	nop
 800bfe8:	3770      	adds	r7, #112	; 0x70
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	58000c00 	.word	0x58000c00

0800bff4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b09c      	sub	sp, #112	; 0x70
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c002:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c00c:	2b22      	cmp	r3, #34	; 0x22
 800c00e:	f040 80be 	bne.w	800c18e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c018:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c020:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c022:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c026:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c02a:	4013      	ands	r3, r2
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c030:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c036:	1c9a      	adds	r2, r3, #2
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c042:	b29b      	uxth	r3, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	b29a      	uxth	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c054:	b29b      	uxth	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	f040 80a1 	bne.w	800c19e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c06a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c06c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c070:	667b      	str	r3, [r7, #100]	; 0x64
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c07a:	657b      	str	r3, [r7, #84]	; 0x54
 800c07c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e6      	bne.n	800c05c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3308      	adds	r3, #8
 800c094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c098:	e853 3f00 	ldrex	r3, [r3]
 800c09c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	f023 0301 	bic.w	r3, r3, #1
 800c0a4:	663b      	str	r3, [r7, #96]	; 0x60
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3308      	adds	r3, #8
 800c0ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c0ae:	643a      	str	r2, [r7, #64]	; 0x40
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0b6:	e841 2300 	strex	r3, r2, [r1]
 800c0ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1e5      	bne.n	800c08e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a33      	ldr	r2, [pc, #204]	; (800c1a8 <UART_RxISR_16BIT+0x1b4>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d01f      	beq.n	800c120 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d018      	beq.n	800c120 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c102:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c10c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c10e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e6      	bne.n	800c0ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c124:	2b01      	cmp	r3, #1
 800c126:	d12e      	bne.n	800c186 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	e853 3f00 	ldrex	r3, [r3]
 800c13a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f023 0310 	bic.w	r3, r3, #16
 800c142:	65bb      	str	r3, [r7, #88]	; 0x58
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	461a      	mov	r2, r3
 800c14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c14c:	61bb      	str	r3, [r7, #24]
 800c14e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c150:	6979      	ldr	r1, [r7, #20]
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	e841 2300 	strex	r3, r2, [r1]
 800c158:	613b      	str	r3, [r7, #16]
   return(result);
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1e6      	bne.n	800c12e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	f003 0310 	and.w	r3, r3, #16
 800c16a:	2b10      	cmp	r3, #16
 800c16c:	d103      	bne.n	800c176 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2210      	movs	r2, #16
 800c174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7fe fd6a 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c184:	e00b      	b.n	800c19e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7f4 fb3c 	bl	8000804 <HAL_UART_RxCpltCallback>
}
 800c18c:	e007      	b.n	800c19e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	699a      	ldr	r2, [r3, #24]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f042 0208 	orr.w	r2, r2, #8
 800c19c:	619a      	str	r2, [r3, #24]
}
 800c19e:	bf00      	nop
 800c1a0:	3770      	adds	r7, #112	; 0x70
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	58000c00 	.word	0x58000c00

0800c1ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b0ac      	sub	sp, #176	; 0xb0
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1e2:	2b22      	cmp	r3, #34	; 0x22
 800c1e4:	f040 8180 	bne.w	800c4e8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1ee:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1f2:	e123      	b.n	800c43c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c202:	b2d9      	uxtb	r1, r3
 800c204:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c20e:	400a      	ands	r2, r1
 800c210:	b2d2      	uxtb	r2, r2
 800c212:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c218:	1c5a      	adds	r2, r3, #1
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c224:	b29b      	uxth	r3, r3
 800c226:	3b01      	subs	r3, #1
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c23a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	2b00      	cmp	r3, #0
 800c244:	d053      	beq.n	800c2ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d011      	beq.n	800c276 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00b      	beq.n	800c276 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2201      	movs	r2, #1
 800c264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c26c:	f043 0201 	orr.w	r2, r3, #1
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c27a:	f003 0302 	and.w	r3, r3, #2
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d011      	beq.n	800c2a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00b      	beq.n	800c2a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2202      	movs	r2, #2
 800c294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c29c:	f043 0204 	orr.w	r2, r3, #4
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d011      	beq.n	800c2d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c2b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00b      	beq.n	800c2d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2204      	movs	r2, #4
 800c2c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2cc:	f043 0202 	orr.w	r2, r3, #2
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d006      	beq.n	800c2ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7fe fcaf 	bl	800ac44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f040 80a0 	bne.w	800c43c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c304:	e853 3f00 	ldrex	r3, [r3]
 800c308:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c30c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	461a      	mov	r2, r3
 800c31a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c31e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c320:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c324:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c32c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e4      	bne.n	800c2fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3308      	adds	r3, #8
 800c338:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c33c:	e853 3f00 	ldrex	r3, [r3]
 800c340:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c342:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c344:	4b6e      	ldr	r3, [pc, #440]	; (800c500 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c346:	4013      	ands	r3, r2
 800c348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	3308      	adds	r3, #8
 800c352:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c356:	66ba      	str	r2, [r7, #104]	; 0x68
 800c358:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c35c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c35e:	e841 2300 	strex	r3, r2, [r1]
 800c362:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1e3      	bne.n	800c332 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2220      	movs	r2, #32
 800c36e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a60      	ldr	r2, [pc, #384]	; (800c504 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d021      	beq.n	800c3cc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d01a      	beq.n	800c3cc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c3a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3b8:	657b      	str	r3, [r7, #84]	; 0x54
 800c3ba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3c0:	e841 2300 	strex	r3, r2, [r1]
 800c3c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1e4      	bne.n	800c396 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d130      	bne.n	800c436 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ea:	f023 0310 	bic.w	r3, r3, #16
 800c3ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3fc:	643b      	str	r3, [r7, #64]	; 0x40
 800c3fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c404:	e841 2300 	strex	r3, r2, [r1]
 800c408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e4      	bne.n	800c3da <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	f003 0310 	and.w	r3, r3, #16
 800c41a:	2b10      	cmp	r3, #16
 800c41c:	d103      	bne.n	800c426 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2210      	movs	r2, #16
 800c424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7fe fc12 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
 800c434:	e002      	b.n	800c43c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7f4 f9e4 	bl	8000804 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c43c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c440:	2b00      	cmp	r3, #0
 800c442:	d006      	beq.n	800c452 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c448:	f003 0320 	and.w	r3, r3, #32
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f47f aed1 	bne.w	800c1f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c458:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c45c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c460:	2b00      	cmp	r3, #0
 800c462:	d049      	beq.n	800c4f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c46a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c46e:	429a      	cmp	r2, r3
 800c470:	d242      	bcs.n	800c4f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	3308      	adds	r3, #8
 800c478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	e853 3f00 	ldrex	r3, [r3]
 800c480:	61fb      	str	r3, [r7, #28]
   return(result);
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3308      	adds	r3, #8
 800c492:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c496:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c49c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c49e:	e841 2300 	strex	r3, r2, [r1]
 800c4a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1e3      	bne.n	800c472 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a16      	ldr	r2, [pc, #88]	; (800c508 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c4ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	e853 3f00 	ldrex	r3, [r3]
 800c4bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	f043 0320 	orr.w	r3, r3, #32
 800c4c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4d2:	61bb      	str	r3, [r7, #24]
 800c4d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d6:	6979      	ldr	r1, [r7, #20]
 800c4d8:	69ba      	ldr	r2, [r7, #24]
 800c4da:	e841 2300 	strex	r3, r2, [r1]
 800c4de:	613b      	str	r3, [r7, #16]
   return(result);
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1e4      	bne.n	800c4b0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4e6:	e007      	b.n	800c4f8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	699a      	ldr	r2, [r3, #24]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f042 0208 	orr.w	r2, r2, #8
 800c4f6:	619a      	str	r2, [r3, #24]
}
 800c4f8:	bf00      	nop
 800c4fa:	37b0      	adds	r7, #176	; 0xb0
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	effffffe 	.word	0xeffffffe
 800c504:	58000c00 	.word	0x58000c00
 800c508:	0800be3d 	.word	0x0800be3d

0800c50c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b0ae      	sub	sp, #184	; 0xb8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c51a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69db      	ldr	r3, [r3, #28]
 800c524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c542:	2b22      	cmp	r3, #34	; 0x22
 800c544:	f040 8184 	bne.w	800c850 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c54e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c552:	e127      	b.n	800c7a4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c566:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c56a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c56e:	4013      	ands	r3, r2
 800c570:	b29a      	uxth	r2, r3
 800c572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c576:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c57c:	1c9a      	adds	r2, r3, #2
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c588:	b29b      	uxth	r3, r3
 800c58a:	3b01      	subs	r3, #1
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	69db      	ldr	r3, [r3, #28]
 800c59a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c59e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d053      	beq.n	800c652 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c5ae:	f003 0301 	and.w	r3, r3, #1
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d011      	beq.n	800c5da <UART_RxISR_16BIT_FIFOEN+0xce>
 800c5b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00b      	beq.n	800c5da <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d0:	f043 0201 	orr.w	r2, r3, #1
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c5de:	f003 0302 	and.w	r3, r3, #2
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d011      	beq.n	800c60a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c5e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2202      	movs	r2, #2
 800c5f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c600:	f043 0204 	orr.w	r2, r3, #4
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c60a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c60e:	f003 0304 	and.w	r3, r3, #4
 800c612:	2b00      	cmp	r3, #0
 800c614:	d011      	beq.n	800c63a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00b      	beq.n	800c63a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2204      	movs	r2, #4
 800c628:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c630:	f043 0202 	orr.w	r2, r3, #2
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c640:	2b00      	cmp	r3, #0
 800c642:	d006      	beq.n	800c652 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f7fe fafd 	bl	800ac44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c658:	b29b      	uxth	r3, r3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f040 80a2 	bne.w	800c7a4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c668:	e853 3f00 	ldrex	r3, [r3]
 800c66c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c66e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	461a      	mov	r2, r3
 800c67e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c686:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c688:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c68a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e2      	bne.n	800c660 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3308      	adds	r3, #8
 800c6a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6a4:	e853 3f00 	ldrex	r3, [r3]
 800c6a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c6aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c6ac:	4b6e      	ldr	r3, [pc, #440]	; (800c868 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c6be:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c6c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c6c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6c6:	e841 2300 	strex	r3, r2, [r1]
 800c6ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c6cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1e3      	bne.n	800c69a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a60      	ldr	r2, [pc, #384]	; (800c86c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d021      	beq.n	800c734 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d01a      	beq.n	800c734 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c706:	e853 3f00 	ldrex	r3, [r3]
 800c70a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c70e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c720:	65bb      	str	r3, [r7, #88]	; 0x58
 800c722:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c726:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c728:	e841 2300 	strex	r3, r2, [r1]
 800c72c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1e4      	bne.n	800c6fe <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d130      	bne.n	800c79e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	e853 3f00 	ldrex	r3, [r3]
 800c74e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c752:	f023 0310 	bic.w	r3, r3, #16
 800c756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c764:	647b      	str	r3, [r7, #68]	; 0x44
 800c766:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c768:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c76a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c76c:	e841 2300 	strex	r3, r2, [r1]
 800c770:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1e4      	bne.n	800c742 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f003 0310 	and.w	r3, r3, #16
 800c782:	2b10      	cmp	r3, #16
 800c784:	d103      	bne.n	800c78e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2210      	movs	r2, #16
 800c78c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7fe fa5e 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
 800c79c:	e002      	b.n	800c7a4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7f4 f830 	bl	8000804 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c7a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d006      	beq.n	800c7ba <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c7ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f47f aecd 	bne.w	800c554 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d049      	beq.n	800c860 <UART_RxISR_16BIT_FIFOEN+0x354>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d242      	bcs.n	800c860 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3308      	adds	r3, #8
 800c7e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	e853 3f00 	ldrex	r3, [r3]
 800c7e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c7ea:	6a3b      	ldr	r3, [r7, #32]
 800c7ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c7fe:	633a      	str	r2, [r7, #48]	; 0x30
 800c800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e3      	bne.n	800c7da <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a16      	ldr	r2, [pc, #88]	; (800c870 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c816:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	e853 3f00 	ldrex	r3, [r3]
 800c824:	60fb      	str	r3, [r7, #12]
   return(result);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f043 0320 	orr.w	r3, r3, #32
 800c82c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	461a      	mov	r2, r3
 800c836:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c83a:	61fb      	str	r3, [r7, #28]
 800c83c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c83e:	69b9      	ldr	r1, [r7, #24]
 800c840:	69fa      	ldr	r2, [r7, #28]
 800c842:	e841 2300 	strex	r3, r2, [r1]
 800c846:	617b      	str	r3, [r7, #20]
   return(result);
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1e4      	bne.n	800c818 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c84e:	e007      	b.n	800c860 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	699a      	ldr	r2, [r3, #24]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f042 0208 	orr.w	r2, r2, #8
 800c85e:	619a      	str	r2, [r3, #24]
}
 800c860:	bf00      	nop
 800c862:	37b8      	adds	r7, #184	; 0xb8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	effffffe 	.word	0xeffffffe
 800c86c:	58000c00 	.word	0x58000c00
 800c870:	0800bff5 	.word	0x0800bff5

0800c874 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d101      	bne.n	800c8c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	e027      	b.n	800c916 <HAL_UARTEx_DisableFifoMode+0x66>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2224      	movs	r2, #36	; 0x24
 800c8d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f022 0201 	bic.w	r2, r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2220      	movs	r2, #32
 800c908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3714      	adds	r7, #20
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
 800c92a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c932:	2b01      	cmp	r3, #1
 800c934:	d101      	bne.n	800c93a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c936:	2302      	movs	r3, #2
 800c938:	e02d      	b.n	800c996 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2224      	movs	r2, #36	; 0x24
 800c946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f022 0201 	bic.w	r2, r2, #1
 800c960:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	689b      	ldr	r3, [r3, #8]
 800c968:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	683a      	ldr	r2, [r7, #0]
 800c972:	430a      	orrs	r2, r1
 800c974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f850 	bl	800ca1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2220      	movs	r2, #32
 800c988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d101      	bne.n	800c9b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9b2:	2302      	movs	r3, #2
 800c9b4:	e02d      	b.n	800ca12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2224      	movs	r2, #36	; 0x24
 800c9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f022 0201 	bic.w	r2, r2, #1
 800c9dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	683a      	ldr	r2, [r7, #0]
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f812 	bl	800ca1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2220      	movs	r2, #32
 800ca04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
	...

0800ca1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b085      	sub	sp, #20
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d108      	bne.n	800ca3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca3c:	e031      	b.n	800caa2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca3e:	2310      	movs	r3, #16
 800ca40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca42:	2310      	movs	r3, #16
 800ca44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	0e5b      	lsrs	r3, r3, #25
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 0307 	and.w	r3, r3, #7
 800ca54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	0f5b      	lsrs	r3, r3, #29
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	f003 0307 	and.w	r3, r3, #7
 800ca64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	7b3a      	ldrb	r2, [r7, #12]
 800ca6a:	4911      	ldr	r1, [pc, #68]	; (800cab0 <UARTEx_SetNbDataToProcess+0x94>)
 800ca6c:	5c8a      	ldrb	r2, [r1, r2]
 800ca6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca72:	7b3a      	ldrb	r2, [r7, #12]
 800ca74:	490f      	ldr	r1, [pc, #60]	; (800cab4 <UARTEx_SetNbDataToProcess+0x98>)
 800ca76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	7b7a      	ldrb	r2, [r7, #13]
 800ca88:	4909      	ldr	r1, [pc, #36]	; (800cab0 <UARTEx_SetNbDataToProcess+0x94>)
 800ca8a:	5c8a      	ldrb	r2, [r1, r2]
 800ca8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca90:	7b7a      	ldrb	r2, [r7, #13]
 800ca92:	4908      	ldr	r1, [pc, #32]	; (800cab4 <UARTEx_SetNbDataToProcess+0x98>)
 800ca94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca96:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800caa2:	bf00      	nop
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	0800dab4 	.word	0x0800dab4
 800cab4:	0800dabc 	.word	0x0800dabc

0800cab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cab8:	b084      	sub	sp, #16
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
 800cac2:	f107 001c 	add.w	r0, r7, #28
 800cac6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800caca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d120      	bne.n	800cb12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	68da      	ldr	r2, [r3, #12]
 800cae0:	4b2a      	ldr	r3, [pc, #168]	; (800cb8c <USB_CoreInit+0xd4>)
 800cae2:	4013      	ands	r3, r2
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800caf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d105      	bne.n	800cb06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 faac 	bl	800d064 <USB_CoreReset>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]
 800cb10:	e01a      	b.n	800cb48 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 faa0 	bl	800d064 <USB_CoreReset>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d106      	bne.n	800cb3c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38
 800cb3a:	e005      	b.n	800cb48 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d116      	bne.n	800cb7c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb5c:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <USB_CoreInit+0xd8>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	f043 0206 	orr.w	r2, r3, #6
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f043 0220 	orr.w	r2, r3, #32
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb88:	b004      	add	sp, #16
 800cb8a:	4770      	bx	lr
 800cb8c:	ffbdffbf 	.word	0xffbdffbf
 800cb90:	03ee0000 	.word	0x03ee0000

0800cb94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	f023 0201 	bic.w	r2, r3, #1
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cbd2:	78fb      	ldrb	r3, [r7, #3]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d115      	bne.n	800cc04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f7f4 fedb 	bl	80019a0 <HAL_Delay>
      ms++;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3301      	adds	r3, #1
 800cbee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fa29 	bl	800d048 <USB_GetMode>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d01e      	beq.n	800cc3a <USB_SetCurrentMode+0x84>
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b31      	cmp	r3, #49	; 0x31
 800cc00:	d9f0      	bls.n	800cbe4 <USB_SetCurrentMode+0x2e>
 800cc02:	e01a      	b.n	800cc3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cc04:	78fb      	ldrb	r3, [r7, #3]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d115      	bne.n	800cc36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cc16:	2001      	movs	r0, #1
 800cc18:	f7f4 fec2 	bl	80019a0 <HAL_Delay>
      ms++;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fa10 	bl	800d048 <USB_GetMode>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d005      	beq.n	800cc3a <USB_SetCurrentMode+0x84>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b31      	cmp	r3, #49	; 0x31
 800cc32:	d9f0      	bls.n	800cc16 <USB_SetCurrentMode+0x60>
 800cc34:	e001      	b.n	800cc3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e005      	b.n	800cc46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2b32      	cmp	r3, #50	; 0x32
 800cc3e:	d101      	bne.n	800cc44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e000      	b.n	800cc46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc50:	b084      	sub	sp, #16
 800cc52:	b580      	push	{r7, lr}
 800cc54:	b086      	sub	sp, #24
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cc5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	613b      	str	r3, [r7, #16]
 800cc6e:	e009      	b.n	800cc84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	3340      	adds	r3, #64	; 0x40
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	3301      	adds	r3, #1
 800cc82:	613b      	str	r3, [r7, #16]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	2b0e      	cmp	r3, #14
 800cc88:	d9f2      	bls.n	800cc70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d11c      	bne.n	800ccca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc9e:	f043 0302 	orr.w	r3, r3, #2
 800cca2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	e005      	b.n	800ccd6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccdc:	461a      	mov	r2, r3
 800ccde:	2300      	movs	r3, #0
 800cce0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cce8:	4619      	mov	r1, r3
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	680b      	ldr	r3, [r1, #0]
 800ccf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d10c      	bne.n	800cd16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d104      	bne.n	800cd0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cd02:	2100      	movs	r1, #0
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f965 	bl	800cfd4 <USB_SetDevSpeed>
 800cd0a:	e008      	b.n	800cd1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 f960 	bl	800cfd4 <USB_SetDevSpeed>
 800cd14:	e003      	b.n	800cd1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cd16:	2103      	movs	r1, #3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f95b 	bl	800cfd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd1e:	2110      	movs	r1, #16
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f8f3 	bl	800cf0c <USB_FlushTxFifo>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f91f 	bl	800cf74 <USB_FlushRxFifo>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd46:	461a      	mov	r2, r3
 800cd48:	2300      	movs	r3, #0
 800cd4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd52:	461a      	mov	r2, r3
 800cd54:	2300      	movs	r3, #0
 800cd56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd5e:	461a      	mov	r2, r3
 800cd60:	2300      	movs	r3, #0
 800cd62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd64:	2300      	movs	r3, #0
 800cd66:	613b      	str	r3, [r7, #16]
 800cd68:	e043      	b.n	800cdf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	015a      	lsls	r2, r3, #5
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	4413      	add	r3, r2
 800cd72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd80:	d118      	bne.n	800cdb4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	015a      	lsls	r2, r3, #5
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4413      	add	r3, r2
 800cd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd94:	461a      	mov	r2, r3
 800cd96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	e013      	b.n	800cdc6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	015a      	lsls	r2, r3, #5
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	4413      	add	r3, r2
 800cda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cdb0:	6013      	str	r3, [r2, #0]
 800cdb2:	e008      	b.n	800cdc6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	015a      	lsls	r2, r3, #5
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	4413      	add	r3, r2
 800cdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	015a      	lsls	r2, r3, #5
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	4413      	add	r3, r2
 800cdce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	015a      	lsls	r2, r3, #5
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	4413      	add	r3, r2
 800cde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cde4:	461a      	mov	r2, r3
 800cde6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cdea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	613b      	str	r3, [r7, #16]
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	693a      	ldr	r2, [r7, #16]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d3b7      	bcc.n	800cd6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	613b      	str	r3, [r7, #16]
 800cdfe:	e043      	b.n	800ce88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	015a      	lsls	r2, r3, #5
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce16:	d118      	bne.n	800ce4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d10a      	bne.n	800ce34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ce30:	6013      	str	r3, [r2, #0]
 800ce32:	e013      	b.n	800ce5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	015a      	lsls	r2, r3, #5
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce40:	461a      	mov	r2, r3
 800ce42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ce46:	6013      	str	r3, [r2, #0]
 800ce48:	e008      	b.n	800ce5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	015a      	lsls	r2, r3, #5
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	4413      	add	r3, r2
 800ce52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce56:	461a      	mov	r2, r3
 800ce58:	2300      	movs	r3, #0
 800ce5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce68:	461a      	mov	r2, r3
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	015a      	lsls	r2, r3, #5
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	4413      	add	r3, r2
 800ce76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ce80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	3301      	adds	r3, #1
 800ce86:	613b      	str	r3, [r7, #16]
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d3b7      	bcc.n	800ce00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cea2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ceb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ceb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d105      	bne.n	800cec4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	699b      	ldr	r3, [r3, #24]
 800cebc:	f043 0210 	orr.w	r2, r3, #16
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	699a      	ldr	r2, [r3, #24]
 800cec8:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <USB_DevInit+0x2b4>)
 800ceca:	4313      	orrs	r3, r2
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ced0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d005      	beq.n	800cee2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	699b      	ldr	r3, [r3, #24]
 800ceda:	f043 0208 	orr.w	r2, r3, #8
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d105      	bne.n	800cef4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	699a      	ldr	r2, [r3, #24]
 800ceec:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <USB_DevInit+0x2b8>)
 800ceee:	4313      	orrs	r3, r2
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cef4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf00:	b004      	add	sp, #16
 800cf02:	4770      	bx	lr
 800cf04:	803c3800 	.word	0x803c3800
 800cf08:	40000004 	.word	0x40000004

0800cf0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cf16:	2300      	movs	r3, #0
 800cf18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	4a13      	ldr	r2, [pc, #76]	; (800cf70 <USB_FlushTxFifo+0x64>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d901      	bls.n	800cf2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e01b      	b.n	800cf64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	691b      	ldr	r3, [r3, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	daf2      	bge.n	800cf1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cf34:	2300      	movs	r3, #0
 800cf36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	019b      	lsls	r3, r3, #6
 800cf3c:	f043 0220 	orr.w	r2, r3, #32
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	3301      	adds	r3, #1
 800cf48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	4a08      	ldr	r2, [pc, #32]	; (800cf70 <USB_FlushTxFifo+0x64>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d901      	bls.n	800cf56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e006      	b.n	800cf64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	f003 0320 	and.w	r3, r3, #32
 800cf5e:	2b20      	cmp	r3, #32
 800cf60:	d0f0      	beq.n	800cf44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3714      	adds	r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	00030d40 	.word	0x00030d40

0800cf74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3301      	adds	r3, #1
 800cf84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4a11      	ldr	r2, [pc, #68]	; (800cfd0 <USB_FlushRxFifo+0x5c>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d901      	bls.n	800cf92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	e018      	b.n	800cfc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	691b      	ldr	r3, [r3, #16]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	daf2      	bge.n	800cf80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2210      	movs	r2, #16
 800cfa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	4a08      	ldr	r2, [pc, #32]	; (800cfd0 <USB_FlushRxFifo+0x5c>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d901      	bls.n	800cfb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e006      	b.n	800cfc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	f003 0310 	and.w	r3, r3, #16
 800cfbe:	2b10      	cmp	r3, #16
 800cfc0:	d0f0      	beq.n	800cfa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3714      	adds	r7, #20
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr
 800cfd0:	00030d40 	.word	0x00030d40

0800cfd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	68f9      	ldr	r1, [r7, #12]
 800cff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cff4:	4313      	orrs	r3, r2
 800cff6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr

0800d006 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d006:	b480      	push	{r7}
 800d008:	b085      	sub	sp, #20
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d020:	f023 0303 	bic.w	r3, r3, #3
 800d024:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d034:	f043 0302 	orr.w	r3, r3, #2
 800d038:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3714      	adds	r7, #20
 800d040:	46bd      	mov	sp, r7
 800d042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d046:	4770      	bx	lr

0800d048 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	f003 0301 	and.w	r3, r3, #1
}
 800d058:	4618      	mov	r0, r3
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3301      	adds	r3, #1
 800d074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	4a13      	ldr	r2, [pc, #76]	; (800d0c8 <USB_CoreReset+0x64>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d901      	bls.n	800d082 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d07e:	2303      	movs	r3, #3
 800d080:	e01b      	b.n	800d0ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	691b      	ldr	r3, [r3, #16]
 800d086:	2b00      	cmp	r3, #0
 800d088:	daf2      	bge.n	800d070 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d08a:	2300      	movs	r3, #0
 800d08c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	f043 0201 	orr.w	r2, r3, #1
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3301      	adds	r3, #1
 800d09e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4a09      	ldr	r2, [pc, #36]	; (800d0c8 <USB_CoreReset+0x64>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d901      	bls.n	800d0ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e006      	b.n	800d0ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	691b      	ldr	r3, [r3, #16]
 800d0b0:	f003 0301 	and.w	r3, r3, #1
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d0f0      	beq.n	800d09a <USB_CoreReset+0x36>

  return HAL_OK;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	00030d40 	.word	0x00030d40

0800d0cc <_vsniprintf_r>:
 800d0cc:	b530      	push	{r4, r5, lr}
 800d0ce:	4614      	mov	r4, r2
 800d0d0:	2c00      	cmp	r4, #0
 800d0d2:	b09b      	sub	sp, #108	; 0x6c
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	da05      	bge.n	800d0e6 <_vsniprintf_r+0x1a>
 800d0da:	238b      	movs	r3, #139	; 0x8b
 800d0dc:	6003      	str	r3, [r0, #0]
 800d0de:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e2:	b01b      	add	sp, #108	; 0x6c
 800d0e4:	bd30      	pop	{r4, r5, pc}
 800d0e6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d0ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d0ee:	bf14      	ite	ne
 800d0f0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d0f4:	4623      	moveq	r3, r4
 800d0f6:	9302      	str	r3, [sp, #8]
 800d0f8:	9305      	str	r3, [sp, #20]
 800d0fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d0fe:	9100      	str	r1, [sp, #0]
 800d100:	9104      	str	r1, [sp, #16]
 800d102:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d106:	4669      	mov	r1, sp
 800d108:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d10a:	f000 f99f 	bl	800d44c <_svfiprintf_r>
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	bfbc      	itt	lt
 800d112:	238b      	movlt	r3, #139	; 0x8b
 800d114:	602b      	strlt	r3, [r5, #0]
 800d116:	2c00      	cmp	r4, #0
 800d118:	d0e3      	beq.n	800d0e2 <_vsniprintf_r+0x16>
 800d11a:	9b00      	ldr	r3, [sp, #0]
 800d11c:	2200      	movs	r2, #0
 800d11e:	701a      	strb	r2, [r3, #0]
 800d120:	e7df      	b.n	800d0e2 <_vsniprintf_r+0x16>
	...

0800d124 <vsniprintf>:
 800d124:	b507      	push	{r0, r1, r2, lr}
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4613      	mov	r3, r2
 800d12a:	460a      	mov	r2, r1
 800d12c:	4601      	mov	r1, r0
 800d12e:	4803      	ldr	r0, [pc, #12]	; (800d13c <vsniprintf+0x18>)
 800d130:	6800      	ldr	r0, [r0, #0]
 800d132:	f7ff ffcb 	bl	800d0cc <_vsniprintf_r>
 800d136:	b003      	add	sp, #12
 800d138:	f85d fb04 	ldr.w	pc, [sp], #4
 800d13c:	2400005c 	.word	0x2400005c

0800d140 <memset>:
 800d140:	4402      	add	r2, r0
 800d142:	4603      	mov	r3, r0
 800d144:	4293      	cmp	r3, r2
 800d146:	d100      	bne.n	800d14a <memset+0xa>
 800d148:	4770      	bx	lr
 800d14a:	f803 1b01 	strb.w	r1, [r3], #1
 800d14e:	e7f9      	b.n	800d144 <memset+0x4>

0800d150 <__errno>:
 800d150:	4b01      	ldr	r3, [pc, #4]	; (800d158 <__errno+0x8>)
 800d152:	6818      	ldr	r0, [r3, #0]
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	2400005c 	.word	0x2400005c

0800d15c <__libc_init_array>:
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	4d0d      	ldr	r5, [pc, #52]	; (800d194 <__libc_init_array+0x38>)
 800d160:	4c0d      	ldr	r4, [pc, #52]	; (800d198 <__libc_init_array+0x3c>)
 800d162:	1b64      	subs	r4, r4, r5
 800d164:	10a4      	asrs	r4, r4, #2
 800d166:	2600      	movs	r6, #0
 800d168:	42a6      	cmp	r6, r4
 800d16a:	d109      	bne.n	800d180 <__libc_init_array+0x24>
 800d16c:	4d0b      	ldr	r5, [pc, #44]	; (800d19c <__libc_init_array+0x40>)
 800d16e:	4c0c      	ldr	r4, [pc, #48]	; (800d1a0 <__libc_init_array+0x44>)
 800d170:	f000 fc6a 	bl	800da48 <_init>
 800d174:	1b64      	subs	r4, r4, r5
 800d176:	10a4      	asrs	r4, r4, #2
 800d178:	2600      	movs	r6, #0
 800d17a:	42a6      	cmp	r6, r4
 800d17c:	d105      	bne.n	800d18a <__libc_init_array+0x2e>
 800d17e:	bd70      	pop	{r4, r5, r6, pc}
 800d180:	f855 3b04 	ldr.w	r3, [r5], #4
 800d184:	4798      	blx	r3
 800d186:	3601      	adds	r6, #1
 800d188:	e7ee      	b.n	800d168 <__libc_init_array+0xc>
 800d18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d18e:	4798      	blx	r3
 800d190:	3601      	adds	r6, #1
 800d192:	e7f2      	b.n	800d17a <__libc_init_array+0x1e>
 800d194:	0800db00 	.word	0x0800db00
 800d198:	0800db00 	.word	0x0800db00
 800d19c:	0800db00 	.word	0x0800db00
 800d1a0:	0800db04 	.word	0x0800db04

0800d1a4 <__retarget_lock_acquire_recursive>:
 800d1a4:	4770      	bx	lr

0800d1a6 <__retarget_lock_release_recursive>:
 800d1a6:	4770      	bx	lr

0800d1a8 <_free_r>:
 800d1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	d044      	beq.n	800d238 <_free_r+0x90>
 800d1ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b2:	9001      	str	r0, [sp, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d1ba:	bfb8      	it	lt
 800d1bc:	18e4      	addlt	r4, r4, r3
 800d1be:	f000 f8df 	bl	800d380 <__malloc_lock>
 800d1c2:	4a1e      	ldr	r2, [pc, #120]	; (800d23c <_free_r+0x94>)
 800d1c4:	9801      	ldr	r0, [sp, #4]
 800d1c6:	6813      	ldr	r3, [r2, #0]
 800d1c8:	b933      	cbnz	r3, 800d1d8 <_free_r+0x30>
 800d1ca:	6063      	str	r3, [r4, #4]
 800d1cc:	6014      	str	r4, [r2, #0]
 800d1ce:	b003      	add	sp, #12
 800d1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1d4:	f000 b8da 	b.w	800d38c <__malloc_unlock>
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	d908      	bls.n	800d1ee <_free_r+0x46>
 800d1dc:	6825      	ldr	r5, [r4, #0]
 800d1de:	1961      	adds	r1, r4, r5
 800d1e0:	428b      	cmp	r3, r1
 800d1e2:	bf01      	itttt	eq
 800d1e4:	6819      	ldreq	r1, [r3, #0]
 800d1e6:	685b      	ldreq	r3, [r3, #4]
 800d1e8:	1949      	addeq	r1, r1, r5
 800d1ea:	6021      	streq	r1, [r4, #0]
 800d1ec:	e7ed      	b.n	800d1ca <_free_r+0x22>
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	b10b      	cbz	r3, 800d1f8 <_free_r+0x50>
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d9fa      	bls.n	800d1ee <_free_r+0x46>
 800d1f8:	6811      	ldr	r1, [r2, #0]
 800d1fa:	1855      	adds	r5, r2, r1
 800d1fc:	42a5      	cmp	r5, r4
 800d1fe:	d10b      	bne.n	800d218 <_free_r+0x70>
 800d200:	6824      	ldr	r4, [r4, #0]
 800d202:	4421      	add	r1, r4
 800d204:	1854      	adds	r4, r2, r1
 800d206:	42a3      	cmp	r3, r4
 800d208:	6011      	str	r1, [r2, #0]
 800d20a:	d1e0      	bne.n	800d1ce <_free_r+0x26>
 800d20c:	681c      	ldr	r4, [r3, #0]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	6053      	str	r3, [r2, #4]
 800d212:	440c      	add	r4, r1
 800d214:	6014      	str	r4, [r2, #0]
 800d216:	e7da      	b.n	800d1ce <_free_r+0x26>
 800d218:	d902      	bls.n	800d220 <_free_r+0x78>
 800d21a:	230c      	movs	r3, #12
 800d21c:	6003      	str	r3, [r0, #0]
 800d21e:	e7d6      	b.n	800d1ce <_free_r+0x26>
 800d220:	6825      	ldr	r5, [r4, #0]
 800d222:	1961      	adds	r1, r4, r5
 800d224:	428b      	cmp	r3, r1
 800d226:	bf04      	itt	eq
 800d228:	6819      	ldreq	r1, [r3, #0]
 800d22a:	685b      	ldreq	r3, [r3, #4]
 800d22c:	6063      	str	r3, [r4, #4]
 800d22e:	bf04      	itt	eq
 800d230:	1949      	addeq	r1, r1, r5
 800d232:	6021      	streq	r1, [r4, #0]
 800d234:	6054      	str	r4, [r2, #4]
 800d236:	e7ca      	b.n	800d1ce <_free_r+0x26>
 800d238:	b003      	add	sp, #12
 800d23a:	bd30      	pop	{r4, r5, pc}
 800d23c:	24002ab8 	.word	0x24002ab8

0800d240 <sbrk_aligned>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	4e0e      	ldr	r6, [pc, #56]	; (800d27c <sbrk_aligned+0x3c>)
 800d244:	460c      	mov	r4, r1
 800d246:	6831      	ldr	r1, [r6, #0]
 800d248:	4605      	mov	r5, r0
 800d24a:	b911      	cbnz	r1, 800d252 <sbrk_aligned+0x12>
 800d24c:	f000 fba6 	bl	800d99c <_sbrk_r>
 800d250:	6030      	str	r0, [r6, #0]
 800d252:	4621      	mov	r1, r4
 800d254:	4628      	mov	r0, r5
 800d256:	f000 fba1 	bl	800d99c <_sbrk_r>
 800d25a:	1c43      	adds	r3, r0, #1
 800d25c:	d00a      	beq.n	800d274 <sbrk_aligned+0x34>
 800d25e:	1cc4      	adds	r4, r0, #3
 800d260:	f024 0403 	bic.w	r4, r4, #3
 800d264:	42a0      	cmp	r0, r4
 800d266:	d007      	beq.n	800d278 <sbrk_aligned+0x38>
 800d268:	1a21      	subs	r1, r4, r0
 800d26a:	4628      	mov	r0, r5
 800d26c:	f000 fb96 	bl	800d99c <_sbrk_r>
 800d270:	3001      	adds	r0, #1
 800d272:	d101      	bne.n	800d278 <sbrk_aligned+0x38>
 800d274:	f04f 34ff 	mov.w	r4, #4294967295
 800d278:	4620      	mov	r0, r4
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	24002abc 	.word	0x24002abc

0800d280 <_malloc_r>:
 800d280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d284:	1ccd      	adds	r5, r1, #3
 800d286:	f025 0503 	bic.w	r5, r5, #3
 800d28a:	3508      	adds	r5, #8
 800d28c:	2d0c      	cmp	r5, #12
 800d28e:	bf38      	it	cc
 800d290:	250c      	movcc	r5, #12
 800d292:	2d00      	cmp	r5, #0
 800d294:	4607      	mov	r7, r0
 800d296:	db01      	blt.n	800d29c <_malloc_r+0x1c>
 800d298:	42a9      	cmp	r1, r5
 800d29a:	d905      	bls.n	800d2a8 <_malloc_r+0x28>
 800d29c:	230c      	movs	r3, #12
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	2600      	movs	r6, #0
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d37c <_malloc_r+0xfc>
 800d2ac:	f000 f868 	bl	800d380 <__malloc_lock>
 800d2b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d2b4:	461c      	mov	r4, r3
 800d2b6:	bb5c      	cbnz	r4, 800d310 <_malloc_r+0x90>
 800d2b8:	4629      	mov	r1, r5
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	f7ff ffc0 	bl	800d240 <sbrk_aligned>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	d155      	bne.n	800d372 <_malloc_r+0xf2>
 800d2c6:	f8d8 4000 	ldr.w	r4, [r8]
 800d2ca:	4626      	mov	r6, r4
 800d2cc:	2e00      	cmp	r6, #0
 800d2ce:	d145      	bne.n	800d35c <_malloc_r+0xdc>
 800d2d0:	2c00      	cmp	r4, #0
 800d2d2:	d048      	beq.n	800d366 <_malloc_r+0xe6>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	4638      	mov	r0, r7
 800d2da:	eb04 0903 	add.w	r9, r4, r3
 800d2de:	f000 fb5d 	bl	800d99c <_sbrk_r>
 800d2e2:	4581      	cmp	r9, r0
 800d2e4:	d13f      	bne.n	800d366 <_malloc_r+0xe6>
 800d2e6:	6821      	ldr	r1, [r4, #0]
 800d2e8:	1a6d      	subs	r5, r5, r1
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	f7ff ffa7 	bl	800d240 <sbrk_aligned>
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	d037      	beq.n	800d366 <_malloc_r+0xe6>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	442b      	add	r3, r5
 800d2fa:	6023      	str	r3, [r4, #0]
 800d2fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d038      	beq.n	800d376 <_malloc_r+0xf6>
 800d304:	685a      	ldr	r2, [r3, #4]
 800d306:	42a2      	cmp	r2, r4
 800d308:	d12b      	bne.n	800d362 <_malloc_r+0xe2>
 800d30a:	2200      	movs	r2, #0
 800d30c:	605a      	str	r2, [r3, #4]
 800d30e:	e00f      	b.n	800d330 <_malloc_r+0xb0>
 800d310:	6822      	ldr	r2, [r4, #0]
 800d312:	1b52      	subs	r2, r2, r5
 800d314:	d41f      	bmi.n	800d356 <_malloc_r+0xd6>
 800d316:	2a0b      	cmp	r2, #11
 800d318:	d917      	bls.n	800d34a <_malloc_r+0xca>
 800d31a:	1961      	adds	r1, r4, r5
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	6025      	str	r5, [r4, #0]
 800d320:	bf18      	it	ne
 800d322:	6059      	strne	r1, [r3, #4]
 800d324:	6863      	ldr	r3, [r4, #4]
 800d326:	bf08      	it	eq
 800d328:	f8c8 1000 	streq.w	r1, [r8]
 800d32c:	5162      	str	r2, [r4, r5]
 800d32e:	604b      	str	r3, [r1, #4]
 800d330:	4638      	mov	r0, r7
 800d332:	f104 060b 	add.w	r6, r4, #11
 800d336:	f000 f829 	bl	800d38c <__malloc_unlock>
 800d33a:	f026 0607 	bic.w	r6, r6, #7
 800d33e:	1d23      	adds	r3, r4, #4
 800d340:	1af2      	subs	r2, r6, r3
 800d342:	d0ae      	beq.n	800d2a2 <_malloc_r+0x22>
 800d344:	1b9b      	subs	r3, r3, r6
 800d346:	50a3      	str	r3, [r4, r2]
 800d348:	e7ab      	b.n	800d2a2 <_malloc_r+0x22>
 800d34a:	42a3      	cmp	r3, r4
 800d34c:	6862      	ldr	r2, [r4, #4]
 800d34e:	d1dd      	bne.n	800d30c <_malloc_r+0x8c>
 800d350:	f8c8 2000 	str.w	r2, [r8]
 800d354:	e7ec      	b.n	800d330 <_malloc_r+0xb0>
 800d356:	4623      	mov	r3, r4
 800d358:	6864      	ldr	r4, [r4, #4]
 800d35a:	e7ac      	b.n	800d2b6 <_malloc_r+0x36>
 800d35c:	4634      	mov	r4, r6
 800d35e:	6876      	ldr	r6, [r6, #4]
 800d360:	e7b4      	b.n	800d2cc <_malloc_r+0x4c>
 800d362:	4613      	mov	r3, r2
 800d364:	e7cc      	b.n	800d300 <_malloc_r+0x80>
 800d366:	230c      	movs	r3, #12
 800d368:	603b      	str	r3, [r7, #0]
 800d36a:	4638      	mov	r0, r7
 800d36c:	f000 f80e 	bl	800d38c <__malloc_unlock>
 800d370:	e797      	b.n	800d2a2 <_malloc_r+0x22>
 800d372:	6025      	str	r5, [r4, #0]
 800d374:	e7dc      	b.n	800d330 <_malloc_r+0xb0>
 800d376:	605b      	str	r3, [r3, #4]
 800d378:	deff      	udf	#255	; 0xff
 800d37a:	bf00      	nop
 800d37c:	24002ab8 	.word	0x24002ab8

0800d380 <__malloc_lock>:
 800d380:	4801      	ldr	r0, [pc, #4]	; (800d388 <__malloc_lock+0x8>)
 800d382:	f7ff bf0f 	b.w	800d1a4 <__retarget_lock_acquire_recursive>
 800d386:	bf00      	nop
 800d388:	24002ab4 	.word	0x24002ab4

0800d38c <__malloc_unlock>:
 800d38c:	4801      	ldr	r0, [pc, #4]	; (800d394 <__malloc_unlock+0x8>)
 800d38e:	f7ff bf0a 	b.w	800d1a6 <__retarget_lock_release_recursive>
 800d392:	bf00      	nop
 800d394:	24002ab4 	.word	0x24002ab4

0800d398 <__ssputs_r>:
 800d398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d39c:	688e      	ldr	r6, [r1, #8]
 800d39e:	461f      	mov	r7, r3
 800d3a0:	42be      	cmp	r6, r7
 800d3a2:	680b      	ldr	r3, [r1, #0]
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	4690      	mov	r8, r2
 800d3aa:	d82c      	bhi.n	800d406 <__ssputs_r+0x6e>
 800d3ac:	898a      	ldrh	r2, [r1, #12]
 800d3ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3b2:	d026      	beq.n	800d402 <__ssputs_r+0x6a>
 800d3b4:	6965      	ldr	r5, [r4, #20]
 800d3b6:	6909      	ldr	r1, [r1, #16]
 800d3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3bc:	eba3 0901 	sub.w	r9, r3, r1
 800d3c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3c4:	1c7b      	adds	r3, r7, #1
 800d3c6:	444b      	add	r3, r9
 800d3c8:	106d      	asrs	r5, r5, #1
 800d3ca:	429d      	cmp	r5, r3
 800d3cc:	bf38      	it	cc
 800d3ce:	461d      	movcc	r5, r3
 800d3d0:	0553      	lsls	r3, r2, #21
 800d3d2:	d527      	bpl.n	800d424 <__ssputs_r+0x8c>
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	f7ff ff53 	bl	800d280 <_malloc_r>
 800d3da:	4606      	mov	r6, r0
 800d3dc:	b360      	cbz	r0, 800d438 <__ssputs_r+0xa0>
 800d3de:	6921      	ldr	r1, [r4, #16]
 800d3e0:	464a      	mov	r2, r9
 800d3e2:	f000 faeb 	bl	800d9bc <memcpy>
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	6126      	str	r6, [r4, #16]
 800d3f4:	6165      	str	r5, [r4, #20]
 800d3f6:	444e      	add	r6, r9
 800d3f8:	eba5 0509 	sub.w	r5, r5, r9
 800d3fc:	6026      	str	r6, [r4, #0]
 800d3fe:	60a5      	str	r5, [r4, #8]
 800d400:	463e      	mov	r6, r7
 800d402:	42be      	cmp	r6, r7
 800d404:	d900      	bls.n	800d408 <__ssputs_r+0x70>
 800d406:	463e      	mov	r6, r7
 800d408:	6820      	ldr	r0, [r4, #0]
 800d40a:	4632      	mov	r2, r6
 800d40c:	4641      	mov	r1, r8
 800d40e:	f000 faab 	bl	800d968 <memmove>
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	1b9b      	subs	r3, r3, r6
 800d416:	60a3      	str	r3, [r4, #8]
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	4433      	add	r3, r6
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	2000      	movs	r0, #0
 800d420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d424:	462a      	mov	r2, r5
 800d426:	f000 fad7 	bl	800d9d8 <_realloc_r>
 800d42a:	4606      	mov	r6, r0
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d1e0      	bne.n	800d3f2 <__ssputs_r+0x5a>
 800d430:	6921      	ldr	r1, [r4, #16]
 800d432:	4650      	mov	r0, sl
 800d434:	f7ff feb8 	bl	800d1a8 <_free_r>
 800d438:	230c      	movs	r3, #12
 800d43a:	f8ca 3000 	str.w	r3, [sl]
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d444:	81a3      	strh	r3, [r4, #12]
 800d446:	f04f 30ff 	mov.w	r0, #4294967295
 800d44a:	e7e9      	b.n	800d420 <__ssputs_r+0x88>

0800d44c <_svfiprintf_r>:
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	4698      	mov	r8, r3
 800d452:	898b      	ldrh	r3, [r1, #12]
 800d454:	061b      	lsls	r3, r3, #24
 800d456:	b09d      	sub	sp, #116	; 0x74
 800d458:	4607      	mov	r7, r0
 800d45a:	460d      	mov	r5, r1
 800d45c:	4614      	mov	r4, r2
 800d45e:	d50e      	bpl.n	800d47e <_svfiprintf_r+0x32>
 800d460:	690b      	ldr	r3, [r1, #16]
 800d462:	b963      	cbnz	r3, 800d47e <_svfiprintf_r+0x32>
 800d464:	2140      	movs	r1, #64	; 0x40
 800d466:	f7ff ff0b 	bl	800d280 <_malloc_r>
 800d46a:	6028      	str	r0, [r5, #0]
 800d46c:	6128      	str	r0, [r5, #16]
 800d46e:	b920      	cbnz	r0, 800d47a <_svfiprintf_r+0x2e>
 800d470:	230c      	movs	r3, #12
 800d472:	603b      	str	r3, [r7, #0]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	e0d0      	b.n	800d61c <_svfiprintf_r+0x1d0>
 800d47a:	2340      	movs	r3, #64	; 0x40
 800d47c:	616b      	str	r3, [r5, #20]
 800d47e:	2300      	movs	r3, #0
 800d480:	9309      	str	r3, [sp, #36]	; 0x24
 800d482:	2320      	movs	r3, #32
 800d484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d488:	f8cd 800c 	str.w	r8, [sp, #12]
 800d48c:	2330      	movs	r3, #48	; 0x30
 800d48e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d634 <_svfiprintf_r+0x1e8>
 800d492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d496:	f04f 0901 	mov.w	r9, #1
 800d49a:	4623      	mov	r3, r4
 800d49c:	469a      	mov	sl, r3
 800d49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a2:	b10a      	cbz	r2, 800d4a8 <_svfiprintf_r+0x5c>
 800d4a4:	2a25      	cmp	r2, #37	; 0x25
 800d4a6:	d1f9      	bne.n	800d49c <_svfiprintf_r+0x50>
 800d4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ac:	d00b      	beq.n	800d4c6 <_svfiprintf_r+0x7a>
 800d4ae:	465b      	mov	r3, fp
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	f7ff ff6f 	bl	800d398 <__ssputs_r>
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	f000 80a9 	beq.w	800d612 <_svfiprintf_r+0x1c6>
 800d4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c2:	445a      	add	r2, fp
 800d4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 80a1 	beq.w	800d612 <_svfiprintf_r+0x1c6>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4da:	f10a 0a01 	add.w	sl, sl, #1
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	9307      	str	r3, [sp, #28]
 800d4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4e8:	4654      	mov	r4, sl
 800d4ea:	2205      	movs	r2, #5
 800d4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f0:	4850      	ldr	r0, [pc, #320]	; (800d634 <_svfiprintf_r+0x1e8>)
 800d4f2:	f7f2 fefd 	bl	80002f0 <memchr>
 800d4f6:	9a04      	ldr	r2, [sp, #16]
 800d4f8:	b9d8      	cbnz	r0, 800d532 <_svfiprintf_r+0xe6>
 800d4fa:	06d0      	lsls	r0, r2, #27
 800d4fc:	bf44      	itt	mi
 800d4fe:	2320      	movmi	r3, #32
 800d500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d504:	0711      	lsls	r1, r2, #28
 800d506:	bf44      	itt	mi
 800d508:	232b      	movmi	r3, #43	; 0x2b
 800d50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d50e:	f89a 3000 	ldrb.w	r3, [sl]
 800d512:	2b2a      	cmp	r3, #42	; 0x2a
 800d514:	d015      	beq.n	800d542 <_svfiprintf_r+0xf6>
 800d516:	9a07      	ldr	r2, [sp, #28]
 800d518:	4654      	mov	r4, sl
 800d51a:	2000      	movs	r0, #0
 800d51c:	f04f 0c0a 	mov.w	ip, #10
 800d520:	4621      	mov	r1, r4
 800d522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d526:	3b30      	subs	r3, #48	; 0x30
 800d528:	2b09      	cmp	r3, #9
 800d52a:	d94d      	bls.n	800d5c8 <_svfiprintf_r+0x17c>
 800d52c:	b1b0      	cbz	r0, 800d55c <_svfiprintf_r+0x110>
 800d52e:	9207      	str	r2, [sp, #28]
 800d530:	e014      	b.n	800d55c <_svfiprintf_r+0x110>
 800d532:	eba0 0308 	sub.w	r3, r0, r8
 800d536:	fa09 f303 	lsl.w	r3, r9, r3
 800d53a:	4313      	orrs	r3, r2
 800d53c:	9304      	str	r3, [sp, #16]
 800d53e:	46a2      	mov	sl, r4
 800d540:	e7d2      	b.n	800d4e8 <_svfiprintf_r+0x9c>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	1d19      	adds	r1, r3, #4
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	9103      	str	r1, [sp, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	bfbb      	ittet	lt
 800d54e:	425b      	neglt	r3, r3
 800d550:	f042 0202 	orrlt.w	r2, r2, #2
 800d554:	9307      	strge	r3, [sp, #28]
 800d556:	9307      	strlt	r3, [sp, #28]
 800d558:	bfb8      	it	lt
 800d55a:	9204      	strlt	r2, [sp, #16]
 800d55c:	7823      	ldrb	r3, [r4, #0]
 800d55e:	2b2e      	cmp	r3, #46	; 0x2e
 800d560:	d10c      	bne.n	800d57c <_svfiprintf_r+0x130>
 800d562:	7863      	ldrb	r3, [r4, #1]
 800d564:	2b2a      	cmp	r3, #42	; 0x2a
 800d566:	d134      	bne.n	800d5d2 <_svfiprintf_r+0x186>
 800d568:	9b03      	ldr	r3, [sp, #12]
 800d56a:	1d1a      	adds	r2, r3, #4
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	9203      	str	r2, [sp, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	bfb8      	it	lt
 800d574:	f04f 33ff 	movlt.w	r3, #4294967295
 800d578:	3402      	adds	r4, #2
 800d57a:	9305      	str	r3, [sp, #20]
 800d57c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d644 <_svfiprintf_r+0x1f8>
 800d580:	7821      	ldrb	r1, [r4, #0]
 800d582:	2203      	movs	r2, #3
 800d584:	4650      	mov	r0, sl
 800d586:	f7f2 feb3 	bl	80002f0 <memchr>
 800d58a:	b138      	cbz	r0, 800d59c <_svfiprintf_r+0x150>
 800d58c:	9b04      	ldr	r3, [sp, #16]
 800d58e:	eba0 000a 	sub.w	r0, r0, sl
 800d592:	2240      	movs	r2, #64	; 0x40
 800d594:	4082      	lsls	r2, r0
 800d596:	4313      	orrs	r3, r2
 800d598:	3401      	adds	r4, #1
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a0:	4825      	ldr	r0, [pc, #148]	; (800d638 <_svfiprintf_r+0x1ec>)
 800d5a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5a6:	2206      	movs	r2, #6
 800d5a8:	f7f2 fea2 	bl	80002f0 <memchr>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d038      	beq.n	800d622 <_svfiprintf_r+0x1d6>
 800d5b0:	4b22      	ldr	r3, [pc, #136]	; (800d63c <_svfiprintf_r+0x1f0>)
 800d5b2:	bb1b      	cbnz	r3, 800d5fc <_svfiprintf_r+0x1b0>
 800d5b4:	9b03      	ldr	r3, [sp, #12]
 800d5b6:	3307      	adds	r3, #7
 800d5b8:	f023 0307 	bic.w	r3, r3, #7
 800d5bc:	3308      	adds	r3, #8
 800d5be:	9303      	str	r3, [sp, #12]
 800d5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5c2:	4433      	add	r3, r6
 800d5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c6:	e768      	b.n	800d49a <_svfiprintf_r+0x4e>
 800d5c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	e7a6      	b.n	800d520 <_svfiprintf_r+0xd4>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	3401      	adds	r4, #1
 800d5d6:	9305      	str	r3, [sp, #20]
 800d5d8:	4619      	mov	r1, r3
 800d5da:	f04f 0c0a 	mov.w	ip, #10
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e4:	3a30      	subs	r2, #48	; 0x30
 800d5e6:	2a09      	cmp	r2, #9
 800d5e8:	d903      	bls.n	800d5f2 <_svfiprintf_r+0x1a6>
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d0c6      	beq.n	800d57c <_svfiprintf_r+0x130>
 800d5ee:	9105      	str	r1, [sp, #20]
 800d5f0:	e7c4      	b.n	800d57c <_svfiprintf_r+0x130>
 800d5f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e7f0      	b.n	800d5de <_svfiprintf_r+0x192>
 800d5fc:	ab03      	add	r3, sp, #12
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	462a      	mov	r2, r5
 800d602:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <_svfiprintf_r+0x1f4>)
 800d604:	a904      	add	r1, sp, #16
 800d606:	4638      	mov	r0, r7
 800d608:	f3af 8000 	nop.w
 800d60c:	1c42      	adds	r2, r0, #1
 800d60e:	4606      	mov	r6, r0
 800d610:	d1d6      	bne.n	800d5c0 <_svfiprintf_r+0x174>
 800d612:	89ab      	ldrh	r3, [r5, #12]
 800d614:	065b      	lsls	r3, r3, #25
 800d616:	f53f af2d 	bmi.w	800d474 <_svfiprintf_r+0x28>
 800d61a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d61c:	b01d      	add	sp, #116	; 0x74
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d622:	ab03      	add	r3, sp, #12
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	462a      	mov	r2, r5
 800d628:	4b05      	ldr	r3, [pc, #20]	; (800d640 <_svfiprintf_r+0x1f4>)
 800d62a:	a904      	add	r1, sp, #16
 800d62c:	4638      	mov	r0, r7
 800d62e:	f000 f879 	bl	800d724 <_printf_i>
 800d632:	e7eb      	b.n	800d60c <_svfiprintf_r+0x1c0>
 800d634:	0800dac4 	.word	0x0800dac4
 800d638:	0800dace 	.word	0x0800dace
 800d63c:	00000000 	.word	0x00000000
 800d640:	0800d399 	.word	0x0800d399
 800d644:	0800daca 	.word	0x0800daca

0800d648 <_printf_common>:
 800d648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d64c:	4616      	mov	r6, r2
 800d64e:	4699      	mov	r9, r3
 800d650:	688a      	ldr	r2, [r1, #8]
 800d652:	690b      	ldr	r3, [r1, #16]
 800d654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d658:	4293      	cmp	r3, r2
 800d65a:	bfb8      	it	lt
 800d65c:	4613      	movlt	r3, r2
 800d65e:	6033      	str	r3, [r6, #0]
 800d660:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d664:	4607      	mov	r7, r0
 800d666:	460c      	mov	r4, r1
 800d668:	b10a      	cbz	r2, 800d66e <_printf_common+0x26>
 800d66a:	3301      	adds	r3, #1
 800d66c:	6033      	str	r3, [r6, #0]
 800d66e:	6823      	ldr	r3, [r4, #0]
 800d670:	0699      	lsls	r1, r3, #26
 800d672:	bf42      	ittt	mi
 800d674:	6833      	ldrmi	r3, [r6, #0]
 800d676:	3302      	addmi	r3, #2
 800d678:	6033      	strmi	r3, [r6, #0]
 800d67a:	6825      	ldr	r5, [r4, #0]
 800d67c:	f015 0506 	ands.w	r5, r5, #6
 800d680:	d106      	bne.n	800d690 <_printf_common+0x48>
 800d682:	f104 0a19 	add.w	sl, r4, #25
 800d686:	68e3      	ldr	r3, [r4, #12]
 800d688:	6832      	ldr	r2, [r6, #0]
 800d68a:	1a9b      	subs	r3, r3, r2
 800d68c:	42ab      	cmp	r3, r5
 800d68e:	dc26      	bgt.n	800d6de <_printf_common+0x96>
 800d690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d694:	1e13      	subs	r3, r2, #0
 800d696:	6822      	ldr	r2, [r4, #0]
 800d698:	bf18      	it	ne
 800d69a:	2301      	movne	r3, #1
 800d69c:	0692      	lsls	r2, r2, #26
 800d69e:	d42b      	bmi.n	800d6f8 <_printf_common+0xb0>
 800d6a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6a4:	4649      	mov	r1, r9
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	47c0      	blx	r8
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	d01e      	beq.n	800d6ec <_printf_common+0xa4>
 800d6ae:	6823      	ldr	r3, [r4, #0]
 800d6b0:	6922      	ldr	r2, [r4, #16]
 800d6b2:	f003 0306 	and.w	r3, r3, #6
 800d6b6:	2b04      	cmp	r3, #4
 800d6b8:	bf02      	ittt	eq
 800d6ba:	68e5      	ldreq	r5, [r4, #12]
 800d6bc:	6833      	ldreq	r3, [r6, #0]
 800d6be:	1aed      	subeq	r5, r5, r3
 800d6c0:	68a3      	ldr	r3, [r4, #8]
 800d6c2:	bf0c      	ite	eq
 800d6c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d6c8:	2500      	movne	r5, #0
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	bfc4      	itt	gt
 800d6ce:	1a9b      	subgt	r3, r3, r2
 800d6d0:	18ed      	addgt	r5, r5, r3
 800d6d2:	2600      	movs	r6, #0
 800d6d4:	341a      	adds	r4, #26
 800d6d6:	42b5      	cmp	r5, r6
 800d6d8:	d11a      	bne.n	800d710 <_printf_common+0xc8>
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e008      	b.n	800d6f0 <_printf_common+0xa8>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	4652      	mov	r2, sl
 800d6e2:	4649      	mov	r1, r9
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	47c0      	blx	r8
 800d6e8:	3001      	adds	r0, #1
 800d6ea:	d103      	bne.n	800d6f4 <_printf_common+0xac>
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f4:	3501      	adds	r5, #1
 800d6f6:	e7c6      	b.n	800d686 <_printf_common+0x3e>
 800d6f8:	18e1      	adds	r1, r4, r3
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	2030      	movs	r0, #48	; 0x30
 800d6fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d702:	4422      	add	r2, r4
 800d704:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d708:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d70c:	3302      	adds	r3, #2
 800d70e:	e7c7      	b.n	800d6a0 <_printf_common+0x58>
 800d710:	2301      	movs	r3, #1
 800d712:	4622      	mov	r2, r4
 800d714:	4649      	mov	r1, r9
 800d716:	4638      	mov	r0, r7
 800d718:	47c0      	blx	r8
 800d71a:	3001      	adds	r0, #1
 800d71c:	d0e6      	beq.n	800d6ec <_printf_common+0xa4>
 800d71e:	3601      	adds	r6, #1
 800d720:	e7d9      	b.n	800d6d6 <_printf_common+0x8e>
	...

0800d724 <_printf_i>:
 800d724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d728:	7e0f      	ldrb	r7, [r1, #24]
 800d72a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d72c:	2f78      	cmp	r7, #120	; 0x78
 800d72e:	4691      	mov	r9, r2
 800d730:	4680      	mov	r8, r0
 800d732:	460c      	mov	r4, r1
 800d734:	469a      	mov	sl, r3
 800d736:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d73a:	d807      	bhi.n	800d74c <_printf_i+0x28>
 800d73c:	2f62      	cmp	r7, #98	; 0x62
 800d73e:	d80a      	bhi.n	800d756 <_printf_i+0x32>
 800d740:	2f00      	cmp	r7, #0
 800d742:	f000 80d4 	beq.w	800d8ee <_printf_i+0x1ca>
 800d746:	2f58      	cmp	r7, #88	; 0x58
 800d748:	f000 80c0 	beq.w	800d8cc <_printf_i+0x1a8>
 800d74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d750:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d754:	e03a      	b.n	800d7cc <_printf_i+0xa8>
 800d756:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d75a:	2b15      	cmp	r3, #21
 800d75c:	d8f6      	bhi.n	800d74c <_printf_i+0x28>
 800d75e:	a101      	add	r1, pc, #4	; (adr r1, 800d764 <_printf_i+0x40>)
 800d760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d764:	0800d7bd 	.word	0x0800d7bd
 800d768:	0800d7d1 	.word	0x0800d7d1
 800d76c:	0800d74d 	.word	0x0800d74d
 800d770:	0800d74d 	.word	0x0800d74d
 800d774:	0800d74d 	.word	0x0800d74d
 800d778:	0800d74d 	.word	0x0800d74d
 800d77c:	0800d7d1 	.word	0x0800d7d1
 800d780:	0800d74d 	.word	0x0800d74d
 800d784:	0800d74d 	.word	0x0800d74d
 800d788:	0800d74d 	.word	0x0800d74d
 800d78c:	0800d74d 	.word	0x0800d74d
 800d790:	0800d8d5 	.word	0x0800d8d5
 800d794:	0800d7fd 	.word	0x0800d7fd
 800d798:	0800d88f 	.word	0x0800d88f
 800d79c:	0800d74d 	.word	0x0800d74d
 800d7a0:	0800d74d 	.word	0x0800d74d
 800d7a4:	0800d8f7 	.word	0x0800d8f7
 800d7a8:	0800d74d 	.word	0x0800d74d
 800d7ac:	0800d7fd 	.word	0x0800d7fd
 800d7b0:	0800d74d 	.word	0x0800d74d
 800d7b4:	0800d74d 	.word	0x0800d74d
 800d7b8:	0800d897 	.word	0x0800d897
 800d7bc:	682b      	ldr	r3, [r5, #0]
 800d7be:	1d1a      	adds	r2, r3, #4
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	602a      	str	r2, [r5, #0]
 800d7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e09f      	b.n	800d910 <_printf_i+0x1ec>
 800d7d0:	6820      	ldr	r0, [r4, #0]
 800d7d2:	682b      	ldr	r3, [r5, #0]
 800d7d4:	0607      	lsls	r7, r0, #24
 800d7d6:	f103 0104 	add.w	r1, r3, #4
 800d7da:	6029      	str	r1, [r5, #0]
 800d7dc:	d501      	bpl.n	800d7e2 <_printf_i+0xbe>
 800d7de:	681e      	ldr	r6, [r3, #0]
 800d7e0:	e003      	b.n	800d7ea <_printf_i+0xc6>
 800d7e2:	0646      	lsls	r6, r0, #25
 800d7e4:	d5fb      	bpl.n	800d7de <_printf_i+0xba>
 800d7e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d7ea:	2e00      	cmp	r6, #0
 800d7ec:	da03      	bge.n	800d7f6 <_printf_i+0xd2>
 800d7ee:	232d      	movs	r3, #45	; 0x2d
 800d7f0:	4276      	negs	r6, r6
 800d7f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7f6:	485a      	ldr	r0, [pc, #360]	; (800d960 <_printf_i+0x23c>)
 800d7f8:	230a      	movs	r3, #10
 800d7fa:	e012      	b.n	800d822 <_printf_i+0xfe>
 800d7fc:	682b      	ldr	r3, [r5, #0]
 800d7fe:	6820      	ldr	r0, [r4, #0]
 800d800:	1d19      	adds	r1, r3, #4
 800d802:	6029      	str	r1, [r5, #0]
 800d804:	0605      	lsls	r5, r0, #24
 800d806:	d501      	bpl.n	800d80c <_printf_i+0xe8>
 800d808:	681e      	ldr	r6, [r3, #0]
 800d80a:	e002      	b.n	800d812 <_printf_i+0xee>
 800d80c:	0641      	lsls	r1, r0, #25
 800d80e:	d5fb      	bpl.n	800d808 <_printf_i+0xe4>
 800d810:	881e      	ldrh	r6, [r3, #0]
 800d812:	4853      	ldr	r0, [pc, #332]	; (800d960 <_printf_i+0x23c>)
 800d814:	2f6f      	cmp	r7, #111	; 0x6f
 800d816:	bf0c      	ite	eq
 800d818:	2308      	moveq	r3, #8
 800d81a:	230a      	movne	r3, #10
 800d81c:	2100      	movs	r1, #0
 800d81e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d822:	6865      	ldr	r5, [r4, #4]
 800d824:	60a5      	str	r5, [r4, #8]
 800d826:	2d00      	cmp	r5, #0
 800d828:	bfa2      	ittt	ge
 800d82a:	6821      	ldrge	r1, [r4, #0]
 800d82c:	f021 0104 	bicge.w	r1, r1, #4
 800d830:	6021      	strge	r1, [r4, #0]
 800d832:	b90e      	cbnz	r6, 800d838 <_printf_i+0x114>
 800d834:	2d00      	cmp	r5, #0
 800d836:	d04b      	beq.n	800d8d0 <_printf_i+0x1ac>
 800d838:	4615      	mov	r5, r2
 800d83a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d83e:	fb03 6711 	mls	r7, r3, r1, r6
 800d842:	5dc7      	ldrb	r7, [r0, r7]
 800d844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d848:	4637      	mov	r7, r6
 800d84a:	42bb      	cmp	r3, r7
 800d84c:	460e      	mov	r6, r1
 800d84e:	d9f4      	bls.n	800d83a <_printf_i+0x116>
 800d850:	2b08      	cmp	r3, #8
 800d852:	d10b      	bne.n	800d86c <_printf_i+0x148>
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	07de      	lsls	r6, r3, #31
 800d858:	d508      	bpl.n	800d86c <_printf_i+0x148>
 800d85a:	6923      	ldr	r3, [r4, #16]
 800d85c:	6861      	ldr	r1, [r4, #4]
 800d85e:	4299      	cmp	r1, r3
 800d860:	bfde      	ittt	le
 800d862:	2330      	movle	r3, #48	; 0x30
 800d864:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d868:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d86c:	1b52      	subs	r2, r2, r5
 800d86e:	6122      	str	r2, [r4, #16]
 800d870:	f8cd a000 	str.w	sl, [sp]
 800d874:	464b      	mov	r3, r9
 800d876:	aa03      	add	r2, sp, #12
 800d878:	4621      	mov	r1, r4
 800d87a:	4640      	mov	r0, r8
 800d87c:	f7ff fee4 	bl	800d648 <_printf_common>
 800d880:	3001      	adds	r0, #1
 800d882:	d14a      	bne.n	800d91a <_printf_i+0x1f6>
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	b004      	add	sp, #16
 800d88a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	f043 0320 	orr.w	r3, r3, #32
 800d894:	6023      	str	r3, [r4, #0]
 800d896:	4833      	ldr	r0, [pc, #204]	; (800d964 <_printf_i+0x240>)
 800d898:	2778      	movs	r7, #120	; 0x78
 800d89a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	6829      	ldr	r1, [r5, #0]
 800d8a2:	061f      	lsls	r7, r3, #24
 800d8a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8a8:	d402      	bmi.n	800d8b0 <_printf_i+0x18c>
 800d8aa:	065f      	lsls	r7, r3, #25
 800d8ac:	bf48      	it	mi
 800d8ae:	b2b6      	uxthmi	r6, r6
 800d8b0:	07df      	lsls	r7, r3, #31
 800d8b2:	bf48      	it	mi
 800d8b4:	f043 0320 	orrmi.w	r3, r3, #32
 800d8b8:	6029      	str	r1, [r5, #0]
 800d8ba:	bf48      	it	mi
 800d8bc:	6023      	strmi	r3, [r4, #0]
 800d8be:	b91e      	cbnz	r6, 800d8c8 <_printf_i+0x1a4>
 800d8c0:	6823      	ldr	r3, [r4, #0]
 800d8c2:	f023 0320 	bic.w	r3, r3, #32
 800d8c6:	6023      	str	r3, [r4, #0]
 800d8c8:	2310      	movs	r3, #16
 800d8ca:	e7a7      	b.n	800d81c <_printf_i+0xf8>
 800d8cc:	4824      	ldr	r0, [pc, #144]	; (800d960 <_printf_i+0x23c>)
 800d8ce:	e7e4      	b.n	800d89a <_printf_i+0x176>
 800d8d0:	4615      	mov	r5, r2
 800d8d2:	e7bd      	b.n	800d850 <_printf_i+0x12c>
 800d8d4:	682b      	ldr	r3, [r5, #0]
 800d8d6:	6826      	ldr	r6, [r4, #0]
 800d8d8:	6961      	ldr	r1, [r4, #20]
 800d8da:	1d18      	adds	r0, r3, #4
 800d8dc:	6028      	str	r0, [r5, #0]
 800d8de:	0635      	lsls	r5, r6, #24
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	d501      	bpl.n	800d8e8 <_printf_i+0x1c4>
 800d8e4:	6019      	str	r1, [r3, #0]
 800d8e6:	e002      	b.n	800d8ee <_printf_i+0x1ca>
 800d8e8:	0670      	lsls	r0, r6, #25
 800d8ea:	d5fb      	bpl.n	800d8e4 <_printf_i+0x1c0>
 800d8ec:	8019      	strh	r1, [r3, #0]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	6123      	str	r3, [r4, #16]
 800d8f2:	4615      	mov	r5, r2
 800d8f4:	e7bc      	b.n	800d870 <_printf_i+0x14c>
 800d8f6:	682b      	ldr	r3, [r5, #0]
 800d8f8:	1d1a      	adds	r2, r3, #4
 800d8fa:	602a      	str	r2, [r5, #0]
 800d8fc:	681d      	ldr	r5, [r3, #0]
 800d8fe:	6862      	ldr	r2, [r4, #4]
 800d900:	2100      	movs	r1, #0
 800d902:	4628      	mov	r0, r5
 800d904:	f7f2 fcf4 	bl	80002f0 <memchr>
 800d908:	b108      	cbz	r0, 800d90e <_printf_i+0x1ea>
 800d90a:	1b40      	subs	r0, r0, r5
 800d90c:	6060      	str	r0, [r4, #4]
 800d90e:	6863      	ldr	r3, [r4, #4]
 800d910:	6123      	str	r3, [r4, #16]
 800d912:	2300      	movs	r3, #0
 800d914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d918:	e7aa      	b.n	800d870 <_printf_i+0x14c>
 800d91a:	6923      	ldr	r3, [r4, #16]
 800d91c:	462a      	mov	r2, r5
 800d91e:	4649      	mov	r1, r9
 800d920:	4640      	mov	r0, r8
 800d922:	47d0      	blx	sl
 800d924:	3001      	adds	r0, #1
 800d926:	d0ad      	beq.n	800d884 <_printf_i+0x160>
 800d928:	6823      	ldr	r3, [r4, #0]
 800d92a:	079b      	lsls	r3, r3, #30
 800d92c:	d413      	bmi.n	800d956 <_printf_i+0x232>
 800d92e:	68e0      	ldr	r0, [r4, #12]
 800d930:	9b03      	ldr	r3, [sp, #12]
 800d932:	4298      	cmp	r0, r3
 800d934:	bfb8      	it	lt
 800d936:	4618      	movlt	r0, r3
 800d938:	e7a6      	b.n	800d888 <_printf_i+0x164>
 800d93a:	2301      	movs	r3, #1
 800d93c:	4632      	mov	r2, r6
 800d93e:	4649      	mov	r1, r9
 800d940:	4640      	mov	r0, r8
 800d942:	47d0      	blx	sl
 800d944:	3001      	adds	r0, #1
 800d946:	d09d      	beq.n	800d884 <_printf_i+0x160>
 800d948:	3501      	adds	r5, #1
 800d94a:	68e3      	ldr	r3, [r4, #12]
 800d94c:	9903      	ldr	r1, [sp, #12]
 800d94e:	1a5b      	subs	r3, r3, r1
 800d950:	42ab      	cmp	r3, r5
 800d952:	dcf2      	bgt.n	800d93a <_printf_i+0x216>
 800d954:	e7eb      	b.n	800d92e <_printf_i+0x20a>
 800d956:	2500      	movs	r5, #0
 800d958:	f104 0619 	add.w	r6, r4, #25
 800d95c:	e7f5      	b.n	800d94a <_printf_i+0x226>
 800d95e:	bf00      	nop
 800d960:	0800dad5 	.word	0x0800dad5
 800d964:	0800dae6 	.word	0x0800dae6

0800d968 <memmove>:
 800d968:	4288      	cmp	r0, r1
 800d96a:	b510      	push	{r4, lr}
 800d96c:	eb01 0402 	add.w	r4, r1, r2
 800d970:	d902      	bls.n	800d978 <memmove+0x10>
 800d972:	4284      	cmp	r4, r0
 800d974:	4623      	mov	r3, r4
 800d976:	d807      	bhi.n	800d988 <memmove+0x20>
 800d978:	1e43      	subs	r3, r0, #1
 800d97a:	42a1      	cmp	r1, r4
 800d97c:	d008      	beq.n	800d990 <memmove+0x28>
 800d97e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d982:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d986:	e7f8      	b.n	800d97a <memmove+0x12>
 800d988:	4402      	add	r2, r0
 800d98a:	4601      	mov	r1, r0
 800d98c:	428a      	cmp	r2, r1
 800d98e:	d100      	bne.n	800d992 <memmove+0x2a>
 800d990:	bd10      	pop	{r4, pc}
 800d992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d99a:	e7f7      	b.n	800d98c <memmove+0x24>

0800d99c <_sbrk_r>:
 800d99c:	b538      	push	{r3, r4, r5, lr}
 800d99e:	4d06      	ldr	r5, [pc, #24]	; (800d9b8 <_sbrk_r+0x1c>)
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	4608      	mov	r0, r1
 800d9a6:	602b      	str	r3, [r5, #0]
 800d9a8:	f7f3 ff08 	bl	80017bc <_sbrk>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_sbrk_r+0x1a>
 800d9b0:	682b      	ldr	r3, [r5, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_sbrk_r+0x1a>
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	24002ab0 	.word	0x24002ab0

0800d9bc <memcpy>:
 800d9bc:	440a      	add	r2, r1
 800d9be:	4291      	cmp	r1, r2
 800d9c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9c4:	d100      	bne.n	800d9c8 <memcpy+0xc>
 800d9c6:	4770      	bx	lr
 800d9c8:	b510      	push	{r4, lr}
 800d9ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9d2:	4291      	cmp	r1, r2
 800d9d4:	d1f9      	bne.n	800d9ca <memcpy+0xe>
 800d9d6:	bd10      	pop	{r4, pc}

0800d9d8 <_realloc_r>:
 800d9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9dc:	4680      	mov	r8, r0
 800d9de:	4614      	mov	r4, r2
 800d9e0:	460e      	mov	r6, r1
 800d9e2:	b921      	cbnz	r1, 800d9ee <_realloc_r+0x16>
 800d9e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e8:	4611      	mov	r1, r2
 800d9ea:	f7ff bc49 	b.w	800d280 <_malloc_r>
 800d9ee:	b92a      	cbnz	r2, 800d9fc <_realloc_r+0x24>
 800d9f0:	f7ff fbda 	bl	800d1a8 <_free_r>
 800d9f4:	4625      	mov	r5, r4
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9fc:	f000 f81b 	bl	800da36 <_malloc_usable_size_r>
 800da00:	4284      	cmp	r4, r0
 800da02:	4607      	mov	r7, r0
 800da04:	d802      	bhi.n	800da0c <_realloc_r+0x34>
 800da06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da0a:	d812      	bhi.n	800da32 <_realloc_r+0x5a>
 800da0c:	4621      	mov	r1, r4
 800da0e:	4640      	mov	r0, r8
 800da10:	f7ff fc36 	bl	800d280 <_malloc_r>
 800da14:	4605      	mov	r5, r0
 800da16:	2800      	cmp	r0, #0
 800da18:	d0ed      	beq.n	800d9f6 <_realloc_r+0x1e>
 800da1a:	42bc      	cmp	r4, r7
 800da1c:	4622      	mov	r2, r4
 800da1e:	4631      	mov	r1, r6
 800da20:	bf28      	it	cs
 800da22:	463a      	movcs	r2, r7
 800da24:	f7ff ffca 	bl	800d9bc <memcpy>
 800da28:	4631      	mov	r1, r6
 800da2a:	4640      	mov	r0, r8
 800da2c:	f7ff fbbc 	bl	800d1a8 <_free_r>
 800da30:	e7e1      	b.n	800d9f6 <_realloc_r+0x1e>
 800da32:	4635      	mov	r5, r6
 800da34:	e7df      	b.n	800d9f6 <_realloc_r+0x1e>

0800da36 <_malloc_usable_size_r>:
 800da36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da3a:	1f18      	subs	r0, r3, #4
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	bfbc      	itt	lt
 800da40:	580b      	ldrlt	r3, [r1, r0]
 800da42:	18c0      	addlt	r0, r0, r3
 800da44:	4770      	bx	lr
	...

0800da48 <_init>:
 800da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4a:	bf00      	nop
 800da4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da4e:	bc08      	pop	{r3}
 800da50:	469e      	mov	lr, r3
 800da52:	4770      	bx	lr

0800da54 <_fini>:
 800da54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da56:	bf00      	nop
 800da58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5a:	bc08      	pop	{r3}
 800da5c:	469e      	mov	lr, r3
 800da5e:	4770      	bx	lr
