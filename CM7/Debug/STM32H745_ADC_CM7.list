
STM32H745_ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdd4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c06c  0800c06c  0001c06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0ac  0800c0ac  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0ac  0800c0ac  0001c0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0b4  0800c0b4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800c0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800c0cc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800c12c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000890  240000d0  0800c18c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000960  0800c18c  00020960  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   000221c1  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000038e4  00000000  00000000  00042302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001790  00000000  00000000  00045be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001245  00000000  00000000  00047378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003e17e  00000000  00000000  000485bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001fc35  00000000  00000000  0008673b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019c8ce  00000000  00000000  000a6370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006660  00000000  00000000  00242c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  002492a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c054 	.word	0x0800c054

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800c054 	.word	0x0800c054

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef _time;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <main+0xb0>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	61fa      	str	r2, [r7, #28]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fb97 	bl	8000e5c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 ff57 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f83f 	bl	80007b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000736:	f000 f8b9 	bl	80008ac <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <main+0xb0>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <main+0xb0>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <main+0xb0>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f005 facd 	bl	8005cf8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f005 fae3 	bl	8005d2c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <main+0xb0>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x84>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	61fa      	str	r2, [r7, #28]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6e>
if ( timeout < 0 )
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8e>
{
Error_Handler();
 800078a:	f000 fb67 	bl	8000e5c <Error_Handler>
  //SWD_Init();
  //write(0,"Hello",5);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 faff 	bl	8000d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000792:	f000 fad5 	bl	8000d40 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000796:	f000 fa55 	bl	8000c44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 fa9f 	bl	8000cdc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800079e:	f000 f8b5 	bl	800090c <MX_ADC1_Init>
  MX_ETH_Init();
 80007a2:	f000 f99d 	bl	8000ae0 <MX_ETH_Init>
  MX_ADC2_Init();
 80007a6:	f000 f92f 	bl	8000a08 <MX_ADC2_Init>
  MX_RTC_Init();
 80007aa:	f000 f9e5 	bl	8000b78 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <main+0xae>
 80007b0:	58024400 	.word	0x58024400

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	; 0x70
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	224c      	movs	r2, #76	; 0x4c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f00b fc1a 	bl	800bffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00b fc14 	bl	800bffc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f005 fc05 	bl	8005fe4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <SystemClock_Config+0xf0>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <SystemClock_Config+0xf0>)
 80007e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0xf0>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <SystemClock_Config+0xf4>)
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	4a2b      	ldr	r2, [pc, #172]	; (80008a8 <SystemClock_Config+0xf4>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SystemClock_Config+0xf4>)
 8000802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800080c:	bf00      	nop
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <SystemClock_Config+0xf0>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800081a:	d1f8      	bne.n	800080e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800081c:	2309      	movs	r3, #9
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000820:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000826:	2301      	movs	r3, #1
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	2302      	movs	r3, #2
 8000830:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000836:	2378      	movs	r3, #120	; 0x78
 8000838:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000846:	230c      	movs	r3, #12
 8000848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084a:	2300      	movs	r3, #0
 800084c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fc2e 	bl	80060b8 <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000862:	f000 fafb 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	233f      	movs	r3, #63	; 0x3f
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000872:	2308      	movs	r3, #8
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000884:	2340      	movs	r3, #64	; 0x40
 8000886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2104      	movs	r1, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f006 f86d 	bl	800696c <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000898:	f000 fae0 	bl	8000e5c <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	; 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58024800 	.word	0x58024800
 80008a8:	58000400 	.word	0x58000400

080008ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0b0      	sub	sp, #192	; 0xc0
 80008b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	22c0      	movs	r2, #192	; 0xc0
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f00b fb9f 	bl	800bffc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008c2:	f04f 0300 	mov.w	r3, #0
 80008c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 21;
 80008ce:	2315      	movs	r3, #21
 80008d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80008d2:	2305      	movs	r3, #5
 80008d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008de:	23c0      	movs	r3, #192	; 0xc0
 80008e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008e2:	2320      	movs	r3, #32
 80008e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 7168;
 80008e6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	4618      	mov	r0, r3
 80008f6:	f006 fbc5 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000900:	f000 faac 	bl	8000e5c <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	37c0      	adds	r7, #192	; 0xc0
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
 800092c:	615a      	str	r2, [r3, #20]
 800092e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000930:	4b32      	ldr	r3, [pc, #200]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000932:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <MX_ADC1_Init+0xf4>)
 8000934:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_ADC1_Init+0xf0>)
 800093e:	2208      	movs	r2, #8
 8000940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_ADC1_Init+0xf0>)
 800094a:	2204      	movs	r2, #4
 800094c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000950:	2200      	movs	r2, #0
 8000952:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000956:	2201      	movs	r2, #1
 8000958:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_ADC1_Init+0xf0>)
 800095c:	2201      	movs	r2, #1
 800095e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000962:	2200      	movs	r2, #0
 8000964:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC1_Init+0xf0>)
 800096e:	2200      	movs	r2, #0
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000974:	2203      	movs	r2, #3
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC1_Init+0xf0>)
 800097a:	2200      	movs	r2, #0
 800097c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000980:	2200      	movs	r2, #0
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC1_Init+0xf0>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_ADC1_Init+0xf0>)
 800098e:	f001 f8af 	bl	8001af0 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 fa60 	bl	8000e5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800099c:	2306      	movs	r3, #6
 800099e:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80009a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a4:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_ADC1_Init+0xf0>)
 80009b2:	f001 ffb9 	bl	8002928 <HAL_ADCEx_MultiModeConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80009bc:	f000 fa4e 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_ADC1_Init+0xf8>)
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c4:	2306      	movs	r3, #6
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d2:	2304      	movs	r3, #4
 80009d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009de:	463b      	mov	r3, r7
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <MX_ADC1_Init+0xf0>)
 80009e4:	f001 fa26 	bl	8001e34 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80009ee:	f000 fa35 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000124 	.word	0x24000124
 8000a00:	40022000 	.word	0x40022000
 8000a04:	4fb80000 	.word	0x4fb80000

08000a08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a22:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <MX_ADC2_Init+0xd0>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a38:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a58:	2203      	movs	r2, #3
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a70:	4818      	ldr	r0, [pc, #96]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000a72:	f001 f83d 	bl	8001af0 <HAL_ADC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000a7c:	f000 f9ee 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_ADC2_Init+0xd4>)
 8000a82:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a84:	2306      	movs	r3, #6
 8000a86:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a92:	2304      	movs	r3, #4
 8000a94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000aa4:	f001 f9c6 	bl	8001e34 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f000 f9d5 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000ab2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_ADC2_Init+0xcc>)
 8000abc:	f001 fed0 	bl	8002860 <HAL_ADCEx_Calibration_Start>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC2_Init+0xc2>
  {
    /* Calibration Error */
    Error_Handler();
 8000ac6:	f000 f9c9 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE END ADC2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	24000188 	.word	0x24000188
 8000ad8:	40022100 	.word	0x40022100
 8000adc:	0c900008 	.word	0x0c900008

08000ae0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <MX_ETH_Init+0x80>)
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	; (8000b64 <MX_ETH_Init+0x84>)
 8000ae8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_ETH_Init+0x88>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_ETH_Init+0x88>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_ETH_Init+0x88>)
 8000af8:	22e1      	movs	r2, #225	; 0xe1
 8000afa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_ETH_Init+0x88>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_ETH_Init+0x88>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_ETH_Init+0x88>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_ETH_Init+0x80>)
 8000b10:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <MX_ETH_Init+0x88>)
 8000b12:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_ETH_Init+0x80>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_ETH_Init+0x80>)
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_ETH_Init+0x8c>)
 8000b1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_ETH_Init+0x80>)
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <MX_ETH_Init+0x90>)
 8000b24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_ETH_Init+0x80>)
 8000b28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b2e:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_ETH_Init+0x80>)
 8000b30:	f004 fb0e 	bl	8005150 <HAL_ETH_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b3a:	f000 f98f 	bl	8000e5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b3e:	2238      	movs	r2, #56	; 0x38
 8000b40:	2100      	movs	r1, #0
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_ETH_Init+0x94>)
 8000b44:	f00b fa5a 	bl	800bffc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_ETH_Init+0x94>)
 8000b4a:	2221      	movs	r2, #33	; 0x21
 8000b4c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_ETH_Init+0x94>)
 8000b50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b54:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <MX_ETH_Init+0x94>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	240002dc 	.word	0x240002dc
 8000b64:	40028000 	.word	0x40028000
 8000b68:	24000950 	.word	0x24000950
 8000b6c:	24000070 	.word	0x24000070
 8000b70:	24000010 	.word	0x24000010
 8000b74:	240000ec 	.word	0x240000ec

08000b78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000b92:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <MX_RTC_Init+0xc8>)
 8000b94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000b9e:	227f      	movs	r2, #127	; 0x7f
 8000ba0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bc0:	481e      	ldr	r0, [pc, #120]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000bc2:	f008 ff5d 	bl	8009a80 <HAL_RTC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000bcc:	f000 f946 	bl	8000e5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2201      	movs	r2, #1
 8000be8:	4619      	mov	r1, r3
 8000bea:	4814      	ldr	r0, [pc, #80]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000bec:	f008 ffca 	bl	8009b84 <HAL_RTC_SetTime>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000bf6:	f000 f931 	bl	8000e5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000c12:	f009 f855 	bl	8009cc0 <HAL_RTC_SetDate>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000c1c:	f000 f91e 	bl	8000e5c <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000c20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_RTC_Init+0xc4>)
 8000c26:	f009 f989 	bl	8009f3c <HAL_RTCEx_SetCalibrationOutPut>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000c30:	f000 f914 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2400038c 	.word	0x2400038c
 8000c40:	58004000 	.word	0x58004000

08000c44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <MX_USART3_UART_Init+0x94>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8c:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f009 f99c 	bl	8009fca <HAL_UART_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 f8e0 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000ca0:	f00a fdd8 	bl	800b854 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000caa:	f000 f8d7 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000cb2:	f00a fe0d 	bl	800b8d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cbc:	f000 f8ce 	bl	8000e5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000cc2:	f00a fd8e 	bl	800b7e2 <HAL_UARTEx_DisableFifoMode>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 f8c6 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	240003b0 	.word	0x240003b0
 8000cd8:	40004800 	.word	0x40004800

08000cdc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce8:	2209      	movs	r2, #9
 8000cea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d24:	f005 f816 	bl	8005d54 <HAL_PCD_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d2e:	f000 f895 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000444 	.word	0x24000444
 8000d3c:	40080000 	.word	0x40080000

08000d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_DMA_Init+0x4c>)
 8000d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <MX_DMA_Init+0x4c>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <MX_DMA_Init+0x4c>)
 8000d58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	200b      	movs	r0, #11
 8000d6a:	f001 ff96 	bl	8002c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d6e:	200b      	movs	r0, #11
 8000d70:	f001 ffad 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	200c      	movs	r0, #12
 8000d7a:	f001 ff8e 	bl	8002c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d7e:	200c      	movs	r0, #12
 8000d80:	f001 ffa5 	bl	8002cce <HAL_NVIC_EnableIRQ>

}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	58024400 	.word	0x58024400

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	4a2e      	ldr	r2, [pc, #184]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da6:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df6:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a09      	ldr	r2, [pc, #36]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_GPIO_Init+0xc8>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	58024400 	.word	0x58024400

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x30>)
 8000e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e74:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x30>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x30>)
 8000e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58024400 	.word	0x58024400

08000e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a71      	ldr	r2, [pc, #452]	; (8001080 <HAL_ADC_MspInit+0x1e4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d173      	bne.n	8000fa6 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	4b71      	ldr	r3, [pc, #452]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000ec0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec4:	4a6f      	ldr	r2, [pc, #444]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ece:	4b6d      	ldr	r3, [pc, #436]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000ed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000edc:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_ADC_MspInit+0x1ec>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a69      	ldr	r2, [pc, #420]	; (8001088 <HAL_ADC_MspInit+0x1ec>)
 8000ee4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ee6:	4b68      	ldr	r3, [pc, #416]	; (8001088 <HAL_ADC_MspInit+0x1ec>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10e      	bne.n	8000f0c <HAL_ADC_MspInit+0x70>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eee:	4b65      	ldr	r3, [pc, #404]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef4:	4a63      	ldr	r2, [pc, #396]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000ef6:	f043 0320 	orr.w	r3, r3, #32
 8000efa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000efe:	4b61      	ldr	r3, [pc, #388]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000f00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b5d      	ldr	r3, [pc, #372]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f12:	4a5c      	ldr	r2, [pc, #368]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1c:	4b59      	ldr	r3, [pc, #356]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4853      	ldr	r0, [pc, #332]	; (800108c <HAL_ADC_MspInit+0x1f0>)
 8000f3e:	f004 fd2b 	bl	8005998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000f42:	4b53      	ldr	r3, [pc, #332]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f44:	4a53      	ldr	r2, [pc, #332]	; (8001094 <HAL_ADC_MspInit+0x1f8>)
 8000f46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f48:	4b51      	ldr	r3, [pc, #324]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f4a:	2209      	movs	r2, #9
 8000f4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4e:	4b50      	ldr	r3, [pc, #320]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f54:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f5a:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f62:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f6a:	4b49      	ldr	r3, [pc, #292]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f7a:	4b45      	ldr	r3, [pc, #276]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f82:	4b43      	ldr	r3, [pc, #268]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f88:	4841      	ldr	r0, [pc, #260]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f8a:	f001 febb 	bl	8002d04 <HAL_DMA_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000f94:	f7ff ff62 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3d      	ldr	r2, [pc, #244]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000f9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <HAL_ADC_MspInit+0x1f4>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6393      	str	r3, [r2, #56]	; 0x38
    // HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
    // HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000fa4:	e067      	b.n	8001076 <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a3b      	ldr	r2, [pc, #236]	; (8001098 <HAL_ADC_MspInit+0x1fc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d162      	bne.n	8001076 <HAL_ADC_MspInit+0x1da>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HAL_ADC_MspInit+0x1ec>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a34      	ldr	r2, [pc, #208]	; (8001088 <HAL_ADC_MspInit+0x1ec>)
 8000fb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <HAL_ADC_MspInit+0x1ec>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d10e      	bne.n	8000fe0 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc8:	4a2e      	ldr	r2, [pc, #184]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000fca:	f043 0320 	orr.w	r3, r3, #32
 8000fce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	4a27      	ldr	r2, [pc, #156]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_ADC_MspInit+0x1e8>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	481e      	ldr	r0, [pc, #120]	; (800108c <HAL_ADC_MspInit+0x1f0>)
 8001012:	f004 fcc1 	bl	8005998 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001018:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <HAL_ADC_MspInit+0x204>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <HAL_ADC_MspInit+0x200>)
 800101e:	220a      	movs	r2, #10
 8001020:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_ADC_MspInit+0x200>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001034:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800103c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001040:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001044:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <HAL_ADC_MspInit+0x200>)
 800105c:	f001 fe52 	bl	8002d04 <HAL_DMA_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_ADC_MspInit+0x1ce>
      Error_Handler();
 8001066:	f7ff fef9 	bl	8000e5c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_ADC_MspInit+0x200>)
 800106e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_ADC_MspInit+0x200>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40022000 	.word	0x40022000
 8001084:	58024400 	.word	0x58024400
 8001088:	24000958 	.word	0x24000958
 800108c:	58020000 	.word	0x58020000
 8001090:	240001ec 	.word	0x240001ec
 8001094:	40020010 	.word	0x40020010
 8001098:	40022100 	.word	0x40022100
 800109c:	24000264 	.word	0x24000264
 80010a0:	40020028 	.word	0x40020028

080010a4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a59      	ldr	r2, [pc, #356]	; (8001228 <HAL_ETH_MspInit+0x184>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f040 80ab 	bne.w	800121e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80010c8:	4b58      	ldr	r3, [pc, #352]	; (800122c <HAL_ETH_MspInit+0x188>)
 80010ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ce:	4a57      	ldr	r2, [pc, #348]	; (800122c <HAL_ETH_MspInit+0x188>)
 80010d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010d8:	4b54      	ldr	r3, [pc, #336]	; (800122c <HAL_ETH_MspInit+0x188>)
 80010da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <HAL_ETH_MspInit+0x188>)
 80010e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ec:	4a4f      	ldr	r2, [pc, #316]	; (800122c <HAL_ETH_MspInit+0x188>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010f6:	4b4d      	ldr	r3, [pc, #308]	; (800122c <HAL_ETH_MspInit+0x188>)
 80010f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800110a:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_ETH_MspInit+0x188>)
 800110c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001110:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b42      	ldr	r3, [pc, #264]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	4a40      	ldr	r2, [pc, #256]	; (800122c <HAL_ETH_MspInit+0x188>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a39      	ldr	r2, [pc, #228]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b36      	ldr	r3, [pc, #216]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b33      	ldr	r3, [pc, #204]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	4a31      	ldr	r2, [pc, #196]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <HAL_ETH_MspInit+0x188>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	4a2a      	ldr	r2, [pc, #168]	; (800122c <HAL_ETH_MspInit+0x188>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <HAL_ETH_MspInit+0x188>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800119a:	2332      	movs	r3, #50	; 0x32
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	481e      	ldr	r0, [pc, #120]	; (8001230 <HAL_ETH_MspInit+0x18c>)
 80011b6:	f004 fbef 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80011ba:	2386      	movs	r3, #134	; 0x86
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ca:	230b      	movs	r3, #11
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <HAL_ETH_MspInit+0x190>)
 80011d6:	f004 fbdf 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ec:	230b      	movs	r3, #11
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4810      	ldr	r0, [pc, #64]	; (8001238 <HAL_ETH_MspInit+0x194>)
 80011f8:	f004 fbce 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120e:	230b      	movs	r3, #11
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	4619      	mov	r1, r3
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <HAL_ETH_MspInit+0x198>)
 800121a:	f004 fbbd 	bl	8005998 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	3738      	adds	r7, #56	; 0x38
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40028000 	.word	0x40028000
 800122c:	58024400 	.word	0x58024400
 8001230:	58020800 	.word	0x58020800
 8001234:	58020000 	.word	0x58020000
 8001238:	58020400 	.word	0x58020400
 800123c:	58021800 	.word	0x58021800

08001240 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0ba      	sub	sp, #232	; 0xe8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	22c0      	movs	r2, #192	; 0xc0
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f00a fecb 	bl	800bffc <memset>
  if(hrtc->Instance==RTC)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_RTC_MspInit+0xb4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d13d      	bne.n	80012ec <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001270:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800127c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4618      	mov	r0, r3
 800128a:	f005 fefb 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 8001294:	f7ff fde2 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_RTC_MspInit+0xb8>)
 800129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129c:	4a16      	ldr	r2, [pc, #88]	; (80012f8 <HAL_RTC_MspInit+0xb8>)
 800129e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a2:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <HAL_RTC_MspInit+0xb8>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <HAL_RTC_MspInit+0xb8>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <HAL_RTC_MspInit+0xb8>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c2:	2304      	movs	r3, #4
 80012c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_RTC_MspInit+0xbc>)
 80012e8:	f004 fb56 	bl	8005998 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012ec:	bf00      	nop
 80012ee:	37e8      	adds	r7, #232	; 0xe8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	58004000 	.word	0x58004000
 80012f8:	58024400 	.word	0x58024400
 80012fc:	58020400 	.word	0x58020400

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0ba      	sub	sp, #232	; 0xe8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	22c0      	movs	r2, #192	; 0xc0
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00a fe6b 	bl	800bffc <memset>
  if(huart->Instance==USART3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <HAL_UART_MspInit+0xd8>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d14e      	bne.n	80013ce <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001330:	f04f 0202 	mov.w	r2, #2
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4618      	mov	r0, r3
 8001348:	f005 fe9c 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001352:	f7ff fd83 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_UART_MspInit+0xdc>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <HAL_UART_MspInit+0xdc>)
 800135e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001362:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_UART_MspInit+0xdc>)
 8001368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_UART_MspInit+0xdc>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	4a18      	ldr	r2, [pc, #96]	; (80013dc <HAL_UART_MspInit+0xdc>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_UART_MspInit+0xdc>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ac:	2307      	movs	r3, #7
 80013ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_UART_MspInit+0xe0>)
 80013ba:	f004 faed 	bl	8005998 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2027      	movs	r0, #39	; 0x27
 80013c4:	f001 fc69 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013c8:	2027      	movs	r0, #39	; 0x27
 80013ca:	f001 fc80 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	37e8      	adds	r7, #232	; 0xe8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40004800 	.word	0x40004800
 80013dc:	58024400 	.word	0x58024400
 80013e0:	58020c00 	.word	0x58020c00

080013e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0ba      	sub	sp, #232	; 0xe8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22c0      	movs	r2, #192	; 0xc0
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00a fdf9 	bl	800bffc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_PCD_MspInit+0x10c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d169      	bne.n	80014e8 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001414:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001424:	2312      	movs	r3, #18
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800142c:	2303      	movs	r3, #3
 800142e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001434:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800143a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800143e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4618      	mov	r0, r3
 800144e:	f005 fe19 	bl	8007084 <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001458:	f7ff fd00 	bl	8000e5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800145c:	f004 fe1c 	bl	8006098 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <HAL_PCD_MspInit+0x110>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a23      	ldr	r2, [pc, #140]	; (80014f4 <HAL_PCD_MspInit+0x110>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <HAL_PCD_MspInit+0x110>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800147e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001498:	230a      	movs	r3, #10
 800149a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4814      	ldr	r0, [pc, #80]	; (80014f8 <HAL_PCD_MspInit+0x114>)
 80014a6:	f004 fa77 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	; (80014f8 <HAL_PCD_MspInit+0x114>)
 80014c6:	f004 fa67 	bl	8005998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_PCD_MspInit+0x110>)
 80014cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_PCD_MspInit+0x110>)
 80014d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_PCD_MspInit+0x110>)
 80014dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	37e8      	adds	r7, #232	; 0xe8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40080000 	.word	0x40080000
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58020000 	.word	0x58020000

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <NMI_Handler+0x4>

08001502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler+0x4>

08001508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler+0x4>

0800150e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001512:	e7fe      	b.n	8001512 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <UsageFault_Handler+0x4>

0800151a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001548:	f000 f8bc 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <DMA1_Stream0_IRQHandler+0x10>)
 8001556:	f002 fc95 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240001ec 	.word	0x240001ec

08001564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <DMA1_Stream1_IRQHandler+0x10>)
 800156a:	f002 fc8b 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000264 	.word	0x24000264

08001578 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART3_IRQHandler+0x10>)
 800157e:	f008 fd75 	bl	800a06c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240003b0 	.word	0x240003b0

0800158c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001590:	f7ff f820 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001596:	490d      	ldr	r1, [pc, #52]	; (80015cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ac:	4c0a      	ldr	r4, [pc, #40]	; (80015d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ba:	f00a fd27 	bl	800c00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7ff f89f 	bl	8000700 <main>
  bx  lr
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015cc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80015d0:	0800c0bc 	.word	0x0800c0bc
  ldr r2, =_sbss
 80015d4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80015d8:	24000960 	.word	0x24000960

080015dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC3_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f001 fb4c 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015ec:	f005 fb74 	bl	8006cd8 <HAL_RCC_GetSysClockFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_Init+0x68>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	4913      	ldr	r1, [pc, #76]	; (800164c <HAL_Init+0x6c>)
 80015fe:	5ccb      	ldrb	r3, [r1, r3]
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_Init+0x68>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	4a0e      	ldr	r2, [pc, #56]	; (800164c <HAL_Init+0x6c>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <HAL_Init+0x70>)
 8001622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001624:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_Init+0x74>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f814 	bl	8001658 <HAL_InitTick>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e002      	b.n	8001640 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800163a:	f7ff fc15 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	58024400 	.word	0x58024400
 800164c:	0800c06c 	.word	0x0800c06c
 8001650:	24000004 	.word	0x24000004
 8001654:	24000000 	.word	0x24000000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_InitTick+0x60>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e021      	b.n	80016b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_InitTick+0x64>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_InitTick+0x60>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f001 fb31 	bl	8002cea <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f001 fafb 	bl	8002c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x68>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2400000c 	.word	0x2400000c
 80016bc:	24000000 	.word	0x24000000
 80016c0:	24000008 	.word	0x24000008

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	2400000c 	.word	0x2400000c
 80016e8:	2400095c 	.word	0x2400095c

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2400095c 	.word	0x2400095c

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2400000c 	.word	0x2400000c

0800174c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetREVID+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0c1b      	lsrs	r3, r3, #16
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	5c001000 	.word	0x5c001000

08001764 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001774:	4904      	ldr	r1, [pc, #16]	; (8001788 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	58000400 	.word	0x58000400

0800178c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	609a      	str	r2, [r3, #8]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	609a      	str	r2, [r3, #8]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3360      	adds	r3, #96	; 0x60
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	430b      	orrs	r3, r1
 8001822:	431a      	orrs	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001828:	bf00      	nop
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	431a      	orrs	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	611a      	str	r2, [r3, #16]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001866:	b480      	push	{r7}
 8001868:	b087      	sub	sp, #28
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3360      	adds	r3, #96	; 0x60
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
  }
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3330      	adds	r3, #48	; 0x30
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	211f      	movs	r1, #31
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0e9b      	lsrs	r3, r3, #26
 80018d4:	f003 011f 	and.w	r1, r3, #31
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 031f 	and.w	r3, r3, #31
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	431a      	orrs	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018e8:	bf00      	nop
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3314      	adds	r3, #20
 8001904:	461a      	mov	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	0e5b      	lsrs	r3, r3, #25
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	0d1b      	lsrs	r3, r3, #20
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	2107      	movs	r1, #7
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	0d1b      	lsrs	r3, r3, #20
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	431a      	orrs	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800193e:	bf00      	nop
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0318 	and.w	r3, r3, #24
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001970:	40d9      	lsrs	r1, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	400b      	ands	r3, r1
 8001976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	000fffff 	.word	0x000fffff

08001994 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6093      	str	r3, [r2, #8]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	5fffffc0 	.word	0x5fffffc0

080019b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019cc:	d101      	bne.n	80019d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <LL_ADC_EnableInternalRegulator+0x24>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	6fffffc0 	.word	0x6fffffc0

08001a08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a1c:	d101      	bne.n	8001a22 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <LL_ADC_Disable+0x24>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	f043 0202 	orr.w	r2, r3, #2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	7fffffc0 	.word	0x7fffffc0

08001a58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <LL_ADC_IsEnabled+0x18>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <LL_ADC_IsEnabled+0x1a>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d101      	bne.n	8001a96 <LL_ADC_IsDisableOngoing+0x18>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_ADC_IsDisableOngoing+0x1a>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d101      	bne.n	8001abc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d101      	bne.n	8001ae2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e18f      	b.n	8001e2a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff f9bf 	bl	8000e9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff41 	bl	80019b8 <LL_ADC_IsDeepPowerDownEnabled>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d004      	beq.n	8001b46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff27 	bl	8001994 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff5c 	bl	8001a08 <LL_ADC_IsInternalRegulatorEnabled>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d114      	bne.n	8001b80 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff40 	bl	80019e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b60:	4b87      	ldr	r3, [pc, #540]	; (8001d80 <HAL_ADC_Init+0x290>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	4a87      	ldr	r2, [pc, #540]	; (8001d84 <HAL_ADC_Init+0x294>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	099b      	lsrs	r3, r3, #6
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b72:	e002      	b.n	8001b7a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f9      	bne.n	8001b74 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff3f 	bl	8001a08 <LL_ADC_IsInternalRegulatorEnabled>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f043 0210 	orr.w	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff77 	bl	8001aa4 <LL_ADC_REG_IsConversionOngoing>
 8001bb6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 8129 	bne.w	8001e18 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 8125 	bne.w	8001e18 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bd6:	f043 0202 	orr.w	r2, r3, #2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff38 	bl	8001a58 <LL_ADC_IsEnabled>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d136      	bne.n	8001c5c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_ADC_Init+0x298>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Init+0x112>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a63      	ldr	r2, [pc, #396]	; (8001d8c <HAL_ADC_Init+0x29c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10e      	bne.n	8001c20 <HAL_ADC_Init+0x130>
 8001c02:	4861      	ldr	r0, [pc, #388]	; (8001d88 <HAL_ADC_Init+0x298>)
 8001c04:	f7ff ff28 	bl	8001a58 <LL_ADC_IsEnabled>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	4860      	ldr	r0, [pc, #384]	; (8001d8c <HAL_ADC_Init+0x29c>)
 8001c0c:	f7ff ff24 	bl	8001a58 <LL_ADC_IsEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4323      	orrs	r3, r4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	e008      	b.n	8001c32 <HAL_ADC_Init+0x142>
 8001c20:	485b      	ldr	r0, [pc, #364]	; (8001d90 <HAL_ADC_Init+0x2a0>)
 8001c22:	f7ff ff19 	bl	8001a58 <LL_ADC_IsEnabled>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf0c      	ite	eq
 8001c2c:	2301      	moveq	r3, #1
 8001c2e:	2300      	movne	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d012      	beq.n	8001c5c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a53      	ldr	r2, [pc, #332]	; (8001d88 <HAL_ADC_Init+0x298>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d004      	beq.n	8001c4a <HAL_ADC_Init+0x15a>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a51      	ldr	r2, [pc, #324]	; (8001d8c <HAL_ADC_Init+0x29c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Init+0x15e>
 8001c4a:	4a52      	ldr	r2, [pc, #328]	; (8001d94 <HAL_ADC_Init+0x2a4>)
 8001c4c:	e000      	b.n	8001c50 <HAL_ADC_Init+0x160>
 8001c4e:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_ADC_Init+0x2a8>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f7ff fd98 	bl	800178c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c5c:	f7ff fd76 	bl	800174c <HAL_GetREVID>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d914      	bls.n	8001c94 <HAL_ADC_Init+0x1a4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d110      	bne.n	8001c94 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7d5b      	ldrb	r3, [r3, #21]
 8001c76:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c7c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c82:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	7f1b      	ldrb	r3, [r3, #28]
 8001c88:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c8a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c8c:	f043 030c 	orr.w	r3, r3, #12
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	e00d      	b.n	8001cb0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7d5b      	ldrb	r3, [r3, #21]
 8001c98:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c9e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ca4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7f1b      	ldrb	r3, [r3, #28]
 8001caa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7f1b      	ldrb	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	045b      	lsls	r3, r3, #17
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <HAL_ADC_Init+0x2ac>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	69b9      	ldr	r1, [r7, #24]
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fed2 	bl	8001aa4 <LL_ADC_REG_IsConversionOngoing>
 8001d00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fedf 	bl	8001aca <LL_ADC_INJ_IsConversionOngoing>
 8001d0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d15f      	bne.n	8001dd4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d15c      	bne.n	8001dd4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7d1b      	ldrb	r3, [r3, #20]
 8001d1e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_ADC_Init+0x2b0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d130      	bne.n	8001da8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_ADC_Init+0x2b4>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	0411      	lsls	r1, r2, #16
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d62:	4311      	orrs	r1, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	611a      	str	r2, [r3, #16]
 8001d7c:	e01c      	b.n	8001db8 <HAL_ADC_Init+0x2c8>
 8001d7e:	bf00      	nop
 8001d80:	24000000 	.word	0x24000000
 8001d84:	053e2d63 	.word	0x053e2d63
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40022100 	.word	0x40022100
 8001d90:	58026000 	.word	0x58026000
 8001d94:	40022300 	.word	0x40022300
 8001d98:	58026300 	.word	0x58026300
 8001d9c:	fff0c003 	.word	0xfff0c003
 8001da0:	ffffbffc 	.word	0xffffbffc
 8001da4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0201 	bic.w	r2, r2, #1
 8001db6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fbe0 	bl	8002594 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10c      	bne.n	8001df6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f023 010f 	bic.w	r1, r3, #15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
 8001df4:	e007      	b.n	8001e06 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 020f 	bic.w	r2, r2, #15
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
 8001e16:	e007      	b.n	8001e28 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1c:	f043 0210 	orr.w	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	bf00      	nop

08001e34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b0a1      	sub	sp, #132	; 0x84
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a9d      	ldr	r2, [pc, #628]	; (80020c4 <HAL_ADC_ConfigChannel+0x290>)
 8001e4e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x2a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e321      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x66e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fe1a 	bl	8001aa4 <LL_ADC_REG_IsConversionOngoing>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8306 	bne.w	8002484 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d108      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x62>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2201      	movs	r2, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	e016      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x90>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e003      	b.n	8001eba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f003 031f 	and.w	r3, r3, #31
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	69d1      	ldr	r1, [r2, #28]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	430b      	orrs	r3, r1
 8001ed0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f7ff fcdc 	bl	800189c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fddb 	bl	8001aa4 <LL_ADC_REG_IsConversionOngoing>
 8001eee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fde8 	bl	8001aca <LL_ADC_INJ_IsConversionOngoing>
 8001efa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 80b3 	bne.w	800206a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 80af 	bne.w	800206a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f7ff fceb 	bl	80018f4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_ADC_ConfigChannel+0x294>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f2a:	d10b      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x110>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	e01d      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x14c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10b      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x136>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	e00a      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x14c>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	f003 0304 	and.w	r3, r3, #4
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d027      	beq.n	8001fda <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6919      	ldr	r1, [r3, #16]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f98:	f7ff fc2c 	bl	80017f4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6919      	ldr	r1, [r3, #16]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7e5b      	ldrb	r3, [r3, #25]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x17e>
 8001fac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x180>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f7ff fc56 	bl	8001866 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	7e1b      	ldrb	r3, [r3, #24]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x19c>
 8001fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x19e>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f7ff fc2e 	bl	8001834 <LL_ADC_SetDataRightShift>
 8001fd8:	e047      	b.n	800206a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	069b      	lsls	r3, r3, #26
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d107      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ffc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	069b      	lsls	r3, r3, #26
 800200e:	429a      	cmp	r2, r3
 8002010:	d107      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002020:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002028:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	069b      	lsls	r3, r3, #26
 8002032:	429a      	cmp	r2, r3
 8002034:	d107      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002044:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800204c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	069b      	lsls	r3, r3, #26
 8002056:	429a      	cmp	r2, r3
 8002058:	d107      	bne.n	800206a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002068:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fcf2 	bl	8001a58 <LL_ADC_IsEnabled>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 820d 	bne.w	8002496 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	461a      	mov	r2, r3
 800208a:	f7ff fc5f 	bl	800194c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_ADC_ConfigChannel+0x290>)
 8002094:	4293      	cmp	r3, r2
 8002096:	f040 8133 	bne.w	8002300 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d110      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x298>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0e9b      	lsrs	r3, r3, #26
 80020b0:	3301      	adds	r3, #1
 80020b2:	f003 031f 	and.w	r3, r3, #31
 80020b6:	2b09      	cmp	r3, #9
 80020b8:	bf94      	ite	ls
 80020ba:	2301      	movls	r3, #1
 80020bc:	2300      	movhi	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	e01e      	b.n	8002100 <HAL_ADC_ConfigChannel+0x2cc>
 80020c2:	bf00      	nop
 80020c4:	47ff0000 	.word	0x47ff0000
 80020c8:	5c001000 	.word	0x5c001000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80020da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80020de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80020e4:	2320      	movs	r3, #32
 80020e6:	e003      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80020e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2b09      	cmp	r3, #9
 80020f8:	bf94      	ite	ls
 80020fa:	2301      	movls	r3, #1
 80020fc:	2300      	movhi	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002100:	2b00      	cmp	r3, #0
 8002102:	d079      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x2ec>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	3301      	adds	r3, #1
 8002118:	069b      	lsls	r3, r3, #26
 800211a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211e:	e015      	b.n	800214c <HAL_ADC_ConfigChannel+0x318>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800212e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002130:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e003      	b.n	8002144 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800213c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_ADC_ConfigChannel+0x338>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	e017      	b.n	800219c <HAL_ADC_ConfigChannel+0x368>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800217a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800217e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	ea42 0103 	orr.w	r1, r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x38e>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	3301      	adds	r3, #1
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	051b      	lsls	r3, r3, #20
 80021c0:	e018      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x3c0>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80021de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f4:	430b      	orrs	r3, r1
 80021f6:	e07e      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x3e0>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	3301      	adds	r3, #1
 800220c:	069b      	lsls	r3, r3, #26
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002212:	e015      	b.n	8002240 <HAL_ADC_ConfigChannel+0x40c>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e003      	b.n	8002238 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x42c>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	e017      	b.n	8002290 <HAL_ADC_ConfigChannel+0x45c>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	61bb      	str	r3, [r7, #24]
  return result;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10d      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x488>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	051b      	lsls	r3, r3, #20
 80022b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022ba:	e01b      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x4c0>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	60fb      	str	r3, [r7, #12]
  return result;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80022d4:	2320      	movs	r3, #32
 80022d6:	e003      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f003 021f 	and.w	r2, r3, #31
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	051b      	lsls	r3, r3, #20
 80022f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f4:	430b      	orrs	r3, r1
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6892      	ldr	r2, [r2, #8]
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7ff fafa 	bl	80018f4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f280 80c6 	bge.w	8002496 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a67      	ldr	r2, [pc, #412]	; (80024ac <HAL_ADC_ConfigChannel+0x678>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d004      	beq.n	800231e <HAL_ADC_ConfigChannel+0x4ea>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a65      	ldr	r2, [pc, #404]	; (80024b0 <HAL_ADC_ConfigChannel+0x67c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d101      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x4ee>
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_ADC_ConfigChannel+0x680>)
 8002320:	e000      	b.n	8002324 <HAL_ADC_ConfigChannel+0x4f0>
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_ADC_ConfigChannel+0x684>)
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fa57 	bl	80017d8 <LL_ADC_GetCommonPathInternalCh>
 800232a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a5e      	ldr	r2, [pc, #376]	; (80024ac <HAL_ADC_ConfigChannel+0x678>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d004      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x50c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5d      	ldr	r2, [pc, #372]	; (80024b0 <HAL_ADC_ConfigChannel+0x67c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d10e      	bne.n	800235e <HAL_ADC_ConfigChannel+0x52a>
 8002340:	485a      	ldr	r0, [pc, #360]	; (80024ac <HAL_ADC_ConfigChannel+0x678>)
 8002342:	f7ff fb89 	bl	8001a58 <LL_ADC_IsEnabled>
 8002346:	4604      	mov	r4, r0
 8002348:	4859      	ldr	r0, [pc, #356]	; (80024b0 <HAL_ADC_ConfigChannel+0x67c>)
 800234a:	f7ff fb85 	bl	8001a58 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	4323      	orrs	r3, r4
 8002352:	2b00      	cmp	r3, #0
 8002354:	bf0c      	ite	eq
 8002356:	2301      	moveq	r3, #1
 8002358:	2300      	movne	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	e008      	b.n	8002370 <HAL_ADC_ConfigChannel+0x53c>
 800235e:	4857      	ldr	r0, [pc, #348]	; (80024bc <HAL_ADC_ConfigChannel+0x688>)
 8002360:	f7ff fb7a 	bl	8001a58 <LL_ADC_IsEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d07d      	beq.n	8002470 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a51      	ldr	r2, [pc, #324]	; (80024c0 <HAL_ADC_ConfigChannel+0x68c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d130      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x5ac>
 800237e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d12b      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a4b      	ldr	r2, [pc, #300]	; (80024bc <HAL_ADC_ConfigChannel+0x688>)
 800238e:	4293      	cmp	r3, r2
 8002390:	f040 8081 	bne.w	8002496 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a44      	ldr	r2, [pc, #272]	; (80024ac <HAL_ADC_ConfigChannel+0x678>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x574>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <HAL_ADC_ConfigChannel+0x67c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x578>
 80023a8:	4a42      	ldr	r2, [pc, #264]	; (80024b4 <HAL_ADC_ConfigChannel+0x680>)
 80023aa:	e000      	b.n	80023ae <HAL_ADC_ConfigChannel+0x57a>
 80023ac:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_ADC_ConfigChannel+0x684>)
 80023ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f7ff f9fb 	bl	80017b2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023bc:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_ADC_ConfigChannel+0x690>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	099b      	lsrs	r3, r3, #6
 80023c2:	4a41      	ldr	r2, [pc, #260]	; (80024c8 <HAL_ADC_ConfigChannel+0x694>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	3301      	adds	r3, #1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023de:	e05a      	b.n	8002496 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a39      	ldr	r2, [pc, #228]	; (80024cc <HAL_ADC_ConfigChannel+0x698>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d11e      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x5f4>
 80023ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d119      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a30      	ldr	r2, [pc, #192]	; (80024bc <HAL_ADC_ConfigChannel+0x688>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d14b      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2a      	ldr	r2, [pc, #168]	; (80024ac <HAL_ADC_ConfigChannel+0x678>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_ADC_ConfigChannel+0x5de>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a28      	ldr	r2, [pc, #160]	; (80024b0 <HAL_ADC_ConfigChannel+0x67c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x5e2>
 8002412:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <HAL_ADC_ConfigChannel+0x680>)
 8002414:	e000      	b.n	8002418 <HAL_ADC_ConfigChannel+0x5e4>
 8002416:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <HAL_ADC_ConfigChannel+0x684>)
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7ff f9c6 	bl	80017b2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002426:	e036      	b.n	8002496 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <HAL_ADC_ConfigChannel+0x69c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d131      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x662>
 8002432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d12c      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_ADC_ConfigChannel+0x688>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d127      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a18      	ldr	r2, [pc, #96]	; (80024ac <HAL_ADC_ConfigChannel+0x678>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <HAL_ADC_ConfigChannel+0x626>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a16      	ldr	r2, [pc, #88]	; (80024b0 <HAL_ADC_ConfigChannel+0x67c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x62a>
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_ADC_ConfigChannel+0x680>)
 800245c:	e000      	b.n	8002460 <HAL_ADC_ConfigChannel+0x62c>
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <HAL_ADC_ConfigChannel+0x684>)
 8002460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002462:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f7ff f9a2 	bl	80017b2 <LL_ADC_SetCommonPathInternalCh>
 800246e:	e012      	b.n	8002496 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002482:	e008      	b.n	8002496 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800249e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3784      	adds	r7, #132	; 0x84
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd90      	pop	{r4, r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40022100 	.word	0x40022100
 80024b4:	40022300 	.word	0x40022300
 80024b8:	58026300 	.word	0x58026300
 80024bc:	58026000 	.word	0x58026000
 80024c0:	cb840000 	.word	0xcb840000
 80024c4:	24000000 	.word	0x24000000
 80024c8:	053e2d63 	.word	0x053e2d63
 80024cc:	c7520000 	.word	0xc7520000
 80024d0:	cfb80000 	.word	0xcfb80000

080024d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff facc 	bl	8001a7e <LL_ADC_IsDisableOngoing>
 80024e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fab3 	bl	8001a58 <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d047      	beq.n	8002588 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d144      	bne.n	8002588 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030d 	and.w	r3, r3, #13
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10c      	bne.n	8002526 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fa8d 	bl	8001a30 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2203      	movs	r2, #3
 800251c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800251e:	f7ff f8e5 	bl	80016ec <HAL_GetTick>
 8002522:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002524:	e029      	b.n	800257a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e023      	b.n	800258a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002542:	f7ff f8d3 	bl	80016ec <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d914      	bls.n	800257a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1dc      	bne.n	8002542 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a7a      	ldr	r2, [pc, #488]	; (800278c <ADC_ConfigureBoostMode+0x1f8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <ADC_ConfigureBoostMode+0x1c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a79      	ldr	r2, [pc, #484]	; (8002790 <ADC_ConfigureBoostMode+0x1fc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d109      	bne.n	80025c4 <ADC_ConfigureBoostMode+0x30>
 80025b0:	4b78      	ldr	r3, [pc, #480]	; (8002794 <ADC_ConfigureBoostMode+0x200>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <ADC_ConfigureBoostMode+0x42>
 80025c4:	4b74      	ldr	r3, [pc, #464]	; (8002798 <ADC_ConfigureBoostMode+0x204>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01c      	beq.n	8002614 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025da:	f004 fcf7 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 80025de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025e8:	d010      	beq.n	800260c <ADC_ConfigureBoostMode+0x78>
 80025ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025ee:	d873      	bhi.n	80026d8 <ADC_ConfigureBoostMode+0x144>
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f4:	d002      	beq.n	80025fc <ADC_ConfigureBoostMode+0x68>
 80025f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025fa:	d16d      	bne.n	80026d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	60fb      	str	r3, [r7, #12]
        break;
 800260a:	e068      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	60fb      	str	r3, [r7, #12]
        break;
 8002612:	e064      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002614:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	f005 ff3c 	bl	8008498 <HAL_RCCEx_GetPeriphCLKFreq>
 8002620:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800262a:	d051      	beq.n	80026d0 <ADC_ConfigureBoostMode+0x13c>
 800262c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002630:	d854      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002632:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002636:	d047      	beq.n	80026c8 <ADC_ConfigureBoostMode+0x134>
 8002638:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800263c:	d84e      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800263e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002642:	d03d      	beq.n	80026c0 <ADC_ConfigureBoostMode+0x12c>
 8002644:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002648:	d848      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800264a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800264e:	d033      	beq.n	80026b8 <ADC_ConfigureBoostMode+0x124>
 8002650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002654:	d842      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002656:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800265a:	d029      	beq.n	80026b0 <ADC_ConfigureBoostMode+0x11c>
 800265c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002660:	d83c      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002662:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002666:	d01a      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002668:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800266c:	d836      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800266e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002672:	d014      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002674:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002678:	d830      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800267a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267e:	d00e      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002684:	d82a      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002686:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800268a:	d008      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 800268c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002690:	d824      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002696:	d002      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002698:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800269c:	d11e      	bne.n	80026dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0c9b      	lsrs	r3, r3, #18
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	60fb      	str	r3, [r7, #12]
        break;
 80026ae:	e016      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
        break;
 80026b6:	e012      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	60fb      	str	r3, [r7, #12]
        break;
 80026be:	e00e      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	60fb      	str	r3, [r7, #12]
        break;
 80026c6:	e00a      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	09db      	lsrs	r3, r3, #7
 80026cc:	60fb      	str	r3, [r7, #12]
        break;
 80026ce:	e006      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	60fb      	str	r3, [r7, #12]
        break;
 80026d6:	e002      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
        break;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80026dc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026de:	f7ff f835 	bl	800174c <HAL_GetREVID>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d815      	bhi.n	8002718 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a2b      	ldr	r2, [pc, #172]	; (800279c <ADC_ConfigureBoostMode+0x208>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d908      	bls.n	8002706 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002702:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002704:	e03e      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002714:	609a      	str	r2, [r3, #8]
}
 8002716:	e035      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <ADC_ConfigureBoostMode+0x20c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d808      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002734:	609a      	str	r2, [r3, #8]
}
 8002736:	e025      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <ADC_ConfigureBoostMode+0x210>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d80a      	bhi.n	8002756 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002752:	609a      	str	r2, [r3, #8]
}
 8002754:	e016      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <ADC_ConfigureBoostMode+0x214>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d80a      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002770:	609a      	str	r2, [r3, #8]
}
 8002772:	e007      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40022000 	.word	0x40022000
 8002790:	40022100 	.word	0x40022100
 8002794:	40022300 	.word	0x40022300
 8002798:	58026300 	.word	0x58026300
 800279c:	01312d00 	.word	0x01312d00
 80027a0:	005f5e10 	.word	0x005f5e10
 80027a4:	00bebc20 	.word	0x00bebc20
 80027a8:	017d7840 	.word	0x017d7840

080027ac <LL_ADC_IsEnabled>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <LL_ADC_IsEnabled+0x18>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <LL_ADC_IsEnabled+0x1a>
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <LL_ADC_StartCalibration>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <LL_ADC_StartCalibration+0x38>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027f4:	430a      	orrs	r2, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	609a      	str	r2, [r3, #8]
}
 8002800:	bf00      	nop
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	3ffeffc0 	.word	0x3ffeffc0

08002810 <LL_ADC_IsCalibrationOnGoing>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002824:	d101      	bne.n	800282a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_REG_IsConversionOngoing>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d101      	bne.n	8002850 <LL_ADC_REG_IsConversionOngoing+0x18>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADCEx_Calibration_Start+0x1e>
 800287a:	2302      	movs	r3, #2
 800287c:	e04c      	b.n	8002918 <HAL_ADCEx_Calibration_Start+0xb8>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fe24 	bl	80024d4 <ADC_Disable>
 800288c:	4603      	mov	r3, r0
 800288e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d135      	bne.n	8002902 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_ADCEx_Calibration_Start+0xc0>)
 800289c:	4013      	ands	r3, r2
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ff90 	bl	80027d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028b4:	e014      	b.n	80028e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	3301      	adds	r3, #1
 80028ba:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_ADCEx_Calibration_Start+0xc4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d30d      	bcc.n	80028e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c8:	f023 0312 	bic.w	r3, r3, #18
 80028cc:	f043 0210 	orr.w	r2, r3, #16
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e01b      	b.n	8002918 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff93 	bl	8002810 <LL_ADC_IsCalibrationOnGoing>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e2      	bne.n	80028b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f023 0303 	bic.w	r3, r3, #3
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54
 8002900:	e005      	b.n	800290e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002916:	7dfb      	ldrb	r3, [r7, #23]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	ffffeefd 	.word	0xffffeefd
 8002924:	25c3f800 	.word	0x25c3f800

08002928 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b09f      	sub	sp, #124	; 0x7c
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002942:	2302      	movs	r3, #2
 8002944:	e0be      	b.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002952:	2300      	movs	r3, #0
 8002954:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a5c      	ldr	r2, [pc, #368]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d102      	bne.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002960:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	e001      	b.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	f043 0220 	orr.w	r2, r3, #32
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e09d      	b.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff54 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8002990:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff4e 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d17f      	bne.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d17c      	bne.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a47      	ldr	r2, [pc, #284]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a46      	ldr	r2, [pc, #280]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d101      	bne.n	80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80029bc:	4b45      	ldr	r3, [pc, #276]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80029be:	e000      	b.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80029c0:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80029c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d039      	beq.n	8002a40 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80029cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	431a      	orrs	r2, r3
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a3a      	ldr	r2, [pc, #232]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10e      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80029f2:	4836      	ldr	r0, [pc, #216]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029f4:	f7ff feda 	bl	80027ac <LL_ADC_IsEnabled>
 80029f8:	4604      	mov	r4, r0
 80029fa:	4835      	ldr	r0, [pc, #212]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029fc:	f7ff fed6 	bl	80027ac <LL_ADC_IsEnabled>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4323      	orrs	r3, r4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf0c      	ite	eq
 8002a08:	2301      	moveq	r3, #1
 8002a0a:	2300      	movne	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	e008      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002a10:	4832      	ldr	r0, [pc, #200]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a12:	f7ff fecb 	bl	80027ac <LL_ADC_IsEnabled>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d047      	beq.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a3e:	e03a      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10e      	bne.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002a60:	481a      	ldr	r0, [pc, #104]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a62:	f7ff fea3 	bl	80027ac <LL_ADC_IsEnabled>
 8002a66:	4604      	mov	r4, r0
 8002a68:	4819      	ldr	r0, [pc, #100]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a6a:	f7ff fe9f 	bl	80027ac <LL_ADC_IsEnabled>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4323      	orrs	r3, r4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	e008      	b.n	8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a7e:	4817      	ldr	r0, [pc, #92]	; (8002adc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a80:	f7ff fe94 	bl	80027ac <LL_ADC_IsEnabled>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a9e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa0:	e009      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ab4:	e000      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	377c      	adds	r7, #124	; 0x7c
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40022100 	.word	0x40022100
 8002ad4:	40022300 	.word	0x40022300
 8002ad8:	58026300 	.word	0x58026300
 8002adc:	58026000 	.word	0x58026000
 8002ae0:	fffff0e0 	.word	0xfffff0e0

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <__NVIC_SetPriorityGrouping+0x40>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b12:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <__NVIC_SetPriorityGrouping+0x40>)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	60d3      	str	r3, [r2, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00
 8002b28:	05fa0000 	.word	0x05fa0000

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c50:	d301      	bcc.n	8002c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00f      	b.n	8002c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <SysTick_Config+0x40>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5e:	210f      	movs	r1, #15
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f7ff ff8e 	bl	8002b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <SysTick_Config+0x40>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <SysTick_Config+0x40>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010

08002c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff29 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca8:	f7ff ff40 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff90 	bl	8002bd8 <NVIC_EncodePriority>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff5f 	bl	8002b84 <__NVIC_SetPriority>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff33 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffa4 	bl	8002c40 <SysTick_Config>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7fe fcee 	bl	80016ec <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e316      	b.n	800334a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a66      	ldr	r2, [pc, #408]	; (8002ebc <HAL_DMA_Init+0x1b8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d04a      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_DMA_Init+0x1bc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d045      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a63      	ldr	r2, [pc, #396]	; (8002ec4 <HAL_DMA_Init+0x1c0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d040      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a62      	ldr	r2, [pc, #392]	; (8002ec8 <HAL_DMA_Init+0x1c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d03b      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a60      	ldr	r2, [pc, #384]	; (8002ecc <HAL_DMA_Init+0x1c8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d036      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a5f      	ldr	r2, [pc, #380]	; (8002ed0 <HAL_DMA_Init+0x1cc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d031      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a5d      	ldr	r2, [pc, #372]	; (8002ed4 <HAL_DMA_Init+0x1d0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02c      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a5c      	ldr	r2, [pc, #368]	; (8002ed8 <HAL_DMA_Init+0x1d4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d027      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5a      	ldr	r2, [pc, #360]	; (8002edc <HAL_DMA_Init+0x1d8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d022      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a59      	ldr	r2, [pc, #356]	; (8002ee0 <HAL_DMA_Init+0x1dc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d01d      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a57      	ldr	r2, [pc, #348]	; (8002ee4 <HAL_DMA_Init+0x1e0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d018      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a56      	ldr	r2, [pc, #344]	; (8002ee8 <HAL_DMA_Init+0x1e4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_DMA_Init+0x1e8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00e      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <HAL_DMA_Init+0x1ec>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a51      	ldr	r2, [pc, #324]	; (8002ef4 <HAL_DMA_Init+0x1f0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_DMA_Init+0xb8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a50      	ldr	r2, [pc, #320]	; (8002ef8 <HAL_DMA_Init+0x1f4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_DMA_Init+0xbc>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_Init+0xbe>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 813b 	beq.w	800303e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a37      	ldr	r2, [pc, #220]	; (8002ebc <HAL_DMA_Init+0x1b8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d04a      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a36      	ldr	r2, [pc, #216]	; (8002ec0 <HAL_DMA_Init+0x1bc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d045      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a34      	ldr	r2, [pc, #208]	; (8002ec4 <HAL_DMA_Init+0x1c0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d040      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <HAL_DMA_Init+0x1c4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d03b      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a31      	ldr	r2, [pc, #196]	; (8002ecc <HAL_DMA_Init+0x1c8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d036      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a30      	ldr	r2, [pc, #192]	; (8002ed0 <HAL_DMA_Init+0x1cc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d031      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a2e      	ldr	r2, [pc, #184]	; (8002ed4 <HAL_DMA_Init+0x1d0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02c      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_DMA_Init+0x1d4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d027      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <HAL_DMA_Init+0x1d8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d022      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <HAL_DMA_Init+0x1dc>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d01d      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <HAL_DMA_Init+0x1e0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d018      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <HAL_DMA_Init+0x1e4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d013      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a25      	ldr	r2, [pc, #148]	; (8002eec <HAL_DMA_Init+0x1e8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00e      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <HAL_DMA_Init+0x1ec>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <HAL_DMA_Init+0x1f0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_Init+0x174>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a21      	ldr	r2, [pc, #132]	; (8002ef8 <HAL_DMA_Init+0x1f4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d108      	bne.n	8002e8a <HAL_DMA_Init+0x186>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	e007      	b.n	8002e9a <HAL_DMA_Init+0x196>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e9a:	e02f      	b.n	8002efc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e9c:	f7fe fc26 	bl	80016ec <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d928      	bls.n	8002efc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e246      	b.n	800334a <HAL_DMA_Init+0x646>
 8002ebc:	40020010 	.word	0x40020010
 8002ec0:	40020028 	.word	0x40020028
 8002ec4:	40020040 	.word	0x40020040
 8002ec8:	40020058 	.word	0x40020058
 8002ecc:	40020070 	.word	0x40020070
 8002ed0:	40020088 	.word	0x40020088
 8002ed4:	400200a0 	.word	0x400200a0
 8002ed8:	400200b8 	.word	0x400200b8
 8002edc:	40020410 	.word	0x40020410
 8002ee0:	40020428 	.word	0x40020428
 8002ee4:	40020440 	.word	0x40020440
 8002ee8:	40020458 	.word	0x40020458
 8002eec:	40020470 	.word	0x40020470
 8002ef0:	40020488 	.word	0x40020488
 8002ef4:	400204a0 	.word	0x400204a0
 8002ef8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1c8      	bne.n	8002e9c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4b83      	ldr	r3, [pc, #524]	; (8003124 <HAL_DMA_Init+0x420>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002f22:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d107      	bne.n	8002f60 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f60:	4b71      	ldr	r3, [pc, #452]	; (8003128 <HAL_DMA_Init+0x424>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b71      	ldr	r3, [pc, #452]	; (800312c <HAL_DMA_Init+0x428>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f6c:	d328      	bcc.n	8002fc0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b28      	cmp	r3, #40	; 0x28
 8002f74:	d903      	bls.n	8002f7e <HAL_DMA_Init+0x27a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f7c:	d917      	bls.n	8002fae <HAL_DMA_Init+0x2aa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b3e      	cmp	r3, #62	; 0x3e
 8002f84:	d903      	bls.n	8002f8e <HAL_DMA_Init+0x28a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b42      	cmp	r3, #66	; 0x42
 8002f8c:	d90f      	bls.n	8002fae <HAL_DMA_Init+0x2aa>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b46      	cmp	r3, #70	; 0x46
 8002f94:	d903      	bls.n	8002f9e <HAL_DMA_Init+0x29a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b48      	cmp	r3, #72	; 0x48
 8002f9c:	d907      	bls.n	8002fae <HAL_DMA_Init+0x2aa>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b4e      	cmp	r3, #78	; 0x4e
 8002fa4:	d905      	bls.n	8002fb2 <HAL_DMA_Init+0x2ae>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b52      	cmp	r3, #82	; 0x52
 8002fac:	d801      	bhi.n	8002fb2 <HAL_DMA_Init+0x2ae>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_DMA_Init+0x2b0>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fbe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f023 0307 	bic.w	r3, r3, #7
 8002fd6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d117      	bne.n	800301a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00e      	beq.n	800301a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f001 ff1d 	bl	8004e3c <DMA_CheckFifoParam>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2240      	movs	r2, #64	; 0x40
 800300c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e197      	b.n	800334a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f001 fe58 	bl	8004cd8 <DMA_CalcBaseAndBitshift>
 8003028:	4603      	mov	r3, r0
 800302a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	223f      	movs	r2, #63	; 0x3f
 8003036:	409a      	lsls	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e0cd      	b.n	80031da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <HAL_DMA_Init+0x42c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_DMA_Init+0x38a>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a39      	ldr	r2, [pc, #228]	; (8003134 <HAL_DMA_Init+0x430>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01d      	beq.n	800308e <HAL_DMA_Init+0x38a>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a38      	ldr	r2, [pc, #224]	; (8003138 <HAL_DMA_Init+0x434>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d018      	beq.n	800308e <HAL_DMA_Init+0x38a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a36      	ldr	r2, [pc, #216]	; (800313c <HAL_DMA_Init+0x438>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <HAL_DMA_Init+0x38a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a35      	ldr	r2, [pc, #212]	; (8003140 <HAL_DMA_Init+0x43c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <HAL_DMA_Init+0x38a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a33      	ldr	r2, [pc, #204]	; (8003144 <HAL_DMA_Init+0x440>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d009      	beq.n	800308e <HAL_DMA_Init+0x38a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a32      	ldr	r2, [pc, #200]	; (8003148 <HAL_DMA_Init+0x444>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_DMA_Init+0x38a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_DMA_Init+0x448>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Init+0x38e>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <HAL_DMA_Init+0x390>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8097 	beq.w	80031c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_DMA_Init+0x42c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d021      	beq.n	80030e8 <HAL_DMA_Init+0x3e4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a22      	ldr	r2, [pc, #136]	; (8003134 <HAL_DMA_Init+0x430>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01c      	beq.n	80030e8 <HAL_DMA_Init+0x3e4>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a21      	ldr	r2, [pc, #132]	; (8003138 <HAL_DMA_Init+0x434>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d017      	beq.n	80030e8 <HAL_DMA_Init+0x3e4>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1f      	ldr	r2, [pc, #124]	; (800313c <HAL_DMA_Init+0x438>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d012      	beq.n	80030e8 <HAL_DMA_Init+0x3e4>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1e      	ldr	r2, [pc, #120]	; (8003140 <HAL_DMA_Init+0x43c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00d      	beq.n	80030e8 <HAL_DMA_Init+0x3e4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <HAL_DMA_Init+0x440>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d008      	beq.n	80030e8 <HAL_DMA_Init+0x3e4>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_DMA_Init+0x444>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d003      	beq.n	80030e8 <HAL_DMA_Init+0x3e4>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <HAL_DMA_Init+0x448>)
 80030e6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_DMA_Init+0x44c>)
 8003104:	4013      	ands	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d021      	beq.n	8003154 <HAL_DMA_Init+0x450>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d102      	bne.n	800311e <HAL_DMA_Init+0x41a>
 8003118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800311c:	e01b      	b.n	8003156 <HAL_DMA_Init+0x452>
 800311e:	2300      	movs	r3, #0
 8003120:	e019      	b.n	8003156 <HAL_DMA_Init+0x452>
 8003122:	bf00      	nop
 8003124:	fe10803f 	.word	0xfe10803f
 8003128:	5c001000 	.word	0x5c001000
 800312c:	ffff0000 	.word	0xffff0000
 8003130:	58025408 	.word	0x58025408
 8003134:	5802541c 	.word	0x5802541c
 8003138:	58025430 	.word	0x58025430
 800313c:	58025444 	.word	0x58025444
 8003140:	58025458 	.word	0x58025458
 8003144:	5802546c 	.word	0x5802546c
 8003148:	58025480 	.word	0x58025480
 800314c:	58025494 	.word	0x58025494
 8003150:	fffe000f 	.word	0xfffe000f
 8003154:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68d2      	ldr	r2, [r2, #12]
 800315a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800315c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800316c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800317c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003184:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4b6e      	ldr	r3, [pc, #440]	; (8003354 <HAL_DMA_Init+0x650>)
 800319c:	4413      	add	r3, r2
 800319e:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_DMA_Init+0x654>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	091b      	lsrs	r3, r3, #4
 80031a6:	009a      	lsls	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f001 fd93 	bl	8004cd8 <DMA_CalcBaseAndBitshift>
 80031b2:	4603      	mov	r3, r0
 80031b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2201      	movs	r2, #1
 80031c0:	409a      	lsls	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e008      	b.n	80031da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2203      	movs	r2, #3
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0b7      	b.n	800334a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a5f      	ldr	r2, [pc, #380]	; (800335c <HAL_DMA_Init+0x658>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d072      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5d      	ldr	r2, [pc, #372]	; (8003360 <HAL_DMA_Init+0x65c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d06d      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <HAL_DMA_Init+0x660>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d068      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <HAL_DMA_Init+0x664>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d063      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a59      	ldr	r2, [pc, #356]	; (800336c <HAL_DMA_Init+0x668>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d05e      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a57      	ldr	r2, [pc, #348]	; (8003370 <HAL_DMA_Init+0x66c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d059      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a56      	ldr	r2, [pc, #344]	; (8003374 <HAL_DMA_Init+0x670>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d054      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a54      	ldr	r2, [pc, #336]	; (8003378 <HAL_DMA_Init+0x674>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04f      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a53      	ldr	r2, [pc, #332]	; (800337c <HAL_DMA_Init+0x678>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d04a      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a51      	ldr	r2, [pc, #324]	; (8003380 <HAL_DMA_Init+0x67c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d045      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a50      	ldr	r2, [pc, #320]	; (8003384 <HAL_DMA_Init+0x680>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a4e      	ldr	r2, [pc, #312]	; (8003388 <HAL_DMA_Init+0x684>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d03b      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a4d      	ldr	r2, [pc, #308]	; (800338c <HAL_DMA_Init+0x688>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d036      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_DMA_Init+0x68c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d031      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <HAL_DMA_Init+0x690>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d02c      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <HAL_DMA_Init+0x694>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d027      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <HAL_DMA_Init+0x698>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a45      	ldr	r2, [pc, #276]	; (80033a0 <HAL_DMA_Init+0x69c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a44      	ldr	r2, [pc, #272]	; (80033a4 <HAL_DMA_Init+0x6a0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a42      	ldr	r2, [pc, #264]	; (80033a8 <HAL_DMA_Init+0x6a4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a41      	ldr	r2, [pc, #260]	; (80033ac <HAL_DMA_Init+0x6a8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3f      	ldr	r2, [pc, #252]	; (80033b0 <HAL_DMA_Init+0x6ac>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3e      	ldr	r2, [pc, #248]	; (80033b4 <HAL_DMA_Init+0x6b0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_DMA_Init+0x5c6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3c      	ldr	r2, [pc, #240]	; (80033b8 <HAL_DMA_Init+0x6b4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Init+0x5ca>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_DMA_Init+0x5cc>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d032      	beq.n	800333a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f001 fe2d 	bl	8004f34 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d102      	bne.n	80032e8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d010      	beq.n	8003328 <HAL_DMA_Init+0x624>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b08      	cmp	r3, #8
 800330c:	d80c      	bhi.n	8003328 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f001 feaa 	bl	8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	e008      	b.n	800333a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	a7fdabf8 	.word	0xa7fdabf8
 8003358:	cccccccd 	.word	0xcccccccd
 800335c:	40020010 	.word	0x40020010
 8003360:	40020028 	.word	0x40020028
 8003364:	40020040 	.word	0x40020040
 8003368:	40020058 	.word	0x40020058
 800336c:	40020070 	.word	0x40020070
 8003370:	40020088 	.word	0x40020088
 8003374:	400200a0 	.word	0x400200a0
 8003378:	400200b8 	.word	0x400200b8
 800337c:	40020410 	.word	0x40020410
 8003380:	40020428 	.word	0x40020428
 8003384:	40020440 	.word	0x40020440
 8003388:	40020458 	.word	0x40020458
 800338c:	40020470 	.word	0x40020470
 8003390:	40020488 	.word	0x40020488
 8003394:	400204a0 	.word	0x400204a0
 8003398:	400204b8 	.word	0x400204b8
 800339c:	58025408 	.word	0x58025408
 80033a0:	5802541c 	.word	0x5802541c
 80033a4:	58025430 	.word	0x58025430
 80033a8:	58025444 	.word	0x58025444
 80033ac:	58025458 	.word	0x58025458
 80033b0:	5802546c 	.word	0x5802546c
 80033b4:	58025480 	.word	0x58025480
 80033b8:	58025494 	.word	0x58025494

080033bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7fe f992 	bl	80016ec <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e2dc      	b.n	800398e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d008      	beq.n	80033f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e2cd      	b.n	800398e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a76      	ldr	r2, [pc, #472]	; (80035d0 <HAL_DMA_Abort+0x214>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d04a      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a74      	ldr	r2, [pc, #464]	; (80035d4 <HAL_DMA_Abort+0x218>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d045      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a73      	ldr	r2, [pc, #460]	; (80035d8 <HAL_DMA_Abort+0x21c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d040      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a71      	ldr	r2, [pc, #452]	; (80035dc <HAL_DMA_Abort+0x220>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d03b      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a70      	ldr	r2, [pc, #448]	; (80035e0 <HAL_DMA_Abort+0x224>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d036      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_DMA_Abort+0x228>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d031      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6d      	ldr	r2, [pc, #436]	; (80035e8 <HAL_DMA_Abort+0x22c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d02c      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a6b      	ldr	r2, [pc, #428]	; (80035ec <HAL_DMA_Abort+0x230>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d027      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6a      	ldr	r2, [pc, #424]	; (80035f0 <HAL_DMA_Abort+0x234>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_DMA_Abort+0x238>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01d      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a67      	ldr	r2, [pc, #412]	; (80035f8 <HAL_DMA_Abort+0x23c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d018      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a65      	ldr	r2, [pc, #404]	; (80035fc <HAL_DMA_Abort+0x240>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a64      	ldr	r2, [pc, #400]	; (8003600 <HAL_DMA_Abort+0x244>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00e      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a62      	ldr	r2, [pc, #392]	; (8003604 <HAL_DMA_Abort+0x248>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a61      	ldr	r2, [pc, #388]	; (8003608 <HAL_DMA_Abort+0x24c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_DMA_Abort+0xd6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5f      	ldr	r2, [pc, #380]	; (800360c <HAL_DMA_Abort+0x250>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_DMA_Abort+0xda>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_DMA_Abort+0xdc>
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 021e 	bic.w	r2, r2, #30
 80034aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	e00a      	b.n	80034da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <HAL_DMA_Abort+0x214>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d072      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3a      	ldr	r2, [pc, #232]	; (80035d4 <HAL_DMA_Abort+0x218>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d06d      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a39      	ldr	r2, [pc, #228]	; (80035d8 <HAL_DMA_Abort+0x21c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d068      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a37      	ldr	r2, [pc, #220]	; (80035dc <HAL_DMA_Abort+0x220>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d063      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a36      	ldr	r2, [pc, #216]	; (80035e0 <HAL_DMA_Abort+0x224>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d05e      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a34      	ldr	r2, [pc, #208]	; (80035e4 <HAL_DMA_Abort+0x228>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d059      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a33      	ldr	r2, [pc, #204]	; (80035e8 <HAL_DMA_Abort+0x22c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d054      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a31      	ldr	r2, [pc, #196]	; (80035ec <HAL_DMA_Abort+0x230>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d04f      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a30      	ldr	r2, [pc, #192]	; (80035f0 <HAL_DMA_Abort+0x234>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04a      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a2e      	ldr	r2, [pc, #184]	; (80035f4 <HAL_DMA_Abort+0x238>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d045      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <HAL_DMA_Abort+0x23c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <HAL_DMA_Abort+0x240>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d03b      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_DMA_Abort+0x244>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d036      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a28      	ldr	r2, [pc, #160]	; (8003604 <HAL_DMA_Abort+0x248>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_DMA_Abort+0x24c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d02c      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <HAL_DMA_Abort+0x250>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d027      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a24      	ldr	r2, [pc, #144]	; (8003610 <HAL_DMA_Abort+0x254>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_DMA_Abort+0x258>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_DMA_Abort+0x25c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_DMA_Abort+0x260>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <HAL_DMA_Abort+0x264>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_DMA_Abort+0x268>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_DMA_Abort+0x26c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_Abort+0x20e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <HAL_DMA_Abort+0x270>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d132      	bne.n	8003630 <HAL_DMA_Abort+0x274>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e031      	b.n	8003632 <HAL_DMA_Abort+0x276>
 80035ce:	bf00      	nop
 80035d0:	40020010 	.word	0x40020010
 80035d4:	40020028 	.word	0x40020028
 80035d8:	40020040 	.word	0x40020040
 80035dc:	40020058 	.word	0x40020058
 80035e0:	40020070 	.word	0x40020070
 80035e4:	40020088 	.word	0x40020088
 80035e8:	400200a0 	.word	0x400200a0
 80035ec:	400200b8 	.word	0x400200b8
 80035f0:	40020410 	.word	0x40020410
 80035f4:	40020428 	.word	0x40020428
 80035f8:	40020440 	.word	0x40020440
 80035fc:	40020458 	.word	0x40020458
 8003600:	40020470 	.word	0x40020470
 8003604:	40020488 	.word	0x40020488
 8003608:	400204a0 	.word	0x400204a0
 800360c:	400204b8 	.word	0x400204b8
 8003610:	58025408 	.word	0x58025408
 8003614:	5802541c 	.word	0x5802541c
 8003618:	58025430 	.word	0x58025430
 800361c:	58025444 	.word	0x58025444
 8003620:	58025458 	.word	0x58025458
 8003624:	5802546c 	.word	0x5802546c
 8003628:	58025480 	.word	0x58025480
 800362c:	58025494 	.word	0x58025494
 8003630:	2300      	movs	r3, #0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003644:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6d      	ldr	r2, [pc, #436]	; (8003800 <HAL_DMA_Abort+0x444>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d04a      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a6b      	ldr	r2, [pc, #428]	; (8003804 <HAL_DMA_Abort+0x448>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d045      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6a      	ldr	r2, [pc, #424]	; (8003808 <HAL_DMA_Abort+0x44c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d040      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a68      	ldr	r2, [pc, #416]	; (800380c <HAL_DMA_Abort+0x450>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d03b      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a67      	ldr	r2, [pc, #412]	; (8003810 <HAL_DMA_Abort+0x454>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d036      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a65      	ldr	r2, [pc, #404]	; (8003814 <HAL_DMA_Abort+0x458>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d031      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a64      	ldr	r2, [pc, #400]	; (8003818 <HAL_DMA_Abort+0x45c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d02c      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a62      	ldr	r2, [pc, #392]	; (800381c <HAL_DMA_Abort+0x460>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d027      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a61      	ldr	r2, [pc, #388]	; (8003820 <HAL_DMA_Abort+0x464>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5f      	ldr	r2, [pc, #380]	; (8003824 <HAL_DMA_Abort+0x468>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01d      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a5e      	ldr	r2, [pc, #376]	; (8003828 <HAL_DMA_Abort+0x46c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a5c      	ldr	r2, [pc, #368]	; (800382c <HAL_DMA_Abort+0x470>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5b      	ldr	r2, [pc, #364]	; (8003830 <HAL_DMA_Abort+0x474>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a59      	ldr	r2, [pc, #356]	; (8003834 <HAL_DMA_Abort+0x478>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_DMA_Abort+0x47c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_DMA_Abort+0x32a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a56      	ldr	r2, [pc, #344]	; (800383c <HAL_DMA_Abort+0x480>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <HAL_DMA_Abort+0x33c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e007      	b.n	8003708 <HAL_DMA_Abort+0x34c>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003708:	e013      	b.n	8003732 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800370a:	f7fd ffef 	bl	80016ec <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b05      	cmp	r3, #5
 8003716:	d90c      	bls.n	8003732 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2203      	movs	r2, #3
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e12d      	b.n	800398e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e5      	bne.n	800370a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2f      	ldr	r2, [pc, #188]	; (8003800 <HAL_DMA_Abort+0x444>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d04a      	beq.n	80037de <HAL_DMA_Abort+0x422>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2d      	ldr	r2, [pc, #180]	; (8003804 <HAL_DMA_Abort+0x448>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d045      	beq.n	80037de <HAL_DMA_Abort+0x422>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2c      	ldr	r2, [pc, #176]	; (8003808 <HAL_DMA_Abort+0x44c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d040      	beq.n	80037de <HAL_DMA_Abort+0x422>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_DMA_Abort+0x450>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d03b      	beq.n	80037de <HAL_DMA_Abort+0x422>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a29      	ldr	r2, [pc, #164]	; (8003810 <HAL_DMA_Abort+0x454>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d036      	beq.n	80037de <HAL_DMA_Abort+0x422>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_DMA_Abort+0x458>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d031      	beq.n	80037de <HAL_DMA_Abort+0x422>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_DMA_Abort+0x45c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d02c      	beq.n	80037de <HAL_DMA_Abort+0x422>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_DMA_Abort+0x460>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d027      	beq.n	80037de <HAL_DMA_Abort+0x422>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a23      	ldr	r2, [pc, #140]	; (8003820 <HAL_DMA_Abort+0x464>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_DMA_Abort+0x422>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a21      	ldr	r2, [pc, #132]	; (8003824 <HAL_DMA_Abort+0x468>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d01d      	beq.n	80037de <HAL_DMA_Abort+0x422>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a20      	ldr	r2, [pc, #128]	; (8003828 <HAL_DMA_Abort+0x46c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d018      	beq.n	80037de <HAL_DMA_Abort+0x422>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_DMA_Abort+0x470>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <HAL_DMA_Abort+0x422>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_DMA_Abort+0x474>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00e      	beq.n	80037de <HAL_DMA_Abort+0x422>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1b      	ldr	r2, [pc, #108]	; (8003834 <HAL_DMA_Abort+0x478>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_DMA_Abort+0x422>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1a      	ldr	r2, [pc, #104]	; (8003838 <HAL_DMA_Abort+0x47c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d004      	beq.n	80037de <HAL_DMA_Abort+0x422>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a18      	ldr	r2, [pc, #96]	; (800383c <HAL_DMA_Abort+0x480>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d101      	bne.n	80037e2 <HAL_DMA_Abort+0x426>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_DMA_Abort+0x428>
 80037e2:	2300      	movs	r3, #0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d02b      	beq.n	8003840 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	223f      	movs	r2, #63	; 0x3f
 80037f8:	409a      	lsls	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	e02a      	b.n	8003856 <HAL_DMA_Abort+0x49a>
 8003800:	40020010 	.word	0x40020010
 8003804:	40020028 	.word	0x40020028
 8003808:	40020040 	.word	0x40020040
 800380c:	40020058 	.word	0x40020058
 8003810:	40020070 	.word	0x40020070
 8003814:	40020088 	.word	0x40020088
 8003818:	400200a0 	.word	0x400200a0
 800381c:	400200b8 	.word	0x400200b8
 8003820:	40020410 	.word	0x40020410
 8003824:	40020428 	.word	0x40020428
 8003828:	40020440 	.word	0x40020440
 800382c:	40020458 	.word	0x40020458
 8003830:	40020470 	.word	0x40020470
 8003834:	40020488 	.word	0x40020488
 8003838:	400204a0 	.word	0x400204a0
 800383c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2201      	movs	r2, #1
 8003850:	409a      	lsls	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4f      	ldr	r2, [pc, #316]	; (8003998 <HAL_DMA_Abort+0x5dc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d072      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a4d      	ldr	r2, [pc, #308]	; (800399c <HAL_DMA_Abort+0x5e0>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d06d      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a4c      	ldr	r2, [pc, #304]	; (80039a0 <HAL_DMA_Abort+0x5e4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d068      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a4a      	ldr	r2, [pc, #296]	; (80039a4 <HAL_DMA_Abort+0x5e8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d063      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a49      	ldr	r2, [pc, #292]	; (80039a8 <HAL_DMA_Abort+0x5ec>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d05e      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a47      	ldr	r2, [pc, #284]	; (80039ac <HAL_DMA_Abort+0x5f0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d059      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a46      	ldr	r2, [pc, #280]	; (80039b0 <HAL_DMA_Abort+0x5f4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d054      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a44      	ldr	r2, [pc, #272]	; (80039b4 <HAL_DMA_Abort+0x5f8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d04f      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a43      	ldr	r2, [pc, #268]	; (80039b8 <HAL_DMA_Abort+0x5fc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04a      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a41      	ldr	r2, [pc, #260]	; (80039bc <HAL_DMA_Abort+0x600>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d045      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a40      	ldr	r2, [pc, #256]	; (80039c0 <HAL_DMA_Abort+0x604>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d040      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a3e      	ldr	r2, [pc, #248]	; (80039c4 <HAL_DMA_Abort+0x608>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d03b      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a3d      	ldr	r2, [pc, #244]	; (80039c8 <HAL_DMA_Abort+0x60c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d036      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <HAL_DMA_Abort+0x610>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d031      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <HAL_DMA_Abort+0x614>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d02c      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a38      	ldr	r2, [pc, #224]	; (80039d4 <HAL_DMA_Abort+0x618>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d027      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a37      	ldr	r2, [pc, #220]	; (80039d8 <HAL_DMA_Abort+0x61c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d022      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a35      	ldr	r2, [pc, #212]	; (80039dc <HAL_DMA_Abort+0x620>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01d      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a34      	ldr	r2, [pc, #208]	; (80039e0 <HAL_DMA_Abort+0x624>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d018      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a32      	ldr	r2, [pc, #200]	; (80039e4 <HAL_DMA_Abort+0x628>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a31      	ldr	r2, [pc, #196]	; (80039e8 <HAL_DMA_Abort+0x62c>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2f      	ldr	r2, [pc, #188]	; (80039ec <HAL_DMA_Abort+0x630>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2e      	ldr	r2, [pc, #184]	; (80039f0 <HAL_DMA_Abort+0x634>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_DMA_Abort+0x58a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <HAL_DMA_Abort+0x638>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_DMA_Abort+0x58e>
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <HAL_DMA_Abort+0x590>
 800394a:	2300      	movs	r3, #0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d015      	beq.n	800397c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003958:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003970:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800397a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40020010 	.word	0x40020010
 800399c:	40020028 	.word	0x40020028
 80039a0:	40020040 	.word	0x40020040
 80039a4:	40020058 	.word	0x40020058
 80039a8:	40020070 	.word	0x40020070
 80039ac:	40020088 	.word	0x40020088
 80039b0:	400200a0 	.word	0x400200a0
 80039b4:	400200b8 	.word	0x400200b8
 80039b8:	40020410 	.word	0x40020410
 80039bc:	40020428 	.word	0x40020428
 80039c0:	40020440 	.word	0x40020440
 80039c4:	40020458 	.word	0x40020458
 80039c8:	40020470 	.word	0x40020470
 80039cc:	40020488 	.word	0x40020488
 80039d0:	400204a0 	.word	0x400204a0
 80039d4:	400204b8 	.word	0x400204b8
 80039d8:	58025408 	.word	0x58025408
 80039dc:	5802541c 	.word	0x5802541c
 80039e0:	58025430 	.word	0x58025430
 80039e4:	58025444 	.word	0x58025444
 80039e8:	58025458 	.word	0x58025458
 80039ec:	5802546c 	.word	0x5802546c
 80039f0:	58025480 	.word	0x58025480
 80039f4:	58025494 	.word	0x58025494

080039f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e237      	b.n	8003e7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d004      	beq.n	8003a20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e22c      	b.n	8003e7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_DMA_Abort_IT+0x1a0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d04a      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5b      	ldr	r2, [pc, #364]	; (8003b9c <HAL_DMA_Abort_IT+0x1a4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d045      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a59      	ldr	r2, [pc, #356]	; (8003ba0 <HAL_DMA_Abort_IT+0x1a8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d040      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_DMA_Abort_IT+0x1ac>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d03b      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a56      	ldr	r2, [pc, #344]	; (8003ba8 <HAL_DMA_Abort_IT+0x1b0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d036      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a55      	ldr	r2, [pc, #340]	; (8003bac <HAL_DMA_Abort_IT+0x1b4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d031      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a53      	ldr	r2, [pc, #332]	; (8003bb0 <HAL_DMA_Abort_IT+0x1b8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02c      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a52      	ldr	r2, [pc, #328]	; (8003bb4 <HAL_DMA_Abort_IT+0x1bc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d027      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a50      	ldr	r2, [pc, #320]	; (8003bb8 <HAL_DMA_Abort_IT+0x1c0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d022      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a4f      	ldr	r2, [pc, #316]	; (8003bbc <HAL_DMA_Abort_IT+0x1c4>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d01d      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a4d      	ldr	r2, [pc, #308]	; (8003bc0 <HAL_DMA_Abort_IT+0x1c8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a4c      	ldr	r2, [pc, #304]	; (8003bc4 <HAL_DMA_Abort_IT+0x1cc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d013      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a4a      	ldr	r2, [pc, #296]	; (8003bc8 <HAL_DMA_Abort_IT+0x1d0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a49      	ldr	r2, [pc, #292]	; (8003bcc <HAL_DMA_Abort_IT+0x1d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a47      	ldr	r2, [pc, #284]	; (8003bd0 <HAL_DMA_Abort_IT+0x1d8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a46      	ldr	r2, [pc, #280]	; (8003bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA_Abort_IT+0xcc>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_Abort_IT+0xce>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 8086 	beq.w	8003bd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <HAL_DMA_Abort_IT+0x1a0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d04a      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2e      	ldr	r2, [pc, #184]	; (8003b9c <HAL_DMA_Abort_IT+0x1a4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d045      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2c      	ldr	r2, [pc, #176]	; (8003ba0 <HAL_DMA_Abort_IT+0x1a8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d040      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <HAL_DMA_Abort_IT+0x1ac>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d03b      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <HAL_DMA_Abort_IT+0x1b0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d036      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a28      	ldr	r2, [pc, #160]	; (8003bac <HAL_DMA_Abort_IT+0x1b4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d031      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a26      	ldr	r2, [pc, #152]	; (8003bb0 <HAL_DMA_Abort_IT+0x1b8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d02c      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <HAL_DMA_Abort_IT+0x1bc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d027      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a23      	ldr	r2, [pc, #140]	; (8003bb8 <HAL_DMA_Abort_IT+0x1c0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d022      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <HAL_DMA_Abort_IT+0x1c4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d01d      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a20      	ldr	r2, [pc, #128]	; (8003bc0 <HAL_DMA_Abort_IT+0x1c8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d018      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <HAL_DMA_Abort_IT+0x1cc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <HAL_DMA_Abort_IT+0x1d0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d00e      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <HAL_DMA_Abort_IT+0x1d4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d009      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_DMA_Abort_IT+0x1d8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d004      	beq.n	8003b74 <HAL_DMA_Abort_IT+0x17c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d108      	bne.n	8003b86 <HAL_DMA_Abort_IT+0x18e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e178      	b.n	8003e78 <HAL_DMA_Abort_IT+0x480>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e16f      	b.n	8003e78 <HAL_DMA_Abort_IT+0x480>
 8003b98:	40020010 	.word	0x40020010
 8003b9c:	40020028 	.word	0x40020028
 8003ba0:	40020040 	.word	0x40020040
 8003ba4:	40020058 	.word	0x40020058
 8003ba8:	40020070 	.word	0x40020070
 8003bac:	40020088 	.word	0x40020088
 8003bb0:	400200a0 	.word	0x400200a0
 8003bb4:	400200b8 	.word	0x400200b8
 8003bb8:	40020410 	.word	0x40020410
 8003bbc:	40020428 	.word	0x40020428
 8003bc0:	40020440 	.word	0x40020440
 8003bc4:	40020458 	.word	0x40020458
 8003bc8:	40020470 	.word	0x40020470
 8003bcc:	40020488 	.word	0x40020488
 8003bd0:	400204a0 	.word	0x400204a0
 8003bd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 020e 	bic.w	r2, r2, #14
 8003be6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6c      	ldr	r2, [pc, #432]	; (8003da0 <HAL_DMA_Abort_IT+0x3a8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d04a      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6b      	ldr	r2, [pc, #428]	; (8003da4 <HAL_DMA_Abort_IT+0x3ac>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d045      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a69      	ldr	r2, [pc, #420]	; (8003da8 <HAL_DMA_Abort_IT+0x3b0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d040      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a68      	ldr	r2, [pc, #416]	; (8003dac <HAL_DMA_Abort_IT+0x3b4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d03b      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a66      	ldr	r2, [pc, #408]	; (8003db0 <HAL_DMA_Abort_IT+0x3b8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d036      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_DMA_Abort_IT+0x3bc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d031      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a63      	ldr	r2, [pc, #396]	; (8003db8 <HAL_DMA_Abort_IT+0x3c0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02c      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a62      	ldr	r2, [pc, #392]	; (8003dbc <HAL_DMA_Abort_IT+0x3c4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d027      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a60      	ldr	r2, [pc, #384]	; (8003dc0 <HAL_DMA_Abort_IT+0x3c8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d022      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a5f      	ldr	r2, [pc, #380]	; (8003dc4 <HAL_DMA_Abort_IT+0x3cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d01d      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a5d      	ldr	r2, [pc, #372]	; (8003dc8 <HAL_DMA_Abort_IT+0x3d0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d018      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a5c      	ldr	r2, [pc, #368]	; (8003dcc <HAL_DMA_Abort_IT+0x3d4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d013      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a5a      	ldr	r2, [pc, #360]	; (8003dd0 <HAL_DMA_Abort_IT+0x3d8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00e      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a59      	ldr	r2, [pc, #356]	; (8003dd4 <HAL_DMA_Abort_IT+0x3dc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d009      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a57      	ldr	r2, [pc, #348]	; (8003dd8 <HAL_DMA_Abort_IT+0x3e0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d004      	beq.n	8003c88 <HAL_DMA_Abort_IT+0x290>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a56      	ldr	r2, [pc, #344]	; (8003ddc <HAL_DMA_Abort_IT+0x3e4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d108      	bne.n	8003c9a <HAL_DMA_Abort_IT+0x2a2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	e007      	b.n	8003caa <HAL_DMA_Abort_IT+0x2b2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3c      	ldr	r2, [pc, #240]	; (8003da0 <HAL_DMA_Abort_IT+0x3a8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d072      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a3a      	ldr	r2, [pc, #232]	; (8003da4 <HAL_DMA_Abort_IT+0x3ac>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d06d      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a39      	ldr	r2, [pc, #228]	; (8003da8 <HAL_DMA_Abort_IT+0x3b0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d068      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a37      	ldr	r2, [pc, #220]	; (8003dac <HAL_DMA_Abort_IT+0x3b4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d063      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a36      	ldr	r2, [pc, #216]	; (8003db0 <HAL_DMA_Abort_IT+0x3b8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d05e      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a34      	ldr	r2, [pc, #208]	; (8003db4 <HAL_DMA_Abort_IT+0x3bc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d059      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a33      	ldr	r2, [pc, #204]	; (8003db8 <HAL_DMA_Abort_IT+0x3c0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d054      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a31      	ldr	r2, [pc, #196]	; (8003dbc <HAL_DMA_Abort_IT+0x3c4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d04f      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <HAL_DMA_Abort_IT+0x3c8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04a      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2e      	ldr	r2, [pc, #184]	; (8003dc4 <HAL_DMA_Abort_IT+0x3cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d045      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <HAL_DMA_Abort_IT+0x3d0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d040      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <HAL_DMA_Abort_IT+0x3d4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d03b      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <HAL_DMA_Abort_IT+0x3d8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d036      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a28      	ldr	r2, [pc, #160]	; (8003dd4 <HAL_DMA_Abort_IT+0x3dc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d031      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <HAL_DMA_Abort_IT+0x3e0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02c      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <HAL_DMA_Abort_IT+0x3e4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d027      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a24      	ldr	r2, [pc, #144]	; (8003de0 <HAL_DMA_Abort_IT+0x3e8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <HAL_DMA_Abort_IT+0x3ec>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01d      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <HAL_DMA_Abort_IT+0x3f0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d018      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <HAL_DMA_Abort_IT+0x3f4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <HAL_DMA_Abort_IT+0x3f8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1c      	ldr	r2, [pc, #112]	; (8003df4 <HAL_DMA_Abort_IT+0x3fc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <HAL_DMA_Abort_IT+0x400>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x3a2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <HAL_DMA_Abort_IT+0x404>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d132      	bne.n	8003e00 <HAL_DMA_Abort_IT+0x408>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e031      	b.n	8003e02 <HAL_DMA_Abort_IT+0x40a>
 8003d9e:	bf00      	nop
 8003da0:	40020010 	.word	0x40020010
 8003da4:	40020028 	.word	0x40020028
 8003da8:	40020040 	.word	0x40020040
 8003dac:	40020058 	.word	0x40020058
 8003db0:	40020070 	.word	0x40020070
 8003db4:	40020088 	.word	0x40020088
 8003db8:	400200a0 	.word	0x400200a0
 8003dbc:	400200b8 	.word	0x400200b8
 8003dc0:	40020410 	.word	0x40020410
 8003dc4:	40020428 	.word	0x40020428
 8003dc8:	40020440 	.word	0x40020440
 8003dcc:	40020458 	.word	0x40020458
 8003dd0:	40020470 	.word	0x40020470
 8003dd4:	40020488 	.word	0x40020488
 8003dd8:	400204a0 	.word	0x400204a0
 8003ddc:	400204b8 	.word	0x400204b8
 8003de0:	58025408 	.word	0x58025408
 8003de4:	5802541c 	.word	0x5802541c
 8003de8:	58025430 	.word	0x58025430
 8003dec:	58025444 	.word	0x58025444
 8003df0:	58025458 	.word	0x58025458
 8003df4:	5802546c 	.word	0x5802546c
 8003df8:	58025480 	.word	0x58025480
 8003dfc:	58025494 	.word	0x58025494
 8003e00:	2300      	movs	r3, #0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d028      	beq.n	8003e58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	2201      	movs	r2, #1
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00c      	beq.n	8003e58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop

08003e84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e90:	4b67      	ldr	r3, [pc, #412]	; (8004030 <HAL_DMA_IRQHandler+0x1ac>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a67      	ldr	r2, [pc, #412]	; (8004034 <HAL_DMA_IRQHandler+0x1b0>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0a9b      	lsrs	r3, r3, #10
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a5f      	ldr	r2, [pc, #380]	; (8004038 <HAL_DMA_IRQHandler+0x1b4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d04a      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a5d      	ldr	r2, [pc, #372]	; (800403c <HAL_DMA_IRQHandler+0x1b8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d045      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a5c      	ldr	r2, [pc, #368]	; (8004040 <HAL_DMA_IRQHandler+0x1bc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d040      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a5a      	ldr	r2, [pc, #360]	; (8004044 <HAL_DMA_IRQHandler+0x1c0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d03b      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a59      	ldr	r2, [pc, #356]	; (8004048 <HAL_DMA_IRQHandler+0x1c4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d036      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a57      	ldr	r2, [pc, #348]	; (800404c <HAL_DMA_IRQHandler+0x1c8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d031      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a56      	ldr	r2, [pc, #344]	; (8004050 <HAL_DMA_IRQHandler+0x1cc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d02c      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a54      	ldr	r2, [pc, #336]	; (8004054 <HAL_DMA_IRQHandler+0x1d0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d027      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a53      	ldr	r2, [pc, #332]	; (8004058 <HAL_DMA_IRQHandler+0x1d4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a51      	ldr	r2, [pc, #324]	; (800405c <HAL_DMA_IRQHandler+0x1d8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d01d      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a50      	ldr	r2, [pc, #320]	; (8004060 <HAL_DMA_IRQHandler+0x1dc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d018      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4e      	ldr	r2, [pc, #312]	; (8004064 <HAL_DMA_IRQHandler+0x1e0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d013      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a4d      	ldr	r2, [pc, #308]	; (8004068 <HAL_DMA_IRQHandler+0x1e4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a4b      	ldr	r2, [pc, #300]	; (800406c <HAL_DMA_IRQHandler+0x1e8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a4a      	ldr	r2, [pc, #296]	; (8004070 <HAL_DMA_IRQHandler+0x1ec>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xd2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a48      	ldr	r2, [pc, #288]	; (8004074 <HAL_DMA_IRQHandler+0x1f0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_DMA_IRQHandler+0xd6>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_DMA_IRQHandler+0xd8>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 842b 	beq.w	80047b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	409a      	lsls	r2, r3
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80a2 	beq.w	80040bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	; (8004038 <HAL_DMA_IRQHandler+0x1b4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d04a      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_DMA_IRQHandler+0x1b8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d045      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a2b      	ldr	r2, [pc, #172]	; (8004040 <HAL_DMA_IRQHandler+0x1bc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d040      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <HAL_DMA_IRQHandler+0x1c0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d03b      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <HAL_DMA_IRQHandler+0x1c4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d036      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a27      	ldr	r2, [pc, #156]	; (800404c <HAL_DMA_IRQHandler+0x1c8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d031      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a25      	ldr	r2, [pc, #148]	; (8004050 <HAL_DMA_IRQHandler+0x1cc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d02c      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a24      	ldr	r2, [pc, #144]	; (8004054 <HAL_DMA_IRQHandler+0x1d0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d027      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <HAL_DMA_IRQHandler+0x1d4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	; (800405c <HAL_DMA_IRQHandler+0x1d8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01d      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_DMA_IRQHandler+0x1dc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1e      	ldr	r2, [pc, #120]	; (8004064 <HAL_DMA_IRQHandler+0x1e0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_DMA_IRQHandler+0x1e4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1b      	ldr	r2, [pc, #108]	; (800406c <HAL_DMA_IRQHandler+0x1e8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a19      	ldr	r2, [pc, #100]	; (8004070 <HAL_DMA_IRQHandler+0x1ec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <HAL_DMA_IRQHandler+0x194>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <HAL_DMA_IRQHandler+0x1f0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d12f      	bne.n	8004078 <HAL_DMA_IRQHandler+0x1f4>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e02e      	b.n	800408c <HAL_DMA_IRQHandler+0x208>
 800402e:	bf00      	nop
 8004030:	24000000 	.word	0x24000000
 8004034:	1b4e81b5 	.word	0x1b4e81b5
 8004038:	40020010 	.word	0x40020010
 800403c:	40020028 	.word	0x40020028
 8004040:	40020040 	.word	0x40020040
 8004044:	40020058 	.word	0x40020058
 8004048:	40020070 	.word	0x40020070
 800404c:	40020088 	.word	0x40020088
 8004050:	400200a0 	.word	0x400200a0
 8004054:	400200b8 	.word	0x400200b8
 8004058:	40020410 	.word	0x40020410
 800405c:	40020428 	.word	0x40020428
 8004060:	40020440 	.word	0x40020440
 8004064:	40020458 	.word	0x40020458
 8004068:	40020470 	.word	0x40020470
 800406c:	40020488 	.word	0x40020488
 8004070:	400204a0 	.word	0x400204a0
 8004074:	400204b8 	.word	0x400204b8
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d015      	beq.n	80040bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0204 	bic.w	r2, r2, #4
 800409e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	2208      	movs	r2, #8
 80040aa:	409a      	lsls	r2, r3
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b4:	f043 0201 	orr.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d06e      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a69      	ldr	r2, [pc, #420]	; (800427c <HAL_DMA_IRQHandler+0x3f8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d04a      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a67      	ldr	r2, [pc, #412]	; (8004280 <HAL_DMA_IRQHandler+0x3fc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d045      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a66      	ldr	r2, [pc, #408]	; (8004284 <HAL_DMA_IRQHandler+0x400>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d040      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a64      	ldr	r2, [pc, #400]	; (8004288 <HAL_DMA_IRQHandler+0x404>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d03b      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a63      	ldr	r2, [pc, #396]	; (800428c <HAL_DMA_IRQHandler+0x408>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d036      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a61      	ldr	r2, [pc, #388]	; (8004290 <HAL_DMA_IRQHandler+0x40c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d031      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a60      	ldr	r2, [pc, #384]	; (8004294 <HAL_DMA_IRQHandler+0x410>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d02c      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a5e      	ldr	r2, [pc, #376]	; (8004298 <HAL_DMA_IRQHandler+0x414>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d027      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5d      	ldr	r2, [pc, #372]	; (800429c <HAL_DMA_IRQHandler+0x418>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d022      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <HAL_DMA_IRQHandler+0x41c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01d      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a5a      	ldr	r2, [pc, #360]	; (80042a4 <HAL_DMA_IRQHandler+0x420>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d018      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_DMA_IRQHandler+0x424>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a57      	ldr	r2, [pc, #348]	; (80042ac <HAL_DMA_IRQHandler+0x428>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00e      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a55      	ldr	r2, [pc, #340]	; (80042b0 <HAL_DMA_IRQHandler+0x42c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d009      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a54      	ldr	r2, [pc, #336]	; (80042b4 <HAL_DMA_IRQHandler+0x430>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <HAL_DMA_IRQHandler+0x2ee>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a52      	ldr	r2, [pc, #328]	; (80042b8 <HAL_DMA_IRQHandler+0x434>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10a      	bne.n	8004188 <HAL_DMA_IRQHandler+0x304>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e003      	b.n	8004190 <HAL_DMA_IRQHandler+0x30c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00d      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	f003 031f 	and.w	r3, r3, #31
 800419c:	2201      	movs	r2, #1
 800419e:	409a      	lsls	r2, r3
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	f043 0202 	orr.w	r2, r3, #2
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2204      	movs	r2, #4
 80041ba:	409a      	lsls	r2, r3
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 808f 	beq.w	80042e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2c      	ldr	r2, [pc, #176]	; (800427c <HAL_DMA_IRQHandler+0x3f8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04a      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	; (8004280 <HAL_DMA_IRQHandler+0x3fc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d045      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a29      	ldr	r2, [pc, #164]	; (8004284 <HAL_DMA_IRQHandler+0x400>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a27      	ldr	r2, [pc, #156]	; (8004288 <HAL_DMA_IRQHandler+0x404>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a26      	ldr	r2, [pc, #152]	; (800428c <HAL_DMA_IRQHandler+0x408>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d036      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a24      	ldr	r2, [pc, #144]	; (8004290 <HAL_DMA_IRQHandler+0x40c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d031      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_DMA_IRQHandler+0x410>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d02c      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_DMA_IRQHandler+0x414>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d027      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a20      	ldr	r2, [pc, #128]	; (800429c <HAL_DMA_IRQHandler+0x418>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_DMA_IRQHandler+0x41c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_DMA_IRQHandler+0x420>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_DMA_IRQHandler+0x424>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <HAL_DMA_IRQHandler+0x428>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a18      	ldr	r2, [pc, #96]	; (80042b0 <HAL_DMA_IRQHandler+0x42c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a17      	ldr	r2, [pc, #92]	; (80042b4 <HAL_DMA_IRQHandler+0x430>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_DMA_IRQHandler+0x3e2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <HAL_DMA_IRQHandler+0x434>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d12a      	bne.n	80042bc <HAL_DMA_IRQHandler+0x438>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e023      	b.n	80042c4 <HAL_DMA_IRQHandler+0x440>
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2300      	movs	r3, #0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2204      	movs	r2, #4
 80042d2:	409a      	lsls	r2, r3
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2210      	movs	r2, #16
 80042ee:	409a      	lsls	r2, r3
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80a6 	beq.w	8004446 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a85      	ldr	r2, [pc, #532]	; (8004514 <HAL_DMA_IRQHandler+0x690>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d04a      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a83      	ldr	r2, [pc, #524]	; (8004518 <HAL_DMA_IRQHandler+0x694>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d045      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a82      	ldr	r2, [pc, #520]	; (800451c <HAL_DMA_IRQHandler+0x698>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d040      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a80      	ldr	r2, [pc, #512]	; (8004520 <HAL_DMA_IRQHandler+0x69c>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d03b      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7f      	ldr	r2, [pc, #508]	; (8004524 <HAL_DMA_IRQHandler+0x6a0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d036      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a7d      	ldr	r2, [pc, #500]	; (8004528 <HAL_DMA_IRQHandler+0x6a4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d031      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7c      	ldr	r2, [pc, #496]	; (800452c <HAL_DMA_IRQHandler+0x6a8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d02c      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a7a      	ldr	r2, [pc, #488]	; (8004530 <HAL_DMA_IRQHandler+0x6ac>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d027      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a79      	ldr	r2, [pc, #484]	; (8004534 <HAL_DMA_IRQHandler+0x6b0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a77      	ldr	r2, [pc, #476]	; (8004538 <HAL_DMA_IRQHandler+0x6b4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01d      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a76      	ldr	r2, [pc, #472]	; (800453c <HAL_DMA_IRQHandler+0x6b8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a74      	ldr	r2, [pc, #464]	; (8004540 <HAL_DMA_IRQHandler+0x6bc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a73      	ldr	r2, [pc, #460]	; (8004544 <HAL_DMA_IRQHandler+0x6c0>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a71      	ldr	r2, [pc, #452]	; (8004548 <HAL_DMA_IRQHandler+0x6c4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a70      	ldr	r2, [pc, #448]	; (800454c <HAL_DMA_IRQHandler+0x6c8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_DMA_IRQHandler+0x516>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a6e      	ldr	r2, [pc, #440]	; (8004550 <HAL_DMA_IRQHandler+0x6cc>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10a      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x52c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e009      	b.n	80043c4 <HAL_DMA_IRQHandler+0x540>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d03e      	beq.n	8004446 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2210      	movs	r2, #16
 80043d2:	409a      	lsls	r2, r3
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d018      	beq.n	8004418 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d108      	bne.n	8004406 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d024      	beq.n	8004446 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	4798      	blx	r3
 8004404:	e01f      	b.n	8004446 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01b      	beq.n	8004446 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
 8004416:	e016      	b.n	8004446 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d107      	bne.n	8004436 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0208 	bic.w	r2, r2, #8
 8004434:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	2220      	movs	r2, #32
 8004450:	409a      	lsls	r2, r3
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 8110 	beq.w	800467c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2c      	ldr	r2, [pc, #176]	; (8004514 <HAL_DMA_IRQHandler+0x690>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d04a      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <HAL_DMA_IRQHandler+0x694>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d045      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_DMA_IRQHandler+0x698>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d040      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a28      	ldr	r2, [pc, #160]	; (8004520 <HAL_DMA_IRQHandler+0x69c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d03b      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a26      	ldr	r2, [pc, #152]	; (8004524 <HAL_DMA_IRQHandler+0x6a0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d036      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a25      	ldr	r2, [pc, #148]	; (8004528 <HAL_DMA_IRQHandler+0x6a4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d031      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a23      	ldr	r2, [pc, #140]	; (800452c <HAL_DMA_IRQHandler+0x6a8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02c      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a22      	ldr	r2, [pc, #136]	; (8004530 <HAL_DMA_IRQHandler+0x6ac>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d027      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a20      	ldr	r2, [pc, #128]	; (8004534 <HAL_DMA_IRQHandler+0x6b0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d022      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1f      	ldr	r2, [pc, #124]	; (8004538 <HAL_DMA_IRQHandler+0x6b4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d01d      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_DMA_IRQHandler+0x6b8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1c      	ldr	r2, [pc, #112]	; (8004540 <HAL_DMA_IRQHandler+0x6bc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <HAL_DMA_IRQHandler+0x6c0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a19      	ldr	r2, [pc, #100]	; (8004548 <HAL_DMA_IRQHandler+0x6c4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a17      	ldr	r2, [pc, #92]	; (800454c <HAL_DMA_IRQHandler+0x6c8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_DMA_IRQHandler+0x678>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a16      	ldr	r2, [pc, #88]	; (8004550 <HAL_DMA_IRQHandler+0x6cc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d12b      	bne.n	8004554 <HAL_DMA_IRQHandler+0x6d0>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf14      	ite	ne
 800450a:	2301      	movne	r3, #1
 800450c:	2300      	moveq	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	e02a      	b.n	8004568 <HAL_DMA_IRQHandler+0x6e4>
 8004512:	bf00      	nop
 8004514:	40020010 	.word	0x40020010
 8004518:	40020028 	.word	0x40020028
 800451c:	40020040 	.word	0x40020040
 8004520:	40020058 	.word	0x40020058
 8004524:	40020070 	.word	0x40020070
 8004528:	40020088 	.word	0x40020088
 800452c:	400200a0 	.word	0x400200a0
 8004530:	400200b8 	.word	0x400200b8
 8004534:	40020410 	.word	0x40020410
 8004538:	40020428 	.word	0x40020428
 800453c:	40020440 	.word	0x40020440
 8004540:	40020458 	.word	0x40020458
 8004544:	40020470 	.word	0x40020470
 8004548:	40020488 	.word	0x40020488
 800454c:	400204a0 	.word	0x400204a0
 8004550:	400204b8 	.word	0x400204b8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8087 	beq.w	800467c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2220      	movs	r2, #32
 8004578:	409a      	lsls	r2, r3
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b04      	cmp	r3, #4
 8004588:	d139      	bne.n	80045fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0216 	bic.w	r2, r2, #22
 8004598:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_DMA_IRQHandler+0x736>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0208 	bic.w	r2, r2, #8
 80045c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	223f      	movs	r2, #63	; 0x3f
 80045d4:	409a      	lsls	r2, r3
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 834a 	beq.w	8004c88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
          }
          return;
 80045fc:	e344      	b.n	8004c88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d018      	beq.n	800463e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02c      	beq.n	800467c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
 800462a:	e027      	b.n	800467c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d023      	beq.n	800467c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
 800463c:	e01e      	b.n	800467c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10f      	bne.n	800466c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0210 	bic.w	r2, r2, #16
 800465a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 8306 	beq.w	8004c92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8088 	beq.w	80047a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2204      	movs	r2, #4
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a7a      	ldr	r2, [pc, #488]	; (800488c <HAL_DMA_IRQHandler+0xa08>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d04a      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a79      	ldr	r2, [pc, #484]	; (8004890 <HAL_DMA_IRQHandler+0xa0c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d045      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a77      	ldr	r2, [pc, #476]	; (8004894 <HAL_DMA_IRQHandler+0xa10>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d040      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a76      	ldr	r2, [pc, #472]	; (8004898 <HAL_DMA_IRQHandler+0xa14>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d03b      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a74      	ldr	r2, [pc, #464]	; (800489c <HAL_DMA_IRQHandler+0xa18>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d036      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a73      	ldr	r2, [pc, #460]	; (80048a0 <HAL_DMA_IRQHandler+0xa1c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d031      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a71      	ldr	r2, [pc, #452]	; (80048a4 <HAL_DMA_IRQHandler+0xa20>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02c      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a70      	ldr	r2, [pc, #448]	; (80048a8 <HAL_DMA_IRQHandler+0xa24>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d027      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6e      	ldr	r2, [pc, #440]	; (80048ac <HAL_DMA_IRQHandler+0xa28>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d022      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a6d      	ldr	r2, [pc, #436]	; (80048b0 <HAL_DMA_IRQHandler+0xa2c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d01d      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a6b      	ldr	r2, [pc, #428]	; (80048b4 <HAL_DMA_IRQHandler+0xa30>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d018      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a6a      	ldr	r2, [pc, #424]	; (80048b8 <HAL_DMA_IRQHandler+0xa34>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d013      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a68      	ldr	r2, [pc, #416]	; (80048bc <HAL_DMA_IRQHandler+0xa38>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d00e      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a67      	ldr	r2, [pc, #412]	; (80048c0 <HAL_DMA_IRQHandler+0xa3c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a65      	ldr	r2, [pc, #404]	; (80048c4 <HAL_DMA_IRQHandler+0xa40>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d004      	beq.n	800473c <HAL_DMA_IRQHandler+0x8b8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a64      	ldr	r2, [pc, #400]	; (80048c8 <HAL_DMA_IRQHandler+0xa44>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d108      	bne.n	800474e <HAL_DMA_IRQHandler+0x8ca>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e007      	b.n	800475e <HAL_DMA_IRQHandler+0x8da>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0201 	bic.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3301      	adds	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004766:	429a      	cmp	r2, r3
 8004768:	d307      	bcc.n	800477a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f2      	bne.n	800475e <HAL_DMA_IRQHandler+0x8da>
 8004778:	e000      	b.n	800477c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800477a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d004      	beq.n	8004794 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2203      	movs	r2, #3
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004792:	e003      	b.n	800479c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8272 	beq.w	8004c92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
 80047b6:	e26c      	b.n	8004c92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a43      	ldr	r2, [pc, #268]	; (80048cc <HAL_DMA_IRQHandler+0xa48>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d022      	beq.n	8004808 <HAL_DMA_IRQHandler+0x984>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a42      	ldr	r2, [pc, #264]	; (80048d0 <HAL_DMA_IRQHandler+0xa4c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d01d      	beq.n	8004808 <HAL_DMA_IRQHandler+0x984>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a40      	ldr	r2, [pc, #256]	; (80048d4 <HAL_DMA_IRQHandler+0xa50>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d018      	beq.n	8004808 <HAL_DMA_IRQHandler+0x984>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a3f      	ldr	r2, [pc, #252]	; (80048d8 <HAL_DMA_IRQHandler+0xa54>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d013      	beq.n	8004808 <HAL_DMA_IRQHandler+0x984>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a3d      	ldr	r2, [pc, #244]	; (80048dc <HAL_DMA_IRQHandler+0xa58>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00e      	beq.n	8004808 <HAL_DMA_IRQHandler+0x984>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <HAL_DMA_IRQHandler+0xa5c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_DMA_IRQHandler+0x984>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a3a      	ldr	r2, [pc, #232]	; (80048e4 <HAL_DMA_IRQHandler+0xa60>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <HAL_DMA_IRQHandler+0x984>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a39      	ldr	r2, [pc, #228]	; (80048e8 <HAL_DMA_IRQHandler+0xa64>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <HAL_DMA_IRQHandler+0x988>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_DMA_IRQHandler+0x98a>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 823f 	beq.w	8004c92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2204      	movs	r2, #4
 8004826:	409a      	lsls	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80cd 	beq.w	80049cc <HAL_DMA_IRQHandler+0xb48>
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80c7 	beq.w	80049cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2204      	movs	r2, #4
 8004848:	409a      	lsls	r2, r3
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d049      	beq.n	80048ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8210 	beq.w	8004c8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004874:	e20a      	b.n	8004c8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8206 	beq.w	8004c8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004888:	e200      	b.n	8004c8c <HAL_DMA_IRQHandler+0xe08>
 800488a:	bf00      	nop
 800488c:	40020010 	.word	0x40020010
 8004890:	40020028 	.word	0x40020028
 8004894:	40020040 	.word	0x40020040
 8004898:	40020058 	.word	0x40020058
 800489c:	40020070 	.word	0x40020070
 80048a0:	40020088 	.word	0x40020088
 80048a4:	400200a0 	.word	0x400200a0
 80048a8:	400200b8 	.word	0x400200b8
 80048ac:	40020410 	.word	0x40020410
 80048b0:	40020428 	.word	0x40020428
 80048b4:	40020440 	.word	0x40020440
 80048b8:	40020458 	.word	0x40020458
 80048bc:	40020470 	.word	0x40020470
 80048c0:	40020488 	.word	0x40020488
 80048c4:	400204a0 	.word	0x400204a0
 80048c8:	400204b8 	.word	0x400204b8
 80048cc:	58025408 	.word	0x58025408
 80048d0:	5802541c 	.word	0x5802541c
 80048d4:	58025430 	.word	0x58025430
 80048d8:	58025444 	.word	0x58025444
 80048dc:	58025458 	.word	0x58025458
 80048e0:	5802546c 	.word	0x5802546c
 80048e4:	58025480 	.word	0x58025480
 80048e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d160      	bne.n	80049b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7f      	ldr	r2, [pc, #508]	; (8004af8 <HAL_DMA_IRQHandler+0xc74>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d04a      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a7d      	ldr	r2, [pc, #500]	; (8004afc <HAL_DMA_IRQHandler+0xc78>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d045      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7c      	ldr	r2, [pc, #496]	; (8004b00 <HAL_DMA_IRQHandler+0xc7c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d040      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7a      	ldr	r2, [pc, #488]	; (8004b04 <HAL_DMA_IRQHandler+0xc80>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d03b      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a79      	ldr	r2, [pc, #484]	; (8004b08 <HAL_DMA_IRQHandler+0xc84>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d036      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a77      	ldr	r2, [pc, #476]	; (8004b0c <HAL_DMA_IRQHandler+0xc88>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d031      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a76      	ldr	r2, [pc, #472]	; (8004b10 <HAL_DMA_IRQHandler+0xc8c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d02c      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a74      	ldr	r2, [pc, #464]	; (8004b14 <HAL_DMA_IRQHandler+0xc90>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d027      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a73      	ldr	r2, [pc, #460]	; (8004b18 <HAL_DMA_IRQHandler+0xc94>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d022      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a71      	ldr	r2, [pc, #452]	; (8004b1c <HAL_DMA_IRQHandler+0xc98>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d01d      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a70      	ldr	r2, [pc, #448]	; (8004b20 <HAL_DMA_IRQHandler+0xc9c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a6e      	ldr	r2, [pc, #440]	; (8004b24 <HAL_DMA_IRQHandler+0xca0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6d      	ldr	r2, [pc, #436]	; (8004b28 <HAL_DMA_IRQHandler+0xca4>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00e      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a6b      	ldr	r2, [pc, #428]	; (8004b2c <HAL_DMA_IRQHandler+0xca8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a6a      	ldr	r2, [pc, #424]	; (8004b30 <HAL_DMA_IRQHandler+0xcac>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_DMA_IRQHandler+0xb12>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a68      	ldr	r2, [pc, #416]	; (8004b34 <HAL_DMA_IRQHandler+0xcb0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <HAL_DMA_IRQHandler+0xb24>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0208 	bic.w	r2, r2, #8
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e007      	b.n	80049b8 <HAL_DMA_IRQHandler+0xb34>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0204 	bic.w	r2, r2, #4
 80049b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8165 	beq.w	8004c8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ca:	e15f      	b.n	8004c8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	2202      	movs	r2, #2
 80049d6:	409a      	lsls	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80c5 	beq.w	8004b6c <HAL_DMA_IRQHandler+0xce8>
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80bf 	beq.w	8004b6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2202      	movs	r2, #2
 80049f8:	409a      	lsls	r2, r3
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d018      	beq.n	8004a3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d109      	bne.n	8004a26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 813a 	beq.w	8004c90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a24:	e134      	b.n	8004c90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8130 	beq.w	8004c90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a38:	e12a      	b.n	8004c90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 8089 	bne.w	8004b58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2b      	ldr	r2, [pc, #172]	; (8004af8 <HAL_DMA_IRQHandler+0xc74>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d04a      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <HAL_DMA_IRQHandler+0xc78>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d045      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <HAL_DMA_IRQHandler+0xc7c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d040      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a26      	ldr	r2, [pc, #152]	; (8004b04 <HAL_DMA_IRQHandler+0xc80>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d03b      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a25      	ldr	r2, [pc, #148]	; (8004b08 <HAL_DMA_IRQHandler+0xc84>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d036      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a23      	ldr	r2, [pc, #140]	; (8004b0c <HAL_DMA_IRQHandler+0xc88>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d031      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <HAL_DMA_IRQHandler+0xc8c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d02c      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <HAL_DMA_IRQHandler+0xc90>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d027      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <HAL_DMA_IRQHandler+0xc94>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d022      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <HAL_DMA_IRQHandler+0xc98>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01d      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <HAL_DMA_IRQHandler+0xc9c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d018      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <HAL_DMA_IRQHandler+0xca0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_DMA_IRQHandler+0xca4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <HAL_DMA_IRQHandler+0xca8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a16      	ldr	r2, [pc, #88]	; (8004b30 <HAL_DMA_IRQHandler+0xcac>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xc62>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <HAL_DMA_IRQHandler+0xcb0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d128      	bne.n	8004b38 <HAL_DMA_IRQHandler+0xcb4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0214 	bic.w	r2, r2, #20
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	e027      	b.n	8004b48 <HAL_DMA_IRQHandler+0xcc4>
 8004af8:	40020010 	.word	0x40020010
 8004afc:	40020028 	.word	0x40020028
 8004b00:	40020040 	.word	0x40020040
 8004b04:	40020058 	.word	0x40020058
 8004b08:	40020070 	.word	0x40020070
 8004b0c:	40020088 	.word	0x40020088
 8004b10:	400200a0 	.word	0x400200a0
 8004b14:	400200b8 	.word	0x400200b8
 8004b18:	40020410 	.word	0x40020410
 8004b1c:	40020428 	.word	0x40020428
 8004b20:	40020440 	.word	0x40020440
 8004b24:	40020458 	.word	0x40020458
 8004b28:	40020470 	.word	0x40020470
 8004b2c:	40020488 	.word	0x40020488
 8004b30:	400204a0 	.word	0x400204a0
 8004b34:	400204b8 	.word	0x400204b8
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 020a 	bic.w	r2, r2, #10
 8004b46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8097 	beq.w	8004c90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b6a:	e091      	b.n	8004c90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	2208      	movs	r2, #8
 8004b76:	409a      	lsls	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 8088 	beq.w	8004c92 <HAL_DMA_IRQHandler+0xe0e>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8082 	beq.w	8004c92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a41      	ldr	r2, [pc, #260]	; (8004c98 <HAL_DMA_IRQHandler+0xe14>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d04a      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3f      	ldr	r2, [pc, #252]	; (8004c9c <HAL_DMA_IRQHandler+0xe18>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d045      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a3e      	ldr	r2, [pc, #248]	; (8004ca0 <HAL_DMA_IRQHandler+0xe1c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d040      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3c      	ldr	r2, [pc, #240]	; (8004ca4 <HAL_DMA_IRQHandler+0xe20>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d03b      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <HAL_DMA_IRQHandler+0xe24>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d036      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a39      	ldr	r2, [pc, #228]	; (8004cac <HAL_DMA_IRQHandler+0xe28>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d031      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a38      	ldr	r2, [pc, #224]	; (8004cb0 <HAL_DMA_IRQHandler+0xe2c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d02c      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a36      	ldr	r2, [pc, #216]	; (8004cb4 <HAL_DMA_IRQHandler+0xe30>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d027      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a35      	ldr	r2, [pc, #212]	; (8004cb8 <HAL_DMA_IRQHandler+0xe34>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d022      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a33      	ldr	r2, [pc, #204]	; (8004cbc <HAL_DMA_IRQHandler+0xe38>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01d      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a32      	ldr	r2, [pc, #200]	; (8004cc0 <HAL_DMA_IRQHandler+0xe3c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d018      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a30      	ldr	r2, [pc, #192]	; (8004cc4 <HAL_DMA_IRQHandler+0xe40>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d013      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2f      	ldr	r2, [pc, #188]	; (8004cc8 <HAL_DMA_IRQHandler+0xe44>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2d      	ldr	r2, [pc, #180]	; (8004ccc <HAL_DMA_IRQHandler+0xe48>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d009      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <HAL_DMA_IRQHandler+0xe4c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_DMA_IRQHandler+0xdaa>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <HAL_DMA_IRQHandler+0xe50>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <HAL_DMA_IRQHandler+0xdbc>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 021c 	bic.w	r2, r2, #28
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e007      	b.n	8004c50 <HAL_DMA_IRQHandler+0xdcc>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 020e 	bic.w	r2, r2, #14
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2201      	movs	r2, #1
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
 8004c86:	e004      	b.n	8004c92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c88:	bf00      	nop
 8004c8a:	e002      	b.n	8004c92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c92:	3728      	adds	r7, #40	; 0x28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40020010 	.word	0x40020010
 8004c9c:	40020028 	.word	0x40020028
 8004ca0:	40020040 	.word	0x40020040
 8004ca4:	40020058 	.word	0x40020058
 8004ca8:	40020070 	.word	0x40020070
 8004cac:	40020088 	.word	0x40020088
 8004cb0:	400200a0 	.word	0x400200a0
 8004cb4:	400200b8 	.word	0x400200b8
 8004cb8:	40020410 	.word	0x40020410
 8004cbc:	40020428 	.word	0x40020428
 8004cc0:	40020440 	.word	0x40020440
 8004cc4:	40020458 	.word	0x40020458
 8004cc8:	40020470 	.word	0x40020470
 8004ccc:	40020488 	.word	0x40020488
 8004cd0:	400204a0 	.word	0x400204a0
 8004cd4:	400204b8 	.word	0x400204b8

08004cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a42      	ldr	r2, [pc, #264]	; (8004df0 <DMA_CalcBaseAndBitshift+0x118>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a41      	ldr	r2, [pc, #260]	; (8004df4 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a3f      	ldr	r2, [pc, #252]	; (8004df8 <DMA_CalcBaseAndBitshift+0x120>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3e      	ldr	r2, [pc, #248]	; (8004dfc <DMA_CalcBaseAndBitshift+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <DMA_CalcBaseAndBitshift+0x128>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a3b      	ldr	r2, [pc, #236]	; (8004e04 <DMA_CalcBaseAndBitshift+0x12c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a39      	ldr	r2, [pc, #228]	; (8004e08 <DMA_CalcBaseAndBitshift+0x130>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a38      	ldr	r2, [pc, #224]	; (8004e0c <DMA_CalcBaseAndBitshift+0x134>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a36      	ldr	r2, [pc, #216]	; (8004e10 <DMA_CalcBaseAndBitshift+0x138>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a35      	ldr	r2, [pc, #212]	; (8004e14 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a33      	ldr	r2, [pc, #204]	; (8004e18 <DMA_CalcBaseAndBitshift+0x140>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a32      	ldr	r2, [pc, #200]	; (8004e1c <DMA_CalcBaseAndBitshift+0x144>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <DMA_CalcBaseAndBitshift+0x148>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a2d      	ldr	r2, [pc, #180]	; (8004e28 <DMA_CalcBaseAndBitshift+0x150>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xa8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <DMA_CalcBaseAndBitshift+0x154>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d101      	bne.n	8004d84 <DMA_CalcBaseAndBitshift+0xac>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <DMA_CalcBaseAndBitshift+0xae>
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d024      	beq.n	8004dd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3b10      	subs	r3, #16
 8004d92:	4a27      	ldr	r2, [pc, #156]	; (8004e30 <DMA_CalcBaseAndBitshift+0x158>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <DMA_CalcBaseAndBitshift+0x15c>)
 8004da4:	5cd3      	ldrb	r3, [r2, r3]
 8004da6:	461a      	mov	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d908      	bls.n	8004dc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <DMA_CalcBaseAndBitshift+0x160>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	1d1a      	adds	r2, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	659a      	str	r2, [r3, #88]	; 0x58
 8004dc2:	e00d      	b.n	8004de0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <DMA_CalcBaseAndBitshift+0x160>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd2:	e005      	b.n	8004de0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40020010 	.word	0x40020010
 8004df4:	40020028 	.word	0x40020028
 8004df8:	40020040 	.word	0x40020040
 8004dfc:	40020058 	.word	0x40020058
 8004e00:	40020070 	.word	0x40020070
 8004e04:	40020088 	.word	0x40020088
 8004e08:	400200a0 	.word	0x400200a0
 8004e0c:	400200b8 	.word	0x400200b8
 8004e10:	40020410 	.word	0x40020410
 8004e14:	40020428 	.word	0x40020428
 8004e18:	40020440 	.word	0x40020440
 8004e1c:	40020458 	.word	0x40020458
 8004e20:	40020470 	.word	0x40020470
 8004e24:	40020488 	.word	0x40020488
 8004e28:	400204a0 	.word	0x400204a0
 8004e2c:	400204b8 	.word	0x400204b8
 8004e30:	aaaaaaab 	.word	0xaaaaaaab
 8004e34:	0800c07c 	.word	0x0800c07c
 8004e38:	fffffc00 	.word	0xfffffc00

08004e3c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d120      	bne.n	8004e92 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d858      	bhi.n	8004f0a <DMA_CheckFifoParam+0xce>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <DMA_CheckFifoParam+0x24>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e83 	.word	0x08004e83
 8004e68:	08004e71 	.word	0x08004e71
 8004e6c:	08004f0b 	.word	0x08004f0b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d048      	beq.n	8004f0e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e80:	e045      	b.n	8004f0e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e8a:	d142      	bne.n	8004f12 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e90:	e03f      	b.n	8004f12 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9a:	d123      	bne.n	8004ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d838      	bhi.n	8004f16 <DMA_CheckFifoParam+0xda>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <DMA_CheckFifoParam+0x70>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ec3 	.word	0x08004ec3
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004ed5 	.word	0x08004ed5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec0:	e030      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d025      	beq.n	8004f1a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ed2:	e022      	b.n	8004f1a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ee2:	e01c      	b.n	8004f1e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d902      	bls.n	8004ef2 <DMA_CheckFifoParam+0xb6>
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d003      	beq.n	8004ef8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ef0:	e018      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ef6:	e015      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
    break;
 8004f08:	e00b      	b.n	8004f22 <DMA_CheckFifoParam+0xe6>
        break;
 8004f0a:	bf00      	nop
 8004f0c:	e00a      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f0e:	bf00      	nop
 8004f10:	e008      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f12:	bf00      	nop
 8004f14:	e006      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f16:	bf00      	nop
 8004f18:	e004      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
    break;
 8004f22:	bf00      	nop
    }
  }

  return status;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a38      	ldr	r2, [pc, #224]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a36      	ldr	r2, [pc, #216]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d01d      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a35      	ldr	r2, [pc, #212]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a32      	ldr	r2, [pc, #200]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a30      	ldr	r2, [pc, #192]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01a      	beq.n	8004fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	3b08      	subs	r3, #8
 8004fa4:	4a28      	ldr	r2, [pc, #160]	; (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4b26      	ldr	r3, [pc, #152]	; (800504c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a24      	ldr	r2, [pc, #144]	; (8005050 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2201      	movs	r2, #1
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fd0:	e024      	b.n	800501c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	3b10      	subs	r3, #16
 8004fda:	4a1e      	ldr	r2, [pc, #120]	; (8005054 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	091b      	lsrs	r3, r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d806      	bhi.n	8004ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4a1b      	ldr	r2, [pc, #108]	; (800505c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d902      	bls.n	8004ffa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	461a      	mov	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a16      	ldr	r2, [pc, #88]	; (8005064 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800500c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2201      	movs	r2, #1
 8005016:	409a      	lsls	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	58025408 	.word	0x58025408
 800502c:	5802541c 	.word	0x5802541c
 8005030:	58025430 	.word	0x58025430
 8005034:	58025444 	.word	0x58025444
 8005038:	58025458 	.word	0x58025458
 800503c:	5802546c 	.word	0x5802546c
 8005040:	58025480 	.word	0x58025480
 8005044:	58025494 	.word	0x58025494
 8005048:	cccccccd 	.word	0xcccccccd
 800504c:	16009600 	.word	0x16009600
 8005050:	58025880 	.word	0x58025880
 8005054:	aaaaaaab 	.word	0xaaaaaaab
 8005058:	400204b8 	.word	0x400204b8
 800505c:	4002040f 	.word	0x4002040f
 8005060:	10008200 	.word	0x10008200
 8005064:	40020880 	.word	0x40020880

08005068 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d04a      	beq.n	8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d847      	bhi.n	8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d022      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a24      	ldr	r2, [pc, #144]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d01d      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d018      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d013      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00e      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d009      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1c      	ldr	r2, [pc, #112]	; (8005138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1b      	ldr	r2, [pc, #108]	; (800513c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d101      	bne.n	80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e000      	b.n	80050da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050d8:	2300      	movs	r3, #0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a15      	ldr	r2, [pc, #84]	; (8005144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050f0:	671a      	str	r2, [r3, #112]	; 0x70
 80050f2:	e009      	b.n	8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a11      	ldr	r2, [pc, #68]	; (800514c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005106:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3b01      	subs	r3, #1
 800510c:	2201      	movs	r2, #1
 800510e:	409a      	lsls	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	58025408 	.word	0x58025408
 8005124:	5802541c 	.word	0x5802541c
 8005128:	58025430 	.word	0x58025430
 800512c:	58025444 	.word	0x58025444
 8005130:	58025458 	.word	0x58025458
 8005134:	5802546c 	.word	0x5802546c
 8005138:	58025480 	.word	0x58025480
 800513c:	58025494 	.word	0x58025494
 8005140:	1600963f 	.word	0x1600963f
 8005144:	58025940 	.word	0x58025940
 8005148:	1000823f 	.word	0x1000823f
 800514c:	40020940 	.word	0x40020940

08005150 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0cf      	b.n	8005302 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2223      	movs	r2, #35	; 0x23
 8005170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fb ff95 	bl	80010a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800517a:	4b64      	ldr	r3, [pc, #400]	; (800530c <HAL_ETH_Init+0x1bc>)
 800517c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005180:	4a62      	ldr	r2, [pc, #392]	; (800530c <HAL_ETH_Init+0x1bc>)
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800518a:	4b60      	ldr	r3, [pc, #384]	; (800530c <HAL_ETH_Init+0x1bc>)
 800518c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	7a1b      	ldrb	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d103      	bne.n	80051a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80051a0:	2000      	movs	r0, #0
 80051a2:	f7fc fadf 	bl	8001764 <HAL_SYSCFG_ETHInterfaceSelect>
 80051a6:	e003      	b.n	80051b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80051a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80051ac:	f7fc fada 	bl	8001764 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80051b0:	4b57      	ldr	r3, [pc, #348]	; (8005310 <HAL_ETH_Init+0x1c0>)
 80051b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051cc:	f7fc fa8e 	bl	80016ec <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051d2:	e011      	b.n	80051f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80051d4:	f7fc fa8a 	bl	80016ec <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051e2:	d909      	bls.n	80051f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2204      	movs	r2, #4
 80051e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	22e0      	movs	r2, #224	; 0xe0
 80051f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e084      	b.n	8005302 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e4      	bne.n	80051d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f886 	bl	800531c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005210:	f001 fedc 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8005214:	4603      	mov	r3, r0
 8005216:	4a3f      	ldr	r2, [pc, #252]	; (8005314 <HAL_ETH_Init+0x1c4>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	0c9a      	lsrs	r2, r3, #18
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3a01      	subs	r2, #1
 8005224:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa71 	bl	8005710 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005236:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800523a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005246:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800524a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d009      	beq.n	800526e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	22e0      	movs	r2, #224	; 0xe0
 8005266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e049      	b.n	8005302 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005276:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <HAL_ETH_Init+0x1c8>)
 800527c:	4013      	ands	r3, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6952      	ldr	r2, [r2, #20]
 8005282:	0051      	lsls	r1, r2, #1
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	430b      	orrs	r3, r1
 800528a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800528e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fad9 	bl	800584a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb1f 	bl	80058dc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	3305      	adds	r3, #5
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	3304      	adds	r3, #4
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	4619      	mov	r1, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	3303      	adds	r3, #3
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	061a      	lsls	r2, r3, #24
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	3302      	adds	r3, #2
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	3301      	adds	r3, #1
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2210      	movs	r2, #16
 80052fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	58000400 	.word	0x58000400
 8005314:	431bde83 	.word	0x431bde83
 8005318:	ffff8001 	.word	0xffff8001

0800531c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800532c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005334:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005336:	f001 fe49 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 800533a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d908      	bls.n	8005356 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a1d      	ldr	r2, [pc, #116]	; (80053bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d804      	bhi.n	8005356 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e027      	b.n	80053a6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a18      	ldr	r2, [pc, #96]	; (80053bc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d908      	bls.n	8005370 <HAL_ETH_SetMDIOClockRange+0x54>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d204      	bcs.n	8005370 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e01a      	b.n	80053a6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d303      	bcc.n	8005380 <HAL_ETH_SetMDIOClockRange+0x64>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d911      	bls.n	80053a4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a10      	ldr	r2, [pc, #64]	; (80053c4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d908      	bls.n	800539a <HAL_ETH_SetMDIOClockRange+0x7e>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d804      	bhi.n	800539a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e005      	b.n	80053a6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e000      	b.n	80053a6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80053a4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	01312cff 	.word	0x01312cff
 80053bc:	02160ebf 	.word	0x02160ebf
 80053c0:	03938700 	.word	0x03938700
 80053c4:	05f5e0ff 	.word	0x05f5e0ff
 80053c8:	08f0d17f 	.word	0x08f0d17f

080053cc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80053de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	791b      	ldrb	r3, [r3, #4]
 80053e4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7b1b      	ldrb	r3, [r3, #12]
 80053ec:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	7b5b      	ldrb	r3, [r3, #13]
 80053f4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	7b9b      	ldrb	r3, [r3, #14]
 80053fc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	7bdb      	ldrb	r3, [r3, #15]
 8005404:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005406:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	7c12      	ldrb	r2, [r2, #16]
 800540c:	2a00      	cmp	r2, #0
 800540e:	d102      	bne.n	8005416 <ETH_SetMACConfig+0x4a>
 8005410:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005414:	e000      	b.n	8005418 <ETH_SetMACConfig+0x4c>
 8005416:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005418:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	7c52      	ldrb	r2, [r2, #17]
 800541e:	2a00      	cmp	r2, #0
 8005420:	d102      	bne.n	8005428 <ETH_SetMACConfig+0x5c>
 8005422:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005426:	e000      	b.n	800542a <ETH_SetMACConfig+0x5e>
 8005428:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800542a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	7c9b      	ldrb	r3, [r3, #18]
 8005430:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005432:	431a      	orrs	r2, r3
               macconf->Speed |
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005438:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800543e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	7f1b      	ldrb	r3, [r3, #28]
 8005444:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005446:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	7f5b      	ldrb	r3, [r3, #29]
 800544c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800544e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	7f92      	ldrb	r2, [r2, #30]
 8005454:	2a00      	cmp	r2, #0
 8005456:	d102      	bne.n	800545e <ETH_SetMACConfig+0x92>
 8005458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800545c:	e000      	b.n	8005460 <ETH_SetMACConfig+0x94>
 800545e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005460:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	7fdb      	ldrb	r3, [r3, #31]
 8005466:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005468:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005470:	2a00      	cmp	r2, #0
 8005472:	d102      	bne.n	800547a <ETH_SetMACConfig+0xae>
 8005474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005478:	e000      	b.n	800547c <ETH_SetMACConfig+0xb0>
 800547a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800547c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005482:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800548c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b56      	ldr	r3, [pc, #344]	; (80055f8 <ETH_SetMACConfig+0x22c>)
 800549e:	4013      	ands	r3, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054b6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054c0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054ca:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	d102      	bne.n	80054de <ETH_SetMACConfig+0x112>
 80054d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054dc:	e000      	b.n	80054e0 <ETH_SetMACConfig+0x114>
 80054de:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054e0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	4b42      	ldr	r3, [pc, #264]	; (80055fc <ETH_SetMACConfig+0x230>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	430b      	orrs	r3, r1
 80054fc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005504:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	4b3a      	ldr	r3, [pc, #232]	; (8005600 <ETH_SetMACConfig+0x234>)
 8005516:	4013      	ands	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	68f9      	ldr	r1, [r7, #12]
 800551e:	430b      	orrs	r3, r1
 8005520:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005528:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800552e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005536:	2a00      	cmp	r2, #0
 8005538:	d101      	bne.n	800553e <ETH_SetMACConfig+0x172>
 800553a:	2280      	movs	r2, #128	; 0x80
 800553c:	e000      	b.n	8005540 <ETH_SetMACConfig+0x174>
 800553e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005540:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005546:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005552:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005556:	4013      	ands	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	68f9      	ldr	r1, [r7, #12]
 800555e:	430b      	orrs	r3, r1
 8005560:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005568:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005570:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f023 0103 	bic.w	r1, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	430a      	orrs	r2, r1
 800558a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005596:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	d101      	bne.n	80055ba <ETH_SetMACConfig+0x1ee>
 80055b6:	2240      	movs	r2, #64	; 0x40
 80055b8:	e000      	b.n	80055bc <ETH_SetMACConfig+0x1f0>
 80055ba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80055bc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80055c4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055ce:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80055dc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	00048083 	.word	0x00048083
 80055fc:	c0f88000 	.word	0xc0f88000
 8005600:	fffffef0 	.word	0xfffffef0

08005604 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	4b38      	ldr	r3, [pc, #224]	; (80056fc <ETH_SetDMAConfig+0xf8>)
 800561a:	4013      	ands	r3, r2
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	6811      	ldr	r1, [r2, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6812      	ldr	r2, [r2, #0]
 8005624:	430b      	orrs	r3, r1
 8005626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800562a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	791b      	ldrb	r3, [r3, #4]
 8005630:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005636:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	7b1b      	ldrb	r3, [r3, #12]
 800563c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	4b2c      	ldr	r3, [pc, #176]	; (8005700 <ETH_SetDMAConfig+0xfc>)
 800564e:	4013      	ands	r3, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	68f9      	ldr	r1, [r7, #12]
 8005656:	430b      	orrs	r3, r1
 8005658:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800565c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	7b5b      	ldrb	r3, [r3, #13]
 8005662:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005678:	4b22      	ldr	r3, [pc, #136]	; (8005704 <ETH_SetDMAConfig+0x100>)
 800567a:	4013      	ands	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	68f9      	ldr	r1, [r7, #12]
 8005682:	430b      	orrs	r3, r1
 8005684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005688:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7d1b      	ldrb	r3, [r3, #20]
 8005694:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005696:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	7f5b      	ldrb	r3, [r3, #29]
 800569c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056aa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80056ae:	4b16      	ldr	r3, [pc, #88]	; (8005708 <ETH_SetDMAConfig+0x104>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	430b      	orrs	r3, r1
 80056ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056be:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	7f1b      	ldrb	r3, [r3, #28]
 80056c6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <ETH_SetDMAConfig+0x108>)
 80056de:	4013      	ands	r3, r2
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	68f9      	ldr	r1, [r7, #12]
 80056e6:	430b      	orrs	r3, r1
 80056e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056ec:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056f0:	bf00      	nop
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	ffff87fd 	.word	0xffff87fd
 8005700:	ffff2ffe 	.word	0xffff2ffe
 8005704:	fffec000 	.word	0xfffec000
 8005708:	ffc0efef 	.word	0xffc0efef
 800570c:	7fc0ffff 	.word	0x7fc0ffff

08005710 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b0a4      	sub	sp, #144	; 0x90
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800571e:	2300      	movs	r3, #0
 8005720:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800574c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005750:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005752:	2300      	movs	r3, #0
 8005754:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005758:	2300      	movs	r3, #0
 800575a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800575c:	2300      	movs	r3, #0
 800575e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005762:	2300      	movs	r3, #0
 8005764:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005768:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800576c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800576e:	2300      	movs	r3, #0
 8005770:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005774:	2300      	movs	r3, #0
 8005776:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800578a:	2300      	movs	r3, #0
 800578c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800578e:	2300      	movs	r3, #0
 8005790:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005792:	2300      	movs	r3, #0
 8005794:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005796:	2300      	movs	r3, #0
 8005798:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80057a8:	2320      	movs	r3, #32
 80057aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80057ba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80057c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057c4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80057cc:	2302      	movs	r3, #2
 80057ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80057de:	2300      	movs	r3, #0
 80057e0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057ea:	2300      	movs	r3, #0
 80057ec:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fde6 	bl	80053cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005800:	2301      	movs	r3, #1
 8005802:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005804:	2301      	movs	r3, #1
 8005806:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800580c:	2300      	movs	r3, #0
 800580e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005812:	2300      	movs	r3, #0
 8005814:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005816:	2300      	movs	r3, #0
 8005818:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800581a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800581e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005820:	2300      	movs	r3, #0
 8005822:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005824:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005828:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800582a:	2300      	movs	r3, #0
 800582c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005830:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005834:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fee1 	bl	8005604 <ETH_SetDMAConfig>
}
 8005842:	bf00      	nop
 8005844:	3790      	adds	r7, #144	; 0x90
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e01d      	b.n	8005894 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68d9      	ldr	r1, [r3, #12]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	440b      	add	r3, r1
 8005868:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2200      	movs	r2, #0
 800587a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2200      	movs	r2, #0
 8005880:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	3206      	adds	r2, #6
 800588a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3301      	adds	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b03      	cmp	r3, #3
 8005898:	d9de      	bls.n	8005858 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a8:	461a      	mov	r2, r3
 80058aa:	2303      	movs	r3, #3
 80058ac:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058cc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e023      	b.n	8005932 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6919      	ldr	r1, [r3, #16]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4613      	mov	r3, r2
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	4413      	add	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	440b      	add	r3, r1
 80058fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2200      	movs	r2, #0
 8005912:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	3212      	adds	r2, #18
 8005928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d9d8      	bls.n	80058ea <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595e:	461a      	mov	r2, r3
 8005960:	2303      	movs	r3, #3
 8005962:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005972:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005986:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005998:	b480      	push	{r7}
 800599a:	b089      	sub	sp, #36	; 0x24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059a6:	4b89      	ldr	r3, [pc, #548]	; (8005bcc <HAL_GPIO_Init+0x234>)
 80059a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059aa:	e194      	b.n	8005cd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	2101      	movs	r1, #1
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	4013      	ands	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 8186 	beq.w	8005cd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d005      	beq.n	80059dc <HAL_GPIO_Init+0x44>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d130      	bne.n	8005a3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	2203      	movs	r2, #3
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	43db      	mvns	r3, r3
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	4013      	ands	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a12:	2201      	movs	r2, #1
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	f003 0201 	and.w	r2, r3, #1
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d017      	beq.n	8005a7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	2203      	movs	r2, #3
 8005a56:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d123      	bne.n	8005ace <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	08da      	lsrs	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3208      	adds	r2, #8
 8005a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	220f      	movs	r2, #15
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	08da      	lsrs	r2, r3, #3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3208      	adds	r2, #8
 8005ac8:	69b9      	ldr	r1, [r7, #24]
 8005aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	2203      	movs	r2, #3
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0203 	and.w	r2, r3, #3
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80e0 	beq.w	8005cd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b10:	4b2f      	ldr	r3, [pc, #188]	; (8005bd0 <HAL_GPIO_Init+0x238>)
 8005b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b16:	4a2e      	ldr	r2, [pc, #184]	; (8005bd0 <HAL_GPIO_Init+0x238>)
 8005b18:	f043 0302 	orr.w	r3, r3, #2
 8005b1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b20:	4b2b      	ldr	r3, [pc, #172]	; (8005bd0 <HAL_GPIO_Init+0x238>)
 8005b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b2e:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <HAL_GPIO_Init+0x23c>)
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	3302      	adds	r3, #2
 8005b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	220f      	movs	r2, #15
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a20      	ldr	r2, [pc, #128]	; (8005bd8 <HAL_GPIO_Init+0x240>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d052      	beq.n	8005c00 <HAL_GPIO_Init+0x268>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <HAL_GPIO_Init+0x244>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d031      	beq.n	8005bc6 <HAL_GPIO_Init+0x22e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <HAL_GPIO_Init+0x248>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d02b      	beq.n	8005bc2 <HAL_GPIO_Init+0x22a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <HAL_GPIO_Init+0x24c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d025      	beq.n	8005bbe <HAL_GPIO_Init+0x226>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <HAL_GPIO_Init+0x250>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01f      	beq.n	8005bba <HAL_GPIO_Init+0x222>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <HAL_GPIO_Init+0x254>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d019      	beq.n	8005bb6 <HAL_GPIO_Init+0x21e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a1a      	ldr	r2, [pc, #104]	; (8005bf0 <HAL_GPIO_Init+0x258>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <HAL_GPIO_Init+0x21a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <HAL_GPIO_Init+0x25c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00d      	beq.n	8005bae <HAL_GPIO_Init+0x216>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_GPIO_Init+0x260>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <HAL_GPIO_Init+0x212>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <HAL_GPIO_Init+0x264>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d101      	bne.n	8005ba6 <HAL_GPIO_Init+0x20e>
 8005ba2:	2309      	movs	r3, #9
 8005ba4:	e02d      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e02b      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005baa:	2308      	movs	r3, #8
 8005bac:	e029      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bae:	2307      	movs	r3, #7
 8005bb0:	e027      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bb2:	2306      	movs	r3, #6
 8005bb4:	e025      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bb6:	2305      	movs	r3, #5
 8005bb8:	e023      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bba:	2304      	movs	r3, #4
 8005bbc:	e021      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e01f      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e01d      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e01b      	b.n	8005c02 <HAL_GPIO_Init+0x26a>
 8005bca:	bf00      	nop
 8005bcc:	58000080 	.word	0x58000080
 8005bd0:	58024400 	.word	0x58024400
 8005bd4:	58000400 	.word	0x58000400
 8005bd8:	58020000 	.word	0x58020000
 8005bdc:	58020400 	.word	0x58020400
 8005be0:	58020800 	.word	0x58020800
 8005be4:	58020c00 	.word	0x58020c00
 8005be8:	58021000 	.word	0x58021000
 8005bec:	58021400 	.word	0x58021400
 8005bf0:	58021800 	.word	0x58021800
 8005bf4:	58021c00 	.word	0x58021c00
 8005bf8:	58022000 	.word	0x58022000
 8005bfc:	58022400 	.word	0x58022400
 8005c00:	2300      	movs	r3, #0
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	f002 0203 	and.w	r2, r2, #3
 8005c08:	0092      	lsls	r2, r2, #2
 8005c0a:	4093      	lsls	r3, r2
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c12:	4938      	ldr	r1, [pc, #224]	; (8005cf4 <HAL_GPIO_Init+0x35c>)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	089b      	lsrs	r3, r3, #2
 8005c18:	3302      	adds	r3, #2
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f47f ae63 	bne.w	80059ac <HAL_GPIO_Init+0x14>
  }
}
 8005ce6:	bf00      	nop
 8005ce8:	bf00      	nop
 8005cea:	3724      	adds	r7, #36	; 0x24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	58000400 	.word	0x58000400

08005cf8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005d00:	4a08      	ldr	r2, [pc, #32]	; (8005d24 <HAL_HSEM_FastTake+0x2c>)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3320      	adds	r3, #32
 8005d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0a:	4a07      	ldr	r2, [pc, #28]	; (8005d28 <HAL_HSEM_FastTake+0x30>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	58026400 	.word	0x58026400
 8005d28:	80000300 	.word	0x80000300

08005d2c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d36:	4906      	ldr	r1, [pc, #24]	; (8005d50 <HAL_HSEM_Release+0x24>)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	58026400 	.word	0x58026400

08005d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d56:	b08f      	sub	sp, #60	; 0x3c
 8005d58:	af0a      	add	r7, sp, #40	; 0x28
 8005d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e116      	b.n	8005f94 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d106      	bne.n	8005d86 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fb fb2f 	bl	80013e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2203      	movs	r2, #3
 8005d8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f005 fe8d 	bl	800bac4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	687e      	ldr	r6, [r7, #4]
 8005db2:	466d      	mov	r5, sp
 8005db4:	f106 0410 	add.w	r4, r6, #16
 8005db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005dc8:	1d33      	adds	r3, r6, #4
 8005dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dcc:	6838      	ldr	r0, [r7, #0]
 8005dce:	f005 fe0b 	bl	800b9e8 <USB_CoreInit>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0d7      	b.n	8005f94 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f005 fe7b 	bl	800bae6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df0:	2300      	movs	r3, #0
 8005df2:	73fb      	strb	r3, [r7, #15]
 8005df4:	e04a      	b.n	8005e8c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005df6:	7bfa      	ldrb	r2, [r7, #15]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	00db      	lsls	r3, r3, #3
 8005dfe:	4413      	add	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	333d      	adds	r3, #61	; 0x3d
 8005e06:	2201      	movs	r2, #1
 8005e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e0a:	7bfa      	ldrb	r2, [r7, #15]
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	333c      	adds	r3, #60	; 0x3c
 8005e1a:	7bfa      	ldrb	r2, [r7, #15]
 8005e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e1e:	7bfa      	ldrb	r2, [r7, #15]
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
 8005e22:	b298      	uxth	r0, r3
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	3356      	adds	r3, #86	; 0x56
 8005e32:	4602      	mov	r2, r0
 8005e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e36:	7bfa      	ldrb	r2, [r7, #15]
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3340      	adds	r3, #64	; 0x40
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e4a:	7bfa      	ldrb	r2, [r7, #15]
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	440b      	add	r3, r1
 8005e58:	3344      	adds	r3, #68	; 0x44
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e5e:	7bfa      	ldrb	r2, [r7, #15]
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	3348      	adds	r3, #72	; 0x48
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e72:	7bfa      	ldrb	r2, [r7, #15]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	334c      	adds	r3, #76	; 0x4c
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
 8005e8c:	7bfa      	ldrb	r2, [r7, #15]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d3af      	bcc.n	8005df6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	e044      	b.n	8005f26 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e9c:	7bfa      	ldrb	r2, [r7, #15]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005eb2:	7bfa      	ldrb	r2, [r7, #15]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005ec4:	7bfa      	ldrb	r2, [r7, #15]
 8005ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ec8:	7bfa      	ldrb	r2, [r7, #15]
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ef4:	7bfa      	ldrb	r2, [r7, #15]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f0a:	7bfa      	ldrb	r2, [r7, #15]
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	440b      	add	r3, r1
 8005f18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	3301      	adds	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d3b5      	bcc.n	8005e9c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	603b      	str	r3, [r7, #0]
 8005f36:	687e      	ldr	r6, [r7, #4]
 8005f38:	466d      	mov	r5, sp
 8005f3a:	f106 0410 	add.w	r4, r6, #16
 8005f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f4e:	1d33      	adds	r3, r6, #4
 8005f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f52:	6838      	ldr	r0, [r7, #0]
 8005f54:	f005 fe14 	bl	800bb80 <USB_DevInit>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e014      	b.n	8005f94 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d102      	bne.n	8005f88 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f80a 	bl	8005f9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f005 ffd2 	bl	800bf36 <USB_DevDisconnect>

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	10000003 	.word	0x10000003

08005fe4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005fec:	4b29      	ldr	r3, [pc, #164]	; (8006094 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	2b06      	cmp	r3, #6
 8005ff6:	d00a      	beq.n	800600e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ff8:	4b26      	ldr	r3, [pc, #152]	; (8006094 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	429a      	cmp	r2, r3
 8006004:	d001      	beq.n	800600a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e040      	b.n	800608c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	e03e      	b.n	800608c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800600e:	4b21      	ldr	r3, [pc, #132]	; (8006094 <HAL_PWREx_ConfigSupply+0xb0>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006016:	491f      	ldr	r1, [pc, #124]	; (8006094 <HAL_PWREx_ConfigSupply+0xb0>)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4313      	orrs	r3, r2
 800601c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800601e:	f7fb fb65 	bl	80016ec <HAL_GetTick>
 8006022:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006024:	e009      	b.n	800603a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006026:	f7fb fb61 	bl	80016ec <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006034:	d901      	bls.n	800603a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e028      	b.n	800608c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800603a:	4b16      	ldr	r3, [pc, #88]	; (8006094 <HAL_PWREx_ConfigSupply+0xb0>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006046:	d1ee      	bne.n	8006026 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b1e      	cmp	r3, #30
 800604c:	d008      	beq.n	8006060 <HAL_PWREx_ConfigSupply+0x7c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b2e      	cmp	r3, #46	; 0x2e
 8006052:	d005      	beq.n	8006060 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b1d      	cmp	r3, #29
 8006058:	d002      	beq.n	8006060 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b2d      	cmp	r3, #45	; 0x2d
 800605e:	d114      	bne.n	800608a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006060:	f7fb fb44 	bl	80016ec <HAL_GetTick>
 8006064:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006066:	e009      	b.n	800607c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006068:	f7fb fb40 	bl	80016ec <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006076:	d901      	bls.n	800607c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e007      	b.n	800608c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <HAL_PWREx_ConfigSupply+0xb0>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006088:	d1ee      	bne.n	8006068 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	58024800 	.word	0x58024800

08006098 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a6:	60d3      	str	r3, [r2, #12]
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	58024800 	.word	0x58024800

080060b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	; 0x30
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f000 bc48 	b.w	800695c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 8088 	beq.w	80061ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060da:	4b99      	ldr	r3, [pc, #612]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060e4:	4b96      	ldr	r3, [pc, #600]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d007      	beq.n	8006100 <HAL_RCC_OscConfig+0x48>
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	2b18      	cmp	r3, #24
 80060f4:	d111      	bne.n	800611a <HAL_RCC_OscConfig+0x62>
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d10c      	bne.n	800611a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006100:	4b8f      	ldr	r3, [pc, #572]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d06d      	beq.n	80061e8 <HAL_RCC_OscConfig+0x130>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d169      	bne.n	80061e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f000 bc21 	b.w	800695c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006122:	d106      	bne.n	8006132 <HAL_RCC_OscConfig+0x7a>
 8006124:	4b86      	ldr	r3, [pc, #536]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a85      	ldr	r2, [pc, #532]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800612a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	e02e      	b.n	8006190 <HAL_RCC_OscConfig+0xd8>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10c      	bne.n	8006154 <HAL_RCC_OscConfig+0x9c>
 800613a:	4b81      	ldr	r3, [pc, #516]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a80      	ldr	r2, [pc, #512]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	4b7e      	ldr	r3, [pc, #504]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a7d      	ldr	r2, [pc, #500]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800614c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	e01d      	b.n	8006190 <HAL_RCC_OscConfig+0xd8>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800615c:	d10c      	bne.n	8006178 <HAL_RCC_OscConfig+0xc0>
 800615e:	4b78      	ldr	r3, [pc, #480]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a77      	ldr	r2, [pc, #476]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	4b75      	ldr	r3, [pc, #468]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a74      	ldr	r2, [pc, #464]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e00b      	b.n	8006190 <HAL_RCC_OscConfig+0xd8>
 8006178:	4b71      	ldr	r3, [pc, #452]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a70      	ldr	r2, [pc, #448]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800617e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	4b6e      	ldr	r3, [pc, #440]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a6d      	ldr	r2, [pc, #436]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800618a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800618e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d013      	beq.n	80061c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fb faa8 	bl	80016ec <HAL_GetTick>
 800619c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fb faa4 	bl	80016ec <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e3d4      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061b2:	4b63      	ldr	r3, [pc, #396]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0xe8>
 80061be:	e014      	b.n	80061ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c0:	f7fb fa94 	bl	80016ec <HAL_GetTick>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061c6:	e008      	b.n	80061da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c8:	f7fb fa90 	bl	80016ec <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b64      	cmp	r3, #100	; 0x64
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e3c0      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061da:	4b59      	ldr	r3, [pc, #356]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f0      	bne.n	80061c8 <HAL_RCC_OscConfig+0x110>
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80ca 	beq.w	800638c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061f8:	4b51      	ldr	r3, [pc, #324]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006200:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006202:	4b4f      	ldr	r3, [pc, #316]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d007      	beq.n	800621e <HAL_RCC_OscConfig+0x166>
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	2b18      	cmp	r3, #24
 8006212:	d156      	bne.n	80062c2 <HAL_RCC_OscConfig+0x20a>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d151      	bne.n	80062c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800621e:	4b48      	ldr	r3, [pc, #288]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_RCC_OscConfig+0x17e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e392      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006236:	4b42      	ldr	r3, [pc, #264]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f023 0219 	bic.w	r2, r3, #25
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	493f      	ldr	r1, [pc, #252]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006244:	4313      	orrs	r3, r2
 8006246:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006248:	f7fb fa50 	bl	80016ec <HAL_GetTick>
 800624c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006250:	f7fb fa4c 	bl	80016ec <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e37c      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006262:	4b37      	ldr	r3, [pc, #220]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0304 	and.w	r3, r3, #4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626e:	f7fb fa6d 	bl	800174c <HAL_GetREVID>
 8006272:	4603      	mov	r3, r0
 8006274:	f241 0203 	movw	r2, #4099	; 0x1003
 8006278:	4293      	cmp	r3, r2
 800627a:	d817      	bhi.n	80062ac <HAL_RCC_OscConfig+0x1f4>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d108      	bne.n	8006296 <HAL_RCC_OscConfig+0x1de>
 8006284:	4b2e      	ldr	r3, [pc, #184]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800628c:	4a2c      	ldr	r2, [pc, #176]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800628e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006292:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006294:	e07a      	b.n	800638c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006296:	4b2a      	ldr	r3, [pc, #168]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	031b      	lsls	r3, r3, #12
 80062a4:	4926      	ldr	r1, [pc, #152]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062aa:	e06f      	b.n	800638c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ac:	4b24      	ldr	r3, [pc, #144]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	061b      	lsls	r3, r3, #24
 80062ba:	4921      	ldr	r1, [pc, #132]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c0:	e064      	b.n	800638c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d047      	beq.n	800635a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062ca:	4b1d      	ldr	r3, [pc, #116]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f023 0219 	bic.w	r2, r3, #25
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	491a      	ldr	r1, [pc, #104]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062dc:	f7fb fa06 	bl	80016ec <HAL_GetTick>
 80062e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062e2:	e008      	b.n	80062f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062e4:	f7fb fa02 	bl	80016ec <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e332      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f0      	beq.n	80062e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006302:	f7fb fa23 	bl	800174c <HAL_GetREVID>
 8006306:	4603      	mov	r3, r0
 8006308:	f241 0203 	movw	r2, #4099	; 0x1003
 800630c:	4293      	cmp	r3, r2
 800630e:	d819      	bhi.n	8006344 <HAL_RCC_OscConfig+0x28c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d108      	bne.n	800632a <HAL_RCC_OscConfig+0x272>
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006320:	4a07      	ldr	r2, [pc, #28]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 8006322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006326:	6053      	str	r3, [r2, #4]
 8006328:	e030      	b.n	800638c <HAL_RCC_OscConfig+0x2d4>
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	031b      	lsls	r3, r3, #12
 8006338:	4901      	ldr	r1, [pc, #4]	; (8006340 <HAL_RCC_OscConfig+0x288>)
 800633a:	4313      	orrs	r3, r2
 800633c:	604b      	str	r3, [r1, #4]
 800633e:	e025      	b.n	800638c <HAL_RCC_OscConfig+0x2d4>
 8006340:	58024400 	.word	0x58024400
 8006344:	4b9a      	ldr	r3, [pc, #616]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	061b      	lsls	r3, r3, #24
 8006352:	4997      	ldr	r1, [pc, #604]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006354:	4313      	orrs	r3, r2
 8006356:	604b      	str	r3, [r1, #4]
 8006358:	e018      	b.n	800638c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635a:	4b95      	ldr	r3, [pc, #596]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a94      	ldr	r2, [pc, #592]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006366:	f7fb f9c1 	bl	80016ec <HAL_GetTick>
 800636a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800636e:	f7fb f9bd 	bl	80016ec <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e2ed      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006380:	4b8b      	ldr	r3, [pc, #556]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f0      	bne.n	800636e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80a9 	beq.w	80064ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800639a:	4b85      	ldr	r3, [pc, #532]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063a4:	4b82      	ldr	r3, [pc, #520]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d007      	beq.n	80063c0 <HAL_RCC_OscConfig+0x308>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b18      	cmp	r3, #24
 80063b4:	d13a      	bne.n	800642c <HAL_RCC_OscConfig+0x374>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d135      	bne.n	800642c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063c0:	4b7b      	ldr	r3, [pc, #492]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_RCC_OscConfig+0x320>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	69db      	ldr	r3, [r3, #28]
 80063d0:	2b80      	cmp	r3, #128	; 0x80
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e2c1      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063d8:	f7fb f9b8 	bl	800174c <HAL_GetREVID>
 80063dc:	4603      	mov	r3, r0
 80063de:	f241 0203 	movw	r2, #4099	; 0x1003
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d817      	bhi.n	8006416 <HAL_RCC_OscConfig+0x35e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d108      	bne.n	8006400 <HAL_RCC_OscConfig+0x348>
 80063ee:	4b70      	ldr	r3, [pc, #448]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063f6:	4a6e      	ldr	r2, [pc, #440]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80063f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063fe:	e075      	b.n	80064ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006400:	4b6b      	ldr	r3, [pc, #428]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	069b      	lsls	r3, r3, #26
 800640e:	4968      	ldr	r1, [pc, #416]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006414:	e06a      	b.n	80064ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006416:	4b66      	ldr	r3, [pc, #408]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	061b      	lsls	r3, r3, #24
 8006424:	4962      	ldr	r1, [pc, #392]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006426:	4313      	orrs	r3, r2
 8006428:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800642a:	e05f      	b.n	80064ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d042      	beq.n	80064ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006434:	4b5e      	ldr	r3, [pc, #376]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5d      	ldr	r2, [pc, #372]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800643a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800643e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006440:	f7fb f954 	bl	80016ec <HAL_GetTick>
 8006444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006448:	f7fb f950 	bl	80016ec <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e280      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800645a:	4b55      	ldr	r3, [pc, #340]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006466:	f7fb f971 	bl	800174c <HAL_GetREVID>
 800646a:	4603      	mov	r3, r0
 800646c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006470:	4293      	cmp	r3, r2
 8006472:	d817      	bhi.n	80064a4 <HAL_RCC_OscConfig+0x3ec>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	2b20      	cmp	r3, #32
 800647a:	d108      	bne.n	800648e <HAL_RCC_OscConfig+0x3d6>
 800647c:	4b4c      	ldr	r3, [pc, #304]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006484:	4a4a      	ldr	r2, [pc, #296]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800648a:	6053      	str	r3, [r2, #4]
 800648c:	e02e      	b.n	80064ec <HAL_RCC_OscConfig+0x434>
 800648e:	4b48      	ldr	r3, [pc, #288]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	069b      	lsls	r3, r3, #26
 800649c:	4944      	ldr	r1, [pc, #272]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	604b      	str	r3, [r1, #4]
 80064a2:	e023      	b.n	80064ec <HAL_RCC_OscConfig+0x434>
 80064a4:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	061b      	lsls	r3, r3, #24
 80064b2:	493f      	ldr	r1, [pc, #252]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60cb      	str	r3, [r1, #12]
 80064b8:	e018      	b.n	80064ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064ba:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a3c      	ldr	r2, [pc, #240]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80064c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c6:	f7fb f911 	bl	80016ec <HAL_GetTick>
 80064ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064ce:	f7fb f90d 	bl	80016ec <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e23d      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064e0:	4b33      	ldr	r3, [pc, #204]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d036      	beq.n	8006566 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d019      	beq.n	8006534 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006500:	4b2b      	ldr	r3, [pc, #172]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006504:	4a2a      	ldr	r2, [pc, #168]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006506:	f043 0301 	orr.w	r3, r3, #1
 800650a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800650c:	f7fb f8ee 	bl	80016ec <HAL_GetTick>
 8006510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006514:	f7fb f8ea 	bl	80016ec <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e21a      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006526:	4b22      	ldr	r3, [pc, #136]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0f0      	beq.n	8006514 <HAL_RCC_OscConfig+0x45c>
 8006532:	e018      	b.n	8006566 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006534:	4b1e      	ldr	r3, [pc, #120]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006538:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006540:	f7fb f8d4 	bl	80016ec <HAL_GetTick>
 8006544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006548:	f7fb f8d0 	bl	80016ec <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e200      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800655c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0320 	and.w	r3, r3, #32
 800656e:	2b00      	cmp	r3, #0
 8006570:	d039      	beq.n	80065e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d01c      	beq.n	80065b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a0c      	ldr	r2, [pc, #48]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 8006580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006584:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006586:	f7fb f8b1 	bl	80016ec <HAL_GetTick>
 800658a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800658c:	e008      	b.n	80065a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800658e:	f7fb f8ad 	bl	80016ec <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e1dd      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065a0:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <HAL_RCC_OscConfig+0x4f8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d0f0      	beq.n	800658e <HAL_RCC_OscConfig+0x4d6>
 80065ac:	e01b      	b.n	80065e6 <HAL_RCC_OscConfig+0x52e>
 80065ae:	bf00      	nop
 80065b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065b4:	4b9b      	ldr	r3, [pc, #620]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a9a      	ldr	r2, [pc, #616]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80065ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065c0:	f7fb f894 	bl	80016ec <HAL_GetTick>
 80065c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065c8:	f7fb f890 	bl	80016ec <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e1c0      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065da:	4b92      	ldr	r3, [pc, #584]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8081 	beq.w	80066f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065f4:	4b8c      	ldr	r3, [pc, #560]	; (8006828 <HAL_RCC_OscConfig+0x770>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a8b      	ldr	r2, [pc, #556]	; (8006828 <HAL_RCC_OscConfig+0x770>)
 80065fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006600:	f7fb f874 	bl	80016ec <HAL_GetTick>
 8006604:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006608:	f7fb f870 	bl	80016ec <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	; 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e1a0      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800661a:	4b83      	ldr	r3, [pc, #524]	; (8006828 <HAL_RCC_OscConfig+0x770>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d106      	bne.n	800663c <HAL_RCC_OscConfig+0x584>
 800662e:	4b7d      	ldr	r3, [pc, #500]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a7c      	ldr	r2, [pc, #496]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
 800663a:	e02d      	b.n	8006698 <HAL_RCC_OscConfig+0x5e0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10c      	bne.n	800665e <HAL_RCC_OscConfig+0x5a6>
 8006644:	4b77      	ldr	r3, [pc, #476]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006648:	4a76      	ldr	r2, [pc, #472]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	6713      	str	r3, [r2, #112]	; 0x70
 8006650:	4b74      	ldr	r3, [pc, #464]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	4a73      	ldr	r2, [pc, #460]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006656:	f023 0304 	bic.w	r3, r3, #4
 800665a:	6713      	str	r3, [r2, #112]	; 0x70
 800665c:	e01c      	b.n	8006698 <HAL_RCC_OscConfig+0x5e0>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b05      	cmp	r3, #5
 8006664:	d10c      	bne.n	8006680 <HAL_RCC_OscConfig+0x5c8>
 8006666:	4b6f      	ldr	r3, [pc, #444]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666a:	4a6e      	ldr	r2, [pc, #440]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6713      	str	r3, [r2, #112]	; 0x70
 8006672:	4b6c      	ldr	r3, [pc, #432]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	4a6b      	ldr	r2, [pc, #428]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6713      	str	r3, [r2, #112]	; 0x70
 800667e:	e00b      	b.n	8006698 <HAL_RCC_OscConfig+0x5e0>
 8006680:	4b68      	ldr	r3, [pc, #416]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	4a67      	ldr	r2, [pc, #412]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	6713      	str	r3, [r2, #112]	; 0x70
 800668c:	4b65      	ldr	r3, [pc, #404]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	4a64      	ldr	r2, [pc, #400]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006692:	f023 0304 	bic.w	r3, r3, #4
 8006696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a0:	f7fb f824 	bl	80016ec <HAL_GetTick>
 80066a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066a6:	e00a      	b.n	80066be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a8:	f7fb f820 	bl	80016ec <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e14e      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066be:	4b59      	ldr	r3, [pc, #356]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ee      	beq.n	80066a8 <HAL_RCC_OscConfig+0x5f0>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fb f80e 	bl	80016ec <HAL_GetTick>
 80066d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fb f80a 	bl	80016ec <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e138      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ea:	4b4e      	ldr	r3, [pc, #312]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ee      	bne.n	80066d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 812d 	beq.w	800695a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006700:	4b48      	ldr	r3, [pc, #288]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006708:	2b18      	cmp	r3, #24
 800670a:	f000 80bd 	beq.w	8006888 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	2b02      	cmp	r3, #2
 8006714:	f040 809e 	bne.w	8006854 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006718:	4b42      	ldr	r3, [pc, #264]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a41      	ldr	r2, [pc, #260]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 800671e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fa ffe2 	bl	80016ec <HAL_GetTick>
 8006728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fa ffde 	bl	80016ec <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e10e      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800673e:	4b39      	ldr	r3, [pc, #228]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800674a:	4b36      	ldr	r3, [pc, #216]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 800674c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800674e:	4b37      	ldr	r3, [pc, #220]	; (800682c <HAL_RCC_OscConfig+0x774>)
 8006750:	4013      	ands	r3, r2
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800675a:	0112      	lsls	r2, r2, #4
 800675c:	430a      	orrs	r2, r1
 800675e:	4931      	ldr	r1, [pc, #196]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006760:	4313      	orrs	r3, r2
 8006762:	628b      	str	r3, [r1, #40]	; 0x28
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	3b01      	subs	r3, #1
 800676a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	3b01      	subs	r3, #1
 8006774:	025b      	lsls	r3, r3, #9
 8006776:	b29b      	uxth	r3, r3
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	3b01      	subs	r3, #1
 8006780:	041b      	lsls	r3, r3, #16
 8006782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	3b01      	subs	r3, #1
 800678e:	061b      	lsls	r3, r3, #24
 8006790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006794:	4923      	ldr	r1, [pc, #140]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006796:	4313      	orrs	r3, r2
 8006798:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800679a:	4b22      	ldr	r3, [pc, #136]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	4a21      	ldr	r2, [pc, #132]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067a6:	4b1f      	ldr	r3, [pc, #124]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067aa:	4b21      	ldr	r3, [pc, #132]	; (8006830 <HAL_RCC_OscConfig+0x778>)
 80067ac:	4013      	ands	r3, r2
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80067b2:	00d2      	lsls	r2, r2, #3
 80067b4:	491b      	ldr	r1, [pc, #108]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	f023 020c 	bic.w	r2, r3, #12
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	4917      	ldr	r1, [pc, #92]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067cc:	4b15      	ldr	r3, [pc, #84]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d0:	f023 0202 	bic.w	r2, r3, #2
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	4912      	ldr	r1, [pc, #72]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ea:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	4a0d      	ldr	r2, [pc, #52]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a0a      	ldr	r2, [pc, #40]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 80067fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006802:	4b08      	ldr	r3, [pc, #32]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006806:	4a07      	ldr	r2, [pc, #28]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a04      	ldr	r2, [pc, #16]	; (8006824 <HAL_RCC_OscConfig+0x76c>)
 8006814:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681a:	f7fa ff67 	bl	80016ec <HAL_GetTick>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006820:	e011      	b.n	8006846 <HAL_RCC_OscConfig+0x78e>
 8006822:	bf00      	nop
 8006824:	58024400 	.word	0x58024400
 8006828:	58024800 	.word	0x58024800
 800682c:	fffffc0c 	.word	0xfffffc0c
 8006830:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006834:	f7fa ff5a 	bl	80016ec <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e08a      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006846:	4b47      	ldr	r3, [pc, #284]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0x77c>
 8006852:	e082      	b.n	800695a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006854:	4b43      	ldr	r3, [pc, #268]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a42      	ldr	r2, [pc, #264]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 800685a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800685e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fa ff44 	bl	80016ec <HAL_GetTick>
 8006864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006868:	f7fa ff40 	bl	80016ec <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e070      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687a:	4b3a      	ldr	r3, [pc, #232]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x7b0>
 8006886:	e068      	b.n	800695a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006888:	4b36      	ldr	r3, [pc, #216]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800688e:	4b35      	ldr	r3, [pc, #212]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b01      	cmp	r3, #1
 800689a:	d031      	beq.n	8006900 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f003 0203 	and.w	r2, r3, #3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d12a      	bne.n	8006900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	091b      	lsrs	r3, r3, #4
 80068ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d122      	bne.n	8006900 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d11a      	bne.n	8006900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	0a5b      	lsrs	r3, r3, #9
 80068ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068d8:	429a      	cmp	r2, r3
 80068da:	d111      	bne.n	8006900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d108      	bne.n	8006900 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	0e1b      	lsrs	r3, r3, #24
 80068f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e02b      	b.n	800695c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006904:	4b17      	ldr	r3, [pc, #92]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 8006906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006908:	08db      	lsrs	r3, r3, #3
 800690a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800690e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	d01f      	beq.n	800695a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 800691c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691e:	4a11      	ldr	r2, [pc, #68]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006926:	f7fa fee1 	bl	80016ec <HAL_GetTick>
 800692a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800692c:	bf00      	nop
 800692e:	f7fa fedd 	bl	80016ec <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	4293      	cmp	r3, r2
 8006938:	d0f9      	beq.n	800692e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 800693c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693e:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <HAL_RCC_OscConfig+0x8b0>)
 8006940:	4013      	ands	r3, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006946:	00d2      	lsls	r2, r2, #3
 8006948:	4906      	ldr	r1, [pc, #24]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 800694a:	4313      	orrs	r3, r2
 800694c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800694e:	4b05      	ldr	r3, [pc, #20]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	4a04      	ldr	r2, [pc, #16]	; (8006964 <HAL_RCC_OscConfig+0x8ac>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3730      	adds	r7, #48	; 0x30
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	58024400 	.word	0x58024400
 8006968:	ffff0007 	.word	0xffff0007

0800696c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e19c      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006980:	4b8a      	ldr	r3, [pc, #552]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	429a      	cmp	r2, r3
 800698c:	d910      	bls.n	80069b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800698e:	4b87      	ldr	r3, [pc, #540]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f023 020f 	bic.w	r2, r3, #15
 8006996:	4985      	ldr	r1, [pc, #532]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	4313      	orrs	r3, r2
 800699c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699e:	4b83      	ldr	r3, [pc, #524]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d001      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e184      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d010      	beq.n	80069de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	4b7b      	ldr	r3, [pc, #492]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d908      	bls.n	80069de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069cc:	4b78      	ldr	r3, [pc, #480]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	4975      	ldr	r1, [pc, #468]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d010      	beq.n	8006a0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	4b70      	ldr	r3, [pc, #448]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d908      	bls.n	8006a0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069fa:	4b6d      	ldr	r3, [pc, #436]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	496a      	ldr	r1, [pc, #424]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d010      	beq.n	8006a3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699a      	ldr	r2, [r3, #24]
 8006a1c:	4b64      	ldr	r3, [pc, #400]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d908      	bls.n	8006a3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a28:	4b61      	ldr	r3, [pc, #388]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	495e      	ldr	r1, [pc, #376]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d010      	beq.n	8006a68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69da      	ldr	r2, [r3, #28]
 8006a4a:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d908      	bls.n	8006a68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a56:	4b56      	ldr	r3, [pc, #344]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	4953      	ldr	r1, [pc, #332]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d010      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	4b4d      	ldr	r3, [pc, #308]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d908      	bls.n	8006a96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a84:	4b4a      	ldr	r3, [pc, #296]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f023 020f 	bic.w	r2, r3, #15
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4947      	ldr	r1, [pc, #284]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d055      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006aa2:	4b43      	ldr	r3, [pc, #268]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	4940      	ldr	r1, [pc, #256]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d107      	bne.n	8006acc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006abc:	4b3c      	ldr	r3, [pc, #240]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d121      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0f6      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad4:	4b36      	ldr	r3, [pc, #216]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d115      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0ea      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aec:	4b30      	ldr	r3, [pc, #192]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d109      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0de      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006afc:	4b2c      	ldr	r3, [pc, #176]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0d6      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b0c:	4b28      	ldr	r3, [pc, #160]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f023 0207 	bic.w	r2, r3, #7
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4925      	ldr	r1, [pc, #148]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1e:	f7fa fde5 	bl	80016ec <HAL_GetTick>
 8006b22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b26:	f7fa fde1 	bl	80016ec <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e0be      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3c:	4b1c      	ldr	r3, [pc, #112]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d1eb      	bne.n	8006b26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d010      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d208      	bcs.n	8006b7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f023 020f 	bic.w	r2, r3, #15
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	490e      	ldr	r1, [pc, #56]	; (8006bb0 <HAL_RCC_ClockConfig+0x244>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d214      	bcs.n	8006bb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b08      	ldr	r3, [pc, #32]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f023 020f 	bic.w	r2, r3, #15
 8006b92:	4906      	ldr	r1, [pc, #24]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b9a:	4b04      	ldr	r3, [pc, #16]	; (8006bac <HAL_RCC_ClockConfig+0x240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d005      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e086      	b.n	8006cba <HAL_RCC_ClockConfig+0x34e>
 8006bac:	52002000 	.word	0x52002000
 8006bb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d010      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d208      	bcs.n	8006be2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bd0:	4b3c      	ldr	r3, [pc, #240]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	4939      	ldr	r1, [pc, #228]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d010      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	4b34      	ldr	r3, [pc, #208]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d208      	bcs.n	8006c10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bfe:	4b31      	ldr	r3, [pc, #196]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	492e      	ldr	r1, [pc, #184]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0310 	and.w	r3, r3, #16
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699a      	ldr	r2, [r3, #24]
 8006c20:	4b28      	ldr	r3, [pc, #160]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d208      	bcs.n	8006c3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c2c:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	4922      	ldr	r1, [pc, #136]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0320 	and.w	r3, r3, #32
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69da      	ldr	r2, [r3, #28]
 8006c4e:	4b1d      	ldr	r3, [pc, #116]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d208      	bcs.n	8006c6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c5a:	4b1a      	ldr	r3, [pc, #104]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	4917      	ldr	r1, [pc, #92]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c6c:	f000 f834 	bl	8006cd8 <HAL_RCC_GetSysClockFreq>
 8006c70:	4602      	mov	r2, r0
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	0a1b      	lsrs	r3, r3, #8
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	4912      	ldr	r1, [pc, #72]	; (8006cc8 <HAL_RCC_ClockConfig+0x35c>)
 8006c7e:	5ccb      	ldrb	r3, [r1, r3]
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
 8006c88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <HAL_RCC_ClockConfig+0x358>)
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	4a0d      	ldr	r2, [pc, #52]	; (8006cc8 <HAL_RCC_ClockConfig+0x35c>)
 8006c94:	5cd3      	ldrb	r3, [r2, r3]
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <HAL_RCC_ClockConfig+0x360>)
 8006ca2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ca4:	4a0a      	ldr	r2, [pc, #40]	; (8006cd0 <HAL_RCC_ClockConfig+0x364>)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006caa:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <HAL_RCC_ClockConfig+0x368>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fa fcd2 	bl	8001658 <HAL_InitTick>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	0800c06c 	.word	0x0800c06c
 8006ccc:	24000004 	.word	0x24000004
 8006cd0:	24000000 	.word	0x24000000
 8006cd4:	24000008 	.word	0x24000008

08006cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b089      	sub	sp, #36	; 0x24
 8006cdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cde:	4bb3      	ldr	r3, [pc, #716]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ce6:	2b18      	cmp	r3, #24
 8006ce8:	f200 8155 	bhi.w	8006f96 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d59 	.word	0x08006d59
 8006cf8:	08006f97 	.word	0x08006f97
 8006cfc:	08006f97 	.word	0x08006f97
 8006d00:	08006f97 	.word	0x08006f97
 8006d04:	08006f97 	.word	0x08006f97
 8006d08:	08006f97 	.word	0x08006f97
 8006d0c:	08006f97 	.word	0x08006f97
 8006d10:	08006f97 	.word	0x08006f97
 8006d14:	08006d7f 	.word	0x08006d7f
 8006d18:	08006f97 	.word	0x08006f97
 8006d1c:	08006f97 	.word	0x08006f97
 8006d20:	08006f97 	.word	0x08006f97
 8006d24:	08006f97 	.word	0x08006f97
 8006d28:	08006f97 	.word	0x08006f97
 8006d2c:	08006f97 	.word	0x08006f97
 8006d30:	08006f97 	.word	0x08006f97
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006f97 	.word	0x08006f97
 8006d3c:	08006f97 	.word	0x08006f97
 8006d40:	08006f97 	.word	0x08006f97
 8006d44:	08006f97 	.word	0x08006f97
 8006d48:	08006f97 	.word	0x08006f97
 8006d4c:	08006f97 	.word	0x08006f97
 8006d50:	08006f97 	.word	0x08006f97
 8006d54:	08006d8b 	.word	0x08006d8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d58:	4b94      	ldr	r3, [pc, #592]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d009      	beq.n	8006d78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d64:	4b91      	ldr	r3, [pc, #580]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	08db      	lsrs	r3, r3, #3
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	4a90      	ldr	r2, [pc, #576]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
 8006d74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d76:	e111      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d78:	4b8d      	ldr	r3, [pc, #564]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d7a:	61bb      	str	r3, [r7, #24]
      break;
 8006d7c:	e10e      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d7e:	4b8d      	ldr	r3, [pc, #564]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d80:	61bb      	str	r3, [r7, #24]
      break;
 8006d82:	e10b      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d84:	4b8c      	ldr	r3, [pc, #560]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d86:	61bb      	str	r3, [r7, #24]
      break;
 8006d88:	e108      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d8a:	4b88      	ldr	r3, [pc, #544]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d94:	4b85      	ldr	r3, [pc, #532]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006da0:	4b82      	ldr	r3, [pc, #520]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006daa:	4b80      	ldr	r3, [pc, #512]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	08db      	lsrs	r3, r3, #3
 8006db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	fb02 f303 	mul.w	r3, r2, r3
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80e1 	beq.w	8006f90 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	f000 8083 	beq.w	8006edc <HAL_RCC_GetSysClockFreq+0x204>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	f200 80a1 	bhi.w	8006f20 <HAL_RCC_GetSysClockFreq+0x248>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_RCC_GetSysClockFreq+0x114>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d056      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dea:	e099      	b.n	8006f20 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dec:	4b6f      	ldr	r3, [pc, #444]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02d      	beq.n	8006e54 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006df8:	4b6c      	ldr	r3, [pc, #432]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	4a6b      	ldr	r2, [pc, #428]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b62      	ldr	r3, [pc, #392]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e52:	e087      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006fc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e66:	4b51      	ldr	r3, [pc, #324]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e96:	e065      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006fc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eaa:	4b40      	ldr	r3, [pc, #256]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ebe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eda:	e043      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006fc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eee:	4b2f      	ldr	r3, [pc, #188]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f1e:	e021      	b.n	8006f64 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006fc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b1e      	ldr	r3, [pc, #120]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006fbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f62:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f64:	4b11      	ldr	r3, [pc, #68]	; (8006fac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	0a5b      	lsrs	r3, r3, #9
 8006f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6e:	3301      	adds	r3, #1
 8006f70:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f88:	ee17 3a90 	vmov	r3, s15
 8006f8c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f8e:	e005      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	61bb      	str	r3, [r7, #24]
      break;
 8006f94:	e002      	b.n	8006f9c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f98:	61bb      	str	r3, [r7, #24]
      break;
 8006f9a:	bf00      	nop
  }

  return sysclockfreq;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3724      	adds	r7, #36	; 0x24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	03d09000 	.word	0x03d09000
 8006fb4:	003d0900 	.word	0x003d0900
 8006fb8:	007a1200 	.word	0x007a1200
 8006fbc:	46000000 	.word	0x46000000
 8006fc0:	4c742400 	.word	0x4c742400
 8006fc4:	4a742400 	.word	0x4a742400
 8006fc8:	4af42400 	.word	0x4af42400

08006fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fd2:	f7ff fe81 	bl	8006cd8 <HAL_RCC_GetSysClockFreq>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	4b10      	ldr	r3, [pc, #64]	; (800701c <HAL_RCC_GetHCLKFreq+0x50>)
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	0a1b      	lsrs	r3, r3, #8
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	490f      	ldr	r1, [pc, #60]	; (8007020 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fe4:	5ccb      	ldrb	r3, [r1, r3]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	fa22 f303 	lsr.w	r3, r2, r3
 8006fee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	; (800701c <HAL_RCC_GetHCLKFreq+0x50>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	4a09      	ldr	r2, [pc, #36]	; (8007020 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ffa:	5cd3      	ldrb	r3, [r2, r3]
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	4a07      	ldr	r2, [pc, #28]	; (8007024 <HAL_RCC_GetHCLKFreq+0x58>)
 8007008:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800700a:	4a07      	ldr	r2, [pc, #28]	; (8007028 <HAL_RCC_GetHCLKFreq+0x5c>)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007010:	4b04      	ldr	r3, [pc, #16]	; (8007024 <HAL_RCC_GetHCLKFreq+0x58>)
 8007012:	681b      	ldr	r3, [r3, #0]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	58024400 	.word	0x58024400
 8007020:	0800c06c 	.word	0x0800c06c
 8007024:	24000004 	.word	0x24000004
 8007028:	24000000 	.word	0x24000000

0800702c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007030:	f7ff ffcc 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8007034:	4602      	mov	r2, r0
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	091b      	lsrs	r3, r3, #4
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	4904      	ldr	r1, [pc, #16]	; (8007054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007042:	5ccb      	ldrb	r3, [r1, r3]
 8007044:	f003 031f 	and.w	r3, r3, #31
 8007048:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800704c:	4618      	mov	r0, r3
 800704e:	bd80      	pop	{r7, pc}
 8007050:	58024400 	.word	0x58024400
 8007054:	0800c06c 	.word	0x0800c06c

08007058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800705c:	f7ff ffb6 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8007060:	4602      	mov	r2, r0
 8007062:	4b06      	ldr	r3, [pc, #24]	; (800707c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	4904      	ldr	r1, [pc, #16]	; (8007080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800706e:	5ccb      	ldrb	r3, [r1, r3]
 8007070:	f003 031f 	and.w	r3, r3, #31
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007078:	4618      	mov	r0, r3
 800707a:	bd80      	pop	{r7, pc}
 800707c:	58024400 	.word	0x58024400
 8007080:	0800c06c 	.word	0x0800c06c

08007084 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007088:	b0ca      	sub	sp, #296	; 0x128
 800708a:	af00      	add	r7, sp, #0
 800708c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007096:	2300      	movs	r3, #0
 8007098:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80070a8:	2500      	movs	r5, #0
 80070aa:	ea54 0305 	orrs.w	r3, r4, r5
 80070ae:	d049      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80070b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070ba:	d02f      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070c0:	d828      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070c6:	d01a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070cc:	d822      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070d6:	d007      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070d8:	e01c      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070da:	4bb8      	ldr	r3, [pc, #736]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4ab7      	ldr	r2, [pc, #732]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070e6:	e01a      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ec:	3308      	adds	r3, #8
 80070ee:	2102      	movs	r1, #2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f002 fb61 	bl	80097b8 <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070fc:	e00f      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007102:	3328      	adds	r3, #40	; 0x28
 8007104:	2102      	movs	r1, #2
 8007106:	4618      	mov	r0, r3
 8007108:	f002 fc08 	bl	800991c <RCCEx_PLL3_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007112:	e004      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800711a:	e000      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800711c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10a      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007126:	4ba5      	ldr	r3, [pc, #660]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007134:	4aa1      	ldr	r2, [pc, #644]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007136:	430b      	orrs	r3, r1
 8007138:	6513      	str	r3, [r2, #80]	; 0x50
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007140:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007150:	f04f 0900 	mov.w	r9, #0
 8007154:	ea58 0309 	orrs.w	r3, r8, r9
 8007158:	d047      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	2b04      	cmp	r3, #4
 8007162:	d82a      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	08007181 	.word	0x08007181
 8007170:	0800718f 	.word	0x0800718f
 8007174:	080071a5 	.word	0x080071a5
 8007178:	080071c3 	.word	0x080071c3
 800717c:	080071c3 	.word	0x080071c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007180:	4b8e      	ldr	r3, [pc, #568]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	4a8d      	ldr	r2, [pc, #564]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800718c:	e01a      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800718e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007192:	3308      	adds	r3, #8
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f002 fb0e 	bl	80097b8 <RCCEx_PLL2_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a2:	e00f      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a8:	3328      	adds	r3, #40	; 0x28
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 fbb5 	bl	800991c <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071b8:	e004      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071c0:	e000      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071cc:	4b7b      	ldr	r3, [pc, #492]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	f023 0107 	bic.w	r1, r3, #7
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071da:	4a78      	ldr	r2, [pc, #480]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071dc:	430b      	orrs	r3, r1
 80071de:	6513      	str	r3, [r2, #80]	; 0x50
 80071e0:	e003      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80071f6:	f04f 0b00 	mov.w	fp, #0
 80071fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80071fe:	d04c      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d030      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800720c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007210:	d829      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007212:	2bc0      	cmp	r3, #192	; 0xc0
 8007214:	d02d      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007216:	2bc0      	cmp	r3, #192	; 0xc0
 8007218:	d825      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800721a:	2b80      	cmp	r3, #128	; 0x80
 800721c:	d018      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800721e:	2b80      	cmp	r3, #128	; 0x80
 8007220:	d821      	bhi.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007226:	2b40      	cmp	r3, #64	; 0x40
 8007228:	d007      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800722a:	e01c      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800722c:	4b63      	ldr	r3, [pc, #396]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	4a62      	ldr	r2, [pc, #392]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007238:	e01c      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800723a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723e:	3308      	adds	r3, #8
 8007240:	2100      	movs	r1, #0
 8007242:	4618      	mov	r0, r3
 8007244:	f002 fab8 	bl	80097b8 <RCCEx_PLL2_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800724e:	e011      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007254:	3328      	adds	r3, #40	; 0x28
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f002 fb5f 	bl	800991c <RCCEx_PLL3_Config>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007264:	e006      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800726c:	e002      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800726e:	bf00      	nop
 8007270:	e000      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800727c:	4b4f      	ldr	r3, [pc, #316]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800727e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007280:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728a:	4a4c      	ldr	r2, [pc, #304]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800728c:	430b      	orrs	r3, r1
 800728e:	6513      	str	r3, [r2, #80]	; 0x50
 8007290:	e003      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800729a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80072a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80072aa:	2300      	movs	r3, #0
 80072ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80072b4:	460b      	mov	r3, r1
 80072b6:	4313      	orrs	r3, r2
 80072b8:	d053      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072c6:	d035      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80072c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072cc:	d82e      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072d2:	d031      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80072d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072d8:	d828      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072de:	d01a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80072e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072e4:	d822      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80072ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ee:	d007      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80072f0:	e01c      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072f2:	4b32      	ldr	r3, [pc, #200]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	4a31      	ldr	r2, [pc, #196]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072fe:	e01c      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007304:	3308      	adds	r3, #8
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f002 fa55 	bl	80097b8 <RCCEx_PLL2_Config>
 800730e:	4603      	mov	r3, r0
 8007310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007314:	e011      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731a:	3328      	adds	r3, #40	; 0x28
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f002 fafc 	bl	800991c <RCCEx_PLL3_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800732a:	e006      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007332:	e002      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007334:	bf00      	nop
 8007336:	e000      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10b      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007342:	4b1e      	ldr	r3, [pc, #120]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007346:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007352:	4a1a      	ldr	r2, [pc, #104]	; (80073bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007354:	430b      	orrs	r3, r1
 8007356:	6593      	str	r3, [r2, #88]	; 0x58
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800735e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800736e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007372:	2300      	movs	r3, #0
 8007374:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007378:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d056      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007386:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800738a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800738e:	d038      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007394:	d831      	bhi.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007396:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800739a:	d034      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800739c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80073a0:	d82b      	bhi.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a6:	d01d      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80073a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ac:	d825      	bhi.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d006      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80073b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073b6:	d00a      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80073b8:	e01f      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073ba:	bf00      	nop
 80073bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c0:	4ba2      	ldr	r3, [pc, #648]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	4aa1      	ldr	r2, [pc, #644]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073cc:	e01c      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d2:	3308      	adds	r3, #8
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f002 f9ee 	bl	80097b8 <RCCEx_PLL2_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073e2:	e011      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e8:	3328      	adds	r3, #40	; 0x28
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f002 fa95 	bl	800991c <RCCEx_PLL3_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073f8:	e006      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007400:	e002      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007408:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10b      	bne.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007410:	4b8e      	ldr	r3, [pc, #568]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007420:	4a8a      	ldr	r2, [pc, #552]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007422:	430b      	orrs	r3, r1
 8007424:	6593      	str	r3, [r2, #88]	; 0x58
 8007426:	e003      	b.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800742c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800743c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007440:	2300      	movs	r3, #0
 8007442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800744a:	460b      	mov	r3, r1
 800744c:	4313      	orrs	r3, r2
 800744e:	d03a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007456:	2b30      	cmp	r3, #48	; 0x30
 8007458:	d01f      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800745a:	2b30      	cmp	r3, #48	; 0x30
 800745c:	d819      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800745e:	2b20      	cmp	r3, #32
 8007460:	d00c      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007462:	2b20      	cmp	r3, #32
 8007464:	d815      	bhi.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d019      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800746a:	2b10      	cmp	r3, #16
 800746c:	d111      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800746e:	4b77      	ldr	r3, [pc, #476]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	4a76      	ldr	r2, [pc, #472]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800747a:	e011      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800747c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007480:	3308      	adds	r3, #8
 8007482:	2102      	movs	r1, #2
 8007484:	4618      	mov	r0, r3
 8007486:	f002 f997 	bl	80097b8 <RCCEx_PLL2_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007490:	e006      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007498:	e002      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800749e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074a8:	4b68      	ldr	r3, [pc, #416]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b6:	4a65      	ldr	r2, [pc, #404]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074b8:	430b      	orrs	r3, r1
 80074ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074bc:	e003      	b.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80074d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074d6:	2300      	movs	r3, #0
 80074d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4313      	orrs	r3, r2
 80074e4:	d051      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f0:	d035      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80074f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f6:	d82e      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074fc:	d031      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80074fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007502:	d828      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007508:	d01a      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800750a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800750e:	d822      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007518:	d007      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800751a:	e01c      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751c:	4b4b      	ldr	r3, [pc, #300]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	4a4a      	ldr	r2, [pc, #296]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007526:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007528:	e01c      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f002 f940 	bl	80097b8 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800753e:	e011      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007544:	3328      	adds	r3, #40	; 0x28
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f002 f9e7 	bl	800991c <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007554:	e006      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800755c:	e002      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800755e:	bf00      	nop
 8007560:	e000      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800756c:	4b37      	ldr	r3, [pc, #220]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757a:	4a34      	ldr	r2, [pc, #208]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800757c:	430b      	orrs	r3, r1
 800757e:	6513      	str	r3, [r2, #80]	; 0x50
 8007580:	e003      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007596:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800759a:	2300      	movs	r3, #0
 800759c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80075a4:	460b      	mov	r3, r1
 80075a6:	4313      	orrs	r3, r2
 80075a8:	d056      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b4:	d033      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075ba:	d82c      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075c0:	d02f      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80075c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075c6:	d826      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075cc:	d02b      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80075ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075d2:	d820      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075d8:	d012      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80075da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075de:	d81a      	bhi.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d022      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80075e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e8:	d115      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ee:	3308      	adds	r3, #8
 80075f0:	2101      	movs	r1, #1
 80075f2:	4618      	mov	r0, r3
 80075f4:	f002 f8e0 	bl	80097b8 <RCCEx_PLL2_Config>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075fe:	e015      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007604:	3328      	adds	r3, #40	; 0x28
 8007606:	2101      	movs	r1, #1
 8007608:	4618      	mov	r0, r3
 800760a:	f002 f987 	bl	800991c <RCCEx_PLL3_Config>
 800760e:	4603      	mov	r3, r0
 8007610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007614:	e00a      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800761c:	e006      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800761e:	bf00      	nop
 8007620:	e004      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007622:	bf00      	nop
 8007624:	e002      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007626:	bf00      	nop
 8007628:	e000      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800762a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10d      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007638:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007642:	4a02      	ldr	r2, [pc, #8]	; (800764c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007644:	430b      	orrs	r3, r1
 8007646:	6513      	str	r3, [r2, #80]	; 0x50
 8007648:	e006      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800764a:	bf00      	nop
 800764c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007654:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007668:	2300      	movs	r3, #0
 800766a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800766e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007672:	460b      	mov	r3, r1
 8007674:	4313      	orrs	r3, r2
 8007676:	d055      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007684:	d033      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800768a:	d82c      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800768c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007690:	d02f      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007696:	d826      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800769c:	d02b      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800769e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80076a2:	d820      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a8:	d012      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80076aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076ae:	d81a      	bhi.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d022      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80076b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b8:	d115      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076be:	3308      	adds	r3, #8
 80076c0:	2101      	movs	r1, #1
 80076c2:	4618      	mov	r0, r3
 80076c4:	f002 f878 	bl	80097b8 <RCCEx_PLL2_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076ce:	e015      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d4:	3328      	adds	r3, #40	; 0x28
 80076d6:	2101      	movs	r1, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f002 f91f 	bl	800991c <RCCEx_PLL3_Config>
 80076de:	4603      	mov	r3, r0
 80076e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076e4:	e00a      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076ee:	bf00      	nop
 80076f0:	e004      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076f2:	bf00      	nop
 80076f4:	e002      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076f6:	bf00      	nop
 80076f8:	e000      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007704:	4ba3      	ldr	r3, [pc, #652]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007708:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007714:	4a9f      	ldr	r2, [pc, #636]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007716:	430b      	orrs	r3, r1
 8007718:	6593      	str	r3, [r2, #88]	; 0x58
 800771a:	e003      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007720:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800773a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800773e:	460b      	mov	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	d037      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800774e:	d00e      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007754:	d816      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800775a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775e:	d111      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007760:	4b8c      	ldr	r3, [pc, #560]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007764:	4a8b      	ldr	r2, [pc, #556]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800776a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800776c:	e00f      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007772:	3308      	adds	r3, #8
 8007774:	2101      	movs	r1, #1
 8007776:	4618      	mov	r0, r3
 8007778:	f002 f81e 	bl	80097b8 <RCCEx_PLL2_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007782:	e004      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800778a:	e000      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800778c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007796:	4b7f      	ldr	r3, [pc, #508]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800779e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	4a7b      	ldr	r2, [pc, #492]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077a6:	430b      	orrs	r3, r1
 80077a8:	6513      	str	r3, [r2, #80]	; 0x50
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80077c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80077ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d039      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d81c      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007821 	.word	0x08007821
 80077e8:	080077f5 	.word	0x080077f5
 80077ec:	08007803 	.word	0x08007803
 80077f0:	08007821 	.word	0x08007821
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f4:	4b67      	ldr	r3, [pc, #412]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	4a66      	ldr	r2, [pc, #408]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007800:	e00f      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007806:	3308      	adds	r3, #8
 8007808:	2102      	movs	r1, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 ffd4 	bl	80097b8 <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007816:	e004      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800782a:	4b5a      	ldr	r3, [pc, #360]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	f023 0103 	bic.w	r1, r3, #3
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007838:	4a56      	ldr	r2, [pc, #344]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800783a:	430b      	orrs	r3, r1
 800783c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800783e:	e003      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800785e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	f000 809f 	beq.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800786a:	4b4b      	ldr	r3, [pc, #300]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a4a      	ldr	r2, [pc, #296]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007876:	f7f9 ff39 	bl	80016ec <HAL_GetTick>
 800787a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800787e:	e00b      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007880:	f7f9 ff34 	bl	80016ec <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b64      	cmp	r3, #100	; 0x64
 800788e:	d903      	bls.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007896:	e005      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007898:	4b3f      	ldr	r3, [pc, #252]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0ed      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80078a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d179      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078ac:	4b39      	ldr	r3, [pc, #228]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078b8:	4053      	eors	r3, r2
 80078ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078c2:	4b34      	ldr	r3, [pc, #208]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078ce:	4b31      	ldr	r3, [pc, #196]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d2:	4a30      	ldr	r2, [pc, #192]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078da:	4b2e      	ldr	r3, [pc, #184]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	4a2d      	ldr	r2, [pc, #180]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078e6:	4a2b      	ldr	r2, [pc, #172]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	d118      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7f9 fef6 	bl	80016ec <HAL_GetTick>
 8007900:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007904:	e00d      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007906:	f7f9 fef1 	bl	80016ec <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	f241 3388 	movw	r3, #5000	; 0x1388
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007920:	e005      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007922:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0eb      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800792e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007932:	2b00      	cmp	r3, #0
 8007934:	d129      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800793e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007946:	d10e      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007948:	4b12      	ldr	r3, [pc, #72]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007958:	091a      	lsrs	r2, r3, #4
 800795a:	4b10      	ldr	r3, [pc, #64]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800795c:	4013      	ands	r3, r2
 800795e:	4a0d      	ldr	r2, [pc, #52]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007960:	430b      	orrs	r3, r1
 8007962:	6113      	str	r3, [r2, #16]
 8007964:	e005      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007966:	4b0b      	ldr	r3, [pc, #44]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	4a0a      	ldr	r2, [pc, #40]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800796c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007970:	6113      	str	r3, [r2, #16]
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007974:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800797a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800797e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007982:	4a04      	ldr	r2, [pc, #16]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6713      	str	r3, [r2, #112]	; 0x70
 8007988:	e00e      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800798a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800798e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007992:	e009      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007994:	58024400 	.word	0x58024400
 8007998:	58024800 	.word	0x58024800
 800799c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f002 0301 	and.w	r3, r2, #1
 80079b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079c2:	460b      	mov	r3, r1
 80079c4:	4313      	orrs	r3, r2
 80079c6:	f000 8089 	beq.w	8007adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d0:	2b28      	cmp	r3, #40	; 0x28
 80079d2:	d86b      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007ab5 	.word	0x08007ab5
 80079e0:	08007aad 	.word	0x08007aad
 80079e4:	08007aad 	.word	0x08007aad
 80079e8:	08007aad 	.word	0x08007aad
 80079ec:	08007aad 	.word	0x08007aad
 80079f0:	08007aad 	.word	0x08007aad
 80079f4:	08007aad 	.word	0x08007aad
 80079f8:	08007aad 	.word	0x08007aad
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007aad 	.word	0x08007aad
 8007a04:	08007aad 	.word	0x08007aad
 8007a08:	08007aad 	.word	0x08007aad
 8007a0c:	08007aad 	.word	0x08007aad
 8007a10:	08007aad 	.word	0x08007aad
 8007a14:	08007aad 	.word	0x08007aad
 8007a18:	08007aad 	.word	0x08007aad
 8007a1c:	08007a97 	.word	0x08007a97
 8007a20:	08007aad 	.word	0x08007aad
 8007a24:	08007aad 	.word	0x08007aad
 8007a28:	08007aad 	.word	0x08007aad
 8007a2c:	08007aad 	.word	0x08007aad
 8007a30:	08007aad 	.word	0x08007aad
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007aad 	.word	0x08007aad
 8007a3c:	08007ab5 	.word	0x08007ab5
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007aad 	.word	0x08007aad
 8007a48:	08007aad 	.word	0x08007aad
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007aad 	.word	0x08007aad
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	08007ab5 	.word	0x08007ab5
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007aad 	.word	0x08007aad
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007aad 	.word	0x08007aad
 8007a7c:	08007ab5 	.word	0x08007ab5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a84:	3308      	adds	r3, #8
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fe95 	bl	80097b8 <RCCEx_PLL2_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a94:	e00f      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9a:	3328      	adds	r3, #40	; 0x28
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 ff3c 	bl	800991c <RCCEx_PLL3_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007aaa:	e004      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007abe:	4bbf      	ldr	r3, [pc, #764]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007acc:	4abb      	ldr	r2, [pc, #748]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	6553      	str	r3, [r2, #84]	; 0x54
 8007ad2:	e003      	b.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f002 0302 	and.w	r3, r2, #2
 8007ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aec:	2300      	movs	r3, #0
 8007aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007af2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007af6:	460b      	mov	r3, r1
 8007af8:	4313      	orrs	r3, r2
 8007afa:	d041      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	d824      	bhi.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007b06:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0c:	08007b59 	.word	0x08007b59
 8007b10:	08007b25 	.word	0x08007b25
 8007b14:	08007b3b 	.word	0x08007b3b
 8007b18:	08007b59 	.word	0x08007b59
 8007b1c:	08007b59 	.word	0x08007b59
 8007b20:	08007b59 	.word	0x08007b59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fe43 	bl	80097b8 <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b38:	e00f      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b3e:	3328      	adds	r3, #40	; 0x28
 8007b40:	2101      	movs	r1, #1
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 feea 	bl	800991c <RCCEx_PLL3_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b4e:	e004      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b56:	e000      	b.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b62:	4b96      	ldr	r3, [pc, #600]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f023 0107 	bic.w	r1, r3, #7
 8007b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b70:	4a92      	ldr	r2, [pc, #584]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b72:	430b      	orrs	r3, r1
 8007b74:	6553      	str	r3, [r2, #84]	; 0x54
 8007b76:	e003      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f002 0304 	and.w	r3, r2, #4
 8007b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b90:	2300      	movs	r3, #0
 8007b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d044      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba8:	2b05      	cmp	r3, #5
 8007baa:	d825      	bhi.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007bac:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007c01 	.word	0x08007c01
 8007bb8:	08007bcd 	.word	0x08007bcd
 8007bbc:	08007be3 	.word	0x08007be3
 8007bc0:	08007c01 	.word	0x08007c01
 8007bc4:	08007c01 	.word	0x08007c01
 8007bc8:	08007c01 	.word	0x08007c01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f001 fdef 	bl	80097b8 <RCCEx_PLL2_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007be0:	e00f      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007be6:	3328      	adds	r3, #40	; 0x28
 8007be8:	2101      	movs	r1, #1
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 fe96 	bl	800991c <RCCEx_PLL3_Config>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bf6:	e004      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007bfe:	e000      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c0a:	4b6c      	ldr	r3, [pc, #432]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0e:	f023 0107 	bic.w	r1, r3, #7
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c1a:	4a68      	ldr	r2, [pc, #416]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c20:	e003      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f002 0320 	and.w	r3, r2, #32
 8007c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d055      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c56:	d033      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c5c:	d82c      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c62:	d02f      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c68:	d826      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c6e:	d02b      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007c70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c74:	d820      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c7a:	d012      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c80:	d81a      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d022      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c8a:	d115      	bne.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c90:	3308      	adds	r3, #8
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 fd8f 	bl	80097b8 <RCCEx_PLL2_Config>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ca0:	e015      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca6:	3328      	adds	r3, #40	; 0x28
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fe36 	bl	800991c <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007cb6:	e00a      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cbe:	e006      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cc0:	bf00      	nop
 8007cc2:	e004      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10b      	bne.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cd6:	4b39      	ldr	r3, [pc, #228]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	4a35      	ldr	r2, [pc, #212]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6553      	str	r3, [r2, #84]	; 0x54
 8007cec:	e003      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007d0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d058      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d22:	d033      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d28:	d82c      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	d02f      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d34:	d826      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d3a:	d02b      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d40:	d820      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d46:	d012      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d4c:	d81a      	bhi.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d022      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d56:	d115      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fd29 	bl	80097b8 <RCCEx_PLL2_Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d6c:	e015      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d72:	3328      	adds	r3, #40	; 0x28
 8007d74:	2102      	movs	r1, #2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fdd0 	bl	800991c <RCCEx_PLL3_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d82:	e00a      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d8a:	e006      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d8c:	bf00      	nop
 8007d8e:	e004      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10e      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007da6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007db2:	4a02      	ldr	r2, [pc, #8]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6593      	str	r3, [r2, #88]	; 0x58
 8007db8:	e006      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007dba:	bf00      	nop
 8007dbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dde:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d055      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007df0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007df4:	d033      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007df6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007dfa:	d82c      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e00:	d02f      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e06:	d826      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e0c:	d02b      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007e0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e12:	d820      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e18:	d012      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1e:	d81a      	bhi.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d022      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e28:	d115      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2e:	3308      	adds	r3, #8
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fcc0 	bl	80097b8 <RCCEx_PLL2_Config>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e3e:	e015      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e44:	3328      	adds	r3, #40	; 0x28
 8007e46:	2102      	movs	r1, #2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 fd67 	bl	800991c <RCCEx_PLL3_Config>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e54:	e00a      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e5c:	e006      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e004      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e62:	bf00      	nop
 8007e64:	e002      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10b      	bne.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e74:	4ba1      	ldr	r3, [pc, #644]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e78:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e84:	4a9d      	ldr	r2, [pc, #628]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6593      	str	r3, [r2, #88]	; 0x58
 8007e8a:	e003      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9c:	f002 0308 	and.w	r3, r2, #8
 8007ea0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007eaa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007eae:	460b      	mov	r3, r1
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	d01e      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec0:	d10c      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec6:	3328      	adds	r3, #40	; 0x28
 8007ec8:	2102      	movs	r1, #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 fd26 	bl	800991c <RCCEx_PLL3_Config>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007edc:	4b87      	ldr	r3, [pc, #540]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eec:	4a83      	ldr	r2, [pc, #524]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f002 0310 	and.w	r3, r2, #16
 8007efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f02:	2300      	movs	r3, #0
 8007f04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007f08:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	d01e      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1e:	d10c      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f24:	3328      	adds	r3, #40	; 0x28
 8007f26:	2102      	movs	r1, #2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 fcf7 	bl	800991c <RCCEx_PLL3_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f3a:	4b70      	ldr	r3, [pc, #448]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f4a:	4a6c      	ldr	r2, [pc, #432]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f60:	2300      	movs	r3, #0
 8007f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	d03e      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f7c:	d022      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f82:	d81b      	bhi.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f8c:	d00b      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007f8e:	e015      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f94:	3308      	adds	r3, #8
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 fc0d 	bl	80097b8 <RCCEx_PLL2_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fa4:	e00f      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007faa:	3328      	adds	r3, #40	; 0x28
 8007fac:	2102      	movs	r1, #2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fcb4 	bl	800991c <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fba:	e004      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10b      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fce:	4b4b      	ldr	r3, [pc, #300]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fde:	4a47      	ldr	r2, [pc, #284]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe4:	e003      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007ffa:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008000:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008004:	460b      	mov	r3, r1
 8008006:	4313      	orrs	r3, r2
 8008008:	d03b      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800800a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008012:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008016:	d01f      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008018:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800801c:	d818      	bhi.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800801e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008022:	d003      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008028:	d007      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800802a:	e011      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802c:	4b33      	ldr	r3, [pc, #204]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	4a32      	ldr	r2, [pc, #200]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008038:	e00f      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800803e:	3328      	adds	r3, #40	; 0x28
 8008040:	2101      	movs	r1, #1
 8008042:	4618      	mov	r0, r3
 8008044:	f001 fc6a 	bl	800991c <RCCEx_PLL3_Config>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800804e:	e004      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008056:	e000      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10b      	bne.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008062:	4b26      	ldr	r3, [pc, #152]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008066:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008072:	4a22      	ldr	r2, [pc, #136]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6553      	str	r3, [r2, #84]	; 0x54
 8008078:	e003      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800807e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800808e:	673b      	str	r3, [r7, #112]	; 0x70
 8008090:	2300      	movs	r3, #0
 8008092:	677b      	str	r3, [r7, #116]	; 0x74
 8008094:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008098:	460b      	mov	r3, r1
 800809a:	4313      	orrs	r3, r2
 800809c:	d034      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80080a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ac:	d007      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80080ae:	e011      	b.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4b12      	ldr	r3, [pc, #72]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	4a11      	ldr	r2, [pc, #68]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080bc:	e00e      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c2:	3308      	adds	r3, #8
 80080c4:	2102      	movs	r1, #2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fb76 	bl	80097b8 <RCCEx_PLL2_Config>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080d2:	e003      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10d      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f2:	4a02      	ldr	r2, [pc, #8]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080f8:	e006      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80080fa:	bf00      	nop
 80080fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008114:	66bb      	str	r3, [r7, #104]	; 0x68
 8008116:	2300      	movs	r3, #0
 8008118:	66fb      	str	r3, [r7, #108]	; 0x6c
 800811a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800811e:	460b      	mov	r3, r1
 8008120:	4313      	orrs	r3, r2
 8008122:	d00c      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008128:	3328      	adds	r3, #40	; 0x28
 800812a:	2102      	movs	r1, #2
 800812c:	4618      	mov	r0, r3
 800812e:	f001 fbf5 	bl	800991c <RCCEx_PLL3_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800814a:	663b      	str	r3, [r7, #96]	; 0x60
 800814c:	2300      	movs	r3, #0
 800814e:	667b      	str	r3, [r7, #100]	; 0x64
 8008150:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008154:	460b      	mov	r3, r1
 8008156:	4313      	orrs	r3, r2
 8008158:	d038      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800815e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008166:	d018      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008168:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816c:	d811      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800816e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008172:	d014      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008178:	d80b      	bhi.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800817a:	2b00      	cmp	r3, #0
 800817c:	d011      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800817e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008182:	d106      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008184:	4bc3      	ldr	r3, [pc, #780]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	4ac2      	ldr	r2, [pc, #776]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800818a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800818e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008190:	e008      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008198:	e004      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800819a:	bf00      	nop
 800819c:	e002      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800819e:	bf00      	nop
 80081a0:	e000      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081ac:	4bb9      	ldr	r3, [pc, #740]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081bc:	4ab5      	ldr	r2, [pc, #724]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081be:	430b      	orrs	r3, r1
 80081c0:	6553      	str	r3, [r2, #84]	; 0x54
 80081c2:	e003      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80081d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80081da:	2300      	movs	r3, #0
 80081dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80081e2:	460b      	mov	r3, r1
 80081e4:	4313      	orrs	r3, r2
 80081e6:	d009      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081e8:	4baa      	ldr	r3, [pc, #680]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f6:	4aa7      	ldr	r2, [pc, #668]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80081fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008208:	653b      	str	r3, [r7, #80]	; 0x50
 800820a:	2300      	movs	r3, #0
 800820c:	657b      	str	r3, [r7, #84]	; 0x54
 800820e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008212:	460b      	mov	r3, r1
 8008214:	4313      	orrs	r3, r2
 8008216:	d00a      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008218:	4b9e      	ldr	r3, [pc, #632]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008224:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008228:	4a9a      	ldr	r2, [pc, #616]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800822a:	430b      	orrs	r3, r1
 800822c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800822e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800823a:	64bb      	str	r3, [r7, #72]	; 0x48
 800823c:	2300      	movs	r3, #0
 800823e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008240:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008244:	460b      	mov	r3, r1
 8008246:	4313      	orrs	r3, r2
 8008248:	d009      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800824a:	4b92      	ldr	r3, [pc, #584]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800824c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008258:	4a8e      	ldr	r2, [pc, #568]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800825a:	430b      	orrs	r3, r1
 800825c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800826a:	643b      	str	r3, [r7, #64]	; 0x40
 800826c:	2300      	movs	r3, #0
 800826e:	647b      	str	r3, [r7, #68]	; 0x44
 8008270:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008274:	460b      	mov	r3, r1
 8008276:	4313      	orrs	r3, r2
 8008278:	d00e      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800827a:	4b86      	ldr	r3, [pc, #536]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	4a85      	ldr	r2, [pc, #532]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008284:	6113      	str	r3, [r2, #16]
 8008286:	4b83      	ldr	r3, [pc, #524]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008288:	6919      	ldr	r1, [r3, #16]
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008292:	4a80      	ldr	r2, [pc, #512]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008294:	430b      	orrs	r3, r1
 8008296:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800829c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80082a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80082a6:	2300      	movs	r3, #0
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80082ae:	460b      	mov	r3, r1
 80082b0:	4313      	orrs	r3, r2
 80082b2:	d009      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082b4:	4b77      	ldr	r3, [pc, #476]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80082bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	4a74      	ldr	r2, [pc, #464]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082c4:	430b      	orrs	r3, r1
 80082c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80082d4:	633b      	str	r3, [r7, #48]	; 0x30
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
 80082da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	d00a      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082e4:	4b6b      	ldr	r3, [pc, #428]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f4:	4a67      	ldr	r2, [pc, #412]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082f6:	430b      	orrs	r3, r1
 80082f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	2100      	movs	r1, #0
 8008304:	62b9      	str	r1, [r7, #40]	; 0x28
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800830c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008310:	460b      	mov	r3, r1
 8008312:	4313      	orrs	r3, r2
 8008314:	d011      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831a:	3308      	adds	r3, #8
 800831c:	2100      	movs	r1, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f001 fa4a 	bl	80097b8 <RCCEx_PLL2_Config>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	2100      	movs	r1, #0
 8008344:	6239      	str	r1, [r7, #32]
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
 800834c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008350:	460b      	mov	r3, r1
 8008352:	4313      	orrs	r3, r2
 8008354:	d011      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835a:	3308      	adds	r3, #8
 800835c:	2101      	movs	r1, #1
 800835e:	4618      	mov	r0, r3
 8008360:	f001 fa2a 	bl	80097b8 <RCCEx_PLL2_Config>
 8008364:	4603      	mov	r3, r0
 8008366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800836a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800837a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	2100      	movs	r1, #0
 8008384:	61b9      	str	r1, [r7, #24]
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008390:	460b      	mov	r3, r1
 8008392:	4313      	orrs	r3, r2
 8008394:	d011      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800839a:	3308      	adds	r3, #8
 800839c:	2102      	movs	r1, #2
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fa0a 	bl	80097b8 <RCCEx_PLL2_Config>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80083aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c2:	2100      	movs	r1, #0
 80083c4:	6139      	str	r1, [r7, #16]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	617b      	str	r3, [r7, #20]
 80083cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083d0:	460b      	mov	r3, r1
 80083d2:	4313      	orrs	r3, r2
 80083d4:	d011      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083da:	3328      	adds	r3, #40	; 0x28
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f001 fa9c 	bl	800991c <RCCEx_PLL3_Config>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80083ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	2100      	movs	r1, #0
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	60fb      	str	r3, [r7, #12]
 800840c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008410:	460b      	mov	r3, r1
 8008412:	4313      	orrs	r3, r2
 8008414:	d011      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841a:	3328      	adds	r3, #40	; 0x28
 800841c:	2101      	movs	r1, #1
 800841e:	4618      	mov	r0, r3
 8008420:	f001 fa7c 	bl	800991c <RCCEx_PLL3_Config>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800842a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800843a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	2100      	movs	r1, #0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	607b      	str	r3, [r7, #4]
 800844c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008450:	460b      	mov	r3, r1
 8008452:	4313      	orrs	r3, r2
 8008454:	d011      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800845a:	3328      	adds	r3, #40	; 0x28
 800845c:	2102      	movs	r1, #2
 800845e:	4618      	mov	r0, r3
 8008460:	f001 fa5c 	bl	800991c <RCCEx_PLL3_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800846a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800847a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800847e:	2b00      	cmp	r3, #0
 8008480:	d101      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	e000      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
}
 8008488:	4618      	mov	r0, r3
 800848a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800848e:	46bd      	mov	sp, r7
 8008490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008494:	58024400 	.word	0x58024400

08008498 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b090      	sub	sp, #64	; 0x40
 800849c:	af00      	add	r7, sp, #0
 800849e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80084a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80084aa:	430b      	orrs	r3, r1
 80084ac:	f040 8094 	bne.w	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80084b0:	4b9e      	ldr	r3, [pc, #632]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	2b04      	cmp	r3, #4
 80084be:	f200 8087 	bhi.w	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80084c2:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	08008505 	.word	0x08008505
 80084d0:	0800852d 	.word	0x0800852d
 80084d4:	080085c9 	.word	0x080085c9
 80084d8:	08008555 	.word	0x08008555
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084dc:	4b93      	ldr	r3, [pc, #588]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084e8:	d108      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 f810 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	f000 bd45 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008500:	f000 bd41 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008504:	4b89      	ldr	r3, [pc, #548]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800850c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008510:	d108      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008512:	f107 0318 	add.w	r3, r7, #24
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fd54 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008520:	f000 bd31 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008528:	f000 bd2d 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800852c:	4b7f      	ldr	r3, [pc, #508]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008538:	d108      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853a:	f107 030c 	add.w	r3, r7, #12
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fe94 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008548:	f000 bd1d 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008550:	f000 bd19 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008554:	4b75      	ldr	r3, [pc, #468]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800855c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800855e:	4b73      	ldr	r3, [pc, #460]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b04      	cmp	r3, #4
 8008568:	d10c      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800856a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856c:	2b00      	cmp	r3, #0
 800856e:	d109      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008570:	4b6e      	ldr	r3, [pc, #440]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	08db      	lsrs	r3, r3, #3
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	4a6d      	ldr	r2, [pc, #436]	; (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008582:	e01f      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008584:	4b69      	ldr	r3, [pc, #420]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008590:	d106      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008598:	d102      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800859a:	4b66      	ldr	r3, [pc, #408]	; (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800859c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800859e:	e011      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085a0:	4b62      	ldr	r3, [pc, #392]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ac:	d106      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80085ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b4:	d102      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085b6:	4b60      	ldr	r3, [pc, #384]	; (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085ba:	e003      	b.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085c0:	f000 bce1 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085c4:	f000 bcdf 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085c8:	4b5c      	ldr	r3, [pc, #368]	; (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085cc:	f000 bcdb 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d4:	f000 bcd7 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80085d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085dc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80085e0:	430b      	orrs	r3, r1
 80085e2:	f040 80ad 	bne.w	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80085e6:	4b51      	ldr	r3, [pc, #324]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80085ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f6:	d056      	beq.n	80086a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fe:	f200 8090 	bhi.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2bc0      	cmp	r3, #192	; 0xc0
 8008606:	f000 8088 	beq.w	800871a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	2bc0      	cmp	r3, #192	; 0xc0
 800860e:	f200 8088 	bhi.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d032      	beq.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	2b80      	cmp	r3, #128	; 0x80
 800861c:	f200 8081 	bhi.w	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	d014      	beq.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800862c:	e079      	b.n	8008722 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800862e:	4b3f      	ldr	r3, [pc, #252]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800863a:	d108      	bne.n	800864e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008640:	4618      	mov	r0, r3
 8008642:	f000 ff67 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800864a:	f000 bc9c 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008652:	f000 bc98 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008656:	4b35      	ldr	r3, [pc, #212]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800865e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008662:	d108      	bne.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008664:	f107 0318 	add.w	r3, r7, #24
 8008668:	4618      	mov	r0, r3
 800866a:	f000 fcab 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008672:	f000 bc88 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800867a:	f000 bc84 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800867e:	4b2b      	ldr	r3, [pc, #172]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800868a:	d108      	bne.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fdeb 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800869a:	f000 bc74 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a2:	f000 bc70 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086a6:	4b21      	ldr	r3, [pc, #132]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086b0:	4b1e      	ldr	r3, [pc, #120]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d10c      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80086bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d109      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c2:	4b1a      	ldr	r3, [pc, #104]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	08db      	lsrs	r3, r3, #3
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	4a18      	ldr	r2, [pc, #96]	; (8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086ce:	fa22 f303 	lsr.w	r3, r2, r3
 80086d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d4:	e01f      	b.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d6:	4b15      	ldr	r3, [pc, #84]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e2:	d106      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80086e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086ea:	d102      	bne.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086ec:	4b11      	ldr	r3, [pc, #68]	; (8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f0:	e011      	b.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086f2:	4b0e      	ldr	r3, [pc, #56]	; (800872c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086fe:	d106      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008706:	d102      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008708:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800870c:	e003      	b.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008712:	f000 bc38 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008716:	f000 bc36 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800871a:	4b08      	ldr	r3, [pc, #32]	; (800873c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800871c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871e:	f000 bc32 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008722:	2300      	movs	r3, #0
 8008724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008726:	f000 bc2e 	b.w	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800872a:	bf00      	nop
 800872c:	58024400 	.word	0x58024400
 8008730:	03d09000 	.word	0x03d09000
 8008734:	003d0900 	.word	0x003d0900
 8008738:	007a1200 	.word	0x007a1200
 800873c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008744:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008748:	430b      	orrs	r3, r1
 800874a:	f040 809c 	bne.w	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800874e:	4b9e      	ldr	r3, [pc, #632]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008752:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008756:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800875e:	d054      	beq.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008766:	f200 808b 	bhi.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008770:	f000 8083 	beq.w	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800877a:	f200 8081 	bhi.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800877e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008784:	d02f      	beq.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800878c:	d878      	bhi.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800878e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008790:	2b00      	cmp	r3, #0
 8008792:	d004      	beq.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800879a:	d012      	beq.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800879c:	e070      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800879e:	4b8a      	ldr	r3, [pc, #552]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087aa:	d107      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087b0:	4618      	mov	r0, r3
 80087b2:	f000 feaf 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ba:	e3e4      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087c0:	e3e1      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c2:	4b81      	ldr	r3, [pc, #516]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ce:	d107      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087d0:	f107 0318 	add.w	r3, r7, #24
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fbf5 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087de:	e3d2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e4:	e3cf      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e6:	4b78      	ldr	r3, [pc, #480]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f2:	d107      	bne.n	8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f4:	f107 030c 	add.w	r3, r7, #12
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 fd37 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008802:	e3c0      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008808:	e3bd      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800880a:	4b6f      	ldr	r3, [pc, #444]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800880c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800880e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008812:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008814:	4b6c      	ldr	r3, [pc, #432]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b04      	cmp	r3, #4
 800881e:	d10c      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008822:	2b00      	cmp	r3, #0
 8008824:	d109      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008826:	4b68      	ldr	r3, [pc, #416]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	f003 0303 	and.w	r3, r3, #3
 8008830:	4a66      	ldr	r2, [pc, #408]	; (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008832:	fa22 f303 	lsr.w	r3, r2, r3
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008838:	e01e      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800883a:	4b63      	ldr	r3, [pc, #396]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008846:	d106      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800884e:	d102      	bne.n	8008856 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008850:	4b5f      	ldr	r3, [pc, #380]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008854:	e010      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008856:	4b5c      	ldr	r3, [pc, #368]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008862:	d106      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800886a:	d102      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800886c:	4b59      	ldr	r3, [pc, #356]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008870:	e002      	b.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008876:	e386      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008878:	e385      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800887a:	4b57      	ldr	r3, [pc, #348]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800887c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887e:	e382      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008884:	e37f      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800888a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800888e:	430b      	orrs	r3, r1
 8008890:	f040 80a7 	bne.w	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008894:	4b4c      	ldr	r3, [pc, #304]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008898:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800889c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088a4:	d055      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088ac:	f200 8096 	bhi.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088b6:	f000 8084 	beq.w	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088c0:	f200 808c 	bhi.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ca:	d030      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d2:	f200 8083 	bhi.w	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088e2:	d012      	beq.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80088e4:	e07a      	b.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088e6:	4b38      	ldr	r3, [pc, #224]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088f2:	d107      	bne.n	8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 fe0b 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008902:	e340      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008908:	e33d      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800890a:	4b2f      	ldr	r3, [pc, #188]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008916:	d107      	bne.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008918:	f107 0318 	add.w	r3, r7, #24
 800891c:	4618      	mov	r0, r3
 800891e:	f000 fb51 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008926:	e32e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892c:	e32b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800892e:	4b26      	ldr	r3, [pc, #152]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800893a:	d107      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fc93 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894a:	e31c      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008950:	e319      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008952:	4b1d      	ldr	r3, [pc, #116]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800895a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b04      	cmp	r3, #4
 8008966:	d10c      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896a:	2b00      	cmp	r3, #0
 800896c:	d109      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800896e:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	08db      	lsrs	r3, r3, #3
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	4a14      	ldr	r2, [pc, #80]	; (80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800897a:	fa22 f303 	lsr.w	r3, r2, r3
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008980:	e01e      	b.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008982:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898e:	d106      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008996:	d102      	bne.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008998:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800899c:	e010      	b.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800899e:	4b0a      	ldr	r3, [pc, #40]	; (80089c8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089aa:	d106      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b2:	d102      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089b4:	4b07      	ldr	r3, [pc, #28]	; (80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b8:	e002      	b.n	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089be:	e2e2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089c0:	e2e1      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089c2:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c6:	e2de      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089c8:	58024400 	.word	0x58024400
 80089cc:	03d09000 	.word	0x03d09000
 80089d0:	003d0900 	.word	0x003d0900
 80089d4:	007a1200 	.word	0x007a1200
 80089d8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e0:	e2d1      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80089ea:	430b      	orrs	r3, r1
 80089ec:	f040 809c 	bne.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80089f0:	4b93      	ldr	r3, [pc, #588]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80089f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a00:	d054      	beq.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a08:	f200 808b 	bhi.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a12:	f000 8083 	beq.w	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a1c:	f200 8081 	bhi.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a26:	d02f      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a2e:	d878      	bhi.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3c:	d012      	beq.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a3e:	e070      	b.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a40:	4b7f      	ldr	r3, [pc, #508]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a4c:	d107      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fd5e 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a5c:	e293      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a62:	e290      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a64:	4b76      	ldr	r3, [pc, #472]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a70:	d107      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a72:	f107 0318 	add.w	r3, r7, #24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 faa4 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a80:	e281      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a86:	e27e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a88:	4b6d      	ldr	r3, [pc, #436]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a94:	d107      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a96:	f107 030c 	add.w	r3, r7, #12
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fbe6 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa4:	e26f      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008aaa:	e26c      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aac:	4b64      	ldr	r3, [pc, #400]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ab6:	4b62      	ldr	r3, [pc, #392]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d10c      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d109      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ac8:	4b5d      	ldr	r3, [pc, #372]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	08db      	lsrs	r3, r3, #3
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	4a5c      	ldr	r2, [pc, #368]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ada:	e01e      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008adc:	4b58      	ldr	r3, [pc, #352]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae8:	d106      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008af0:	d102      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008af2:	4b55      	ldr	r3, [pc, #340]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008af6:	e010      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008af8:	4b51      	ldr	r3, [pc, #324]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b04:	d106      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b0c:	d102      	bne.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b0e:	4b4f      	ldr	r3, [pc, #316]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b12:	e002      	b.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b18:	e235      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b1a:	e234      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b1c:	4b4c      	ldr	r3, [pc, #304]	; (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b20:	e231      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b26:	e22e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008b30:	430b      	orrs	r3, r1
 8008b32:	f040 808f 	bne.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b36:	4b42      	ldr	r3, [pc, #264]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b3a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008b3e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b46:	d06b      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b4e:	d874      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b56:	d056      	beq.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b5e:	d86c      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b66:	d03b      	beq.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b6e:	d864      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b76:	d021      	beq.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b7e:	d85c      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d004      	beq.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b8c:	d004      	beq.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008b8e:	e054      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008b90:	f7fe fa4c 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 8008b94:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b96:	e1f6      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b98:	4b29      	ldr	r3, [pc, #164]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ba4:	d107      	bne.n	8008bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ba6:	f107 0318 	add.w	r3, r7, #24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fa0a 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb4:	e1e7      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bba:	e1e4      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bbc:	4b20      	ldr	r3, [pc, #128]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bc8:	d107      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bca:	f107 030c 	add.w	r3, r7, #12
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fb4c 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd8:	e1d5      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bde:	e1d2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008be0:	4b17      	ldr	r3, [pc, #92]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d109      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bec:	4b14      	ldr	r3, [pc, #80]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	08db      	lsrs	r3, r3, #3
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	4a13      	ldr	r2, [pc, #76]	; (8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfe:	e1c2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c04:	e1bf      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c06:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c12:	d102      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c18:	e1b5      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c1e:	e1b2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c20:	4b07      	ldr	r3, [pc, #28]	; (8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c2c:	d102      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008c2e:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c32:	e1a8      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c38:	e1a5      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c3e:	e1a2      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c40:	58024400 	.word	0x58024400
 8008c44:	03d09000 	.word	0x03d09000
 8008c48:	003d0900 	.word	0x003d0900
 8008c4c:	007a1200 	.word	0x007a1200
 8008c50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c58:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	d173      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c60:	4b9c      	ldr	r3, [pc, #624]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c70:	d02f      	beq.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c78:	d863      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d004      	beq.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c86:	d012      	beq.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008c88:	e05b      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c8a:	4b92      	ldr	r3, [pc, #584]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c96:	d107      	bne.n	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c98:	f107 0318 	add.w	r3, r7, #24
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 f991 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ca6:	e16e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cac:	e16b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cae:	4b89      	ldr	r3, [pc, #548]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cba:	d107      	bne.n	8008ccc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cbc:	f107 030c 	add.w	r3, r7, #12
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 fad3 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cca:	e15c      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd0:	e159      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cd2:	4b80      	ldr	r3, [pc, #512]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cdc:	4b7d      	ldr	r3, [pc, #500]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0304 	and.w	r3, r3, #4
 8008ce4:	2b04      	cmp	r3, #4
 8008ce6:	d10c      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cee:	4b79      	ldr	r3, [pc, #484]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	08db      	lsrs	r3, r3, #3
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	4a77      	ldr	r2, [pc, #476]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d00:	e01e      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d02:	4b74      	ldr	r3, [pc, #464]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0e:	d106      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d16:	d102      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d18:	4b70      	ldr	r3, [pc, #448]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d1c:	e010      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d1e:	4b6d      	ldr	r3, [pc, #436]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d2a:	d106      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d32:	d102      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d34:	4b6a      	ldr	r3, [pc, #424]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d38:	e002      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d3e:	e122      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d40:	e121      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d46:	e11e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d4c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008d50:	430b      	orrs	r3, r1
 8008d52:	d133      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d54:	4b5f      	ldr	r3, [pc, #380]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d004      	beq.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6a:	d012      	beq.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008d6c:	e023      	b.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d6e:	4b59      	ldr	r3, [pc, #356]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d7a:	d107      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fbc7 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d8a:	e0fc      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d90:	e0f9      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d92:	4b50      	ldr	r3, [pc, #320]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d9e:	d107      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da0:	f107 0318 	add.w	r3, r7, #24
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 f90d 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dae:	e0ea      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008db4:	e0e7      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dba:	e0e4      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dc0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	f040 808d 	bne.w	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008dca:	4b42      	ldr	r3, [pc, #264]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008dd2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dda:	d06b      	beq.n	8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008de2:	d874      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dea:	d056      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df2:	d86c      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dfa:	d03b      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e02:	d864      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e0a:	d021      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e12:	d85c      	bhi.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e20:	d004      	beq.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008e22:	e054      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e24:	f000 f8b8 	bl	8008f98 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e28:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e2a:	e0ac      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e2c:	4b29      	ldr	r3, [pc, #164]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e3a:	f107 0318 	add.w	r3, r7, #24
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f8c0 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e48:	e09d      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e4e:	e09a      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e50:	4b20      	ldr	r3, [pc, #128]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5c:	d107      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5e:	f107 030c 	add.w	r3, r7, #12
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 fa02 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6c:	e08b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e72:	e088      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e74:	4b17      	ldr	r3, [pc, #92]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d109      	bne.n	8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e80:	4b14      	ldr	r3, [pc, #80]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	08db      	lsrs	r3, r3, #3
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e92:	e078      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e98:	e075      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ea6:	d102      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eac:	e06b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb2:	e068      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008eb4:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec0:	d102      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008ec2:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec6:	e05e      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ecc:	e05b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ed2:	e058      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ed4:	58024400 	.word	0x58024400
 8008ed8:	03d09000 	.word	0x03d09000
 8008edc:	003d0900 	.word	0x003d0900
 8008ee0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ee8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008eec:	430b      	orrs	r3, r1
 8008eee:	d148      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ef0:	4b27      	ldr	r3, [pc, #156]	; (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ef8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f00:	d02a      	beq.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f08:	d838      	bhi.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d004      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f16:	d00d      	beq.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008f18:	e030      	b.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f1a:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f26:	d102      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008f28:	4b1a      	ldr	r3, [pc, #104]	; (8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f2c:	e02b      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f32:	e028      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f34:	4b16      	ldr	r3, [pc, #88]	; (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f40:	d107      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fae4 	bl	8009514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f50:	e019      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f56:	e016      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f58:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f64:	d107      	bne.n	8008f76 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f66:	f107 0318 	add.w	r3, r7, #24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 f82a 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f74:	e007      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f76:	2300      	movs	r3, #0
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f7a:	e004      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f80:	e001      	b.n	8008f86 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f82:	2300      	movs	r3, #0
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3740      	adds	r7, #64	; 0x40
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	58024400 	.word	0x58024400
 8008f94:	007a1200 	.word	0x007a1200

08008f98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f9c:	f7fe f816 	bl	8006fcc <HAL_RCC_GetHCLKFreq>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	091b      	lsrs	r3, r3, #4
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	4904      	ldr	r1, [pc, #16]	; (8008fc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008fae:	5ccb      	ldrb	r3, [r1, r3]
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	0800c06c 	.word	0x0800c06c

08008fc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b089      	sub	sp, #36	; 0x24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fcc:	4ba1      	ldr	r3, [pc, #644]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	f003 0303 	and.w	r3, r3, #3
 8008fd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fd6:	4b9f      	ldr	r3, [pc, #636]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	0b1b      	lsrs	r3, r3, #12
 8008fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fe0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fe2:	4b9c      	ldr	r3, [pc, #624]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008fee:	4b99      	ldr	r3, [pc, #612]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	08db      	lsrs	r3, r3, #3
 8008ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8111 	beq.w	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f000 8083 	beq.w	8009120 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b02      	cmp	r3, #2
 800901e:	f200 80a1 	bhi.w	8009164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d003      	beq.n	8009030 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d056      	beq.n	80090dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800902e:	e099      	b.n	8009164 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009030:	4b88      	ldr	r3, [pc, #544]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d02d      	beq.n	8009098 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800903c:	4b85      	ldr	r3, [pc, #532]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	08db      	lsrs	r3, r3, #3
 8009042:	f003 0303 	and.w	r3, r3, #3
 8009046:	4a84      	ldr	r2, [pc, #528]	; (8009258 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009048:	fa22 f303 	lsr.w	r3, r2, r3
 800904c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	ee07 3a90 	vmov	s15, r3
 8009054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009066:	4b7b      	ldr	r3, [pc, #492]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906e:	ee07 3a90 	vmov	s15, r3
 8009072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009076:	ed97 6a03 	vldr	s12, [r7, #12]
 800907a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800907e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800908a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800908e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009096:	e087      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009260 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090aa:	4b6a      	ldr	r3, [pc, #424]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80090be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090da:	e065      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ee:	4b59      	ldr	r3, [pc, #356]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009102:	eddf 5a56 	vldr	s11, [pc, #344]	; 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800910a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800910e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800911a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800911e:	e043      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800912a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009268 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800912e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009132:	4b48      	ldr	r3, [pc, #288]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009142:	ed97 6a03 	vldr	s12, [r7, #12]
 8009146:	eddf 5a45 	vldr	s11, [pc, #276]	; 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800914a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800914e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800915e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009162:	e021      	b.n	80091a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800916e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009176:	4b37      	ldr	r3, [pc, #220]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009186:	ed97 6a03 	vldr	s12, [r7, #12]
 800918a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800925c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800918e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800919e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80091a8:	4b2a      	ldr	r3, [pc, #168]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	0a5b      	lsrs	r3, r3, #9
 80091ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80091c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091ce:	ee17 2a90 	vmov	r2, s15
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091d6:	4b1f      	ldr	r3, [pc, #124]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	0c1b      	lsrs	r3, r3, #16
 80091dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e0:	ee07 3a90 	vmov	s15, r3
 80091e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091fc:	ee17 2a90 	vmov	r2, s15
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009204:	4b13      	ldr	r3, [pc, #76]	; (8009254 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	0e1b      	lsrs	r3, r3, #24
 800920a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800921a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800921e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800922a:	ee17 2a90 	vmov	r2, s15
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009232:	e008      	b.n	8009246 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	609a      	str	r2, [r3, #8]
}
 8009246:	bf00      	nop
 8009248:	3724      	adds	r7, #36	; 0x24
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	58024400 	.word	0x58024400
 8009258:	03d09000 	.word	0x03d09000
 800925c:	46000000 	.word	0x46000000
 8009260:	4c742400 	.word	0x4c742400
 8009264:	4a742400 	.word	0x4a742400
 8009268:	4af42400 	.word	0x4af42400

0800926c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800926c:	b480      	push	{r7}
 800926e:	b089      	sub	sp, #36	; 0x24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009274:	4ba1      	ldr	r3, [pc, #644]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009278:	f003 0303 	and.w	r3, r3, #3
 800927c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800927e:	4b9f      	ldr	r3, [pc, #636]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009282:	0d1b      	lsrs	r3, r3, #20
 8009284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009288:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800928a:	4b9c      	ldr	r3, [pc, #624]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	0a1b      	lsrs	r3, r3, #8
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009296:	4b99      	ldr	r3, [pc, #612]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929a:	08db      	lsrs	r3, r3, #3
 800929c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	fb02 f303 	mul.w	r3, r2, r3
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 8111 	beq.w	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	f000 8083 	beq.w	80093c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f200 80a1 	bhi.w	800940c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d056      	beq.n	8009384 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092d6:	e099      	b.n	800940c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092d8:	4b88      	ldr	r3, [pc, #544]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0320 	and.w	r3, r3, #32
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d02d      	beq.n	8009340 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092e4:	4b85      	ldr	r3, [pc, #532]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	08db      	lsrs	r3, r3, #3
 80092ea:	f003 0303 	and.w	r3, r3, #3
 80092ee:	4a84      	ldr	r2, [pc, #528]	; (8009500 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	ee07 3a90 	vmov	s15, r3
 8009306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b7b      	ldr	r3, [pc, #492]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009322:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800933e:	e087      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009508 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b6a      	ldr	r3, [pc, #424]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a03 	vldr	s12, [r7, #12]
 8009366:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009382:	e065      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800950c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009396:	4b59      	ldr	r3, [pc, #356]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093c6:	e043      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009510 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093da:	4b48      	ldr	r3, [pc, #288]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800940a:	e021      	b.n	8009450 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009416:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800950c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800941a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800941e:	4b37      	ldr	r3, [pc, #220]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800942e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009432:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009504 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800943e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800944e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009450:	4b2a      	ldr	r3, [pc, #168]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	0a5b      	lsrs	r3, r3, #9
 8009456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009466:	ee37 7a87 	vadd.f32	s14, s15, s14
 800946a:	edd7 6a07 	vldr	s13, [r7, #28]
 800946e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009476:	ee17 2a90 	vmov	r2, s15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800947e:	4b1f      	ldr	r3, [pc, #124]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009488:	ee07 3a90 	vmov	s15, r3
 800948c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009494:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009498:	edd7 6a07 	vldr	s13, [r7, #28]
 800949c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094a4:	ee17 2a90 	vmov	r2, s15
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80094ac:	4b13      	ldr	r3, [pc, #76]	; (80094fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b0:	0e1b      	lsrs	r3, r3, #24
 80094b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80094ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094d2:	ee17 2a90 	vmov	r2, s15
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094da:	e008      	b.n	80094ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	609a      	str	r2, [r3, #8]
}
 80094ee:	bf00      	nop
 80094f0:	3724      	adds	r7, #36	; 0x24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	58024400 	.word	0x58024400
 8009500:	03d09000 	.word	0x03d09000
 8009504:	46000000 	.word	0x46000000
 8009508:	4c742400 	.word	0x4c742400
 800950c:	4a742400 	.word	0x4a742400
 8009510:	4af42400 	.word	0x4af42400

08009514 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009514:	b480      	push	{r7}
 8009516:	b089      	sub	sp, #36	; 0x24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800951c:	4ba0      	ldr	r3, [pc, #640]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800951e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009520:	f003 0303 	and.w	r3, r3, #3
 8009524:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009526:	4b9e      	ldr	r3, [pc, #632]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	091b      	lsrs	r3, r3, #4
 800952c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009530:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009532:	4b9b      	ldr	r3, [pc, #620]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	f003 0301 	and.w	r3, r3, #1
 800953a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800953c:	4b98      	ldr	r3, [pc, #608]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800953e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009540:	08db      	lsrs	r3, r3, #3
 8009542:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	fb02 f303 	mul.w	r3, r2, r3
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009554:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 8111 	beq.w	8009782 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	2b02      	cmp	r3, #2
 8009564:	f000 8083 	beq.w	800966e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	2b02      	cmp	r3, #2
 800956c:	f200 80a1 	bhi.w	80096b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d003      	beq.n	800957e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b01      	cmp	r3, #1
 800957a:	d056      	beq.n	800962a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800957c:	e099      	b.n	80096b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800957e:	4b88      	ldr	r3, [pc, #544]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d02d      	beq.n	80095e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800958a:	4b85      	ldr	r3, [pc, #532]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	08db      	lsrs	r3, r3, #3
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	4a83      	ldr	r2, [pc, #524]	; (80097a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009596:	fa22 f303 	lsr.w	r3, r2, r3
 800959a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	ee07 3a90 	vmov	s15, r3
 80095a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b4:	4b7a      	ldr	r3, [pc, #488]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80095c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095e4:	e087      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	ee07 3a90 	vmov	s15, r3
 80095ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80097ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095f8:	4b69      	ldr	r3, [pc, #420]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009608:	ed97 6a03 	vldr	s12, [r7, #12]
 800960c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009624:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009628:	e065      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009634:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80097b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963c:	4b58      	ldr	r3, [pc, #352]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009644:	ee07 3a90 	vmov	s15, r3
 8009648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009650:	eddf 5a55 	vldr	s11, [pc, #340]	; 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009668:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800966c:	e043      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	ee07 3a90 	vmov	s15, r3
 8009674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009678:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80097b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800967c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009680:	4b47      	ldr	r3, [pc, #284]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009690:	ed97 6a03 	vldr	s12, [r7, #12]
 8009694:	eddf 5a44 	vldr	s11, [pc, #272]	; 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009698:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096b0:	e021      	b.n	80096f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	ee07 3a90 	vmov	s15, r3
 80096b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80097ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c4:	4b36      	ldr	r3, [pc, #216]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80097a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80096f6:	4b2a      	ldr	r3, [pc, #168]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fa:	0a5b      	lsrs	r3, r3, #9
 80096fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009708:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800970c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009710:	edd7 6a07 	vldr	s13, [r7, #28]
 8009714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800971c:	ee17 2a90 	vmov	r2, s15
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009724:	4b1e      	ldr	r3, [pc, #120]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	0c1b      	lsrs	r3, r3, #16
 800972a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972e:	ee07 3a90 	vmov	s15, r3
 8009732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800973a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800973e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800974a:	ee17 2a90 	vmov	r2, s15
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009752:	4b13      	ldr	r3, [pc, #76]	; (80097a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800975c:	ee07 3a90 	vmov	s15, r3
 8009760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800976c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009778:	ee17 2a90 	vmov	r2, s15
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009780:	e008      	b.n	8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	609a      	str	r2, [r3, #8]
}
 8009794:	bf00      	nop
 8009796:	3724      	adds	r7, #36	; 0x24
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	58024400 	.word	0x58024400
 80097a4:	03d09000 	.word	0x03d09000
 80097a8:	46000000 	.word	0x46000000
 80097ac:	4c742400 	.word	0x4c742400
 80097b0:	4a742400 	.word	0x4a742400
 80097b4:	4af42400 	.word	0x4af42400

080097b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097c6:	4b53      	ldr	r3, [pc, #332]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d101      	bne.n	80097d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e099      	b.n	800990a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097d6:	4b4f      	ldr	r3, [pc, #316]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a4e      	ldr	r2, [pc, #312]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097e2:	f7f7 ff83 	bl	80016ec <HAL_GetTick>
 80097e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097e8:	e008      	b.n	80097fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097ea:	f7f7 ff7f 	bl	80016ec <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d901      	bls.n	80097fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e086      	b.n	800990a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097fc:	4b45      	ldr	r3, [pc, #276]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1f0      	bne.n	80097ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009808:	4b42      	ldr	r3, [pc, #264]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	493f      	ldr	r1, [pc, #252]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009818:	4313      	orrs	r3, r2
 800981a:	628b      	str	r3, [r1, #40]	; 0x28
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	3b01      	subs	r3, #1
 8009822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	3b01      	subs	r3, #1
 800982c:	025b      	lsls	r3, r3, #9
 800982e:	b29b      	uxth	r3, r3
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	3b01      	subs	r3, #1
 8009838:	041b      	lsls	r3, r3, #16
 800983a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	3b01      	subs	r3, #1
 8009846:	061b      	lsls	r3, r3, #24
 8009848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800984c:	4931      	ldr	r1, [pc, #196]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 800984e:	4313      	orrs	r3, r2
 8009850:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009852:	4b30      	ldr	r3, [pc, #192]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	492d      	ldr	r1, [pc, #180]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009860:	4313      	orrs	r3, r2
 8009862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009864:	4b2b      	ldr	r3, [pc, #172]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	f023 0220 	bic.w	r2, r3, #32
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	4928      	ldr	r1, [pc, #160]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009872:	4313      	orrs	r3, r2
 8009874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009876:	4b27      	ldr	r3, [pc, #156]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	4a26      	ldr	r2, [pc, #152]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 800987c:	f023 0310 	bic.w	r3, r3, #16
 8009880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009882:	4b24      	ldr	r3, [pc, #144]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009886:	4b24      	ldr	r3, [pc, #144]	; (8009918 <RCCEx_PLL2_Config+0x160>)
 8009888:	4013      	ands	r3, r2
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	69d2      	ldr	r2, [r2, #28]
 800988e:	00d2      	lsls	r2, r2, #3
 8009890:	4920      	ldr	r1, [pc, #128]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009892:	4313      	orrs	r3, r2
 8009894:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009896:	4b1f      	ldr	r3, [pc, #124]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 8009898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989a:	4a1e      	ldr	r2, [pc, #120]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 800989c:	f043 0310 	orr.w	r3, r3, #16
 80098a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098a8:	4b1a      	ldr	r3, [pc, #104]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	4a19      	ldr	r2, [pc, #100]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098b4:	e00f      	b.n	80098d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d106      	bne.n	80098ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098bc:	4b15      	ldr	r3, [pc, #84]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	4a14      	ldr	r2, [pc, #80]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098c8:	e005      	b.n	80098d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	4a11      	ldr	r2, [pc, #68]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098d6:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a0e      	ldr	r2, [pc, #56]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098e2:	f7f7 ff03 	bl	80016ec <HAL_GetTick>
 80098e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098e8:	e008      	b.n	80098fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098ea:	f7f7 feff 	bl	80016ec <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e006      	b.n	800990a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <RCCEx_PLL2_Config+0x15c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0f0      	beq.n	80098ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	58024400 	.word	0x58024400
 8009918:	ffff0007 	.word	0xffff0007

0800991c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800992a:	4b53      	ldr	r3, [pc, #332]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b03      	cmp	r3, #3
 8009934:	d101      	bne.n	800993a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e099      	b.n	8009a6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800993a:	4b4f      	ldr	r3, [pc, #316]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a4e      	ldr	r2, [pc, #312]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009946:	f7f7 fed1 	bl	80016ec <HAL_GetTick>
 800994a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800994c:	e008      	b.n	8009960 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800994e:	f7f7 fecd 	bl	80016ec <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e086      	b.n	8009a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009960:	4b45      	ldr	r3, [pc, #276]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f0      	bne.n	800994e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800996c:	4b42      	ldr	r3, [pc, #264]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	051b      	lsls	r3, r3, #20
 800997a:	493f      	ldr	r1, [pc, #252]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 800997c:	4313      	orrs	r3, r2
 800997e:	628b      	str	r3, [r1, #40]	; 0x28
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	3b01      	subs	r3, #1
 8009990:	025b      	lsls	r3, r3, #9
 8009992:	b29b      	uxth	r3, r3
 8009994:	431a      	orrs	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	3b01      	subs	r3, #1
 800999c:	041b      	lsls	r3, r3, #16
 800999e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	3b01      	subs	r3, #1
 80099aa:	061b      	lsls	r3, r3, #24
 80099ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099b0:	4931      	ldr	r1, [pc, #196]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099b6:	4b30      	ldr	r3, [pc, #192]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	492d      	ldr	r1, [pc, #180]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099c8:	4b2b      	ldr	r3, [pc, #172]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	4928      	ldr	r1, [pc, #160]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099d6:	4313      	orrs	r3, r2
 80099d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099da:	4b27      	ldr	r3, [pc, #156]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099de:	4a26      	ldr	r2, [pc, #152]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099e6:	4b24      	ldr	r3, [pc, #144]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099ea:	4b24      	ldr	r3, [pc, #144]	; (8009a7c <RCCEx_PLL3_Config+0x160>)
 80099ec:	4013      	ands	r3, r2
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	69d2      	ldr	r2, [r2, #28]
 80099f2:	00d2      	lsls	r2, r2, #3
 80099f4:	4920      	ldr	r1, [pc, #128]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099fa:	4b1f      	ldr	r3, [pc, #124]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fe:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d106      	bne.n	8009a1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a0c:	4b1a      	ldr	r3, [pc, #104]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a18:	e00f      	b.n	8009a3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d106      	bne.n	8009a2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a20:	4b15      	ldr	r3, [pc, #84]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a24:	4a14      	ldr	r2, [pc, #80]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a2c:	e005      	b.n	8009a3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a2e:	4b12      	ldr	r3, [pc, #72]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	4a11      	ldr	r2, [pc, #68]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a3a:	4b0f      	ldr	r3, [pc, #60]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a0e      	ldr	r2, [pc, #56]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a46:	f7f7 fe51 	bl	80016ec <HAL_GetTick>
 8009a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a4c:	e008      	b.n	8009a60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a4e:	f7f7 fe4d 	bl	80016ec <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e006      	b.n	8009a6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <RCCEx_PLL3_Config+0x15c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0f0      	beq.n	8009a4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	58024400 	.word	0x58024400
 8009a7c:	ffff0007 	.word	0xffff0007

08009a80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d071      	beq.n	8009b76 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d106      	bne.n	8009aac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7f7 fbca 	bl	8001240 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2202      	movs	r2, #2
 8009ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	f003 0310 	and.w	r3, r3, #16
 8009abe:	2b10      	cmp	r3, #16
 8009ac0:	d050      	beq.n	8009b64 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	22ca      	movs	r2, #202	; 0xca
 8009ac8:	625a      	str	r2, [r3, #36]	; 0x24
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2253      	movs	r2, #83	; 0x53
 8009ad0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f9a0 	bl	8009e18 <RTC_EnterInitMode>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d124      	bne.n	8009b2c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6899      	ldr	r1, [r3, #8]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	4b24      	ldr	r3, [pc, #144]	; (8009b80 <HAL_RTC_Init+0x100>)
 8009aee:	400b      	ands	r3, r1
 8009af0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6899      	ldr	r1, [r3, #8]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	431a      	orrs	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	0419      	lsls	r1, r3, #16
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f9ac 	bl	8009e80 <RTC_ExitInitMode>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d113      	bne.n	8009b5a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 0203 	bic.w	r2, r2, #3
 8009b40:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	431a      	orrs	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	430a      	orrs	r2, r1
 8009b58:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	22ff      	movs	r2, #255	; 0xff
 8009b60:	625a      	str	r2, [r3, #36]	; 0x24
 8009b62:	e001      	b.n	8009b68 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009b64:	2300      	movs	r3, #0
 8009b66:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	ff8fffbf 	.word	0xff8fffbf

08009b84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b84:	b590      	push	{r4, r7, lr}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_RTC_SetTime+0x1a>
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e089      	b.n	8009cb2 <HAL_RTC_SetTime+0x12e>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	22ca      	movs	r2, #202	; 0xca
 8009bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2253      	movs	r2, #83	; 0x53
 8009bbc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f92a 	bl	8009e18 <RTC_EnterInitMode>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009bc8:	7cfb      	ldrb	r3, [r7, #19]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d161      	bne.n	8009c92 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d126      	bne.n	8009c22 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f985 	bl	8009efc <RTC_ByteToBcd2>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f97e 	bl	8009efc <RTC_ByteToBcd2>
 8009c00:	4603      	mov	r3, r0
 8009c02:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c04:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	789b      	ldrb	r3, [r3, #2]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 f976 	bl	8009efc <RTC_ByteToBcd2>
 8009c10:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c12:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	78db      	ldrb	r3, [r3, #3]
 8009c1a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	e018      	b.n	8009c54 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d102      	bne.n	8009c36 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2200      	movs	r2, #0
 8009c34:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	785b      	ldrb	r3, [r3, #1]
 8009c40:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c42:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009c44:	68ba      	ldr	r2, [r7, #8]
 8009c46:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009c48:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	78db      	ldrb	r3, [r3, #3]
 8009c4e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009c50:	4313      	orrs	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	6979      	ldr	r1, [r7, #20]
 8009c5a:	4b18      	ldr	r3, [pc, #96]	; (8009cbc <HAL_RTC_SetTime+0x138>)
 8009c5c:	400b      	ands	r3, r1
 8009c5e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689a      	ldr	r2, [r3, #8]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c6e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6899      	ldr	r1, [r3, #8]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	68da      	ldr	r2, [r3, #12]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f8f9 	bl	8009e80 <RTC_ExitInitMode>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	22ff      	movs	r2, #255	; 0xff
 8009c98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009c9a:	7cfb      	ldrb	r3, [r7, #19]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009cb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd90      	pop	{r4, r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	007f7f7f 	.word	0x007f7f7f

08009cc0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009cc0:	b590      	push	{r4, r7, lr}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d101      	bne.n	8009cda <HAL_RTC_SetDate+0x1a>
 8009cd6:	2302      	movs	r3, #2
 8009cd8:	e073      	b.n	8009dc2 <HAL_RTC_SetDate+0x102>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10e      	bne.n	8009d0e <HAL_RTC_SetDate+0x4e>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	785b      	ldrb	r3, [r3, #1]
 8009cf4:	f003 0310 	and.w	r3, r3, #16
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d008      	beq.n	8009d0e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	f023 0310 	bic.w	r3, r3, #16
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	330a      	adds	r3, #10
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d11c      	bne.n	8009d4e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	78db      	ldrb	r3, [r3, #3]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 f8ef 	bl	8009efc <RTC_ByteToBcd2>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f8e8 	bl	8009efc <RTC_ByteToBcd2>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d30:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	789b      	ldrb	r3, [r3, #2]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f8e0 	bl	8009efc <RTC_ByteToBcd2>
 8009d3c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009d3e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	e00e      	b.n	8009d6c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	78db      	ldrb	r3, [r3, #3]
 8009d52:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	785b      	ldrb	r3, [r3, #1]
 8009d58:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d5a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009d60:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	22ca      	movs	r2, #202	; 0xca
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2253      	movs	r2, #83	; 0x53
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f84b 	bl	8009e18 <RTC_EnterInitMode>
 8009d82:	4603      	mov	r3, r0
 8009d84:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009d86:	7cfb      	ldrb	r3, [r7, #19]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	6979      	ldr	r1, [r7, #20]
 8009d92:	4b0e      	ldr	r3, [pc, #56]	; (8009dcc <HAL_RTC_SetDate+0x10c>)
 8009d94:	400b      	ands	r3, r1
 8009d96:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 f871 	bl	8009e80 <RTC_ExitInitMode>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	22ff      	movs	r2, #255	; 0xff
 8009da8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009daa:	7cfb      	ldrb	r3, [r7, #19]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d103      	bne.n	8009db8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009dc0:	7cfb      	ldrb	r3, [r7, #19]


}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	371c      	adds	r7, #28
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd90      	pop	{r4, r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	00ffff3f 	.word	0x00ffff3f

08009dd0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a0d      	ldr	r2, [pc, #52]	; (8009e14 <HAL_RTC_WaitForSynchro+0x44>)
 8009dde:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009de0:	f7f7 fc84 	bl	80016ec <HAL_GetTick>
 8009de4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009de6:	e009      	b.n	8009dfc <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009de8:	f7f7 fc80 	bl	80016ec <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009df6:	d901      	bls.n	8009dfc <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e007      	b.n	8009e0c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0ee      	beq.n	8009de8 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	0003ff5f 	.word	0x0003ff5f

08009e18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d120      	bne.n	8009e74 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e3c:	f7f7 fc56 	bl	80016ec <HAL_GetTick>
 8009e40:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e42:	e00d      	b.n	8009e60 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e44:	f7f7 fc52 	bl	80016ec <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e52:	d905      	bls.n	8009e60 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d102      	bne.n	8009e74 <RTC_EnterInitMode+0x5c>
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d1e7      	bne.n	8009e44 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009e8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <RTC_ExitInitMode+0x78>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	4a19      	ldr	r2, [pc, #100]	; (8009ef8 <RTC_ExitInitMode+0x78>)
 8009e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e96:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009e98:	4b17      	ldr	r3, [pc, #92]	; (8009ef8 <RTC_ExitInitMode+0x78>)
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f003 0320 	and.w	r3, r3, #32
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10c      	bne.n	8009ebe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f7ff ff93 	bl	8009dd0 <HAL_RTC_WaitForSynchro>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d01e      	beq.n	8009eee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	73fb      	strb	r3, [r7, #15]
 8009ebc:	e017      	b.n	8009eee <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <RTC_ExitInitMode+0x78>)
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	4a0d      	ldr	r2, [pc, #52]	; (8009ef8 <RTC_ExitInitMode+0x78>)
 8009ec4:	f023 0320 	bic.w	r3, r3, #32
 8009ec8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7ff ff80 	bl	8009dd0 <HAL_RTC_WaitForSynchro>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d005      	beq.n	8009ee2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2203      	movs	r2, #3
 8009eda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ee2:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <RTC_ExitInitMode+0x78>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	4a04      	ldr	r2, [pc, #16]	; (8009ef8 <RTC_ExitInitMode+0x78>)
 8009ee8:	f043 0320 	orr.w	r3, r3, #32
 8009eec:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	58004000 	.word	0x58004000

08009efc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009f0a:	79fb      	ldrb	r3, [r7, #7]
 8009f0c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009f0e:	e005      	b.n	8009f1c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8009f16:	7afb      	ldrb	r3, [r7, #11]
 8009f18:	3b0a      	subs	r3, #10
 8009f1a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	2b09      	cmp	r3, #9
 8009f20:	d8f6      	bhi.n	8009f10 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	011b      	lsls	r3, r3, #4
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	7afb      	ldrb	r3, [r7, #11]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	b2db      	uxtb	r3, r3
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d101      	bne.n	8009f54 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8009f50:	2302      	movs	r3, #2
 8009f52:	e034      	b.n	8009fbe <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	22ca      	movs	r2, #202	; 0xca
 8009f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	2253      	movs	r2, #83	; 0x53
 8009f72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689a      	ldr	r2, [r3, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8009f82:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6899      	ldr	r1, [r3, #8]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	689a      	ldr	r2, [r3, #8]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009fa2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	22ff      	movs	r2, #255	; 0xff
 8009faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e042      	b.n	800a062 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7f7 f986 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2224      	movs	r2, #36	; 0x24
 8009ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f022 0201 	bic.w	r2, r2, #1
 800a00a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fc07 	bl	800a820 <UART_SetConfig>
 800a012:	4603      	mov	r3, r0
 800a014:	2b01      	cmp	r3, #1
 800a016:	d101      	bne.n	800a01c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e022      	b.n	800a062 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 f963 	bl	800b2f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685a      	ldr	r2, [r3, #4]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a048:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f042 0201 	orr.w	r2, r2, #1
 800a058:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 f9ea 	bl	800b434 <UART_CheckIdleState>
 800a060:	4603      	mov	r3, r0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b0ba      	sub	sp, #232	; 0xe8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a092:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a096:	f640 030f 	movw	r3, #2063	; 0x80f
 800a09a:	4013      	ands	r3, r2
 800a09c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a0a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d11b      	bne.n	800a0e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ac:	f003 0320 	and.w	r3, r3, #32
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d015      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b8:	f003 0320 	and.w	r3, r3, #32
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d105      	bne.n	800a0cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d009      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 8377 	beq.w	800a7c4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
      }
      return;
 800a0de:	e371      	b.n	800a7c4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a0e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 8123 	beq.w	800a330 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a0ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a0ee:	4b8d      	ldr	r3, [pc, #564]	; (800a324 <HAL_UART_IRQHandler+0x2b8>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a0f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a0fa:	4b8b      	ldr	r3, [pc, #556]	; (800a328 <HAL_UART_IRQHandler+0x2bc>)
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 8116 	beq.w	800a330 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d011      	beq.n	800a134 <HAL_UART_IRQHandler+0xc8>
 800a110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00b      	beq.n	800a134 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2201      	movs	r2, #1
 800a122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a12a:	f043 0201 	orr.w	r2, r3, #1
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d011      	beq.n	800a164 <HAL_UART_IRQHandler+0xf8>
 800a140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00b      	beq.n	800a164 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2202      	movs	r2, #2
 800a152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15a:	f043 0204 	orr.w	r2, r3, #4
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a168:	f003 0304 	and.w	r3, r3, #4
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d011      	beq.n	800a194 <HAL_UART_IRQHandler+0x128>
 800a170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00b      	beq.n	800a194 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2204      	movs	r2, #4
 800a182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18a:	f043 0202 	orr.w	r2, r3, #2
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a198:	f003 0308 	and.w	r3, r3, #8
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d017      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1a4:	f003 0320 	and.w	r3, r3, #32
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d105      	bne.n	800a1b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a1b0:	4b5c      	ldr	r3, [pc, #368]	; (800a324 <HAL_UART_IRQHandler+0x2b8>)
 800a1b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00b      	beq.n	800a1d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2208      	movs	r2, #8
 800a1be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c6:	f043 0208 	orr.w	r2, r3, #8
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d012      	beq.n	800a202 <HAL_UART_IRQHandler+0x196>
 800a1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00c      	beq.n	800a202 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f8:	f043 0220 	orr.w	r2, r3, #32
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f000 82dd 	beq.w	800a7c8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d013      	beq.n	800a242 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a21a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a21e:	f003 0320 	and.w	r3, r3, #32
 800a222:	2b00      	cmp	r3, #0
 800a224:	d105      	bne.n	800a232 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a22a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d007      	beq.n	800a242 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a248:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a256:	2b40      	cmp	r3, #64	; 0x40
 800a258:	d005      	beq.n	800a266 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a25a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a25e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a262:	2b00      	cmp	r3, #0
 800a264:	d054      	beq.n	800a310 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f001 f9f6 	bl	800b658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a276:	2b40      	cmp	r3, #64	; 0x40
 800a278:	d146      	bne.n	800a308 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3308      	adds	r3, #8
 800a280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a288:	e853 3f00 	ldrex	r3, [r3]
 800a28c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3308      	adds	r3, #8
 800a2a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a2b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1d9      	bne.n	800a27a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d017      	beq.n	800a300 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2d6:	4a15      	ldr	r2, [pc, #84]	; (800a32c <HAL_UART_IRQHandler+0x2c0>)
 800a2d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7f9 fb89 	bl	80039f8 <HAL_DMA_Abort_IT>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d019      	beq.n	800a320 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2fe:	e00f      	b.n	800a320 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 fa77 	bl	800a7f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a306:	e00b      	b.n	800a320 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fa73 	bl	800a7f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a30e:	e007      	b.n	800a320 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fa6f 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a31e:	e253      	b.n	800a7c8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a320:	bf00      	nop
    return;
 800a322:	e251      	b.n	800a7c8 <HAL_UART_IRQHandler+0x75c>
 800a324:	10000001 	.word	0x10000001
 800a328:	04000120 	.word	0x04000120
 800a32c:	0800b725 	.word	0x0800b725

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a334:	2b01      	cmp	r3, #1
 800a336:	f040 81e7 	bne.w	800a708 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a33e:	f003 0310 	and.w	r3, r3, #16
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 81e0 	beq.w	800a708 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a34c:	f003 0310 	and.w	r3, r3, #16
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 81d9 	beq.w	800a708 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2210      	movs	r2, #16
 800a35c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a368:	2b40      	cmp	r3, #64	; 0x40
 800a36a:	f040 8151 	bne.w	800a610 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a96      	ldr	r2, [pc, #600]	; (800a5d0 <HAL_UART_IRQHandler+0x564>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d068      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a93      	ldr	r2, [pc, #588]	; (800a5d4 <HAL_UART_IRQHandler+0x568>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d061      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a91      	ldr	r2, [pc, #580]	; (800a5d8 <HAL_UART_IRQHandler+0x56c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d05a      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a8e      	ldr	r2, [pc, #568]	; (800a5dc <HAL_UART_IRQHandler+0x570>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d053      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a8c      	ldr	r2, [pc, #560]	; (800a5e0 <HAL_UART_IRQHandler+0x574>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d04c      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a89      	ldr	r2, [pc, #548]	; (800a5e4 <HAL_UART_IRQHandler+0x578>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d045      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a87      	ldr	r2, [pc, #540]	; (800a5e8 <HAL_UART_IRQHandler+0x57c>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d03e      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a84      	ldr	r2, [pc, #528]	; (800a5ec <HAL_UART_IRQHandler+0x580>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d037      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a82      	ldr	r2, [pc, #520]	; (800a5f0 <HAL_UART_IRQHandler+0x584>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d030      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a7f      	ldr	r2, [pc, #508]	; (800a5f4 <HAL_UART_IRQHandler+0x588>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d029      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a7d      	ldr	r2, [pc, #500]	; (800a5f8 <HAL_UART_IRQHandler+0x58c>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d022      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a7a      	ldr	r2, [pc, #488]	; (800a5fc <HAL_UART_IRQHandler+0x590>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d01b      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a78      	ldr	r2, [pc, #480]	; (800a600 <HAL_UART_IRQHandler+0x594>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d014      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a75      	ldr	r2, [pc, #468]	; (800a604 <HAL_UART_IRQHandler+0x598>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00d      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a73      	ldr	r2, [pc, #460]	; (800a608 <HAL_UART_IRQHandler+0x59c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d006      	beq.n	800a44e <HAL_UART_IRQHandler+0x3e2>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a70      	ldr	r2, [pc, #448]	; (800a60c <HAL_UART_IRQHandler+0x5a0>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d106      	bne.n	800a45c <HAL_UART_IRQHandler+0x3f0>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	e005      	b.n	800a468 <HAL_UART_IRQHandler+0x3fc>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	b29b      	uxth	r3, r3
 800a468:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a46c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 81ab 	beq.w	800a7cc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a47c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a480:	429a      	cmp	r2, r3
 800a482:	f080 81a3 	bcs.w	800a7cc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a48c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a496:	69db      	ldr	r3, [r3, #28]
 800a498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a49c:	f000 8087 	beq.w	800a5ae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4ac:	e853 3f00 	ldrex	r3, [r3]
 800a4b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a4b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4da:	e841 2300 	strex	r3, r2, [r1]
 800a4de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1da      	bne.n	800a4a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a4f4:	e853 3f00 	ldrex	r3, [r3]
 800a4f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a4fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4fc:	f023 0301 	bic.w	r3, r3, #1
 800a500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3308      	adds	r3, #8
 800a50a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a50e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a512:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a516:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a51a:	e841 2300 	strex	r3, r2, [r1]
 800a51e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1e1      	bne.n	800a4ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a53c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3308      	adds	r3, #8
 800a546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a54a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a54c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a550:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1e3      	bne.n	800a526 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2220      	movs	r2, #32
 800a562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a57c:	f023 0310 	bic.w	r3, r3, #16
 800a580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a58e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a590:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a59c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e4      	bne.n	800a56c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7f8 ff07 	bl	80033bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f91d 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5ce:	e0fd      	b.n	800a7cc <HAL_UART_IRQHandler+0x760>
 800a5d0:	40020010 	.word	0x40020010
 800a5d4:	40020028 	.word	0x40020028
 800a5d8:	40020040 	.word	0x40020040
 800a5dc:	40020058 	.word	0x40020058
 800a5e0:	40020070 	.word	0x40020070
 800a5e4:	40020088 	.word	0x40020088
 800a5e8:	400200a0 	.word	0x400200a0
 800a5ec:	400200b8 	.word	0x400200b8
 800a5f0:	40020410 	.word	0x40020410
 800a5f4:	40020428 	.word	0x40020428
 800a5f8:	40020440 	.word	0x40020440
 800a5fc:	40020458 	.word	0x40020458
 800a600:	40020470 	.word	0x40020470
 800a604:	40020488 	.word	0x40020488
 800a608:	400204a0 	.word	0x400204a0
 800a60c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f000 80cf 	beq.w	800a7d0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a632:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 80ca 	beq.w	800a7d0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	e853 3f00 	ldrex	r3, [r3]
 800a648:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a64c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a650:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	461a      	mov	r2, r3
 800a65a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a65e:	647b      	str	r3, [r7, #68]	; 0x44
 800a660:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e4      	bne.n	800a63c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	3308      	adds	r3, #8
 800a678:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	623b      	str	r3, [r7, #32]
   return(result);
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	4b55      	ldr	r3, [pc, #340]	; (800a7dc <HAL_UART_IRQHandler+0x770>)
 800a686:	4013      	ands	r3, r2
 800a688:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3308      	adds	r3, #8
 800a692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a696:	633a      	str	r2, [r7, #48]	; 0x30
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e3      	bne.n	800a672 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	e853 3f00 	ldrex	r3, [r3]
 800a6ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 0310 	bic.w	r3, r3, #16
 800a6d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e4:	69b9      	ldr	r1, [r7, #24]
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	e841 2300 	strex	r3, r2, [r1]
 800a6ec:	617b      	str	r3, [r7, #20]
   return(result);
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1e4      	bne.n	800a6be <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f881 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a706:	e063      	b.n	800a7d0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a70c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00e      	beq.n	800a732 <HAL_UART_IRQHandler+0x6c6>
 800a714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d008      	beq.n	800a732 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a728:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f001 f83b 	bl	800b7a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a730:	e051      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d014      	beq.n	800a768 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a73e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a746:	2b00      	cmp	r3, #0
 800a748:	d105      	bne.n	800a756 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a74a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a74e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d008      	beq.n	800a768 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d03a      	beq.n	800a7d4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	4798      	blx	r3
    }
    return;
 800a766:	e035      	b.n	800a7d4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	d009      	beq.n	800a788 <HAL_UART_IRQHandler+0x71c>
 800a774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 ffe5 	bl	800b750 <UART_EndTransmit_IT>
    return;
 800a786:	e026      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a78c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a790:	2b00      	cmp	r3, #0
 800a792:	d009      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x73c>
 800a794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 f814 	bl	800b7ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7a6:	e016      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d010      	beq.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	da0c      	bge.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fffc 	bl	800b7ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7c2:	e008      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a7c4:	bf00      	nop
 800a7c6:	e006      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a7c8:	bf00      	nop
 800a7ca:	e004      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a7cc:	bf00      	nop
 800a7ce:	e002      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a7d0:	bf00      	nop
 800a7d2:	e000      	b.n	800a7d6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a7d4:	bf00      	nop
  }
}
 800a7d6:	37e8      	adds	r7, #232	; 0xe8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	effffffe 	.word	0xeffffffe

0800a7e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a824:	b092      	sub	sp, #72	; 0x48
 800a826:	af00      	add	r7, sp, #0
 800a828:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	691b      	ldr	r3, [r3, #16]
 800a838:	431a      	orrs	r2, r3
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	431a      	orrs	r2, r3
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	4313      	orrs	r3, r2
 800a846:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	4bbe      	ldr	r3, [pc, #760]	; (800ab48 <UART_SetConfig+0x328>)
 800a850:	4013      	ands	r3, r2
 800a852:	697a      	ldr	r2, [r7, #20]
 800a854:	6812      	ldr	r2, [r2, #0]
 800a856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a858:	430b      	orrs	r3, r1
 800a85a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	430a      	orrs	r2, r1
 800a870:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4ab3      	ldr	r2, [pc, #716]	; (800ab4c <UART_SetConfig+0x32c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a888:	4313      	orrs	r3, r2
 800a88a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689a      	ldr	r2, [r3, #8]
 800a892:	4baf      	ldr	r3, [pc, #700]	; (800ab50 <UART_SetConfig+0x330>)
 800a894:	4013      	ands	r3, r2
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	6812      	ldr	r2, [r2, #0]
 800a89a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a6:	f023 010f 	bic.w	r1, r3, #15
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4aa6      	ldr	r2, [pc, #664]	; (800ab54 <UART_SetConfig+0x334>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d177      	bne.n	800a9b0 <UART_SetConfig+0x190>
 800a8c0:	4ba5      	ldr	r3, [pc, #660]	; (800ab58 <UART_SetConfig+0x338>)
 800a8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8c8:	2b28      	cmp	r3, #40	; 0x28
 800a8ca:	d86d      	bhi.n	800a9a8 <UART_SetConfig+0x188>
 800a8cc:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <UART_SetConfig+0xb4>)
 800a8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d2:	bf00      	nop
 800a8d4:	0800a979 	.word	0x0800a979
 800a8d8:	0800a9a9 	.word	0x0800a9a9
 800a8dc:	0800a9a9 	.word	0x0800a9a9
 800a8e0:	0800a9a9 	.word	0x0800a9a9
 800a8e4:	0800a9a9 	.word	0x0800a9a9
 800a8e8:	0800a9a9 	.word	0x0800a9a9
 800a8ec:	0800a9a9 	.word	0x0800a9a9
 800a8f0:	0800a9a9 	.word	0x0800a9a9
 800a8f4:	0800a981 	.word	0x0800a981
 800a8f8:	0800a9a9 	.word	0x0800a9a9
 800a8fc:	0800a9a9 	.word	0x0800a9a9
 800a900:	0800a9a9 	.word	0x0800a9a9
 800a904:	0800a9a9 	.word	0x0800a9a9
 800a908:	0800a9a9 	.word	0x0800a9a9
 800a90c:	0800a9a9 	.word	0x0800a9a9
 800a910:	0800a9a9 	.word	0x0800a9a9
 800a914:	0800a989 	.word	0x0800a989
 800a918:	0800a9a9 	.word	0x0800a9a9
 800a91c:	0800a9a9 	.word	0x0800a9a9
 800a920:	0800a9a9 	.word	0x0800a9a9
 800a924:	0800a9a9 	.word	0x0800a9a9
 800a928:	0800a9a9 	.word	0x0800a9a9
 800a92c:	0800a9a9 	.word	0x0800a9a9
 800a930:	0800a9a9 	.word	0x0800a9a9
 800a934:	0800a991 	.word	0x0800a991
 800a938:	0800a9a9 	.word	0x0800a9a9
 800a93c:	0800a9a9 	.word	0x0800a9a9
 800a940:	0800a9a9 	.word	0x0800a9a9
 800a944:	0800a9a9 	.word	0x0800a9a9
 800a948:	0800a9a9 	.word	0x0800a9a9
 800a94c:	0800a9a9 	.word	0x0800a9a9
 800a950:	0800a9a9 	.word	0x0800a9a9
 800a954:	0800a999 	.word	0x0800a999
 800a958:	0800a9a9 	.word	0x0800a9a9
 800a95c:	0800a9a9 	.word	0x0800a9a9
 800a960:	0800a9a9 	.word	0x0800a9a9
 800a964:	0800a9a9 	.word	0x0800a9a9
 800a968:	0800a9a9 	.word	0x0800a9a9
 800a96c:	0800a9a9 	.word	0x0800a9a9
 800a970:	0800a9a9 	.word	0x0800a9a9
 800a974:	0800a9a1 	.word	0x0800a9a1
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a97e:	e222      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a980:	2304      	movs	r3, #4
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a986:	e21e      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a988:	2308      	movs	r3, #8
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a98e:	e21a      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a990:	2310      	movs	r3, #16
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a996:	e216      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a998:	2320      	movs	r3, #32
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a99e:	e212      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a9a0:	2340      	movs	r3, #64	; 0x40
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a6:	e20e      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a9a8:	2380      	movs	r3, #128	; 0x80
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ae:	e20a      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a69      	ldr	r2, [pc, #420]	; (800ab5c <UART_SetConfig+0x33c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d130      	bne.n	800aa1c <UART_SetConfig+0x1fc>
 800a9ba:	4b67      	ldr	r3, [pc, #412]	; (800ab58 <UART_SetConfig+0x338>)
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	2b05      	cmp	r3, #5
 800a9c4:	d826      	bhi.n	800aa14 <UART_SetConfig+0x1f4>
 800a9c6:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <UART_SetConfig+0x1ac>)
 800a9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9cc:	0800a9e5 	.word	0x0800a9e5
 800a9d0:	0800a9ed 	.word	0x0800a9ed
 800a9d4:	0800a9f5 	.word	0x0800a9f5
 800a9d8:	0800a9fd 	.word	0x0800a9fd
 800a9dc:	0800aa05 	.word	0x0800aa05
 800a9e0:	0800aa0d 	.word	0x0800aa0d
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ea:	e1ec      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a9ec:	2304      	movs	r3, #4
 800a9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f2:	e1e8      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a9f4:	2308      	movs	r3, #8
 800a9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fa:	e1e4      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa02:	e1e0      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa04:	2320      	movs	r3, #32
 800aa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0a:	e1dc      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa0c:	2340      	movs	r3, #64	; 0x40
 800aa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa12:	e1d8      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa14:	2380      	movs	r3, #128	; 0x80
 800aa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1a:	e1d4      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a4f      	ldr	r2, [pc, #316]	; (800ab60 <UART_SetConfig+0x340>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d130      	bne.n	800aa88 <UART_SetConfig+0x268>
 800aa26:	4b4c      	ldr	r3, [pc, #304]	; (800ab58 <UART_SetConfig+0x338>)
 800aa28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	2b05      	cmp	r3, #5
 800aa30:	d826      	bhi.n	800aa80 <UART_SetConfig+0x260>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <UART_SetConfig+0x218>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa51 	.word	0x0800aa51
 800aa3c:	0800aa59 	.word	0x0800aa59
 800aa40:	0800aa61 	.word	0x0800aa61
 800aa44:	0800aa69 	.word	0x0800aa69
 800aa48:	0800aa71 	.word	0x0800aa71
 800aa4c:	0800aa79 	.word	0x0800aa79
 800aa50:	2300      	movs	r3, #0
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa56:	e1b6      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa58:	2304      	movs	r3, #4
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5e:	e1b2      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa60:	2308      	movs	r3, #8
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa66:	e1ae      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa68:	2310      	movs	r3, #16
 800aa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa6e:	e1aa      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa70:	2320      	movs	r3, #32
 800aa72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa76:	e1a6      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa78:	2340      	movs	r3, #64	; 0x40
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7e:	e1a2      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa80:	2380      	movs	r3, #128	; 0x80
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa86:	e19e      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a35      	ldr	r2, [pc, #212]	; (800ab64 <UART_SetConfig+0x344>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d130      	bne.n	800aaf4 <UART_SetConfig+0x2d4>
 800aa92:	4b31      	ldr	r3, [pc, #196]	; (800ab58 <UART_SetConfig+0x338>)
 800aa94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	2b05      	cmp	r3, #5
 800aa9c:	d826      	bhi.n	800aaec <UART_SetConfig+0x2cc>
 800aa9e:	a201      	add	r2, pc, #4	; (adr r2, 800aaa4 <UART_SetConfig+0x284>)
 800aaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa4:	0800aabd 	.word	0x0800aabd
 800aaa8:	0800aac5 	.word	0x0800aac5
 800aaac:	0800aacd 	.word	0x0800aacd
 800aab0:	0800aad5 	.word	0x0800aad5
 800aab4:	0800aadd 	.word	0x0800aadd
 800aab8:	0800aae5 	.word	0x0800aae5
 800aabc:	2300      	movs	r3, #0
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac2:	e180      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aac4:	2304      	movs	r3, #4
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e17c      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aacc:	2308      	movs	r3, #8
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e178      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aad4:	2310      	movs	r3, #16
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e174      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aadc:	2320      	movs	r3, #32
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae2:	e170      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aae4:	2340      	movs	r3, #64	; 0x40
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaea:	e16c      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aaec:	2380      	movs	r3, #128	; 0x80
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf2:	e168      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a1b      	ldr	r2, [pc, #108]	; (800ab68 <UART_SetConfig+0x348>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d142      	bne.n	800ab84 <UART_SetConfig+0x364>
 800aafe:	4b16      	ldr	r3, [pc, #88]	; (800ab58 <UART_SetConfig+0x338>)
 800ab00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab02:	f003 0307 	and.w	r3, r3, #7
 800ab06:	2b05      	cmp	r3, #5
 800ab08:	d838      	bhi.n	800ab7c <UART_SetConfig+0x35c>
 800ab0a:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <UART_SetConfig+0x2f0>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab29 	.word	0x0800ab29
 800ab14:	0800ab31 	.word	0x0800ab31
 800ab18:	0800ab39 	.word	0x0800ab39
 800ab1c:	0800ab41 	.word	0x0800ab41
 800ab20:	0800ab6d 	.word	0x0800ab6d
 800ab24:	0800ab75 	.word	0x0800ab75
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2e:	e14a      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ab30:	2304      	movs	r3, #4
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab36:	e146      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ab38:	2308      	movs	r3, #8
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3e:	e142      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ab40:	2310      	movs	r3, #16
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e13e      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ab48:	cfff69f3 	.word	0xcfff69f3
 800ab4c:	58000c00 	.word	0x58000c00
 800ab50:	11fff4ff 	.word	0x11fff4ff
 800ab54:	40011000 	.word	0x40011000
 800ab58:	58024400 	.word	0x58024400
 800ab5c:	40004400 	.word	0x40004400
 800ab60:	40004800 	.word	0x40004800
 800ab64:	40004c00 	.word	0x40004c00
 800ab68:	40005000 	.word	0x40005000
 800ab6c:	2320      	movs	r3, #32
 800ab6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab72:	e128      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7a:	e124      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ab7c:	2380      	movs	r3, #128	; 0x80
 800ab7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab82:	e120      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4acb      	ldr	r2, [pc, #812]	; (800aeb8 <UART_SetConfig+0x698>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d176      	bne.n	800ac7c <UART_SetConfig+0x45c>
 800ab8e:	4bcb      	ldr	r3, [pc, #812]	; (800aebc <UART_SetConfig+0x69c>)
 800ab90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab96:	2b28      	cmp	r3, #40	; 0x28
 800ab98:	d86c      	bhi.n	800ac74 <UART_SetConfig+0x454>
 800ab9a:	a201      	add	r2, pc, #4	; (adr r2, 800aba0 <UART_SetConfig+0x380>)
 800ab9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba0:	0800ac45 	.word	0x0800ac45
 800aba4:	0800ac75 	.word	0x0800ac75
 800aba8:	0800ac75 	.word	0x0800ac75
 800abac:	0800ac75 	.word	0x0800ac75
 800abb0:	0800ac75 	.word	0x0800ac75
 800abb4:	0800ac75 	.word	0x0800ac75
 800abb8:	0800ac75 	.word	0x0800ac75
 800abbc:	0800ac75 	.word	0x0800ac75
 800abc0:	0800ac4d 	.word	0x0800ac4d
 800abc4:	0800ac75 	.word	0x0800ac75
 800abc8:	0800ac75 	.word	0x0800ac75
 800abcc:	0800ac75 	.word	0x0800ac75
 800abd0:	0800ac75 	.word	0x0800ac75
 800abd4:	0800ac75 	.word	0x0800ac75
 800abd8:	0800ac75 	.word	0x0800ac75
 800abdc:	0800ac75 	.word	0x0800ac75
 800abe0:	0800ac55 	.word	0x0800ac55
 800abe4:	0800ac75 	.word	0x0800ac75
 800abe8:	0800ac75 	.word	0x0800ac75
 800abec:	0800ac75 	.word	0x0800ac75
 800abf0:	0800ac75 	.word	0x0800ac75
 800abf4:	0800ac75 	.word	0x0800ac75
 800abf8:	0800ac75 	.word	0x0800ac75
 800abfc:	0800ac75 	.word	0x0800ac75
 800ac00:	0800ac5d 	.word	0x0800ac5d
 800ac04:	0800ac75 	.word	0x0800ac75
 800ac08:	0800ac75 	.word	0x0800ac75
 800ac0c:	0800ac75 	.word	0x0800ac75
 800ac10:	0800ac75 	.word	0x0800ac75
 800ac14:	0800ac75 	.word	0x0800ac75
 800ac18:	0800ac75 	.word	0x0800ac75
 800ac1c:	0800ac75 	.word	0x0800ac75
 800ac20:	0800ac65 	.word	0x0800ac65
 800ac24:	0800ac75 	.word	0x0800ac75
 800ac28:	0800ac75 	.word	0x0800ac75
 800ac2c:	0800ac75 	.word	0x0800ac75
 800ac30:	0800ac75 	.word	0x0800ac75
 800ac34:	0800ac75 	.word	0x0800ac75
 800ac38:	0800ac75 	.word	0x0800ac75
 800ac3c:	0800ac75 	.word	0x0800ac75
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	2301      	movs	r3, #1
 800ac46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac4a:	e0bc      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ac4c:	2304      	movs	r3, #4
 800ac4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac52:	e0b8      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ac54:	2308      	movs	r3, #8
 800ac56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac5a:	e0b4      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ac5c:	2310      	movs	r3, #16
 800ac5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac62:	e0b0      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ac64:	2320      	movs	r3, #32
 800ac66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac6a:	e0ac      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac72:	e0a8      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ac74:	2380      	movs	r3, #128	; 0x80
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7a:	e0a4      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a8f      	ldr	r2, [pc, #572]	; (800aec0 <UART_SetConfig+0x6a0>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d130      	bne.n	800ace8 <UART_SetConfig+0x4c8>
 800ac86:	4b8d      	ldr	r3, [pc, #564]	; (800aebc <UART_SetConfig+0x69c>)
 800ac88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d826      	bhi.n	800ace0 <UART_SetConfig+0x4c0>
 800ac92:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <UART_SetConfig+0x478>)
 800ac94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac98:	0800acb1 	.word	0x0800acb1
 800ac9c:	0800acb9 	.word	0x0800acb9
 800aca0:	0800acc1 	.word	0x0800acc1
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acd1 	.word	0x0800acd1
 800acac:	0800acd9 	.word	0x0800acd9
 800acb0:	2300      	movs	r3, #0
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acb6:	e086      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800acb8:	2304      	movs	r3, #4
 800acba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acbe:	e082      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800acc0:	2308      	movs	r3, #8
 800acc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acc6:	e07e      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800acc8:	2310      	movs	r3, #16
 800acca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acce:	e07a      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800acd0:	2320      	movs	r3, #32
 800acd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acd6:	e076      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800acd8:	2340      	movs	r3, #64	; 0x40
 800acda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acde:	e072      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ace0:	2380      	movs	r3, #128	; 0x80
 800ace2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ace6:	e06e      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a75      	ldr	r2, [pc, #468]	; (800aec4 <UART_SetConfig+0x6a4>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d130      	bne.n	800ad54 <UART_SetConfig+0x534>
 800acf2:	4b72      	ldr	r3, [pc, #456]	; (800aebc <UART_SetConfig+0x69c>)
 800acf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf6:	f003 0307 	and.w	r3, r3, #7
 800acfa:	2b05      	cmp	r3, #5
 800acfc:	d826      	bhi.n	800ad4c <UART_SetConfig+0x52c>
 800acfe:	a201      	add	r2, pc, #4	; (adr r2, 800ad04 <UART_SetConfig+0x4e4>)
 800ad00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad04:	0800ad1d 	.word	0x0800ad1d
 800ad08:	0800ad25 	.word	0x0800ad25
 800ad0c:	0800ad2d 	.word	0x0800ad2d
 800ad10:	0800ad35 	.word	0x0800ad35
 800ad14:	0800ad3d 	.word	0x0800ad3d
 800ad18:	0800ad45 	.word	0x0800ad45
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad22:	e050      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad24:	2304      	movs	r3, #4
 800ad26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad2a:	e04c      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad2c:	2308      	movs	r3, #8
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad32:	e048      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad34:	2310      	movs	r3, #16
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad3a:	e044      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad3c:	2320      	movs	r3, #32
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad42:	e040      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad4a:	e03c      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad4c:	2380      	movs	r3, #128	; 0x80
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad52:	e038      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a5b      	ldr	r2, [pc, #364]	; (800aec8 <UART_SetConfig+0x6a8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d130      	bne.n	800adc0 <UART_SetConfig+0x5a0>
 800ad5e:	4b57      	ldr	r3, [pc, #348]	; (800aebc <UART_SetConfig+0x69c>)
 800ad60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad62:	f003 0307 	and.w	r3, r3, #7
 800ad66:	2b05      	cmp	r3, #5
 800ad68:	d826      	bhi.n	800adb8 <UART_SetConfig+0x598>
 800ad6a:	a201      	add	r2, pc, #4	; (adr r2, 800ad70 <UART_SetConfig+0x550>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800ad89 	.word	0x0800ad89
 800ad74:	0800ad91 	.word	0x0800ad91
 800ad78:	0800ad99 	.word	0x0800ad99
 800ad7c:	0800ada1 	.word	0x0800ada1
 800ad80:	0800ada9 	.word	0x0800ada9
 800ad84:	0800adb1 	.word	0x0800adb1
 800ad88:	2302      	movs	r3, #2
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8e:	e01a      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad90:	2304      	movs	r3, #4
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad96:	e016      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ad98:	2308      	movs	r3, #8
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9e:	e012      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ada0:	2310      	movs	r3, #16
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada6:	e00e      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800ada8:	2320      	movs	r3, #32
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adae:	e00a      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800adb0:	2340      	movs	r3, #64	; 0x40
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adb6:	e006      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800adb8:	2380      	movs	r3, #128	; 0x80
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adbe:	e002      	b.n	800adc6 <UART_SetConfig+0x5a6>
 800adc0:	2380      	movs	r3, #128	; 0x80
 800adc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a3f      	ldr	r2, [pc, #252]	; (800aec8 <UART_SetConfig+0x6a8>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	f040 80f8 	bne.w	800afc2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800add2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800add6:	2b20      	cmp	r3, #32
 800add8:	dc46      	bgt.n	800ae68 <UART_SetConfig+0x648>
 800adda:	2b02      	cmp	r3, #2
 800addc:	f2c0 8082 	blt.w	800aee4 <UART_SetConfig+0x6c4>
 800ade0:	3b02      	subs	r3, #2
 800ade2:	2b1e      	cmp	r3, #30
 800ade4:	d87e      	bhi.n	800aee4 <UART_SetConfig+0x6c4>
 800ade6:	a201      	add	r2, pc, #4	; (adr r2, 800adec <UART_SetConfig+0x5cc>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae6f 	.word	0x0800ae6f
 800adf0:	0800aee5 	.word	0x0800aee5
 800adf4:	0800ae77 	.word	0x0800ae77
 800adf8:	0800aee5 	.word	0x0800aee5
 800adfc:	0800aee5 	.word	0x0800aee5
 800ae00:	0800aee5 	.word	0x0800aee5
 800ae04:	0800ae87 	.word	0x0800ae87
 800ae08:	0800aee5 	.word	0x0800aee5
 800ae0c:	0800aee5 	.word	0x0800aee5
 800ae10:	0800aee5 	.word	0x0800aee5
 800ae14:	0800aee5 	.word	0x0800aee5
 800ae18:	0800aee5 	.word	0x0800aee5
 800ae1c:	0800aee5 	.word	0x0800aee5
 800ae20:	0800aee5 	.word	0x0800aee5
 800ae24:	0800ae97 	.word	0x0800ae97
 800ae28:	0800aee5 	.word	0x0800aee5
 800ae2c:	0800aee5 	.word	0x0800aee5
 800ae30:	0800aee5 	.word	0x0800aee5
 800ae34:	0800aee5 	.word	0x0800aee5
 800ae38:	0800aee5 	.word	0x0800aee5
 800ae3c:	0800aee5 	.word	0x0800aee5
 800ae40:	0800aee5 	.word	0x0800aee5
 800ae44:	0800aee5 	.word	0x0800aee5
 800ae48:	0800aee5 	.word	0x0800aee5
 800ae4c:	0800aee5 	.word	0x0800aee5
 800ae50:	0800aee5 	.word	0x0800aee5
 800ae54:	0800aee5 	.word	0x0800aee5
 800ae58:	0800aee5 	.word	0x0800aee5
 800ae5c:	0800aee5 	.word	0x0800aee5
 800ae60:	0800aee5 	.word	0x0800aee5
 800ae64:	0800aed7 	.word	0x0800aed7
 800ae68:	2b40      	cmp	r3, #64	; 0x40
 800ae6a:	d037      	beq.n	800aedc <UART_SetConfig+0x6bc>
 800ae6c:	e03a      	b.n	800aee4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae6e:	f7fe f893 	bl	8008f98 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae74:	e03c      	b.n	800aef0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fe f8a2 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae84:	e034      	b.n	800aef0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae86:	f107 0318 	add.w	r3, r7, #24
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7fe f9ee 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae94:	e02c      	b.n	800aef0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae96:	4b09      	ldr	r3, [pc, #36]	; (800aebc <UART_SetConfig+0x69c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d016      	beq.n	800aed0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aea2:	4b06      	ldr	r3, [pc, #24]	; (800aebc <UART_SetConfig+0x69c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	08db      	lsrs	r3, r3, #3
 800aea8:	f003 0303 	and.w	r3, r3, #3
 800aeac:	4a07      	ldr	r2, [pc, #28]	; (800aecc <UART_SetConfig+0x6ac>)
 800aeae:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aeb4:	e01c      	b.n	800aef0 <UART_SetConfig+0x6d0>
 800aeb6:	bf00      	nop
 800aeb8:	40011400 	.word	0x40011400
 800aebc:	58024400 	.word	0x58024400
 800aec0:	40007800 	.word	0x40007800
 800aec4:	40007c00 	.word	0x40007c00
 800aec8:	58000c00 	.word	0x58000c00
 800aecc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aed0:	4b9d      	ldr	r3, [pc, #628]	; (800b148 <UART_SetConfig+0x928>)
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed4:	e00c      	b.n	800aef0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aed6:	4b9d      	ldr	r3, [pc, #628]	; (800b14c <UART_SetConfig+0x92c>)
 800aed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeda:	e009      	b.n	800aef0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aedc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee2:	e005      	b.n	800aef0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aee4:	2300      	movs	r3, #0
 800aee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aeee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 81de 	beq.w	800b2b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefc:	4a94      	ldr	r2, [pc, #592]	; (800b150 <UART_SetConfig+0x930>)
 800aefe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af02:	461a      	mov	r2, r3
 800af04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af06:	fbb3 f3f2 	udiv	r3, r3, r2
 800af0a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	005b      	lsls	r3, r3, #1
 800af14:	4413      	add	r3, r2
 800af16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af18:	429a      	cmp	r2, r3
 800af1a:	d305      	bcc.n	800af28 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af24:	429a      	cmp	r2, r3
 800af26:	d903      	bls.n	800af30 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af2e:	e1c1      	b.n	800b2b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af32:	2200      	movs	r2, #0
 800af34:	60bb      	str	r3, [r7, #8]
 800af36:	60fa      	str	r2, [r7, #12]
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	4a84      	ldr	r2, [pc, #528]	; (800b150 <UART_SetConfig+0x930>)
 800af3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af42:	b29b      	uxth	r3, r3
 800af44:	2200      	movs	r2, #0
 800af46:	603b      	str	r3, [r7, #0]
 800af48:	607a      	str	r2, [r7, #4]
 800af4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af52:	f7f5 f9c1 	bl	80002d8 <__aeabi_uldivmod>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	4610      	mov	r0, r2
 800af5c:	4619      	mov	r1, r3
 800af5e:	f04f 0200 	mov.w	r2, #0
 800af62:	f04f 0300 	mov.w	r3, #0
 800af66:	020b      	lsls	r3, r1, #8
 800af68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af6c:	0202      	lsls	r2, r0, #8
 800af6e:	6979      	ldr	r1, [r7, #20]
 800af70:	6849      	ldr	r1, [r1, #4]
 800af72:	0849      	lsrs	r1, r1, #1
 800af74:	2000      	movs	r0, #0
 800af76:	460c      	mov	r4, r1
 800af78:	4605      	mov	r5, r0
 800af7a:	eb12 0804 	adds.w	r8, r2, r4
 800af7e:	eb43 0905 	adc.w	r9, r3, r5
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	469a      	mov	sl, r3
 800af8a:	4693      	mov	fp, r2
 800af8c:	4652      	mov	r2, sl
 800af8e:	465b      	mov	r3, fp
 800af90:	4640      	mov	r0, r8
 800af92:	4649      	mov	r1, r9
 800af94:	f7f5 f9a0 	bl	80002d8 <__aeabi_uldivmod>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4613      	mov	r3, r2
 800af9e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afa6:	d308      	bcc.n	800afba <UART_SetConfig+0x79a>
 800afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afae:	d204      	bcs.n	800afba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afb6:	60da      	str	r2, [r3, #12]
 800afb8:	e17c      	b.n	800b2b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800afc0:	e178      	b.n	800b2b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afca:	f040 80c5 	bne.w	800b158 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800afce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	dc48      	bgt.n	800b068 <UART_SetConfig+0x848>
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	db7b      	blt.n	800b0d2 <UART_SetConfig+0x8b2>
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d879      	bhi.n	800b0d2 <UART_SetConfig+0x8b2>
 800afde:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <UART_SetConfig+0x7c4>)
 800afe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe4:	0800b06f 	.word	0x0800b06f
 800afe8:	0800b077 	.word	0x0800b077
 800afec:	0800b0d3 	.word	0x0800b0d3
 800aff0:	0800b0d3 	.word	0x0800b0d3
 800aff4:	0800b07f 	.word	0x0800b07f
 800aff8:	0800b0d3 	.word	0x0800b0d3
 800affc:	0800b0d3 	.word	0x0800b0d3
 800b000:	0800b0d3 	.word	0x0800b0d3
 800b004:	0800b08f 	.word	0x0800b08f
 800b008:	0800b0d3 	.word	0x0800b0d3
 800b00c:	0800b0d3 	.word	0x0800b0d3
 800b010:	0800b0d3 	.word	0x0800b0d3
 800b014:	0800b0d3 	.word	0x0800b0d3
 800b018:	0800b0d3 	.word	0x0800b0d3
 800b01c:	0800b0d3 	.word	0x0800b0d3
 800b020:	0800b0d3 	.word	0x0800b0d3
 800b024:	0800b09f 	.word	0x0800b09f
 800b028:	0800b0d3 	.word	0x0800b0d3
 800b02c:	0800b0d3 	.word	0x0800b0d3
 800b030:	0800b0d3 	.word	0x0800b0d3
 800b034:	0800b0d3 	.word	0x0800b0d3
 800b038:	0800b0d3 	.word	0x0800b0d3
 800b03c:	0800b0d3 	.word	0x0800b0d3
 800b040:	0800b0d3 	.word	0x0800b0d3
 800b044:	0800b0d3 	.word	0x0800b0d3
 800b048:	0800b0d3 	.word	0x0800b0d3
 800b04c:	0800b0d3 	.word	0x0800b0d3
 800b050:	0800b0d3 	.word	0x0800b0d3
 800b054:	0800b0d3 	.word	0x0800b0d3
 800b058:	0800b0d3 	.word	0x0800b0d3
 800b05c:	0800b0d3 	.word	0x0800b0d3
 800b060:	0800b0d3 	.word	0x0800b0d3
 800b064:	0800b0c5 	.word	0x0800b0c5
 800b068:	2b40      	cmp	r3, #64	; 0x40
 800b06a:	d02e      	beq.n	800b0ca <UART_SetConfig+0x8aa>
 800b06c:	e031      	b.n	800b0d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b06e:	f7fb ffdd 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 800b072:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b074:	e033      	b.n	800b0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b076:	f7fb ffef 	bl	8007058 <HAL_RCC_GetPCLK2Freq>
 800b07a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b07c:	e02f      	b.n	800b0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b07e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b082:	4618      	mov	r0, r3
 800b084:	f7fd ff9e 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08c:	e027      	b.n	800b0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b08e:	f107 0318 	add.w	r3, r7, #24
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe f8ea 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b09c:	e01f      	b.n	800b0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b09e:	4b2d      	ldr	r3, [pc, #180]	; (800b154 <UART_SetConfig+0x934>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0320 	and.w	r3, r3, #32
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d009      	beq.n	800b0be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0aa:	4b2a      	ldr	r3, [pc, #168]	; (800b154 <UART_SetConfig+0x934>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	08db      	lsrs	r3, r3, #3
 800b0b0:	f003 0303 	and.w	r3, r3, #3
 800b0b4:	4a24      	ldr	r2, [pc, #144]	; (800b148 <UART_SetConfig+0x928>)
 800b0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0bc:	e00f      	b.n	800b0de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b0be:	4b22      	ldr	r3, [pc, #136]	; (800b148 <UART_SetConfig+0x928>)
 800b0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c2:	e00c      	b.n	800b0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0c4:	4b21      	ldr	r3, [pc, #132]	; (800b14c <UART_SetConfig+0x92c>)
 800b0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c8:	e009      	b.n	800b0de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d0:	e005      	b.n	800b0de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b0dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80e7 	beq.w	800b2b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	4a19      	ldr	r2, [pc, #100]	; (800b150 <UART_SetConfig+0x930>)
 800b0ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0f8:	005a      	lsls	r2, r3, #1
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	085b      	lsrs	r3, r3, #1
 800b100:	441a      	add	r2, r3
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	fbb2 f3f3 	udiv	r3, r2, r3
 800b10a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	2b0f      	cmp	r3, #15
 800b110:	d916      	bls.n	800b140 <UART_SetConfig+0x920>
 800b112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b118:	d212      	bcs.n	800b140 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	f023 030f 	bic.w	r3, r3, #15
 800b122:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	085b      	lsrs	r3, r3, #1
 800b128:	b29b      	uxth	r3, r3
 800b12a:	f003 0307 	and.w	r3, r3, #7
 800b12e:	b29a      	uxth	r2, r3
 800b130:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b132:	4313      	orrs	r3, r2
 800b134:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b13c:	60da      	str	r2, [r3, #12]
 800b13e:	e0b9      	b.n	800b2b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b146:	e0b5      	b.n	800b2b4 <UART_SetConfig+0xa94>
 800b148:	03d09000 	.word	0x03d09000
 800b14c:	003d0900 	.word	0x003d0900
 800b150:	0800c084 	.word	0x0800c084
 800b154:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b158:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	dc49      	bgt.n	800b1f4 <UART_SetConfig+0x9d4>
 800b160:	2b00      	cmp	r3, #0
 800b162:	db7c      	blt.n	800b25e <UART_SetConfig+0xa3e>
 800b164:	2b20      	cmp	r3, #32
 800b166:	d87a      	bhi.n	800b25e <UART_SetConfig+0xa3e>
 800b168:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <UART_SetConfig+0x950>)
 800b16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16e:	bf00      	nop
 800b170:	0800b1fb 	.word	0x0800b1fb
 800b174:	0800b203 	.word	0x0800b203
 800b178:	0800b25f 	.word	0x0800b25f
 800b17c:	0800b25f 	.word	0x0800b25f
 800b180:	0800b20b 	.word	0x0800b20b
 800b184:	0800b25f 	.word	0x0800b25f
 800b188:	0800b25f 	.word	0x0800b25f
 800b18c:	0800b25f 	.word	0x0800b25f
 800b190:	0800b21b 	.word	0x0800b21b
 800b194:	0800b25f 	.word	0x0800b25f
 800b198:	0800b25f 	.word	0x0800b25f
 800b19c:	0800b25f 	.word	0x0800b25f
 800b1a0:	0800b25f 	.word	0x0800b25f
 800b1a4:	0800b25f 	.word	0x0800b25f
 800b1a8:	0800b25f 	.word	0x0800b25f
 800b1ac:	0800b25f 	.word	0x0800b25f
 800b1b0:	0800b22b 	.word	0x0800b22b
 800b1b4:	0800b25f 	.word	0x0800b25f
 800b1b8:	0800b25f 	.word	0x0800b25f
 800b1bc:	0800b25f 	.word	0x0800b25f
 800b1c0:	0800b25f 	.word	0x0800b25f
 800b1c4:	0800b25f 	.word	0x0800b25f
 800b1c8:	0800b25f 	.word	0x0800b25f
 800b1cc:	0800b25f 	.word	0x0800b25f
 800b1d0:	0800b25f 	.word	0x0800b25f
 800b1d4:	0800b25f 	.word	0x0800b25f
 800b1d8:	0800b25f 	.word	0x0800b25f
 800b1dc:	0800b25f 	.word	0x0800b25f
 800b1e0:	0800b25f 	.word	0x0800b25f
 800b1e4:	0800b25f 	.word	0x0800b25f
 800b1e8:	0800b25f 	.word	0x0800b25f
 800b1ec:	0800b25f 	.word	0x0800b25f
 800b1f0:	0800b251 	.word	0x0800b251
 800b1f4:	2b40      	cmp	r3, #64	; 0x40
 800b1f6:	d02e      	beq.n	800b256 <UART_SetConfig+0xa36>
 800b1f8:	e031      	b.n	800b25e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1fa:	f7fb ff17 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 800b1fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b200:	e033      	b.n	800b26a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b202:	f7fb ff29 	bl	8007058 <HAL_RCC_GetPCLK2Freq>
 800b206:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b208:	e02f      	b.n	800b26a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b20a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fd fed8 	bl	8008fc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b218:	e027      	b.n	800b26a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b21a:	f107 0318 	add.w	r3, r7, #24
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe f824 	bl	800926c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b228:	e01f      	b.n	800b26a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b22a:	4b2d      	ldr	r3, [pc, #180]	; (800b2e0 <UART_SetConfig+0xac0>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0320 	and.w	r3, r3, #32
 800b232:	2b00      	cmp	r3, #0
 800b234:	d009      	beq.n	800b24a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b236:	4b2a      	ldr	r3, [pc, #168]	; (800b2e0 <UART_SetConfig+0xac0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	08db      	lsrs	r3, r3, #3
 800b23c:	f003 0303 	and.w	r3, r3, #3
 800b240:	4a28      	ldr	r2, [pc, #160]	; (800b2e4 <UART_SetConfig+0xac4>)
 800b242:	fa22 f303 	lsr.w	r3, r2, r3
 800b246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b248:	e00f      	b.n	800b26a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b24a:	4b26      	ldr	r3, [pc, #152]	; (800b2e4 <UART_SetConfig+0xac4>)
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b24e:	e00c      	b.n	800b26a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b250:	4b25      	ldr	r3, [pc, #148]	; (800b2e8 <UART_SetConfig+0xac8>)
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b254:	e009      	b.n	800b26a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b25c:	e005      	b.n	800b26a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b25e:	2300      	movs	r3, #0
 800b260:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b268:	bf00      	nop
    }

    if (pclk != 0U)
 800b26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d021      	beq.n	800b2b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	4a1d      	ldr	r2, [pc, #116]	; (800b2ec <UART_SetConfig+0xacc>)
 800b276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b27a:	461a      	mov	r2, r3
 800b27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b27e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	085b      	lsrs	r3, r3, #1
 800b288:	441a      	add	r2, r3
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b292:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	2b0f      	cmp	r3, #15
 800b298:	d909      	bls.n	800b2ae <UART_SetConfig+0xa8e>
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a0:	d205      	bcs.n	800b2ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	60da      	str	r2, [r3, #12]
 800b2ac:	e002      	b.n	800b2b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b2d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3748      	adds	r7, #72	; 0x48
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2de:	bf00      	nop
 800b2e0:	58024400 	.word	0x58024400
 800b2e4:	03d09000 	.word	0x03d09000
 800b2e8:	003d0900 	.word	0x003d0900
 800b2ec:	0800c084 	.word	0x0800c084

0800b2f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2fc:	f003 0301 	and.w	r3, r3, #1
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00a      	beq.n	800b31a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	430a      	orrs	r2, r1
 800b318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31e:	f003 0302 	and.w	r3, r3, #2
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00a      	beq.n	800b33c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	430a      	orrs	r2, r1
 800b33a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00a      	beq.n	800b35e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	430a      	orrs	r2, r1
 800b35c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b362:	f003 0308 	and.w	r3, r3, #8
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	430a      	orrs	r2, r1
 800b37e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b384:	f003 0310 	and.w	r3, r3, #16
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00a      	beq.n	800b3a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a6:	f003 0320 	and.w	r3, r3, #32
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00a      	beq.n	800b3c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d01a      	beq.n	800b406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	430a      	orrs	r2, r1
 800b3e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3ee:	d10a      	bne.n	800b406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00a      	beq.n	800b428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	430a      	orrs	r2, r1
 800b426:	605a      	str	r2, [r3, #4]
  }
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b098      	sub	sp, #96	; 0x60
 800b438:	af02      	add	r7, sp, #8
 800b43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b444:	f7f6 f952 	bl	80016ec <HAL_GetTick>
 800b448:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0308 	and.w	r3, r3, #8
 800b454:	2b08      	cmp	r3, #8
 800b456:	d12f      	bne.n	800b4b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b460:	2200      	movs	r2, #0
 800b462:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f88e 	bl	800b588 <UART_WaitOnFlagUntilTimeout>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d022      	beq.n	800b4b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b486:	653b      	str	r3, [r7, #80]	; 0x50
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	461a      	mov	r2, r3
 800b48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b490:	647b      	str	r3, [r7, #68]	; 0x44
 800b492:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b498:	e841 2300 	strex	r3, r2, [r1]
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1e6      	bne.n	800b472 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e063      	b.n	800b580 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 0304 	and.w	r3, r3, #4
 800b4c2:	2b04      	cmp	r3, #4
 800b4c4:	d149      	bne.n	800b55a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f857 	bl	800b588 <UART_WaitOnFlagUntilTimeout>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d03c      	beq.n	800b55a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b4ee:	6a3b      	ldr	r3, [r7, #32]
 800b4f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fe:	633b      	str	r3, [r7, #48]	; 0x30
 800b500:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e6      	bne.n	800b4e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	60fb      	str	r3, [r7, #12]
   return(result);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f023 0301 	bic.w	r3, r3, #1
 800b528:	64bb      	str	r3, [r7, #72]	; 0x48
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	3308      	adds	r3, #8
 800b530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b532:	61fa      	str	r2, [r7, #28]
 800b534:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b536:	69b9      	ldr	r1, [r7, #24]
 800b538:	69fa      	ldr	r2, [r7, #28]
 800b53a:	e841 2300 	strex	r3, r2, [r1]
 800b53e:	617b      	str	r3, [r7, #20]
   return(result);
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1e5      	bne.n	800b512 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e012      	b.n	800b580 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3758      	adds	r7, #88	; 0x58
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	603b      	str	r3, [r7, #0]
 800b594:	4613      	mov	r3, r2
 800b596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b598:	e049      	b.n	800b62e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a0:	d045      	beq.n	800b62e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5a2:	f7f6 f8a3 	bl	80016ec <HAL_GetTick>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	1ad3      	subs	r3, r2, r3
 800b5ac:	69ba      	ldr	r2, [r7, #24]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d302      	bcc.n	800b5b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e048      	b.n	800b64e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f003 0304 	and.w	r3, r3, #4
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d031      	beq.n	800b62e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	69db      	ldr	r3, [r3, #28]
 800b5d0:	f003 0308 	and.w	r3, r3, #8
 800b5d4:	2b08      	cmp	r3, #8
 800b5d6:	d110      	bne.n	800b5fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2208      	movs	r2, #8
 800b5de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 f839 	bl	800b658 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2208      	movs	r2, #8
 800b5ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e029      	b.n	800b64e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b608:	d111      	bne.n	800b62e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 f81f 	bl	800b658 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2220      	movs	r2, #32
 800b61e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e00f      	b.n	800b64e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	69da      	ldr	r2, [r3, #28]
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	4013      	ands	r3, r2
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	bf0c      	ite	eq
 800b63e:	2301      	moveq	r3, #1
 800b640:	2300      	movne	r3, #0
 800b642:	b2db      	uxtb	r3, r3
 800b644:	461a      	mov	r2, r3
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d0a6      	beq.n	800b59a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b658:	b480      	push	{r7}
 800b65a:	b095      	sub	sp, #84	; 0x54
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b668:	e853 3f00 	ldrex	r3, [r3]
 800b66c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b674:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b67e:	643b      	str	r3, [r7, #64]	; 0x40
 800b680:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b686:	e841 2300 	strex	r3, r2, [r1]
 800b68a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1e6      	bne.n	800b660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	3308      	adds	r3, #8
 800b698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	e853 3f00 	ldrex	r3, [r3]
 800b6a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6a2:	69fa      	ldr	r2, [r7, #28]
 800b6a4:	4b1e      	ldr	r3, [pc, #120]	; (800b720 <UART_EndRxTransfer+0xc8>)
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e5      	bne.n	800b692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d118      	bne.n	800b700 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	e853 3f00 	ldrex	r3, [r3]
 800b6da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	f023 0310 	bic.w	r3, r3, #16
 800b6e2:	647b      	str	r3, [r7, #68]	; 0x44
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6ec:	61bb      	str	r3, [r7, #24]
 800b6ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f0:	6979      	ldr	r1, [r7, #20]
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	e841 2300 	strex	r3, r2, [r1]
 800b6f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e6      	bne.n	800b6ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2220      	movs	r2, #32
 800b704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b714:	bf00      	nop
 800b716:	3754      	adds	r7, #84	; 0x54
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	effffffe 	.word	0xeffffffe

0800b724 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff f856 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b748:	bf00      	nop
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b088      	sub	sp, #32
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	e853 3f00 	ldrex	r3, [r3]
 800b764:	60bb      	str	r3, [r7, #8]
   return(result);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b76c:	61fb      	str	r3, [r7, #28]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	61bb      	str	r3, [r7, #24]
 800b778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77a:	6979      	ldr	r1, [r7, #20]
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	e841 2300 	strex	r3, r2, [r1]
 800b782:	613b      	str	r3, [r7, #16]
   return(result);
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1e6      	bne.n	800b758 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2220      	movs	r2, #32
 800b78e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff f821 	bl	800a7e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b79e:	bf00      	nop
 800b7a0:	3720      	adds	r7, #32
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b083      	sub	sp, #12
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b083      	sub	sp, #12
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b7c2:	bf00      	nop
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b083      	sub	sp, #12
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b085      	sub	sp, #20
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d101      	bne.n	800b7f8 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e027      	b.n	800b848 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2224      	movs	r2, #36	; 0x24
 800b804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b826:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2220      	movs	r2, #32
 800b83a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b864:	2b01      	cmp	r3, #1
 800b866:	d101      	bne.n	800b86c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b868:	2302      	movs	r3, #2
 800b86a:	e02d      	b.n	800b8c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2224      	movs	r2, #36	; 0x24
 800b878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f022 0201 	bic.w	r2, r2, #1
 800b892:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	683a      	ldr	r2, [r7, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 f84f 	bl	800b94c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d101      	bne.n	800b8e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8e4:	2302      	movs	r3, #2
 800b8e6:	e02d      	b.n	800b944 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2224      	movs	r2, #36	; 0x24
 800b8f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f022 0201 	bic.w	r2, r2, #1
 800b90e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	430a      	orrs	r2, r1
 800b922:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f811 	bl	800b94c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2220      	movs	r2, #32
 800b936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d108      	bne.n	800b96e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b96c:	e031      	b.n	800b9d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b96e:	2310      	movs	r3, #16
 800b970:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b972:	2310      	movs	r3, #16
 800b974:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	0e5b      	lsrs	r3, r3, #25
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0307 	and.w	r3, r3, #7
 800b984:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	0f5b      	lsrs	r3, r3, #29
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	f003 0307 	and.w	r3, r3, #7
 800b994:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	7b3a      	ldrb	r2, [r7, #12]
 800b99a:	4911      	ldr	r1, [pc, #68]	; (800b9e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b99c:	5c8a      	ldrb	r2, [r1, r2]
 800b99e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9a2:	7b3a      	ldrb	r2, [r7, #12]
 800b9a4:	490f      	ldr	r1, [pc, #60]	; (800b9e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b9a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	7b7a      	ldrb	r2, [r7, #13]
 800b9b8:	4909      	ldr	r1, [pc, #36]	; (800b9e0 <UARTEx_SetNbDataToProcess+0x94>)
 800b9ba:	5c8a      	ldrb	r2, [r1, r2]
 800b9bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b9c0:	7b7a      	ldrb	r2, [r7, #13]
 800b9c2:	4908      	ldr	r1, [pc, #32]	; (800b9e4 <UARTEx_SetNbDataToProcess+0x98>)
 800b9c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b9d2:	bf00      	nop
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	0800c09c 	.word	0x0800c09c
 800b9e4:	0800c0a4 	.word	0x0800c0a4

0800b9e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9e8:	b084      	sub	sp, #16
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	f107 001c 	add.w	r0, r7, #28
 800b9f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d120      	bne.n	800ba42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	4b2a      	ldr	r3, [pc, #168]	; (800babc <USB_CoreInit+0xd4>)
 800ba12:	4013      	ands	r3, r2
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d105      	bne.n	800ba36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 faac 	bl	800bf94 <USB_CoreReset>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	73fb      	strb	r3, [r7, #15]
 800ba40:	e01a      	b.n	800ba78 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 faa0 	bl	800bf94 <USB_CoreReset>
 800ba54:	4603      	mov	r3, r0
 800ba56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d106      	bne.n	800ba6c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	639a      	str	r2, [r3, #56]	; 0x38
 800ba6a:	e005      	b.n	800ba78 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d116      	bne.n	800baac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ba8c:	4b0c      	ldr	r3, [pc, #48]	; (800bac0 <USB_CoreInit+0xd8>)
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f043 0206 	orr.w	r2, r3, #6
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f043 0220 	orr.w	r2, r3, #32
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800baac:	7bfb      	ldrb	r3, [r7, #15]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bab8:	b004      	add	sp, #16
 800baba:	4770      	bx	lr
 800babc:	ffbdffbf 	.word	0xffbdffbf
 800bac0:	03ee0000 	.word	0x03ee0000

0800bac4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f023 0201 	bic.w	r2, r3, #1
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	460b      	mov	r3, r1
 800baf0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb02:	78fb      	ldrb	r3, [r7, #3]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d115      	bne.n	800bb34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb14:	2001      	movs	r0, #1
 800bb16:	f7f5 fdf5 	bl	8001704 <HAL_Delay>
      ms++;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 fa29 	bl	800bf78 <USB_GetMode>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d01e      	beq.n	800bb6a <USB_SetCurrentMode+0x84>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2b31      	cmp	r3, #49	; 0x31
 800bb30:	d9f0      	bls.n	800bb14 <USB_SetCurrentMode+0x2e>
 800bb32:	e01a      	b.n	800bb6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d115      	bne.n	800bb66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb46:	2001      	movs	r0, #1
 800bb48:	f7f5 fddc 	bl	8001704 <HAL_Delay>
      ms++;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fa10 	bl	800bf78 <USB_GetMode>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d005      	beq.n	800bb6a <USB_SetCurrentMode+0x84>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2b31      	cmp	r3, #49	; 0x31
 800bb62:	d9f0      	bls.n	800bb46 <USB_SetCurrentMode+0x60>
 800bb64:	e001      	b.n	800bb6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e005      	b.n	800bb76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2b32      	cmp	r3, #50	; 0x32
 800bb6e:	d101      	bne.n	800bb74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e000      	b.n	800bb76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bb80:	b084      	sub	sp, #16
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b086      	sub	sp, #24
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	6078      	str	r0, [r7, #4]
 800bb8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bb8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	613b      	str	r3, [r7, #16]
 800bb9e:	e009      	b.n	800bbb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	3340      	adds	r3, #64	; 0x40
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	2200      	movs	r2, #0
 800bbac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	613b      	str	r3, [r7, #16]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b0e      	cmp	r3, #14
 800bbb8:	d9f2      	bls.n	800bba0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d11c      	bne.n	800bbfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbce:	f043 0302 	orr.w	r3, r3, #2
 800bbd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	e005      	b.n	800bc06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	2300      	movs	r3, #0
 800bc10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc18:	4619      	mov	r1, r3
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc20:	461a      	mov	r2, r3
 800bc22:	680b      	ldr	r3, [r1, #0]
 800bc24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d10c      	bne.n	800bc46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d104      	bne.n	800bc3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc32:	2100      	movs	r1, #0
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f965 	bl	800bf04 <USB_SetDevSpeed>
 800bc3a:	e008      	b.n	800bc4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f960 	bl	800bf04 <USB_SetDevSpeed>
 800bc44:	e003      	b.n	800bc4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bc46:	2103      	movs	r1, #3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f95b 	bl	800bf04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bc4e:	2110      	movs	r1, #16
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f8f3 	bl	800be3c <USB_FlushTxFifo>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 f91f 	bl	800bea4 <USB_FlushRxFifo>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d001      	beq.n	800bc70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc76:	461a      	mov	r2, r3
 800bc78:	2300      	movs	r3, #0
 800bc7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc82:	461a      	mov	r2, r3
 800bc84:	2300      	movs	r3, #0
 800bc86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8e:	461a      	mov	r2, r3
 800bc90:	2300      	movs	r3, #0
 800bc92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc94:	2300      	movs	r3, #0
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	e043      	b.n	800bd22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	015a      	lsls	r2, r3, #5
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4413      	add	r3, r2
 800bca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb0:	d118      	bne.n	800bce4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	e013      	b.n	800bcf6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	e008      	b.n	800bcf6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	015a      	lsls	r2, r3, #5
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4413      	add	r3, r2
 800bcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	015a      	lsls	r2, r3, #5
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd02:	461a      	mov	r2, r3
 800bd04:	2300      	movs	r3, #0
 800bd06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	015a      	lsls	r2, r3, #5
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4413      	add	r3, r2
 800bd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd14:	461a      	mov	r2, r3
 800bd16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	3301      	adds	r3, #1
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd24:	693a      	ldr	r2, [r7, #16]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d3b7      	bcc.n	800bc9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	613b      	str	r3, [r7, #16]
 800bd2e:	e043      	b.n	800bdb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd46:	d118      	bne.n	800bd7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10a      	bne.n	800bd64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	015a      	lsls	r2, r3, #5
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	4413      	add	r3, r2
 800bd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd60:	6013      	str	r3, [r2, #0]
 800bd62:	e013      	b.n	800bd8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd70:	461a      	mov	r2, r3
 800bd72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	e008      	b.n	800bd8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	015a      	lsls	r2, r3, #5
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd86:	461a      	mov	r2, r3
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd98:	461a      	mov	r2, r3
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	015a      	lsls	r2, r3, #5
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bdb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	613b      	str	r3, [r7, #16]
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d3b7      	bcc.n	800bd30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bde0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d105      	bne.n	800bdf4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	f043 0210 	orr.w	r2, r3, #16
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	699a      	ldr	r2, [r3, #24]
 800bdf8:	4b0e      	ldr	r3, [pc, #56]	; (800be34 <USB_DevInit+0x2b4>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be02:	2b00      	cmp	r3, #0
 800be04:	d005      	beq.n	800be12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	f043 0208 	orr.w	r2, r3, #8
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be14:	2b01      	cmp	r3, #1
 800be16:	d105      	bne.n	800be24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	699a      	ldr	r2, [r3, #24]
 800be1c:	4b06      	ldr	r3, [pc, #24]	; (800be38 <USB_DevInit+0x2b8>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be24:	7dfb      	ldrb	r3, [r7, #23]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3718      	adds	r7, #24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be30:	b004      	add	sp, #16
 800be32:	4770      	bx	lr
 800be34:	803c3800 	.word	0x803c3800
 800be38:	40000004 	.word	0x40000004

0800be3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be46:	2300      	movs	r3, #0
 800be48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	4a13      	ldr	r2, [pc, #76]	; (800bea0 <USB_FlushTxFifo+0x64>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d901      	bls.n	800be5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be58:	2303      	movs	r3, #3
 800be5a:	e01b      	b.n	800be94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	2b00      	cmp	r3, #0
 800be62:	daf2      	bge.n	800be4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	019b      	lsls	r3, r3, #6
 800be6c:	f043 0220 	orr.w	r2, r3, #32
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3301      	adds	r3, #1
 800be78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	4a08      	ldr	r2, [pc, #32]	; (800bea0 <USB_FlushTxFifo+0x64>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d901      	bls.n	800be86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be82:	2303      	movs	r3, #3
 800be84:	e006      	b.n	800be94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	f003 0320 	and.w	r3, r3, #32
 800be8e:	2b20      	cmp	r3, #32
 800be90:	d0f0      	beq.n	800be74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr
 800bea0:	00030d40 	.word	0x00030d40

0800bea4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800beac:	2300      	movs	r3, #0
 800beae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	3301      	adds	r3, #1
 800beb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	4a11      	ldr	r2, [pc, #68]	; (800bf00 <USB_FlushRxFifo+0x5c>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d901      	bls.n	800bec2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e018      	b.n	800bef4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	daf2      	bge.n	800beb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2210      	movs	r2, #16
 800bed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3301      	adds	r3, #1
 800bed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	4a08      	ldr	r2, [pc, #32]	; (800bf00 <USB_FlushRxFifo+0x5c>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d901      	bls.n	800bee6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bee2:	2303      	movs	r3, #3
 800bee4:	e006      	b.n	800bef4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	f003 0310 	and.w	r3, r3, #16
 800beee:	2b10      	cmp	r3, #16
 800bef0:	d0f0      	beq.n	800bed4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bef2:	2300      	movs	r3, #0
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	00030d40 	.word	0x00030d40

0800bf04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	78fb      	ldrb	r3, [r7, #3]
 800bf1e:	68f9      	ldr	r1, [r7, #12]
 800bf20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf24:	4313      	orrs	r3, r2
 800bf26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3714      	adds	r7, #20
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b085      	sub	sp, #20
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf50:	f023 0303 	bic.w	r3, r3, #3
 800bf54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf64:	f043 0302 	orr.w	r3, r3, #2
 800bf68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	f003 0301 	and.w	r3, r3, #1
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b085      	sub	sp, #20
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	4a13      	ldr	r2, [pc, #76]	; (800bff8 <USB_CoreReset+0x64>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d901      	bls.n	800bfb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e01b      	b.n	800bfea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	daf2      	bge.n	800bfa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	f043 0201 	orr.w	r2, r3, #1
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	4a09      	ldr	r2, [pc, #36]	; (800bff8 <USB_CoreReset+0x64>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d901      	bls.n	800bfdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e006      	b.n	800bfea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d0f0      	beq.n	800bfca <USB_CoreReset+0x36>

  return HAL_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3714      	adds	r7, #20
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	00030d40 	.word	0x00030d40

0800bffc <memset>:
 800bffc:	4402      	add	r2, r0
 800bffe:	4603      	mov	r3, r0
 800c000:	4293      	cmp	r3, r2
 800c002:	d100      	bne.n	800c006 <memset+0xa>
 800c004:	4770      	bx	lr
 800c006:	f803 1b01 	strb.w	r1, [r3], #1
 800c00a:	e7f9      	b.n	800c000 <memset+0x4>

0800c00c <__libc_init_array>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	4d0d      	ldr	r5, [pc, #52]	; (800c044 <__libc_init_array+0x38>)
 800c010:	4c0d      	ldr	r4, [pc, #52]	; (800c048 <__libc_init_array+0x3c>)
 800c012:	1b64      	subs	r4, r4, r5
 800c014:	10a4      	asrs	r4, r4, #2
 800c016:	2600      	movs	r6, #0
 800c018:	42a6      	cmp	r6, r4
 800c01a:	d109      	bne.n	800c030 <__libc_init_array+0x24>
 800c01c:	4d0b      	ldr	r5, [pc, #44]	; (800c04c <__libc_init_array+0x40>)
 800c01e:	4c0c      	ldr	r4, [pc, #48]	; (800c050 <__libc_init_array+0x44>)
 800c020:	f000 f818 	bl	800c054 <_init>
 800c024:	1b64      	subs	r4, r4, r5
 800c026:	10a4      	asrs	r4, r4, #2
 800c028:	2600      	movs	r6, #0
 800c02a:	42a6      	cmp	r6, r4
 800c02c:	d105      	bne.n	800c03a <__libc_init_array+0x2e>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f855 3b04 	ldr.w	r3, [r5], #4
 800c034:	4798      	blx	r3
 800c036:	3601      	adds	r6, #1
 800c038:	e7ee      	b.n	800c018 <__libc_init_array+0xc>
 800c03a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c03e:	4798      	blx	r3
 800c040:	3601      	adds	r6, #1
 800c042:	e7f2      	b.n	800c02a <__libc_init_array+0x1e>
 800c044:	0800c0b4 	.word	0x0800c0b4
 800c048:	0800c0b4 	.word	0x0800c0b4
 800c04c:	0800c0b4 	.word	0x0800c0b4
 800c050:	0800c0b8 	.word	0x0800c0b8

0800c054 <_init>:
 800c054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c056:	bf00      	nop
 800c058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c05a:	bc08      	pop	{r3}
 800c05c:	469e      	mov	lr, r3
 800c05e:	4770      	bx	lr

0800c060 <_fini>:
 800c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c062:	bf00      	nop
 800c064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c066:	bc08      	pop	{r3}
 800c068:	469e      	mov	lr, r3
 800c06a:	4770      	bx	lr
