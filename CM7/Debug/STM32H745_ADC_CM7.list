
STM32H745_ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b184  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800b424  0800b424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4a4  0800b4a4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4a4  0800b4a4  0001b4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4ac  0800b4ac  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4ac  0800b4ac  0001b4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800b4b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000239c  24000060  0800b514  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240023fc  0800b514  000223fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba86  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec4  00000000  00000000  0003bb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  0003ea20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4c  00000000  00000000  0003fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d51e  00000000  00000000  00040aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a395  00000000  00000000  0007e00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019aef9  00000000  00000000  0009839f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053f8  00000000  00000000  00233298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00238690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b40c 	.word	0x0800b40c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b40c 	.word	0x0800b40c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <myprintf2>:
  _write(0, (char*)buffer,len);
  //HAL_USART_Transmit(&husart2, (uint8_t*)buffer, len, -1);

}

void myprintf2(const char *fmt, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <myprintf2+0x44>)
 80007ce:	f00a f98b 	bl	800aae8 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <myprintf2+0x44>)
 80007d4:	f7ff fd84 	bl	80002e0 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <myprintf2+0x44>)
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <myprintf2+0x48>)
 80007e8:	f009 f83d 	bl	8009866 <HAL_UART_Transmit>

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24002244 	.word	0x24002244
 8000800:	24002178 	.word	0x24002178

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef _time;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000810:	bf00      	nop
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <main+0x100>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <main+0x24>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	61fa      	str	r2, [r7, #28]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dcf4      	bgt.n	8000812 <main+0xe>
  if ( timeout < 0 )
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	da01      	bge.n	8000832 <main+0x2e>
  {
  Error_Handler();
 800082e:	f000 fbd3 	bl	8000fd8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fe77 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f875 	bl	8000924 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800083a:	f000 f8ed 	bl	8000a18 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <main+0x100>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <main+0x100>)
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <main+0x100>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085c:	2000      	movs	r0, #0
 800085e:	f004 fedd 	bl	800561c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f004 fef3 	bl	8005650 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000870:	bf00      	nop
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <main+0x100>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d104      	bne.n	8000888 <main+0x84>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	61fa      	str	r2, [r7, #28]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dcf4      	bgt.n	8000872 <main+0x6e>
if ( timeout < 0 )
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	2b00      	cmp	r3, #0
 800088c:	da01      	bge.n	8000892 <main+0x8e>
{
Error_Handler();
 800088e:	f000 fba3 	bl	8000fd8 <Error_Handler>
  //SWD_Init();
  //write(0,"Hello",5);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fab9 	bl	8000e08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000896:	f000 fa97 	bl	8000dc8 <MX_DMA_Init>
  //MX_LPUART1_UART_Init();
  MX_USART3_UART_Init();
 800089a:	f000 fa49 	bl	8000d30 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800089e:	f000 f951 	bl	8000b44 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008a2:	f000 f9d9 	bl	8000c58 <MX_ADC2_Init>
  MX_RTC_Init();
 80008a6:	f000 f8e7 	bl	8000a78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BCD);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	4815      	ldr	r0, [pc, #84]	; (8000908 <main+0x104>)
 80008b2:	f008 fd3f 	bl	8009334 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BCD);
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <main+0x104>)
 80008c0:	f008 fe1c 	bl	80094fc <HAL_RTC_GetDate>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t *)ADC_DualModeVal,4);
 80008c4:	2204      	movs	r2, #4
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <main+0x108>)
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <main+0x10c>)
 80008ca:	f002 f935 	bl	8002b38 <HAL_ADCEx_MultiModeStart_DMA>

  while (1)
  {

	  //if(ctr==BUFFER_SIZE)
	  if(gidxA == BFR_SIZE)
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <main+0x110>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008d6:	d110      	bne.n	80008fa <main+0xf6>
#if USE_FOR_LORA
			PeakDetectnEdge();
#endif
			//TransferDataADC();
			//myprintf2("ADC0 : \n");
			printBuffers(buffer1, buffer2, 100);
 80008d8:	2264      	movs	r2, #100	; 0x64
 80008da:	490f      	ldr	r1, [pc, #60]	; (8000918 <main+0x114>)
 80008dc:	480f      	ldr	r0, [pc, #60]	; (800091c <main+0x118>)
 80008de:	f000 fb53 	bl	8000f88 <printBuffers>
			HAL_Delay(3000);
 80008e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008e6:	f000 feaf 	bl	8001648 <HAL_Delay>
		  ctr=0;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <main+0x11c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
		  gidxA = 0;
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <main+0x110>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
		  MX_DMA_Init();
 80008f6:	f000 fa67 	bl	8000dc8 <MX_DMA_Init>
	  }

	  HAL_Delay(1000);
 80008fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fe:	f000 fea3 	bl	8001648 <HAL_Delay>
	  if(gidxA == BFR_SIZE)
 8000902:	e7e4      	b.n	80008ce <main+0xca>
 8000904:	58024400 	.word	0x58024400
 8000908:	2400220c 	.word	0x2400220c
 800090c:	24002230 	.word	0x24002230
 8000910:	24001fc0 	.word	0x24001fc0
 8000914:	24001fbc 	.word	0x24001fbc
 8000918:	2400101c 	.word	0x2400101c
 800091c:	2400007c 	.word	0x2400007c
 8000920:	24002240 	.word	0x24002240

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	224c      	movs	r2, #76	; 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f00a f8e6 	bl	800ab04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f00a f8e0 	bl	800ab04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000944:	2004      	movs	r0, #4
 8000946:	f004 fe97 	bl	8005678 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <SystemClock_Config+0xec>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <SystemClock_Config+0xec>)
 8000954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <SystemClock_Config+0xec>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <SystemClock_Config+0xf0>)
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <SystemClock_Config+0xf0>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <SystemClock_Config+0xf0>)
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800097c:	bf00      	nop
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <SystemClock_Config+0xec>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098a:	d1f8      	bne.n	800097e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000990:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	2302      	movs	r3, #2
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009a2:	2378      	movs	r3, #120	; 0x78
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b2:	230c      	movs	r3, #12
 80009b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f004 feb2 	bl	800572c <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009ce:	f000 fb03 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	233f      	movs	r3, #63	; 0x3f
 80009d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009de:	2308      	movs	r3, #8
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2104      	movs	r1, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f005 faf1 	bl	8005fe0 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a04:	f000 fae8 	bl	8000fd8 <Error_Handler>
  }

   //HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_8);

}
 8000a08:	bf00      	nop
 8000a0a:	3770      	adds	r7, #112	; 0x70
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58024800 	.word	0x58024800
 8000a14:	58000400 	.word	0x58000400

08000a18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b0b0      	sub	sp, #192	; 0xc0
 8000a1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a1e:	463b      	mov	r3, r7
 8000a20:	22c0      	movs	r2, #192	; 0xc0
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f00a f86d 	bl	800ab04 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a2e:	f04f 0300 	mov.w	r3, #0
 8000a32:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a4a:	23c0      	movs	r3, #192	; 0xc0
 8000a4c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a4e:	2320      	movs	r3, #32
 8000a50:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f005 fe4a 	bl	80066f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a6a:	f000 fab5 	bl	8000fd8 <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	37c0      	adds	r7, #192	; 0xc0
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000a92:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <MX_RTC_Init+0xc8>)
 8000a94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a96:	4b29      	ldr	r3, [pc, #164]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000a9e:	227f      	movs	r2, #127	; 0x7f
 8000aa0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000aa4:	22ff      	movs	r2, #255	; 0xff
 8000aa6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ac0:	481e      	ldr	r0, [pc, #120]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000ac2:	f008 fb17 	bl	80090f4 <HAL_RTC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 fa84 	bl	8000fd8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = HOURS;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MINUTES;
 8000ad4:	2306      	movs	r3, #6
 8000ad6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4814      	ldr	r0, [pc, #80]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000aec:	f008 fb84 	bl	80091f8 <HAL_RTC_SetTime>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000af6:	f000 fa6f 	bl	8000fd8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000afa:	2307      	movs	r3, #7
 8000afc:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8000afe:	2310      	movs	r3, #16
 8000b00:	707b      	strb	r3, [r7, #1]
  sDate.Date = DATE;
 8000b02:	2310      	movs	r3, #16
 8000b04:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8000b06:	2323      	movs	r3, #35	; 0x23
 8000b08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000b12:	f008 fc6b 	bl	80093ec <HAL_RTC_SetDate>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b1c:	f000 fa5c 	bl	8000fd8 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000b20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_RTC_Init+0xc4>)
 8000b26:	f008 fe07 	bl	8009738 <HAL_RTCEx_SetCalibrationOutPut>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000b30:	f000 fa52 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2400220c 	.word	0x2400220c
 8000b40:	58004000 	.word	0x58004000

08000b44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b68:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b6a:	4a39      	ldr	r2, [pc, #228]	; (8000c50 <MX_ADC1_Init+0x10c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b6e:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b74:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b76:	2208      	movs	r2, #8
 8000b78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000bc6:	f000 ff55 	bl	8001a74 <HAL_ADC_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f000 fa02 	bl	8000fd8 <Error_Handler>



  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_ADC1_Init+0x110>)
 8000bd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd8:	2306      	movs	r3, #6
 8000bda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000be4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be6:	2304      	movs	r3, #4
 8000be8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4815      	ldr	r0, [pc, #84]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000bf8:	f001 f8f2 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c02:	f000 f9e9 	bl	8000fd8 <Error_Handler>
  }

/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000c06:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000c10:	f001 ff2e 	bl	8002a70 <HAL_ADCEx_Calibration_Start>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ADC1_Init+0xda>
  {
    /* Calibration Error */
    Error_Handler();
 8000c1a:	f000 f9dd 	bl	8000fd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c26:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <MX_ADC1_Init+0x108>)
 8000c34:	f002 f830 	bl	8002c98 <HAL_ADCEx_MultiModeConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000c3e:	f000 f9cb 	bl	8000fd8 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	; 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24001fc0 	.word	0x24001fc0
 8000c50:	40022000 	.word	0x40022000
 8000c54:	0c900008 	.word	0x0c900008

08000c58 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c70:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c72:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <MX_ADC2_Init+0xd0>)
 8000c74:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c7e:	2208      	movs	r2, #8
 8000c80:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cb2:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cc0:	4818      	ldr	r0, [pc, #96]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000cc2:	f000 fed7 	bl	8001a74 <HAL_ADC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000ccc:	f000 f984 	bl	8000fd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_ADC2_Init+0xd4>)
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cdc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ce0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000cf4:	f001 f874 	bl	8001de0 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000cfe:	f000 f96b 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000d02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_ADC2_Init+0xcc>)
 8000d0c:	f001 feb0 	bl	8002a70 <HAL_ADCEx_Calibration_Start>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC2_Init+0xc2>
  {
    /* Calibration Error */
    Error_Handler();
 8000d16:	f000 f95f 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE END ADC2_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	3720      	adds	r7, #32
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24002024 	.word	0x24002024
 8000d28:	40022100 	.word	0x40022100
 8000d2c:	0c900008 	.word	0x0c900008

08000d30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d36:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <MX_USART3_UART_Init+0x94>)
 8000d38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d78:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d7a:	f008 fd24 	bl	80097c6 <HAL_UART_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d84:	f000 f928 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d8c:	f009 fdb5 	bl	800a8fa <HAL_UARTEx_SetTxFifoThreshold>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d96:	f000 f91f 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000d9e:	f009 fdea 	bl	800a976 <HAL_UARTEx_SetRxFifoThreshold>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000da8:	f000 f916 	bl	8000fd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_USART3_UART_Init+0x90>)
 8000dae:	f009 fd6b 	bl	800a888 <HAL_UARTEx_DisableFifoMode>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000db8:	f000 f90e 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	24002178 	.word	0x24002178
 8000dc4:	40004800 	.word	0x40004800

08000dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	200b      	movs	r0, #11
 8000df2:	f002 f92e 	bl	8003052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000df6:	200b      	movs	r0, #11
 8000df8:	f002 f945 	bl	8003086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);

}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024400 	.word	0x58024400

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b45      	ldr	r3, [pc, #276]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	4a43      	ldr	r2, [pc, #268]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2c:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e32:	4a3c      	ldr	r2, [pc, #240]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a34      	ldr	r2, [pc, #208]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a2d      	ldr	r2, [pc, #180]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]


 GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_GPIO_Init+0x11c>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]

  /* Configure PC.13 pin as the EXTI input event line in interrupt mode for both CPU1 and CPU2*/
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;    /* current CPU (CM7) config in IT rising */
 8000ee0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5;
 8000eea:	2320      	movs	r3, #32
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  //HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;    /* current CPU (CM7) config in IT rising */
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_9;
 8000efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f04:	f107 031c 	add.w	r3, r7, #28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4807      	ldr	r0, [pc, #28]	; (8000f28 <MX_GPIO_Init+0x120>)
 8000f0c:	f004 f9bc 	bl	8005288 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_GPIO_Init+0x120>)
 8000f18:	f004 fb66 	bl	80055e8 <HAL_GPIO_WritePin>
  /* Configure the second CPU (CM4) EXTI line for IT*/
 // HAL_EXTI_D1_EventInputConfig(EXTI_LINE5 , EXTI_MODE_IT,  ENABLE);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3730      	adds	r7, #48	; 0x30
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58020800 	.word	0x58020800

08000f2c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
		//HAL_ADC_Stop(&hadc2);
    	//HAL_ADCEx_MultiModeStop_DMA(&hdma_adc1);
    }
    */

    if(gidxA < BFR_SIZE)
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f3c:	da15      	bge.n	8000f6a <HAL_ADC_ConvCpltCallback+0x3e>
    {
    	buffer1[gidxA] = (ADC_DualModeVal[0] >> 16);
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x50>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0c12      	lsrs	r2, r2, #16
 8000f48:	490d      	ldr	r1, [pc, #52]	; (8000f80 <HAL_ADC_ConvCpltCallback+0x54>)
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	buffer2[gidxA] = (ADC_DualModeVal[1] >> 16);
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <HAL_ADC_ConvCpltCallback+0x50>)
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0c12      	lsrs	r2, r2, #16
 8000f58:	490a      	ldr	r1, [pc, #40]	; (8000f84 <HAL_ADC_ConvCpltCallback+0x58>)
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	gidxA++;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000f66:	6013      	str	r3, [r2, #0]
    else
    {
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
    }

}
 8000f68:	e002      	b.n	8000f70 <HAL_ADC_ConvCpltCallback+0x44>
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000f6a:	200b      	movs	r0, #11
 8000f6c:	f002 f899 	bl	80030a2 <HAL_NVIC_DisableIRQ>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	24001fbc 	.word	0x24001fbc
 8000f7c:	24002230 	.word	0x24002230
 8000f80:	2400007c 	.word	0x2400007c
 8000f84:	2400101c 	.word	0x2400101c

08000f88 <printBuffers>:


}

void printBuffers(uint32_t *bfr1, uint32_t *bfr2, int size)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
	int lidx = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

	for(lidx=0;lidx < size; lidx++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e010      	b.n	8000fc0 <printBuffers+0x38>
	{
		myprintf2("%d, %d\r\n", bfr1[lidx], bfr2[lidx]);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <printBuffers+0x4c>)
 8000fb6:	f7ff fbff 	bl	80007b8 <myprintf2>
	for(lidx=0;lidx < size; lidx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbea      	blt.n	8000f9e <printBuffers+0x16>
	}
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	0800b424 	.word	0x0800b424

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_MspInit+0x30>)
 8000fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff0:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x30>)
 8000ff2:	f043 0302 	orr.w	r3, r3, #2
 8000ff6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x30>)
 8000ffc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a58      	ldr	r2, [pc, #352]	; (8001198 <HAL_ADC_MspInit+0x180>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d17d      	bne.n	8001136 <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800103a:	4b58      	ldr	r3, [pc, #352]	; (800119c <HAL_ADC_MspInit+0x184>)
 800103c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001040:	4a56      	ldr	r2, [pc, #344]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001042:	f043 0301 	orr.w	r3, r3, #1
 8001046:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800104a:	4b54      	ldr	r3, [pc, #336]	; (800119c <HAL_ADC_MspInit+0x184>)
 800104c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001058:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <HAL_ADC_MspInit+0x188>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <HAL_ADC_MspInit+0x188>)
 8001060:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001062:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <HAL_ADC_MspInit+0x188>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10e      	bne.n	8001088 <HAL_ADC_MspInit+0x70>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_ADC_MspInit+0x184>)
 800106c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001070:	4a4a      	ldr	r2, [pc, #296]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001072:	f043 0320 	orr.w	r3, r3, #32
 8001076:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <HAL_ADC_MspInit+0x184>)
 800107c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001080:	f003 0320 	and.w	r3, r3, #32
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b44      	ldr	r3, [pc, #272]	; (800119c <HAL_ADC_MspInit+0x184>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	4a43      	ldr	r2, [pc, #268]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <HAL_ADC_MspInit+0x184>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a6:	2340      	movs	r3, #64	; 0x40
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	2303      	movs	r3, #3
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	483a      	ldr	r0, [pc, #232]	; (80011a4 <HAL_ADC_MspInit+0x18c>)
 80010ba:	f004 f8e5 	bl	8005288 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010c0:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <HAL_ADC_MspInit+0x194>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010c6:	2209      	movs	r2, #9
 80010c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ca:	4b37      	ldr	r3, [pc, #220]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 80010e6:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 80010f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010fc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010fe:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 8001100:	2204      	movs	r2, #4
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 8001106:	2203      	movs	r2, #3
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 800110c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001118:	4823      	ldr	r0, [pc, #140]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 800111a:	f001 ffdd 	bl	80030d8 <HAL_DMA_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8001124:	f7ff ff58 	bl	8000fd8 <Error_Handler>
    }

   __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 800112c:	64da      	str	r2, [r3, #76]	; 0x4c
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <HAL_ADC_MspInit+0x190>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6393      	str	r3, [r2, #56]	; 0x38
    // HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
    // HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001134:	e02b      	b.n	800118e <HAL_ADC_MspInit+0x176>
  else if(hadc->Instance==ADC2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_ADC_MspInit+0x198>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d126      	bne.n	800118e <HAL_ADC_MspInit+0x176>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_ADC_MspInit+0x188>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_ADC_MspInit+0x188>)
 8001148:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_ADC_MspInit+0x188>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d10e      	bne.n	8001170 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_ADC_MspInit+0x184>)
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001164:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_ADC_MspInit+0x184>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
}
 800118e:	bf00      	nop
 8001190:	3730      	adds	r7, #48	; 0x30
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022000 	.word	0x40022000
 800119c:	58024400 	.word	0x58024400
 80011a0:	240022a8 	.word	0x240022a8
 80011a4:	58020000 	.word	0x58020000
 80011a8:	24002088 	.word	0x24002088
 80011ac:	40020010 	.word	0x40020010
 80011b0:	40022100 	.word	0x40022100

080011b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ba      	sub	sp, #232	; 0xe8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	22c0      	movs	r2, #192	; 0xc0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f009 fc95 	bl	800ab04 <memset>
  if(hrtc->Instance==RTC)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a22      	ldr	r2, [pc, #136]	; (8001268 <HAL_RTC_MspInit+0xb4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d13d      	bne.n	8001260 <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fa7b 	bl	80066f8 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 8001208:	f7ff fee6 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_RTC_MspInit+0xb8>)
 800120e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001210:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_RTC_MspInit+0xb8>)
 8001212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001216:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_RTC_MspInit+0xb8>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <HAL_RTC_MspInit+0xb8>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_RTC_MspInit+0xb8>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001236:	2304      	movs	r3, #4
 8001238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001258:	4619      	mov	r1, r3
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <HAL_RTC_MspInit+0xbc>)
 800125c:	f004 f814 	bl	8005288 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	37e8      	adds	r7, #232	; 0xe8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	58004000 	.word	0x58004000
 800126c:	58024400 	.word	0x58024400
 8001270:	58020400 	.word	0x58020400

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0bc      	sub	sp, #240	; 0xf0
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	22c0      	movs	r2, #192	; 0xc0
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f009 fc35 	bl	800ab04 <memset>

  if(huart->Instance==LPUART1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a4d      	ldr	r2, [pc, #308]	; (80013d4 <HAL_UART_MspInit+0x160>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d146      	bne.n	8001332 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012a4:	f04f 0204 	mov.w	r2, #4
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	f107 0318 	add.w	r3, r7, #24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f005 fa1c 	bl	80066f8 <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012c6:	f7ff fe87 	bl	8000fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012ca:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <HAL_UART_MspInit+0x164>)
 80012cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d0:	4a41      	ldr	r2, [pc, #260]	; (80013d8 <HAL_UART_MspInit+0x164>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_UART_MspInit+0x164>)
 80012dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b3b      	ldr	r3, [pc, #236]	; (80013d8 <HAL_UART_MspInit+0x164>)
 80012ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ee:	4a3a      	ldr	r2, [pc, #232]	; (80013d8 <HAL_UART_MspInit+0x164>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <HAL_UART_MspInit+0x164>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001306:	23c0      	movs	r3, #192	; 0xc0
 8001308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800131e:	2308      	movs	r3, #8
 8001320:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001328:	4619      	mov	r1, r3
 800132a:	482c      	ldr	r0, [pc, #176]	; (80013dc <HAL_UART_MspInit+0x168>)
 800132c:	f003 ffac 	bl	8005288 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001330:	e04b      	b.n	80013ca <HAL_UART_MspInit+0x156>
  if(huart->Instance==USART3)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <HAL_UART_MspInit+0x16c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d146      	bne.n	80013ca <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800133c:	f04f 0202 	mov.w	r2, #2
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134e:	f107 0318 	add.w	r3, r7, #24
 8001352:	4618      	mov	r0, r3
 8001354:	f005 f9d0 	bl	80066f8 <HAL_RCCEx_PeriphCLKConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800135e:	f7ff fe3b 	bl	8000fd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_UART_MspInit+0x164>)
 8001364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x164>)
 800136a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800136e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x164>)
 8001374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x164>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x164>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_UART_MspInit+0x164>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800139e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b8:	2307      	movs	r3, #7
 80013ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <HAL_UART_MspInit+0x170>)
 80013c6:	f003 ff5f 	bl	8005288 <HAL_GPIO_Init>
}
 80013ca:	bf00      	nop
 80013cc:	37f0      	adds	r7, #240	; 0xf0
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	58000c00 	.word	0x58000c00
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58020400 	.word	0x58020400
 80013e0:	40004800 	.word	0x40004800
 80013e4:	58020c00 	.word	0x58020c00

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f8e8 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <DMA1_Stream0_IRQHandler+0x10>)
 8001442:	f002 fc0f 	bl	8003c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24002088 	.word	0x24002088

08001450 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <DMA1_Stream1_IRQHandler+0x10>)
 8001456:	f002 fc05 	bl	8003c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	24002100 	.word	0x24002100

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f009 fb3e 	bl	800ab14 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	24080000 	.word	0x24080000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	240022ac 	.word	0x240022ac
 80014cc:	24002400 	.word	0x24002400

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014d4:	f7ff f8da 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f009 fb0f 	bl	800ab20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff f97f 	bl	8000804 <main>
  bx  lr
 8001506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800150c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001510:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001514:	0800b4b4 	.word	0x0800b4b4
  ldr r2, =_sbss
 8001518:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 800151c:	240023fc 	.word	0x240023fc

08001520 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC3_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152a:	2003      	movs	r0, #3
 800152c:	f001 fd86 	bl	800303c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001530:	f004 ff0c 	bl	800634c <HAL_RCC_GetSysClockFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_Init+0x68>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	4913      	ldr	r1, [pc, #76]	; (8001590 <HAL_Init+0x6c>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_Init+0x68>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_Init+0x6c>)
 8001558:	5cd3      	ldrb	r3, [r2, r3]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	fa22 f303 	lsr.w	r3, r2, r3
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <HAL_Init+0x70>)
 8001566:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <HAL_Init+0x74>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f814 	bl	800159c <HAL_InitTick>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e002      	b.n	8001584 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800157e:	f7ff fd31 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	58024400 	.word	0x58024400
 8001590:	0800b430 	.word	0x0800b430
 8001594:	24000004 	.word	0x24000004
 8001598:	24000000 	.word	0x24000000

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_InitTick+0x60>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e021      	b.n	80015f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_InitTick+0x64>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_InitTick+0x60>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015be:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fd79 	bl	80030be <HAL_SYSTICK_Config>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00e      	b.n	80015f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b0f      	cmp	r3, #15
 80015da:	d80a      	bhi.n	80015f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015dc:	2200      	movs	r2, #0
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f001 fd35 	bl	8003052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_InitTick+0x68>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2400000c 	.word	0x2400000c
 8001600:	24000000 	.word	0x24000000
 8001604:	24000008 	.word	0x24000008

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2400000c 	.word	0x2400000c
 800162c:	240022b0 	.word	0x240022b0

08001630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return uwTick;
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_GetTick+0x14>)
 8001636:	681b      	ldr	r3, [r3, #0]
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	240022b0 	.word	0x240022b0

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff ffee 	bl	8001630 <HAL_GetTick>
 8001654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800166e:	bf00      	nop
 8001670:	f7ff ffde 	bl	8001630 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2400000c 	.word	0x2400000c

08001690 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <HAL_GetREVID+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	0c1b      	lsrs	r3, r3, #16
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	5c001000 	.word	0x5c001000

080016a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	609a      	str	r2, [r3, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3360      	adds	r3, #96	; 0x60
 8001722:	461a      	mov	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001744:	bf00      	nop
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	431a      	orrs	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	611a      	str	r2, [r3, #16]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001782:	b480      	push	{r7}
 8001784:	b087      	sub	sp, #28
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3360      	adds	r3, #96	; 0x60
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]
  }
}
 80017ac:	bf00      	nop
 80017ae:	371c      	adds	r7, #28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017de:	b480      	push	{r7}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3330      	adds	r3, #48	; 0x30
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	4413      	add	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	211f      	movs	r1, #31
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0e9b      	lsrs	r3, r3, #26
 8001816:	f003 011f 	and.w	r1, r3, #31
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001836:	b480      	push	{r7}
 8001838:	b087      	sub	sp, #28
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3314      	adds	r3, #20
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	0e5b      	lsrs	r3, r3, #25
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	0d1b      	lsrs	r3, r3, #20
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2107      	movs	r1, #7
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	0d1b      	lsrs	r3, r3, #20
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	431a      	orrs	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018a4:	43db      	mvns	r3, r3
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0318 	and.w	r3, r3, #24
 80018ae:	4908      	ldr	r1, [pc, #32]	; (80018d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018b0:	40d9      	lsrs	r1, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	400b      	ands	r3, r1
 80018b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018ba:	431a      	orrs	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	000fffff 	.word	0x000fffff

080018d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 031f 	and.w	r3, r3, #31
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <LL_ADC_DisableDeepPowerDown+0x20>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6093      	str	r3, [r2, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	5fffffc0 	.word	0x5fffffc0

08001914 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001928:	d101      	bne.n	800192e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <LL_ADC_EnableInternalRegulator+0x24>)
 800194a:	4013      	ands	r3, r2
 800194c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	6fffffc0 	.word	0x6fffffc0

08001964 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001978:	d101      	bne.n	800197e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <LL_ADC_Enable+0x24>)
 800199a:	4013      	ands	r3, r2
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	7fffffc0 	.word	0x7fffffc0

080019b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <LL_ADC_Disable+0x24>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	f043 0202 	orr.w	r2, r3, #2
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	7fffffc0 	.word	0x7fffffc0

080019dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <LL_ADC_IsEnabled+0x18>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <LL_ADC_IsEnabled+0x1a>
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d101      	bne.n	8001a1a <LL_ADC_IsDisableOngoing+0x18>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <LL_ADC_IsDisableOngoing+0x1a>
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d101      	bne.n	8001a40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d101      	bne.n	8001a66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e18f      	b.n	8001dae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fabb 	bl	8001018 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff2d 	bl	8001914 <LL_ADC_IsDeepPowerDownEnabled>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff13 	bl	80018f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff48 	bl	8001964 <LL_ADC_IsInternalRegulatorEnabled>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d114      	bne.n	8001b04 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff2c 	bl	800193c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ae4:	4b87      	ldr	r3, [pc, #540]	; (8001d04 <HAL_ADC_Init+0x290>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	099b      	lsrs	r3, r3, #6
 8001aea:	4a87      	ldr	r2, [pc, #540]	; (8001d08 <HAL_ADC_Init+0x294>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	099b      	lsrs	r3, r3, #6
 8001af2:	3301      	adds	r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001af6:	e002      	b.n	8001afe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1f9      	bne.n	8001af8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff2b 	bl	8001964 <LL_ADC_IsInternalRegulatorEnabled>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10d      	bne.n	8001b30 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b18:	f043 0210 	orr.w	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff77 	bl	8001a28 <LL_ADC_REG_IsConversionOngoing>
 8001b3a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 8129 	bne.w	8001d9c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 8125 	bne.w	8001d9c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b5a:	f043 0202 	orr.w	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff38 	bl	80019dc <LL_ADC_IsEnabled>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d136      	bne.n	8001be0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_ADC_Init+0x298>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d004      	beq.n	8001b86 <HAL_ADC_Init+0x112>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a63      	ldr	r2, [pc, #396]	; (8001d10 <HAL_ADC_Init+0x29c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d10e      	bne.n	8001ba4 <HAL_ADC_Init+0x130>
 8001b86:	4861      	ldr	r0, [pc, #388]	; (8001d0c <HAL_ADC_Init+0x298>)
 8001b88:	f7ff ff28 	bl	80019dc <LL_ADC_IsEnabled>
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	4860      	ldr	r0, [pc, #384]	; (8001d10 <HAL_ADC_Init+0x29c>)
 8001b90:	f7ff ff24 	bl	80019dc <LL_ADC_IsEnabled>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4323      	orrs	r3, r4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf0c      	ite	eq
 8001b9c:	2301      	moveq	r3, #1
 8001b9e:	2300      	movne	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e008      	b.n	8001bb6 <HAL_ADC_Init+0x142>
 8001ba4:	485b      	ldr	r0, [pc, #364]	; (8001d14 <HAL_ADC_Init+0x2a0>)
 8001ba6:	f7ff ff19 	bl	80019dc <LL_ADC_IsEnabled>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_ADC_Init+0x298>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_ADC_Init+0x15a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_ADC_Init+0x29c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_Init+0x15e>
 8001bce:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_ADC_Init+0x2a4>)
 8001bd0:	e000      	b.n	8001bd4 <HAL_ADC_Init+0x160>
 8001bd2:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_ADC_Init+0x2a8>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f7ff fd64 	bl	80016a8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001be0:	f7ff fd56 	bl	8001690 <HAL_GetREVID>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d914      	bls.n	8001c18 <HAL_ADC_Init+0x1a4>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d110      	bne.n	8001c18 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7d5b      	ldrb	r3, [r3, #21]
 8001bfa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c00:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c06:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7f1b      	ldrb	r3, [r3, #28]
 8001c0c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c0e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c10:	f043 030c 	orr.w	r3, r3, #12
 8001c14:	61bb      	str	r3, [r7, #24]
 8001c16:	e00d      	b.n	8001c34 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7d5b      	ldrb	r3, [r3, #21]
 8001c1c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c22:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c28:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7f1b      	ldrb	r3, [r3, #28]
 8001c2e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	7f1b      	ldrb	r3, [r3, #28]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	045b      	lsls	r3, r3, #17
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_ADC_Init+0x2ac>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	69b9      	ldr	r1, [r7, #24]
 8001c76:	430b      	orrs	r3, r1
 8001c78:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fed2 	bl	8001a28 <LL_ADC_REG_IsConversionOngoing>
 8001c84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fedf 	bl	8001a4e <LL_ADC_INJ_IsConversionOngoing>
 8001c90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d15f      	bne.n	8001d58 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d15c      	bne.n	8001d58 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7d1b      	ldrb	r3, [r3, #20]
 8001ca2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_ADC_Init+0x2b0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	69b9      	ldr	r1, [r7, #24]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d130      	bne.n	8001d2c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691a      	ldr	r2, [r3, #16]
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_ADC_Init+0x2b4>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cde:	3a01      	subs	r2, #1
 8001ce0:	0411      	lsls	r1, r2, #16
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cec:	4311      	orrs	r1, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	e01c      	b.n	8001d3c <HAL_ADC_Init+0x2c8>
 8001d02:	bf00      	nop
 8001d04:	24000000 	.word	0x24000000
 8001d08:	053e2d63 	.word	0x053e2d63
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40022100 	.word	0x40022100
 8001d14:	58026000 	.word	0x58026000
 8001d18:	40022300 	.word	0x40022300
 8001d1c:	58026300 	.word	0x58026300
 8001d20:	fff0c003 	.word	0xfff0c003
 8001d24:	ffffbffc 	.word	0xffffbffc
 8001d28:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fd12 	bl	800277c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10c      	bne.n	8001d7a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f023 010f 	bic.w	r1, r3, #15
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
 8001d78:	e007      	b.n	8001d8a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 020f 	bic.w	r2, r2, #15
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f023 0303 	bic.w	r3, r3, #3
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
 8001d9a:	e007      	b.n	8001dac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	f043 0210 	orr.w	r2, r3, #16
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop

08001db8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b0a1      	sub	sp, #132	; 0x84
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a9d      	ldr	r2, [pc, #628]	; (8002070 <HAL_ADC_ConfigChannel+0x290>)
 8001dfa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x2a>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e321      	b.n	800244e <HAL_ADC_ConfigChannel+0x66e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fe06 	bl	8001a28 <LL_ADC_REG_IsConversionOngoing>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 8306 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x62>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	e016      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x90>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e52:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	69d1      	ldr	r1, [r2, #28]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff fca7 	bl	80017de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fdc7 	bl	8001a28 <LL_ADC_REG_IsConversionOngoing>
 8001e9a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fdd4 	bl	8001a4e <LL_ADC_INJ_IsConversionOngoing>
 8001ea6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 80b3 	bne.w	8002016 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80af 	bne.w	8002016 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f7ff fcb6 	bl	8001836 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001eca:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <HAL_ADC_ConfigChannel+0x294>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x110>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	e01d      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x14c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x136>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	e00a      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x14c>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d027      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f44:	f7ff fbe4 	bl	8001710 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6919      	ldr	r1, [r3, #16]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	7e5b      	ldrb	r3, [r3, #25]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d102      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x17e>
 8001f58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x180>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fc0e 	bl	8001782 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x19c>
 8001f76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f7a:	e000      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x19e>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f7ff fbe6 	bl	8001750 <LL_ADC_SetDataRightShift>
 8001f84:	e047      	b.n	8002016 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	069b      	lsls	r3, r3, #26
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d107      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	069b      	lsls	r3, r3, #26
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d107      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fcc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	069b      	lsls	r3, r3, #26
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d107      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ff0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	069b      	lsls	r3, r3, #26
 8002002:	429a      	cmp	r2, r3
 8002004:	d107      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002014:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff fcde 	bl	80019dc <LL_ADC_IsEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 820d 	bne.w	8002442 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	461a      	mov	r2, r3
 8002036:	f7ff fc29 	bl	800188c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_ADC_ConfigChannel+0x290>)
 8002040:	4293      	cmp	r3, r2
 8002042:	f040 8133 	bne.w	80022ac <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002052:	2b00      	cmp	r3, #0
 8002054:	d110      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x298>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	3301      	adds	r3, #1
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2b09      	cmp	r3, #9
 8002064:	bf94      	ite	ls
 8002066:	2301      	movls	r3, #1
 8002068:	2300      	movhi	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	e01e      	b.n	80020ac <HAL_ADC_ConfigChannel+0x2cc>
 800206e:	bf00      	nop
 8002070:	47ff0000 	.word	0x47ff0000
 8002074:	5c001000 	.word	0x5c001000
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002088:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800208a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	bf94      	ite	ls
 80020a6:	2301      	movls	r3, #1
 80020a8:	2300      	movhi	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d079      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x2ec>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	3301      	adds	r3, #1
 80020c4:	069b      	lsls	r3, r3, #26
 80020c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ca:	e015      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x318>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80020de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80020e4:	2320      	movs	r3, #32
 80020e6:	e003      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80020e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x338>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	3301      	adds	r3, #1
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	e017      	b.n	8002148 <HAL_ADC_ConfigChannel+0x368>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	ea42 0103 	orr.w	r1, r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x38e>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	051b      	lsls	r3, r3, #20
 800216c:	e018      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x3c0>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e003      	b.n	8002192 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a0:	430b      	orrs	r3, r1
 80021a2:	e07e      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x3e0>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	3301      	adds	r3, #1
 80021b8:	069b      	lsls	r3, r3, #26
 80021ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021be:	e015      	b.n	80021ec <HAL_ADC_ConfigChannel+0x40c>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_ConfigChannel+0x42c>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	e017      	b.n	800223c <HAL_ADC_ConfigChannel+0x45c>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	61bb      	str	r3, [r7, #24]
  return result;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	ea42 0103 	orr.w	r1, r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x488>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	3b1e      	subs	r3, #30
 8002260:	051b      	lsls	r3, r3, #20
 8002262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002266:	e01b      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x4c0>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	60fb      	str	r3, [r7, #12]
  return result;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e003      	b.n	800228c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3301      	adds	r3, #1
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	3b1e      	subs	r3, #30
 800229a:	051b      	lsls	r3, r3, #20
 800229c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a0:	430b      	orrs	r3, r1
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7ff fac5 	bl	8001836 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f280 80c6 	bge.w	8002442 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a67      	ldr	r2, [pc, #412]	; (8002458 <HAL_ADC_ConfigChannel+0x678>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_ADC_ConfigChannel+0x4ea>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a65      	ldr	r2, [pc, #404]	; (800245c <HAL_ADC_ConfigChannel+0x67c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x4ee>
 80022ca:	4b65      	ldr	r3, [pc, #404]	; (8002460 <HAL_ADC_ConfigChannel+0x680>)
 80022cc:	e000      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x4f0>
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_ADC_ConfigChannel+0x684>)
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fa0f 	bl	80016f4 <LL_ADC_GetCommonPathInternalCh>
 80022d6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5e      	ldr	r2, [pc, #376]	; (8002458 <HAL_ADC_ConfigChannel+0x678>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d004      	beq.n	80022ec <HAL_ADC_ConfigChannel+0x50c>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5d      	ldr	r2, [pc, #372]	; (800245c <HAL_ADC_ConfigChannel+0x67c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d10e      	bne.n	800230a <HAL_ADC_ConfigChannel+0x52a>
 80022ec:	485a      	ldr	r0, [pc, #360]	; (8002458 <HAL_ADC_ConfigChannel+0x678>)
 80022ee:	f7ff fb75 	bl	80019dc <LL_ADC_IsEnabled>
 80022f2:	4604      	mov	r4, r0
 80022f4:	4859      	ldr	r0, [pc, #356]	; (800245c <HAL_ADC_ConfigChannel+0x67c>)
 80022f6:	f7ff fb71 	bl	80019dc <LL_ADC_IsEnabled>
 80022fa:	4603      	mov	r3, r0
 80022fc:	4323      	orrs	r3, r4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	e008      	b.n	800231c <HAL_ADC_ConfigChannel+0x53c>
 800230a:	4857      	ldr	r0, [pc, #348]	; (8002468 <HAL_ADC_ConfigChannel+0x688>)
 800230c:	f7ff fb66 	bl	80019dc <LL_ADC_IsEnabled>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	bf0c      	ite	eq
 8002316:	2301      	moveq	r3, #1
 8002318:	2300      	movne	r3, #0
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d07d      	beq.n	800241c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a51      	ldr	r2, [pc, #324]	; (800246c <HAL_ADC_ConfigChannel+0x68c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d130      	bne.n	800238c <HAL_ADC_ConfigChannel+0x5ac>
 800232a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d12b      	bne.n	800238c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4b      	ldr	r2, [pc, #300]	; (8002468 <HAL_ADC_ConfigChannel+0x688>)
 800233a:	4293      	cmp	r3, r2
 800233c:	f040 8081 	bne.w	8002442 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a44      	ldr	r2, [pc, #272]	; (8002458 <HAL_ADC_ConfigChannel+0x678>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x574>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a43      	ldr	r2, [pc, #268]	; (800245c <HAL_ADC_ConfigChannel+0x67c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x578>
 8002354:	4a42      	ldr	r2, [pc, #264]	; (8002460 <HAL_ADC_ConfigChannel+0x680>)
 8002356:	e000      	b.n	800235a <HAL_ADC_ConfigChannel+0x57a>
 8002358:	4a42      	ldr	r2, [pc, #264]	; (8002464 <HAL_ADC_ConfigChannel+0x684>)
 800235a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7ff f9b3 	bl	80016ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_ADC_ConfigChannel+0x690>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	4a41      	ldr	r2, [pc, #260]	; (8002474 <HAL_ADC_ConfigChannel+0x694>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	3301      	adds	r3, #1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800237c:	e002      	b.n	8002384 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800238a:	e05a      	b.n	8002442 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a39      	ldr	r2, [pc, #228]	; (8002478 <HAL_ADC_ConfigChannel+0x698>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d11e      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x5f4>
 8002396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d119      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a30      	ldr	r2, [pc, #192]	; (8002468 <HAL_ADC_ConfigChannel+0x688>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d14b      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <HAL_ADC_ConfigChannel+0x678>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_ADC_ConfigChannel+0x5de>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a28      	ldr	r2, [pc, #160]	; (800245c <HAL_ADC_ConfigChannel+0x67c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x5e2>
 80023be:	4a28      	ldr	r2, [pc, #160]	; (8002460 <HAL_ADC_ConfigChannel+0x680>)
 80023c0:	e000      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x5e4>
 80023c2:	4a28      	ldr	r2, [pc, #160]	; (8002464 <HAL_ADC_ConfigChannel+0x684>)
 80023c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ca:	4619      	mov	r1, r3
 80023cc:	4610      	mov	r0, r2
 80023ce:	f7ff f97e 	bl	80016ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d2:	e036      	b.n	8002442 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a28      	ldr	r2, [pc, #160]	; (800247c <HAL_ADC_ConfigChannel+0x69c>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d131      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x662>
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d12c      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_ADC_ConfigChannel+0x688>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d127      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_ADC_ConfigChannel+0x678>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x626>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a16      	ldr	r2, [pc, #88]	; (800245c <HAL_ADC_ConfigChannel+0x67c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d101      	bne.n	800240a <HAL_ADC_ConfigChannel+0x62a>
 8002406:	4a16      	ldr	r2, [pc, #88]	; (8002460 <HAL_ADC_ConfigChannel+0x680>)
 8002408:	e000      	b.n	800240c <HAL_ADC_ConfigChannel+0x62c>
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <HAL_ADC_ConfigChannel+0x684>)
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002412:	4619      	mov	r1, r3
 8002414:	4610      	mov	r0, r2
 8002416:	f7ff f95a 	bl	80016ce <LL_ADC_SetCommonPathInternalCh>
 800241a:	e012      	b.n	8002442 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002420:	f043 0220 	orr.w	r2, r3, #32
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800242e:	e008      	b.n	8002442 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f043 0220 	orr.w	r2, r3, #32
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800244a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800244e:	4618      	mov	r0, r3
 8002450:	3784      	adds	r7, #132	; 0x84
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	bf00      	nop
 8002458:	40022000 	.word	0x40022000
 800245c:	40022100 	.word	0x40022100
 8002460:	40022300 	.word	0x40022300
 8002464:	58026300 	.word	0x58026300
 8002468:	58026000 	.word	0x58026000
 800246c:	cb840000 	.word	0xcb840000
 8002470:	24000000 	.word	0x24000000
 8002474:	053e2d63 	.word	0x053e2d63
 8002478:	c7520000 	.word	0xc7520000
 800247c:	cfb80000 	.word	0xcfb80000

08002480 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff faa5 	bl	80019dc <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d16e      	bne.n	8002576 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	4b38      	ldr	r3, [pc, #224]	; (8002580 <ADC_Enable+0x100>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00d      	beq.n	80024c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e05a      	b.n	8002578 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fa60 	bl	800198c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80024cc:	f7ff f8b0 	bl	8001630 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2b      	ldr	r2, [pc, #172]	; (8002584 <ADC_Enable+0x104>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d004      	beq.n	80024e6 <ADC_Enable+0x66>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a29      	ldr	r2, [pc, #164]	; (8002588 <ADC_Enable+0x108>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <ADC_Enable+0x6a>
 80024e6:	4b29      	ldr	r3, [pc, #164]	; (800258c <ADC_Enable+0x10c>)
 80024e8:	e000      	b.n	80024ec <ADC_Enable+0x6c>
 80024ea:	4b29      	ldr	r3, [pc, #164]	; (8002590 <ADC_Enable+0x110>)
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff f9f1 	bl	80018d4 <LL_ADC_GetMultimode>
 80024f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <ADC_Enable+0x108>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d002      	beq.n	8002504 <ADC_Enable+0x84>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e000      	b.n	8002506 <ADC_Enable+0x86>
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <ADC_Enable+0x104>)
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d130      	bne.n	8002576 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002514:	e028      	b.n	8002568 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fa5e 	bl	80019dc <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fa2e 	bl	800198c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002530:	f7ff f87e 	bl	8001630 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d914      	bls.n	8002568 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d00d      	beq.n	8002568 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f043 0210 	orr.w	r2, r3, #16
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e007      	b.n	8002578 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d1cf      	bne.n	8002516 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	8000003f 	.word	0x8000003f
 8002584:	40022000 	.word	0x40022000
 8002588:	40022100 	.word	0x40022100
 800258c:	40022300 	.word	0x40022300
 8002590:	58026300 	.word	0x58026300

08002594 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fa2e 	bl	8001a02 <LL_ADC_IsDisableOngoing>
 80025a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fa15 	bl	80019dc <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d047      	beq.n	8002648 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d144      	bne.n	8002648 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030d 	and.w	r3, r3, #13
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10c      	bne.n	80025e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f9ef 	bl	80019b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2203      	movs	r2, #3
 80025dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025de:	f7ff f827 	bl	8001630 <HAL_GetTick>
 80025e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025e4:	e029      	b.n	800263a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e023      	b.n	800264a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002602:	f7ff f815 	bl	8001630 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d914      	bls.n	800263a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e007      	b.n	800264a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1dc      	bne.n	8002602 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002668:	2b00      	cmp	r3, #0
 800266a:	d14b      	bne.n	8002704 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d021      	beq.n	80026ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f894 	bl	80017b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d032      	beq.n	80026fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d12b      	bne.n	80026fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d11f      	bne.n	80026fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
 80026c8:	e018      	b.n	80026fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7fe fc15 	bl	8000f2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002702:	e00e      	b.n	8002722 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f7ff fb5b 	bl	8001dcc <HAL_ADC_ErrorCallback>
}
 8002716:	e004      	b.n	8002722 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff fb3d 	bl	8001db8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f043 0204 	orr.w	r2, r3, #4
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fb2d 	bl	8001dcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <ADC_ConfigureBoostMode+0x1f8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <ADC_ConfigureBoostMode+0x1c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a79      	ldr	r2, [pc, #484]	; (8002978 <ADC_ConfigureBoostMode+0x1fc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d109      	bne.n	80027ac <ADC_ConfigureBoostMode+0x30>
 8002798:	4b78      	ldr	r3, [pc, #480]	; (800297c <ADC_ConfigureBoostMode+0x200>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e008      	b.n	80027be <ADC_ConfigureBoostMode+0x42>
 80027ac:	4b74      	ldr	r3, [pc, #464]	; (8002980 <ADC_ConfigureBoostMode+0x204>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01c      	beq.n	80027fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027c2:	f003 ff3d 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 80027c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d0:	d010      	beq.n	80027f4 <ADC_ConfigureBoostMode+0x78>
 80027d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027d6:	d873      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x144>
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027dc:	d002      	beq.n	80027e4 <ADC_ConfigureBoostMode+0x68>
 80027de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027e2:	d16d      	bne.n	80028c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	60fb      	str	r3, [r7, #12]
        break;
 80027f2:	e068      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	60fb      	str	r3, [r7, #12]
        break;
 80027fa:	e064      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80027fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	f005 f982 	bl	8007b0c <HAL_RCCEx_GetPeriphCLKFreq>
 8002808:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002812:	d051      	beq.n	80028b8 <ADC_ConfigureBoostMode+0x13c>
 8002814:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002818:	d854      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 800281a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800281e:	d047      	beq.n	80028b0 <ADC_ConfigureBoostMode+0x134>
 8002820:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002824:	d84e      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 8002826:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800282a:	d03d      	beq.n	80028a8 <ADC_ConfigureBoostMode+0x12c>
 800282c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002830:	d848      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 8002832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002836:	d033      	beq.n	80028a0 <ADC_ConfigureBoostMode+0x124>
 8002838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800283c:	d842      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 800283e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002842:	d029      	beq.n	8002898 <ADC_ConfigureBoostMode+0x11c>
 8002844:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002848:	d83c      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 800284a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800284e:	d01a      	beq.n	8002886 <ADC_ConfigureBoostMode+0x10a>
 8002850:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002854:	d836      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 8002856:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800285a:	d014      	beq.n	8002886 <ADC_ConfigureBoostMode+0x10a>
 800285c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002860:	d830      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d00e      	beq.n	8002886 <ADC_ConfigureBoostMode+0x10a>
 8002868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800286c:	d82a      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 800286e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002872:	d008      	beq.n	8002886 <ADC_ConfigureBoostMode+0x10a>
 8002874:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002878:	d824      	bhi.n	80028c4 <ADC_ConfigureBoostMode+0x148>
 800287a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800287e:	d002      	beq.n	8002886 <ADC_ConfigureBoostMode+0x10a>
 8002880:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002884:	d11e      	bne.n	80028c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	60fb      	str	r3, [r7, #12]
        break;
 8002896:	e016      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
        break;
 800289e:	e012      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	60fb      	str	r3, [r7, #12]
        break;
 80028a6:	e00e      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	099b      	lsrs	r3, r3, #6
 80028ac:	60fb      	str	r3, [r7, #12]
        break;
 80028ae:	e00a      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	09db      	lsrs	r3, r3, #7
 80028b4:	60fb      	str	r3, [r7, #12]
        break;
 80028b6:	e006      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	60fb      	str	r3, [r7, #12]
        break;
 80028be:	e002      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80028c0:	bf00      	nop
 80028c2:	e000      	b.n	80028c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028c4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80028c6:	f7fe fee3 	bl	8001690 <HAL_GetREVID>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d815      	bhi.n	8002900 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <ADC_ConfigureBoostMode+0x208>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d908      	bls.n	80028ee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028ec:	e03e      	b.n	800296c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028fc:	609a      	str	r2, [r3, #8]
}
 80028fe:	e035      	b.n	800296c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <ADC_ConfigureBoostMode+0x20c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d808      	bhi.n	8002920 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800291c:	609a      	str	r2, [r3, #8]
}
 800291e:	e025      	b.n	800296c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <ADC_ConfigureBoostMode+0x210>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d80a      	bhi.n	800293e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800293a:	609a      	str	r2, [r3, #8]
}
 800293c:	e016      	b.n	800296c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a13      	ldr	r2, [pc, #76]	; (8002990 <ADC_ConfigureBoostMode+0x214>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d80a      	bhi.n	800295c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	e007      	b.n	800296c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800296a:	609a      	str	r2, [r3, #8]
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40022000 	.word	0x40022000
 8002978:	40022100 	.word	0x40022100
 800297c:	40022300 	.word	0x40022300
 8002980:	58026300 	.word	0x58026300
 8002984:	01312d00 	.word	0x01312d00
 8002988:	005f5e10 	.word	0x005f5e10
 800298c:	00bebc20 	.word	0x00bebc20
 8002990:	017d7840 	.word	0x017d7840

08002994 <LL_ADC_IsEnabled>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <LL_ADC_IsEnabled+0x18>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <LL_ADC_IsEnabled+0x1a>
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <LL_ADC_StartCalibration>:
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <LL_ADC_StartCalibration+0x38>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029dc:	430a      	orrs	r2, r1
 80029de:	4313      	orrs	r3, r2
 80029e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	609a      	str	r2, [r3, #8]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	3ffeffc0 	.word	0x3ffeffc0

080029f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a0c:	d101      	bne.n	8002a12 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_REG_StartConversion>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <LL_ADC_REG_StartConversion+0x24>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	7fffffc0 	.word	0x7fffffc0

08002a48 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d101      	bne.n	8002a60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_ADCEx_Calibration_Start+0x1e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e04c      	b.n	8002b28 <HAL_ADCEx_Calibration_Start+0xb8>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fd7c 	bl	8002594 <ADC_Disable>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d135      	bne.n	8002b12 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	f043 0202 	orr.w	r2, r3, #2
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff7c 	bl	80029bc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ac4:	e014      	b.n	8002af0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d30d      	bcc.n	8002af0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad8:	f023 0312 	bic.w	r3, r3, #18
 8002adc:	f043 0210 	orr.w	r2, r3, #16
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e01b      	b.n	8002b28 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff7f 	bl	80029f8 <LL_ADC_IsCalibrationOnGoing>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e2      	bne.n	8002ac6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f023 0303 	bic.w	r3, r3, #3
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b10:	e005      	b.n	8002b1e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f043 0210 	orr.w	r2, r3, #16
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	ffffeefd 	.word	0xffffeefd
 8002b34:	25c3f800 	.word	0x25c3f800

08002b38 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0a0      	sub	sp, #128	; 0x80
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff7d 	bl	8002a48 <LL_ADC_REG_IsConversionOngoing>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
 8002b56:	e08a      	b.n	8002c6e <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e083      	b.n	8002c6e <HAL_ADCEx_MultiModeStart_DMA+0x136>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3f      	ldr	r2, [pc, #252]	; (8002c78 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8002b80:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	e001      	b.n	8002b8a <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e062      	b.n	8002c6e <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fc69 	bl	8002480 <ADC_Enable>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002bb4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fc5d 	bl	8002480 <ADC_Enable>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002bcc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d146      	bne.n	8002c62 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bd8:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfe:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8002c00:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002c18:	e000      	b.n	8002c1c <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002c1c:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	221c      	movs	r2, #28
 8002c24:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0210 	orr.w	r2, r2, #16
 8002c3c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c44:	330c      	adds	r3, #12
 8002c46:	4619      	mov	r1, r3
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f000 fda0 	bl	8003790 <HAL_DMA_Start_IT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fee0 	bl	8002a20 <LL_ADC_REG_StartConversion>
 8002c60:	e003      	b.n	8002c6a <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002c6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3780      	adds	r7, #128	; 0x80
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40022000 	.word	0x40022000
 8002c7c:	40022100 	.word	0x40022100
 8002c80:	fffff0fe 	.word	0xfffff0fe
 8002c84:	08002653 	.word	0x08002653
 8002c88:	0800272b 	.word	0x0800272b
 8002c8c:	08002747 	.word	0x08002747
 8002c90:	40022300 	.word	0x40022300
 8002c94:	58026300 	.word	0x58026300

08002c98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b09f      	sub	sp, #124	; 0x7c
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e0be      	b.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a5c      	ldr	r2, [pc, #368]	; (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d102      	bne.n	8002cd6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	e001      	b.n	8002cda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e09d      	b.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fea4 	bl	8002a48 <LL_ADC_REG_IsConversionOngoing>
 8002d00:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fe9e 	bl	8002a48 <LL_ADC_REG_IsConversionOngoing>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d17f      	bne.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d17c      	bne.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d004      	beq.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a46      	ldr	r2, [pc, #280]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002d2c:	4b45      	ldr	r3, [pc, #276]	; (8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d2e:	e000      	b.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002d30:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d32:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d039      	beq.n	8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d004      	beq.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10e      	bne.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002d62:	4836      	ldr	r0, [pc, #216]	; (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d64:	f7ff fe16 	bl	8002994 <LL_ADC_IsEnabled>
 8002d68:	4604      	mov	r4, r0
 8002d6a:	4835      	ldr	r0, [pc, #212]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d6c:	f7ff fe12 	bl	8002994 <LL_ADC_IsEnabled>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4323      	orrs	r3, r4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e008      	b.n	8002d92 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002d80:	4832      	ldr	r0, [pc, #200]	; (8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d82:	f7ff fe07 	bl	8002994 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d047      	beq.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	6811      	ldr	r1, [r2, #0]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dae:	e03a      	b.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1e      	ldr	r2, [pc, #120]	; (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10e      	bne.n	8002dee <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002dd0:	481a      	ldr	r0, [pc, #104]	; (8002e3c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dd2:	f7ff fddf 	bl	8002994 <LL_ADC_IsEnabled>
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4819      	ldr	r0, [pc, #100]	; (8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dda:	f7ff fddb 	bl	8002994 <LL_ADC_IsEnabled>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4323      	orrs	r3, r4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e008      	b.n	8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002dee:	4817      	ldr	r0, [pc, #92]	; (8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002df0:	f7ff fdd0 	bl	8002994 <LL_ADC_IsEnabled>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf0c      	ite	eq
 8002dfa:	2301      	moveq	r3, #1
 8002dfc:	2300      	movne	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	4b11      	ldr	r3, [pc, #68]	; (8002e50 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e0e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e10:	e009      	b.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e24:	e000      	b.n	8002e28 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e26:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e30:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	377c      	adds	r7, #124	; 0x7c
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	40022100 	.word	0x40022100
 8002e44:	40022300 	.word	0x40022300
 8002e48:	58026300 	.word	0x58026300
 8002e4c:	58026000 	.word	0x58026000
 8002e50:	fffff0e0 	.word	0xfffff0e0

08002e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <__NVIC_SetPriorityGrouping+0x40>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <__NVIC_SetPriorityGrouping+0x40>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00
 8002e98:	05fa0000 	.word	0x05fa0000

08002e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <__NVIC_EnableIRQ+0x38>)
 8002ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db12      	blt.n	8002f2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	490a      	ldr	r1, [pc, #40]	; (8002f38 <__NVIC_DisableIRQ+0x44>)
 8002f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	3320      	adds	r3, #32
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f20:	f3bf 8f4f 	dsb	sy
}
 8002f24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f26:	f3bf 8f6f 	isb	sy
}
 8002f2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000e100 	.word	0xe000e100

08002f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	db0a      	blt.n	8002f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	490c      	ldr	r1, [pc, #48]	; (8002f88 <__NVIC_SetPriority+0x4c>)
 8002f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f5a:	0112      	lsls	r2, r2, #4
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f64:	e00a      	b.n	8002f7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4908      	ldr	r1, [pc, #32]	; (8002f8c <__NVIC_SetPriority+0x50>)
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	3b04      	subs	r3, #4
 8002f74:	0112      	lsls	r2, r2, #4
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	440b      	add	r3, r1
 8002f7a:	761a      	strb	r2, [r3, #24]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f1c3 0307 	rsb	r3, r3, #7
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	bf28      	it	cs
 8002fae:	2304      	movcs	r3, #4
 8002fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d902      	bls.n	8002fc0 <NVIC_EncodePriority+0x30>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	3b03      	subs	r3, #3
 8002fbe:	e000      	b.n	8002fc2 <NVIC_EncodePriority+0x32>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	401a      	ands	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	43d9      	mvns	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	4313      	orrs	r3, r2
         );
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3724      	adds	r7, #36	; 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003008:	d301      	bcc.n	800300e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800300a:	2301      	movs	r3, #1
 800300c:	e00f      	b.n	800302e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800300e:	4a0a      	ldr	r2, [pc, #40]	; (8003038 <SysTick_Config+0x40>)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003016:	210f      	movs	r1, #15
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	f7ff ff8e 	bl	8002f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <SysTick_Config+0x40>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <SysTick_Config+0x40>)
 8003028:	2207      	movs	r2, #7
 800302a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000e010 	.word	0xe000e010

0800303c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff ff05 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003060:	f7ff ff1c 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003064:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	6978      	ldr	r0, [r7, #20]
 800306c:	f7ff ff90 	bl	8002f90 <NVIC_EncodePriority>
 8003070:	4602      	mov	r2, r0
 8003072:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff5f 	bl	8002f3c <__NVIC_SetPriority>
}
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003090:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff0f 	bl	8002eb8 <__NVIC_EnableIRQ>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff1f 	bl	8002ef4 <__NVIC_DisableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ff96 	bl	8002ff8 <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7fe faa6 	bl	8001630 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e316      	b.n	800371e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a66      	ldr	r2, [pc, #408]	; (8003290 <HAL_DMA_Init+0x1b8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d04a      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_DMA_Init+0x1bc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d045      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_DMA_Init+0x1c0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d040      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_DMA_Init+0x1c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d03b      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <HAL_DMA_Init+0x1c8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d036      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_DMA_Init+0x1cc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d031      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a5d      	ldr	r2, [pc, #372]	; (80032a8 <HAL_DMA_Init+0x1d0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02c      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a5c      	ldr	r2, [pc, #368]	; (80032ac <HAL_DMA_Init+0x1d4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d027      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5a      	ldr	r2, [pc, #360]	; (80032b0 <HAL_DMA_Init+0x1d8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a59      	ldr	r2, [pc, #356]	; (80032b4 <HAL_DMA_Init+0x1dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d01d      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a57      	ldr	r2, [pc, #348]	; (80032b8 <HAL_DMA_Init+0x1e0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a56      	ldr	r2, [pc, #344]	; (80032bc <HAL_DMA_Init+0x1e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a54      	ldr	r2, [pc, #336]	; (80032c0 <HAL_DMA_Init+0x1e8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a53      	ldr	r2, [pc, #332]	; (80032c4 <HAL_DMA_Init+0x1ec>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a51      	ldr	r2, [pc, #324]	; (80032c8 <HAL_DMA_Init+0x1f0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_DMA_Init+0xb8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a50      	ldr	r2, [pc, #320]	; (80032cc <HAL_DMA_Init+0x1f4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_DMA_Init+0xbc>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_DMA_Init+0xbe>
 8003194:	2300      	movs	r3, #0
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 813b 	beq.w	8003412 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a37      	ldr	r2, [pc, #220]	; (8003290 <HAL_DMA_Init+0x1b8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d04a      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a36      	ldr	r2, [pc, #216]	; (8003294 <HAL_DMA_Init+0x1bc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d045      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a34      	ldr	r2, [pc, #208]	; (8003298 <HAL_DMA_Init+0x1c0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d040      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a33      	ldr	r2, [pc, #204]	; (800329c <HAL_DMA_Init+0x1c4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d03b      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a31      	ldr	r2, [pc, #196]	; (80032a0 <HAL_DMA_Init+0x1c8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d036      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a30      	ldr	r2, [pc, #192]	; (80032a4 <HAL_DMA_Init+0x1cc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d031      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2e      	ldr	r2, [pc, #184]	; (80032a8 <HAL_DMA_Init+0x1d0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02c      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <HAL_DMA_Init+0x1d4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d027      	beq.n	800324c <HAL_DMA_Init+0x174>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2b      	ldr	r2, [pc, #172]	; (80032b0 <HAL_DMA_Init+0x1d8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d022      	beq.n	800324c <HAL_DMA_Init+0x174>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <HAL_DMA_Init+0x1dc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d01d      	beq.n	800324c <HAL_DMA_Init+0x174>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a28      	ldr	r2, [pc, #160]	; (80032b8 <HAL_DMA_Init+0x1e0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d018      	beq.n	800324c <HAL_DMA_Init+0x174>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a27      	ldr	r2, [pc, #156]	; (80032bc <HAL_DMA_Init+0x1e4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <HAL_DMA_Init+0x174>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a25      	ldr	r2, [pc, #148]	; (80032c0 <HAL_DMA_Init+0x1e8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00e      	beq.n	800324c <HAL_DMA_Init+0x174>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a24      	ldr	r2, [pc, #144]	; (80032c4 <HAL_DMA_Init+0x1ec>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_DMA_Init+0x174>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <HAL_DMA_Init+0x1f0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_DMA_Init+0x174>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_DMA_Init+0x1f4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d108      	bne.n	800325e <HAL_DMA_Init+0x186>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e007      	b.n	800326e <HAL_DMA_Init+0x196>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0201 	bic.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800326e:	e02f      	b.n	80032d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003270:	f7fe f9de 	bl	8001630 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b05      	cmp	r3, #5
 800327c:	d928      	bls.n	80032d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2203      	movs	r2, #3
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e246      	b.n	800371e <HAL_DMA_Init+0x646>
 8003290:	40020010 	.word	0x40020010
 8003294:	40020028 	.word	0x40020028
 8003298:	40020040 	.word	0x40020040
 800329c:	40020058 	.word	0x40020058
 80032a0:	40020070 	.word	0x40020070
 80032a4:	40020088 	.word	0x40020088
 80032a8:	400200a0 	.word	0x400200a0
 80032ac:	400200b8 	.word	0x400200b8
 80032b0:	40020410 	.word	0x40020410
 80032b4:	40020428 	.word	0x40020428
 80032b8:	40020440 	.word	0x40020440
 80032bc:	40020458 	.word	0x40020458
 80032c0:	40020470 	.word	0x40020470
 80032c4:	40020488 	.word	0x40020488
 80032c8:	400204a0 	.word	0x400204a0
 80032cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1c8      	bne.n	8003270 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4b83      	ldr	r3, [pc, #524]	; (80034f8 <HAL_DMA_Init+0x420>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80032f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003302:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800330e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	2b04      	cmp	r3, #4
 8003322:	d107      	bne.n	8003334 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4313      	orrs	r3, r2
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003334:	4b71      	ldr	r3, [pc, #452]	; (80034fc <HAL_DMA_Init+0x424>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b71      	ldr	r3, [pc, #452]	; (8003500 <HAL_DMA_Init+0x428>)
 800333a:	4013      	ands	r3, r2
 800333c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003340:	d328      	bcc.n	8003394 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b28      	cmp	r3, #40	; 0x28
 8003348:	d903      	bls.n	8003352 <HAL_DMA_Init+0x27a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b2e      	cmp	r3, #46	; 0x2e
 8003350:	d917      	bls.n	8003382 <HAL_DMA_Init+0x2aa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b3e      	cmp	r3, #62	; 0x3e
 8003358:	d903      	bls.n	8003362 <HAL_DMA_Init+0x28a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b42      	cmp	r3, #66	; 0x42
 8003360:	d90f      	bls.n	8003382 <HAL_DMA_Init+0x2aa>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b46      	cmp	r3, #70	; 0x46
 8003368:	d903      	bls.n	8003372 <HAL_DMA_Init+0x29a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b48      	cmp	r3, #72	; 0x48
 8003370:	d907      	bls.n	8003382 <HAL_DMA_Init+0x2aa>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b4e      	cmp	r3, #78	; 0x4e
 8003378:	d905      	bls.n	8003386 <HAL_DMA_Init+0x2ae>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b52      	cmp	r3, #82	; 0x52
 8003380:	d801      	bhi.n	8003386 <HAL_DMA_Init+0x2ae>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_DMA_Init+0x2b0>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003392:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d117      	bne.n	80033ee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00e      	beq.n	80033ee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f001 fdcf 	bl	8004f74 <DMA_CheckFifoParam>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2240      	movs	r2, #64	; 0x40
 80033e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e197      	b.n	800371e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f001 fd0a 	bl	8004e10 <DMA_CalcBaseAndBitshift>
 80033fc:	4603      	mov	r3, r0
 80033fe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	223f      	movs	r2, #63	; 0x3f
 800340a:	409a      	lsls	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	e0cd      	b.n	80035ae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <HAL_DMA_Init+0x42c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_DMA_Init+0x38a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a39      	ldr	r2, [pc, #228]	; (8003508 <HAL_DMA_Init+0x430>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d01d      	beq.n	8003462 <HAL_DMA_Init+0x38a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a38      	ldr	r2, [pc, #224]	; (800350c <HAL_DMA_Init+0x434>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_DMA_Init+0x38a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a36      	ldr	r2, [pc, #216]	; (8003510 <HAL_DMA_Init+0x438>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <HAL_DMA_Init+0x38a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a35      	ldr	r2, [pc, #212]	; (8003514 <HAL_DMA_Init+0x43c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Init+0x38a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a33      	ldr	r2, [pc, #204]	; (8003518 <HAL_DMA_Init+0x440>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_DMA_Init+0x38a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a32      	ldr	r2, [pc, #200]	; (800351c <HAL_DMA_Init+0x444>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_DMA_Init+0x38a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <HAL_DMA_Init+0x448>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_DMA_Init+0x38e>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_DMA_Init+0x390>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8097 	beq.w	800359c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <HAL_DMA_Init+0x42c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d021      	beq.n	80034bc <HAL_DMA_Init+0x3e4>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_DMA_Init+0x430>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01c      	beq.n	80034bc <HAL_DMA_Init+0x3e4>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <HAL_DMA_Init+0x434>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d017      	beq.n	80034bc <HAL_DMA_Init+0x3e4>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <HAL_DMA_Init+0x438>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d012      	beq.n	80034bc <HAL_DMA_Init+0x3e4>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <HAL_DMA_Init+0x43c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00d      	beq.n	80034bc <HAL_DMA_Init+0x3e4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_DMA_Init+0x440>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d008      	beq.n	80034bc <HAL_DMA_Init+0x3e4>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_DMA_Init+0x444>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <HAL_DMA_Init+0x3e4>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_DMA_Init+0x448>)
 80034ba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_DMA_Init+0x44c>)
 80034d8:	4013      	ands	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b40      	cmp	r3, #64	; 0x40
 80034e2:	d021      	beq.n	8003528 <HAL_DMA_Init+0x450>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d102      	bne.n	80034f2 <HAL_DMA_Init+0x41a>
 80034ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f0:	e01b      	b.n	800352a <HAL_DMA_Init+0x452>
 80034f2:	2300      	movs	r3, #0
 80034f4:	e019      	b.n	800352a <HAL_DMA_Init+0x452>
 80034f6:	bf00      	nop
 80034f8:	fe10803f 	.word	0xfe10803f
 80034fc:	5c001000 	.word	0x5c001000
 8003500:	ffff0000 	.word	0xffff0000
 8003504:	58025408 	.word	0x58025408
 8003508:	5802541c 	.word	0x5802541c
 800350c:	58025430 	.word	0x58025430
 8003510:	58025444 	.word	0x58025444
 8003514:	58025458 	.word	0x58025458
 8003518:	5802546c 	.word	0x5802546c
 800351c:	58025480 	.word	0x58025480
 8003520:	58025494 	.word	0x58025494
 8003524:	fffe000f 	.word	0xfffe000f
 8003528:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003540:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003558:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	4b6e      	ldr	r3, [pc, #440]	; (8003728 <HAL_DMA_Init+0x650>)
 8003570:	4413      	add	r3, r2
 8003572:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_DMA_Init+0x654>)
 8003574:	fba2 2303 	umull	r2, r3, r2, r3
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 fc45 	bl	8004e10 <DMA_CalcBaseAndBitshift>
 8003586:	4603      	mov	r3, r0
 8003588:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	2201      	movs	r2, #1
 8003594:	409a      	lsls	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	e008      	b.n	80035ae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2203      	movs	r2, #3
 80035a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0b7      	b.n	800371e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a5f      	ldr	r2, [pc, #380]	; (8003730 <HAL_DMA_Init+0x658>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d072      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	; (8003734 <HAL_DMA_Init+0x65c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d06d      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	; (8003738 <HAL_DMA_Init+0x660>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d068      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5a      	ldr	r2, [pc, #360]	; (800373c <HAL_DMA_Init+0x664>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d063      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a59      	ldr	r2, [pc, #356]	; (8003740 <HAL_DMA_Init+0x668>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d05e      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_DMA_Init+0x66c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d059      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a56      	ldr	r2, [pc, #344]	; (8003748 <HAL_DMA_Init+0x670>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d054      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_DMA_Init+0x674>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d04f      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a53      	ldr	r2, [pc, #332]	; (8003750 <HAL_DMA_Init+0x678>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d04a      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_DMA_Init+0x67c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d045      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_DMA_Init+0x680>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d040      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a4e      	ldr	r2, [pc, #312]	; (800375c <HAL_DMA_Init+0x684>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d03b      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a4d      	ldr	r2, [pc, #308]	; (8003760 <HAL_DMA_Init+0x688>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d036      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a4b      	ldr	r2, [pc, #300]	; (8003764 <HAL_DMA_Init+0x68c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d031      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_DMA_Init+0x690>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d02c      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a48      	ldr	r2, [pc, #288]	; (800376c <HAL_DMA_Init+0x694>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d027      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a47      	ldr	r2, [pc, #284]	; (8003770 <HAL_DMA_Init+0x698>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a45      	ldr	r2, [pc, #276]	; (8003774 <HAL_DMA_Init+0x69c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01d      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a44      	ldr	r2, [pc, #272]	; (8003778 <HAL_DMA_Init+0x6a0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d018      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a42      	ldr	r2, [pc, #264]	; (800377c <HAL_DMA_Init+0x6a4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a41      	ldr	r2, [pc, #260]	; (8003780 <HAL_DMA_Init+0x6a8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00e      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a3f      	ldr	r2, [pc, #252]	; (8003784 <HAL_DMA_Init+0x6ac>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <HAL_DMA_Init+0x6b0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_DMA_Init+0x5c6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a3c      	ldr	r2, [pc, #240]	; (800378c <HAL_DMA_Init+0x6b4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_DMA_Init+0x5ca>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_DMA_Init+0x5cc>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d032      	beq.n	800370e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f001 fcdf 	bl	800506c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b80      	cmp	r3, #128	; 0x80
 80036b4:	d102      	bne.n	80036bc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036d0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_DMA_Init+0x624>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d80c      	bhi.n	80036fc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f001 fd5c 	bl	80051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	e008      	b.n	800370e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	a7fdabf8 	.word	0xa7fdabf8
 800372c:	cccccccd 	.word	0xcccccccd
 8003730:	40020010 	.word	0x40020010
 8003734:	40020028 	.word	0x40020028
 8003738:	40020040 	.word	0x40020040
 800373c:	40020058 	.word	0x40020058
 8003740:	40020070 	.word	0x40020070
 8003744:	40020088 	.word	0x40020088
 8003748:	400200a0 	.word	0x400200a0
 800374c:	400200b8 	.word	0x400200b8
 8003750:	40020410 	.word	0x40020410
 8003754:	40020428 	.word	0x40020428
 8003758:	40020440 	.word	0x40020440
 800375c:	40020458 	.word	0x40020458
 8003760:	40020470 	.word	0x40020470
 8003764:	40020488 	.word	0x40020488
 8003768:	400204a0 	.word	0x400204a0
 800376c:	400204b8 	.word	0x400204b8
 8003770:	58025408 	.word	0x58025408
 8003774:	5802541c 	.word	0x5802541c
 8003778:	58025430 	.word	0x58025430
 800377c:	58025444 	.word	0x58025444
 8003780:	58025458 	.word	0x58025458
 8003784:	5802546c 	.word	0x5802546c
 8003788:	58025480 	.word	0x58025480
 800378c:	58025494 	.word	0x58025494

08003790 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e226      	b.n	8003bfa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_Start_IT+0x2a>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e21f      	b.n	8003bfa <HAL_DMA_Start_IT+0x46a>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 820a 	bne.w	8003be4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a68      	ldr	r2, [pc, #416]	; (8003984 <HAL_DMA_Start_IT+0x1f4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d04a      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a66      	ldr	r2, [pc, #408]	; (8003988 <HAL_DMA_Start_IT+0x1f8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d045      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_DMA_Start_IT+0x1fc>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d040      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a63      	ldr	r2, [pc, #396]	; (8003990 <HAL_DMA_Start_IT+0x200>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d03b      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a62      	ldr	r2, [pc, #392]	; (8003994 <HAL_DMA_Start_IT+0x204>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d036      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a60      	ldr	r2, [pc, #384]	; (8003998 <HAL_DMA_Start_IT+0x208>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d031      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a5f      	ldr	r2, [pc, #380]	; (800399c <HAL_DMA_Start_IT+0x20c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d02c      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5d      	ldr	r2, [pc, #372]	; (80039a0 <HAL_DMA_Start_IT+0x210>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d027      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5c      	ldr	r2, [pc, #368]	; (80039a4 <HAL_DMA_Start_IT+0x214>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a5a      	ldr	r2, [pc, #360]	; (80039a8 <HAL_DMA_Start_IT+0x218>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01d      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a59      	ldr	r2, [pc, #356]	; (80039ac <HAL_DMA_Start_IT+0x21c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <HAL_DMA_Start_IT+0x220>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a56      	ldr	r2, [pc, #344]	; (80039b4 <HAL_DMA_Start_IT+0x224>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a54      	ldr	r2, [pc, #336]	; (80039b8 <HAL_DMA_Start_IT+0x228>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a53      	ldr	r2, [pc, #332]	; (80039bc <HAL_DMA_Start_IT+0x22c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_DMA_Start_IT+0xee>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_DMA_Start_IT+0x230>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <HAL_DMA_Start_IT+0x100>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e007      	b.n	80038a0 <HAL_DMA_Start_IT+0x110>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f001 f906 	bl	8004ab8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a34      	ldr	r2, [pc, #208]	; (8003984 <HAL_DMA_Start_IT+0x1f4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d04a      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a33      	ldr	r2, [pc, #204]	; (8003988 <HAL_DMA_Start_IT+0x1f8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d045      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a31      	ldr	r2, [pc, #196]	; (800398c <HAL_DMA_Start_IT+0x1fc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d040      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a30      	ldr	r2, [pc, #192]	; (8003990 <HAL_DMA_Start_IT+0x200>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d03b      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <HAL_DMA_Start_IT+0x204>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d036      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2d      	ldr	r2, [pc, #180]	; (8003998 <HAL_DMA_Start_IT+0x208>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d031      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_DMA_Start_IT+0x20c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d02c      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_DMA_Start_IT+0x210>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d027      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_DMA_Start_IT+0x214>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d022      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <HAL_DMA_Start_IT+0x218>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d01d      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <HAL_DMA_Start_IT+0x21c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d018      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <HAL_DMA_Start_IT+0x220>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_Start_IT+0x224>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00e      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <HAL_DMA_Start_IT+0x228>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d009      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_DMA_Start_IT+0x22c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d004      	beq.n	800394c <HAL_DMA_Start_IT+0x1bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_DMA_Start_IT+0x230>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d101      	bne.n	8003950 <HAL_DMA_Start_IT+0x1c0>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_DMA_Start_IT+0x1c2>
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d036      	beq.n	80039c4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 021e 	bic.w	r2, r3, #30
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0216 	orr.w	r2, r2, #22
 8003968:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d03e      	beq.n	80039f0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0208 	orr.w	r2, r2, #8
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e035      	b.n	80039f0 <HAL_DMA_Start_IT+0x260>
 8003984:	40020010 	.word	0x40020010
 8003988:	40020028 	.word	0x40020028
 800398c:	40020040 	.word	0x40020040
 8003990:	40020058 	.word	0x40020058
 8003994:	40020070 	.word	0x40020070
 8003998:	40020088 	.word	0x40020088
 800399c:	400200a0 	.word	0x400200a0
 80039a0:	400200b8 	.word	0x400200b8
 80039a4:	40020410 	.word	0x40020410
 80039a8:	40020428 	.word	0x40020428
 80039ac:	40020440 	.word	0x40020440
 80039b0:	40020458 	.word	0x40020458
 80039b4:	40020470 	.word	0x40020470
 80039b8:	40020488 	.word	0x40020488
 80039bc:	400204a0 	.word	0x400204a0
 80039c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 020e 	bic.w	r2, r3, #14
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 020a 	orr.w	r2, r2, #10
 80039d6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0204 	orr.w	r2, r2, #4
 80039ee:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a83      	ldr	r2, [pc, #524]	; (8003c04 <HAL_DMA_Start_IT+0x474>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d072      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a82      	ldr	r2, [pc, #520]	; (8003c08 <HAL_DMA_Start_IT+0x478>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d06d      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a80      	ldr	r2, [pc, #512]	; (8003c0c <HAL_DMA_Start_IT+0x47c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d068      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a7f      	ldr	r2, [pc, #508]	; (8003c10 <HAL_DMA_Start_IT+0x480>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d063      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7d      	ldr	r2, [pc, #500]	; (8003c14 <HAL_DMA_Start_IT+0x484>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d05e      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_DMA_Start_IT+0x488>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d059      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a7a      	ldr	r2, [pc, #488]	; (8003c1c <HAL_DMA_Start_IT+0x48c>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d054      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a79      	ldr	r2, [pc, #484]	; (8003c20 <HAL_DMA_Start_IT+0x490>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04f      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a77      	ldr	r2, [pc, #476]	; (8003c24 <HAL_DMA_Start_IT+0x494>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d04a      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a76      	ldr	r2, [pc, #472]	; (8003c28 <HAL_DMA_Start_IT+0x498>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d045      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a74      	ldr	r2, [pc, #464]	; (8003c2c <HAL_DMA_Start_IT+0x49c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d040      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a73      	ldr	r2, [pc, #460]	; (8003c30 <HAL_DMA_Start_IT+0x4a0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d03b      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a71      	ldr	r2, [pc, #452]	; (8003c34 <HAL_DMA_Start_IT+0x4a4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d036      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a70      	ldr	r2, [pc, #448]	; (8003c38 <HAL_DMA_Start_IT+0x4a8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d031      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6e      	ldr	r2, [pc, #440]	; (8003c3c <HAL_DMA_Start_IT+0x4ac>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02c      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6d      	ldr	r2, [pc, #436]	; (8003c40 <HAL_DMA_Start_IT+0x4b0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d027      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6b      	ldr	r2, [pc, #428]	; (8003c44 <HAL_DMA_Start_IT+0x4b4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d022      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6a      	ldr	r2, [pc, #424]	; (8003c48 <HAL_DMA_Start_IT+0x4b8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d01d      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a68      	ldr	r2, [pc, #416]	; (8003c4c <HAL_DMA_Start_IT+0x4bc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d018      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <HAL_DMA_Start_IT+0x4c0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a65      	ldr	r2, [pc, #404]	; (8003c54 <HAL_DMA_Start_IT+0x4c4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a64      	ldr	r2, [pc, #400]	; (8003c58 <HAL_DMA_Start_IT+0x4c8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d009      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a62      	ldr	r2, [pc, #392]	; (8003c5c <HAL_DMA_Start_IT+0x4cc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d004      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x350>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a61      	ldr	r2, [pc, #388]	; (8003c60 <HAL_DMA_Start_IT+0x4d0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <HAL_DMA_Start_IT+0x354>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_DMA_Start_IT+0x356>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01a      	beq.n	8003b20 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b06:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a37      	ldr	r2, [pc, #220]	; (8003c04 <HAL_DMA_Start_IT+0x474>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d04a      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <HAL_DMA_Start_IT+0x478>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d045      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <HAL_DMA_Start_IT+0x47c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d040      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a33      	ldr	r2, [pc, #204]	; (8003c10 <HAL_DMA_Start_IT+0x480>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d03b      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a31      	ldr	r2, [pc, #196]	; (8003c14 <HAL_DMA_Start_IT+0x484>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d036      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <HAL_DMA_Start_IT+0x488>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2e      	ldr	r2, [pc, #184]	; (8003c1c <HAL_DMA_Start_IT+0x48c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d02c      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <HAL_DMA_Start_IT+0x490>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a2b      	ldr	r2, [pc, #172]	; (8003c24 <HAL_DMA_Start_IT+0x494>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d022      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a2a      	ldr	r2, [pc, #168]	; (8003c28 <HAL_DMA_Start_IT+0x498>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d01d      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a28      	ldr	r2, [pc, #160]	; (8003c2c <HAL_DMA_Start_IT+0x49c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d018      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a27      	ldr	r2, [pc, #156]	; (8003c30 <HAL_DMA_Start_IT+0x4a0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d013      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a25      	ldr	r2, [pc, #148]	; (8003c34 <HAL_DMA_Start_IT+0x4a4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00e      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a24      	ldr	r2, [pc, #144]	; (8003c38 <HAL_DMA_Start_IT+0x4a8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d009      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a22      	ldr	r2, [pc, #136]	; (8003c3c <HAL_DMA_Start_IT+0x4ac>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d004      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x430>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <HAL_DMA_Start_IT+0x4b0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d108      	bne.n	8003bd2 <HAL_DMA_Start_IT+0x442>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	e012      	b.n	8003bf8 <HAL_DMA_Start_IT+0x468>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0201 	orr.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e009      	b.n	8003bf8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40020010 	.word	0x40020010
 8003c08:	40020028 	.word	0x40020028
 8003c0c:	40020040 	.word	0x40020040
 8003c10:	40020058 	.word	0x40020058
 8003c14:	40020070 	.word	0x40020070
 8003c18:	40020088 	.word	0x40020088
 8003c1c:	400200a0 	.word	0x400200a0
 8003c20:	400200b8 	.word	0x400200b8
 8003c24:	40020410 	.word	0x40020410
 8003c28:	40020428 	.word	0x40020428
 8003c2c:	40020440 	.word	0x40020440
 8003c30:	40020458 	.word	0x40020458
 8003c34:	40020470 	.word	0x40020470
 8003c38:	40020488 	.word	0x40020488
 8003c3c:	400204a0 	.word	0x400204a0
 8003c40:	400204b8 	.word	0x400204b8
 8003c44:	58025408 	.word	0x58025408
 8003c48:	5802541c 	.word	0x5802541c
 8003c4c:	58025430 	.word	0x58025430
 8003c50:	58025444 	.word	0x58025444
 8003c54:	58025458 	.word	0x58025458
 8003c58:	5802546c 	.word	0x5802546c
 8003c5c:	58025480 	.word	0x58025480
 8003c60:	58025494 	.word	0x58025494

08003c64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c70:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_DMA_IRQHandler+0x1ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a67      	ldr	r2, [pc, #412]	; (8003e14 <HAL_DMA_IRQHandler+0x1b0>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a5f      	ldr	r2, [pc, #380]	; (8003e18 <HAL_DMA_IRQHandler+0x1b4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04a      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	; (8003e1c <HAL_DMA_IRQHandler+0x1b8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d045      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5c      	ldr	r2, [pc, #368]	; (8003e20 <HAL_DMA_IRQHandler+0x1bc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d040      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5a      	ldr	r2, [pc, #360]	; (8003e24 <HAL_DMA_IRQHandler+0x1c0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d03b      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a59      	ldr	r2, [pc, #356]	; (8003e28 <HAL_DMA_IRQHandler+0x1c4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d036      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a57      	ldr	r2, [pc, #348]	; (8003e2c <HAL_DMA_IRQHandler+0x1c8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d031      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_DMA_IRQHandler+0x1cc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d02c      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a54      	ldr	r2, [pc, #336]	; (8003e34 <HAL_DMA_IRQHandler+0x1d0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d027      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a53      	ldr	r2, [pc, #332]	; (8003e38 <HAL_DMA_IRQHandler+0x1d4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a51      	ldr	r2, [pc, #324]	; (8003e3c <HAL_DMA_IRQHandler+0x1d8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a50      	ldr	r2, [pc, #320]	; (8003e40 <HAL_DMA_IRQHandler+0x1dc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a4e      	ldr	r2, [pc, #312]	; (8003e44 <HAL_DMA_IRQHandler+0x1e0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a4d      	ldr	r2, [pc, #308]	; (8003e48 <HAL_DMA_IRQHandler+0x1e4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	; (8003e4c <HAL_DMA_IRQHandler+0x1e8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <HAL_DMA_IRQHandler+0x1ec>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xd2>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a48      	ldr	r2, [pc, #288]	; (8003e54 <HAL_DMA_IRQHandler+0x1f0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d101      	bne.n	8003d3a <HAL_DMA_IRQHandler+0xd6>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_DMA_IRQHandler+0xd8>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 842b 	beq.w	8004598 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 80a2 	beq.w	8003e9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_DMA_IRQHandler+0x1b4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d04a      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_DMA_IRQHandler+0x1b8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d045      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMA_IRQHandler+0x1bc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d040      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <HAL_DMA_IRQHandler+0x1c0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d03b      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMA_IRQHandler+0x1c4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d036      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <HAL_DMA_IRQHandler+0x1c8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d031      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMA_IRQHandler+0x1cc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d02c      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_DMA_IRQHandler+0x1d0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d027      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_IRQHandler+0x1d4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_DMA_IRQHandler+0x1d8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d01d      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_DMA_IRQHandler+0x1dc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <HAL_DMA_IRQHandler+0x1e0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1c      	ldr	r2, [pc, #112]	; (8003e48 <HAL_DMA_IRQHandler+0x1e4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1b      	ldr	r2, [pc, #108]	; (8003e4c <HAL_DMA_IRQHandler+0x1e8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_DMA_IRQHandler+0x1ec>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_DMA_IRQHandler+0x194>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_DMA_IRQHandler+0x1f0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d12f      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x1f4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e02e      	b.n	8003e6c <HAL_DMA_IRQHandler+0x208>
 8003e0e:	bf00      	nop
 8003e10:	24000000 	.word	0x24000000
 8003e14:	1b4e81b5 	.word	0x1b4e81b5
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	40020040 	.word	0x40020040
 8003e24:	40020058 	.word	0x40020058
 8003e28:	40020070 	.word	0x40020070
 8003e2c:	40020088 	.word	0x40020088
 8003e30:	400200a0 	.word	0x400200a0
 8003e34:	400200b8 	.word	0x400200b8
 8003e38:	40020410 	.word	0x40020410
 8003e3c:	40020428 	.word	0x40020428
 8003e40:	40020440 	.word	0x40020440
 8003e44:	40020458 	.word	0x40020458
 8003e48:	40020470 	.word	0x40020470
 8003e4c:	40020488 	.word	0x40020488
 8003e50:	400204a0 	.word	0x400204a0
 8003e54:	400204b8 	.word	0x400204b8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d015      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0204 	bic.w	r2, r2, #4
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	2208      	movs	r2, #8
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06e      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a69      	ldr	r2, [pc, #420]	; (800405c <HAL_DMA_IRQHandler+0x3f8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04a      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a67      	ldr	r2, [pc, #412]	; (8004060 <HAL_DMA_IRQHandler+0x3fc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a66      	ldr	r2, [pc, #408]	; (8004064 <HAL_DMA_IRQHandler+0x400>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d040      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a64      	ldr	r2, [pc, #400]	; (8004068 <HAL_DMA_IRQHandler+0x404>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d03b      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a63      	ldr	r2, [pc, #396]	; (800406c <HAL_DMA_IRQHandler+0x408>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d036      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a61      	ldr	r2, [pc, #388]	; (8004070 <HAL_DMA_IRQHandler+0x40c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a60      	ldr	r2, [pc, #384]	; (8004074 <HAL_DMA_IRQHandler+0x410>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d02c      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a5e      	ldr	r2, [pc, #376]	; (8004078 <HAL_DMA_IRQHandler+0x414>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d027      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5d      	ldr	r2, [pc, #372]	; (800407c <HAL_DMA_IRQHandler+0x418>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_DMA_IRQHandler+0x41c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a5a      	ldr	r2, [pc, #360]	; (8004084 <HAL_DMA_IRQHandler+0x420>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a58      	ldr	r2, [pc, #352]	; (8004088 <HAL_DMA_IRQHandler+0x424>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a57      	ldr	r2, [pc, #348]	; (800408c <HAL_DMA_IRQHandler+0x428>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <HAL_DMA_IRQHandler+0x42c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a54      	ldr	r2, [pc, #336]	; (8004094 <HAL_DMA_IRQHandler+0x430>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x2ee>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_DMA_IRQHandler+0x434>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10a      	bne.n	8003f68 <HAL_DMA_IRQHandler+0x304>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	2301      	movne	r3, #1
 8003f62:	2300      	moveq	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	e003      	b.n	8003f70 <HAL_DMA_IRQHandler+0x30c>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f043 0202 	orr.w	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2204      	movs	r2, #4
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 808f 	beq.w	80040c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2c      	ldr	r2, [pc, #176]	; (800405c <HAL_DMA_IRQHandler+0x3f8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04a      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	; (8004060 <HAL_DMA_IRQHandler+0x3fc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d045      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a29      	ldr	r2, [pc, #164]	; (8004064 <HAL_DMA_IRQHandler+0x400>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a27      	ldr	r2, [pc, #156]	; (8004068 <HAL_DMA_IRQHandler+0x404>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d03b      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a26      	ldr	r2, [pc, #152]	; (800406c <HAL_DMA_IRQHandler+0x408>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d036      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a24      	ldr	r2, [pc, #144]	; (8004070 <HAL_DMA_IRQHandler+0x40c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d031      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a23      	ldr	r2, [pc, #140]	; (8004074 <HAL_DMA_IRQHandler+0x410>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d02c      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a21      	ldr	r2, [pc, #132]	; (8004078 <HAL_DMA_IRQHandler+0x414>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d027      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a20      	ldr	r2, [pc, #128]	; (800407c <HAL_DMA_IRQHandler+0x418>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_DMA_IRQHandler+0x41c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01d      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <HAL_DMA_IRQHandler+0x420>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d018      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <HAL_DMA_IRQHandler+0x424>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d013      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_DMA_IRQHandler+0x428>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00e      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a18      	ldr	r2, [pc, #96]	; (8004090 <HAL_DMA_IRQHandler+0x42c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a17      	ldr	r2, [pc, #92]	; (8004094 <HAL_DMA_IRQHandler+0x430>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_DMA_IRQHandler+0x3e2>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <HAL_DMA_IRQHandler+0x434>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d12a      	bne.n	800409c <HAL_DMA_IRQHandler+0x438>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e023      	b.n	80040a4 <HAL_DMA_IRQHandler+0x440>
 800405c:	40020010 	.word	0x40020010
 8004060:	40020028 	.word	0x40020028
 8004064:	40020040 	.word	0x40020040
 8004068:	40020058 	.word	0x40020058
 800406c:	40020070 	.word	0x40020070
 8004070:	40020088 	.word	0x40020088
 8004074:	400200a0 	.word	0x400200a0
 8004078:	400200b8 	.word	0x400200b8
 800407c:	40020410 	.word	0x40020410
 8004080:	40020428 	.word	0x40020428
 8004084:	40020440 	.word	0x40020440
 8004088:	40020458 	.word	0x40020458
 800408c:	40020470 	.word	0x40020470
 8004090:	40020488 	.word	0x40020488
 8004094:	400204a0 	.word	0x400204a0
 8004098:	400204b8 	.word	0x400204b8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2300      	movs	r3, #0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2204      	movs	r2, #4
 80040b2:	409a      	lsls	r2, r3
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2210      	movs	r2, #16
 80040ce:	409a      	lsls	r2, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 80a6 	beq.w	8004226 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a85      	ldr	r2, [pc, #532]	; (80042f4 <HAL_DMA_IRQHandler+0x690>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d04a      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a83      	ldr	r2, [pc, #524]	; (80042f8 <HAL_DMA_IRQHandler+0x694>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d045      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a82      	ldr	r2, [pc, #520]	; (80042fc <HAL_DMA_IRQHandler+0x698>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d040      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a80      	ldr	r2, [pc, #512]	; (8004300 <HAL_DMA_IRQHandler+0x69c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d03b      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a7f      	ldr	r2, [pc, #508]	; (8004304 <HAL_DMA_IRQHandler+0x6a0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d036      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7d      	ldr	r2, [pc, #500]	; (8004308 <HAL_DMA_IRQHandler+0x6a4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d031      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a7c      	ldr	r2, [pc, #496]	; (800430c <HAL_DMA_IRQHandler+0x6a8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d02c      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7a      	ldr	r2, [pc, #488]	; (8004310 <HAL_DMA_IRQHandler+0x6ac>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d027      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a79      	ldr	r2, [pc, #484]	; (8004314 <HAL_DMA_IRQHandler+0x6b0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d022      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a77      	ldr	r2, [pc, #476]	; (8004318 <HAL_DMA_IRQHandler+0x6b4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01d      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a76      	ldr	r2, [pc, #472]	; (800431c <HAL_DMA_IRQHandler+0x6b8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a74      	ldr	r2, [pc, #464]	; (8004320 <HAL_DMA_IRQHandler+0x6bc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d013      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a73      	ldr	r2, [pc, #460]	; (8004324 <HAL_DMA_IRQHandler+0x6c0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a71      	ldr	r2, [pc, #452]	; (8004328 <HAL_DMA_IRQHandler+0x6c4>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a70      	ldr	r2, [pc, #448]	; (800432c <HAL_DMA_IRQHandler+0x6c8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_DMA_IRQHandler+0x516>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a6e      	ldr	r2, [pc, #440]	; (8004330 <HAL_DMA_IRQHandler+0x6cc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d10a      	bne.n	8004190 <HAL_DMA_IRQHandler+0x52c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	bf14      	ite	ne
 8004188:	2301      	movne	r3, #1
 800418a:	2300      	moveq	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	e009      	b.n	80041a4 <HAL_DMA_IRQHandler+0x540>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d03e      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	f003 031f 	and.w	r3, r3, #31
 80041b0:	2210      	movs	r2, #16
 80041b2:	409a      	lsls	r2, r3
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d024      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
 80041e4:	e01f      	b.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01b      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
 80041f6:	e016      	b.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0208 	bic.w	r2, r2, #8
 8004214:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	2220      	movs	r2, #32
 8004230:	409a      	lsls	r2, r3
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8110 	beq.w	800445c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <HAL_DMA_IRQHandler+0x690>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d04a      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2b      	ldr	r2, [pc, #172]	; (80042f8 <HAL_DMA_IRQHandler+0x694>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d045      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a29      	ldr	r2, [pc, #164]	; (80042fc <HAL_DMA_IRQHandler+0x698>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d040      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a28      	ldr	r2, [pc, #160]	; (8004300 <HAL_DMA_IRQHandler+0x69c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d03b      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a26      	ldr	r2, [pc, #152]	; (8004304 <HAL_DMA_IRQHandler+0x6a0>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d036      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <HAL_DMA_IRQHandler+0x6a4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d031      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a23      	ldr	r2, [pc, #140]	; (800430c <HAL_DMA_IRQHandler+0x6a8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02c      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_DMA_IRQHandler+0x6ac>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d027      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <HAL_DMA_IRQHandler+0x6b0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d022      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1f      	ldr	r2, [pc, #124]	; (8004318 <HAL_DMA_IRQHandler+0x6b4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d01d      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <HAL_DMA_IRQHandler+0x6b8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <HAL_DMA_IRQHandler+0x6bc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_DMA_IRQHandler+0x6c0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_DMA_IRQHandler+0x6c4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_DMA_IRQHandler+0x6c8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_DMA_IRQHandler+0x678>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_DMA_IRQHandler+0x6cc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d12b      	bne.n	8004334 <HAL_DMA_IRQHandler+0x6d0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf14      	ite	ne
 80042ea:	2301      	movne	r3, #1
 80042ec:	2300      	moveq	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	e02a      	b.n	8004348 <HAL_DMA_IRQHandler+0x6e4>
 80042f2:	bf00      	nop
 80042f4:	40020010 	.word	0x40020010
 80042f8:	40020028 	.word	0x40020028
 80042fc:	40020040 	.word	0x40020040
 8004300:	40020058 	.word	0x40020058
 8004304:	40020070 	.word	0x40020070
 8004308:	40020088 	.word	0x40020088
 800430c:	400200a0 	.word	0x400200a0
 8004310:	400200b8 	.word	0x400200b8
 8004314:	40020410 	.word	0x40020410
 8004318:	40020428 	.word	0x40020428
 800431c:	40020440 	.word	0x40020440
 8004320:	40020458 	.word	0x40020458
 8004324:	40020470 	.word	0x40020470
 8004328:	40020488 	.word	0x40020488
 800432c:	400204a0 	.word	0x400204a0
 8004330:	400204b8 	.word	0x400204b8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf14      	ite	ne
 8004342:	2301      	movne	r3, #1
 8004344:	2300      	moveq	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8087 	beq.w	800445c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2220      	movs	r2, #32
 8004358:	409a      	lsls	r2, r3
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b04      	cmp	r3, #4
 8004368:	d139      	bne.n	80043de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0216 	bic.w	r2, r2, #22
 8004378:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004388:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_DMA_IRQHandler+0x736>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0208 	bic.w	r2, r2, #8
 80043a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	223f      	movs	r2, #63	; 0x3f
 80043b4:	409a      	lsls	r2, r3
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 834a 	beq.w	8004a68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
          }
          return;
 80043dc:	e344      	b.n	8004a68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d02c      	beq.n	800445c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	e027      	b.n	800445c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	2b00      	cmp	r3, #0
 8004412:	d023      	beq.n	800445c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e01e      	b.n	800445c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10f      	bne.n	800444c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0210 	bic.w	r2, r2, #16
 800443a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8306 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8088 	beq.w	8004584 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2204      	movs	r2, #4
 8004478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7a      	ldr	r2, [pc, #488]	; (800466c <HAL_DMA_IRQHandler+0xa08>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d04a      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a79      	ldr	r2, [pc, #484]	; (8004670 <HAL_DMA_IRQHandler+0xa0c>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d045      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_DMA_IRQHandler+0xa10>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d040      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a76      	ldr	r2, [pc, #472]	; (8004678 <HAL_DMA_IRQHandler+0xa14>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d03b      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a74      	ldr	r2, [pc, #464]	; (800467c <HAL_DMA_IRQHandler+0xa18>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d036      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a73      	ldr	r2, [pc, #460]	; (8004680 <HAL_DMA_IRQHandler+0xa1c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d031      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a71      	ldr	r2, [pc, #452]	; (8004684 <HAL_DMA_IRQHandler+0xa20>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d02c      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a70      	ldr	r2, [pc, #448]	; (8004688 <HAL_DMA_IRQHandler+0xa24>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d027      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6e      	ldr	r2, [pc, #440]	; (800468c <HAL_DMA_IRQHandler+0xa28>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6d      	ldr	r2, [pc, #436]	; (8004690 <HAL_DMA_IRQHandler+0xa2c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01d      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a6b      	ldr	r2, [pc, #428]	; (8004694 <HAL_DMA_IRQHandler+0xa30>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6a      	ldr	r2, [pc, #424]	; (8004698 <HAL_DMA_IRQHandler+0xa34>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a68      	ldr	r2, [pc, #416]	; (800469c <HAL_DMA_IRQHandler+0xa38>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a67      	ldr	r2, [pc, #412]	; (80046a0 <HAL_DMA_IRQHandler+0xa3c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a65      	ldr	r2, [pc, #404]	; (80046a4 <HAL_DMA_IRQHandler+0xa40>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_DMA_IRQHandler+0x8b8>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a64      	ldr	r2, [pc, #400]	; (80046a8 <HAL_DMA_IRQHandler+0xa44>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d108      	bne.n	800452e <HAL_DMA_IRQHandler+0x8ca>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e007      	b.n	800453e <HAL_DMA_IRQHandler+0x8da>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3301      	adds	r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	429a      	cmp	r2, r3
 8004548:	d307      	bcc.n	800455a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f2      	bne.n	800453e <HAL_DMA_IRQHandler+0x8da>
 8004558:	e000      	b.n	800455c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800455a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d004      	beq.n	8004574 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2203      	movs	r2, #3
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004572:	e003      	b.n	800457c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8272 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
 8004596:	e26c      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a43      	ldr	r2, [pc, #268]	; (80046ac <HAL_DMA_IRQHandler+0xa48>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d022      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a42      	ldr	r2, [pc, #264]	; (80046b0 <HAL_DMA_IRQHandler+0xa4c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d01d      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a40      	ldr	r2, [pc, #256]	; (80046b4 <HAL_DMA_IRQHandler+0xa50>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d018      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <HAL_DMA_IRQHandler+0xa54>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d013      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3d      	ldr	r2, [pc, #244]	; (80046bc <HAL_DMA_IRQHandler+0xa58>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00e      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a3c      	ldr	r2, [pc, #240]	; (80046c0 <HAL_DMA_IRQHandler+0xa5c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d009      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3a      	ldr	r2, [pc, #232]	; (80046c4 <HAL_DMA_IRQHandler+0xa60>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d004      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x984>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a39      	ldr	r2, [pc, #228]	; (80046c8 <HAL_DMA_IRQHandler+0xa64>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d101      	bne.n	80045ec <HAL_DMA_IRQHandler+0x988>
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <HAL_DMA_IRQHandler+0x98a>
 80045ec:	2300      	movs	r3, #0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 823f 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2204      	movs	r2, #4
 8004606:	409a      	lsls	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	4013      	ands	r3, r2
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80cd 	beq.w	80047ac <HAL_DMA_IRQHandler+0xb48>
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80c7 	beq.w	80047ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2204      	movs	r2, #4
 8004628:	409a      	lsls	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d049      	beq.n	80046cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8210 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004654:	e20a      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8206 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004668:	e200      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe08>
 800466a:	bf00      	nop
 800466c:	40020010 	.word	0x40020010
 8004670:	40020028 	.word	0x40020028
 8004674:	40020040 	.word	0x40020040
 8004678:	40020058 	.word	0x40020058
 800467c:	40020070 	.word	0x40020070
 8004680:	40020088 	.word	0x40020088
 8004684:	400200a0 	.word	0x400200a0
 8004688:	400200b8 	.word	0x400200b8
 800468c:	40020410 	.word	0x40020410
 8004690:	40020428 	.word	0x40020428
 8004694:	40020440 	.word	0x40020440
 8004698:	40020458 	.word	0x40020458
 800469c:	40020470 	.word	0x40020470
 80046a0:	40020488 	.word	0x40020488
 80046a4:	400204a0 	.word	0x400204a0
 80046a8:	400204b8 	.word	0x400204b8
 80046ac:	58025408 	.word	0x58025408
 80046b0:	5802541c 	.word	0x5802541c
 80046b4:	58025430 	.word	0x58025430
 80046b8:	58025444 	.word	0x58025444
 80046bc:	58025458 	.word	0x58025458
 80046c0:	5802546c 	.word	0x5802546c
 80046c4:	58025480 	.word	0x58025480
 80046c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d160      	bne.n	8004798 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a7f      	ldr	r2, [pc, #508]	; (80048d8 <HAL_DMA_IRQHandler+0xc74>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d04a      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7d      	ldr	r2, [pc, #500]	; (80048dc <HAL_DMA_IRQHandler+0xc78>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d045      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a7c      	ldr	r2, [pc, #496]	; (80048e0 <HAL_DMA_IRQHandler+0xc7c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d040      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a7a      	ldr	r2, [pc, #488]	; (80048e4 <HAL_DMA_IRQHandler+0xc80>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a79      	ldr	r2, [pc, #484]	; (80048e8 <HAL_DMA_IRQHandler+0xc84>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d036      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a77      	ldr	r2, [pc, #476]	; (80048ec <HAL_DMA_IRQHandler+0xc88>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d031      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a76      	ldr	r2, [pc, #472]	; (80048f0 <HAL_DMA_IRQHandler+0xc8c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d02c      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a74      	ldr	r2, [pc, #464]	; (80048f4 <HAL_DMA_IRQHandler+0xc90>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d027      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a73      	ldr	r2, [pc, #460]	; (80048f8 <HAL_DMA_IRQHandler+0xc94>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d022      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a71      	ldr	r2, [pc, #452]	; (80048fc <HAL_DMA_IRQHandler+0xc98>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01d      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a70      	ldr	r2, [pc, #448]	; (8004900 <HAL_DMA_IRQHandler+0xc9c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6e      	ldr	r2, [pc, #440]	; (8004904 <HAL_DMA_IRQHandler+0xca0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6d      	ldr	r2, [pc, #436]	; (8004908 <HAL_DMA_IRQHandler+0xca4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a6b      	ldr	r2, [pc, #428]	; (800490c <HAL_DMA_IRQHandler+0xca8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6a      	ldr	r2, [pc, #424]	; (8004910 <HAL_DMA_IRQHandler+0xcac>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_DMA_IRQHandler+0xb12>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a68      	ldr	r2, [pc, #416]	; (8004914 <HAL_DMA_IRQHandler+0xcb0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <HAL_DMA_IRQHandler+0xb24>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0208 	bic.w	r2, r2, #8
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <HAL_DMA_IRQHandler+0xb34>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0204 	bic.w	r2, r2, #4
 8004796:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8165 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047aa:	e15f      	b.n	8004a6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	2202      	movs	r2, #2
 80047b6:	409a      	lsls	r2, r3
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80c5 	beq.w	800494c <HAL_DMA_IRQHandler+0xce8>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80bf 	beq.w	800494c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	2202      	movs	r2, #2
 80047d8:	409a      	lsls	r2, r3
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d018      	beq.n	800481a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 813a 	beq.w	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004804:	e134      	b.n	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8130 	beq.w	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004818:	e12a      	b.n	8004a70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	f040 8089 	bne.w	8004938 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2b      	ldr	r2, [pc, #172]	; (80048d8 <HAL_DMA_IRQHandler+0xc74>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d04a      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_DMA_IRQHandler+0xc78>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d045      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <HAL_DMA_IRQHandler+0xc7c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d040      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <HAL_DMA_IRQHandler+0xc80>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d03b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a25      	ldr	r2, [pc, #148]	; (80048e8 <HAL_DMA_IRQHandler+0xc84>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d036      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a23      	ldr	r2, [pc, #140]	; (80048ec <HAL_DMA_IRQHandler+0xc88>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d031      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a22      	ldr	r2, [pc, #136]	; (80048f0 <HAL_DMA_IRQHandler+0xc8c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d02c      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <HAL_DMA_IRQHandler+0xc90>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d027      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_DMA_IRQHandler+0xc94>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d022      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_DMA_IRQHandler+0xc98>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <HAL_DMA_IRQHandler+0xc9c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1a      	ldr	r2, [pc, #104]	; (8004904 <HAL_DMA_IRQHandler+0xca0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_DMA_IRQHandler+0xca4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a17      	ldr	r2, [pc, #92]	; (800490c <HAL_DMA_IRQHandler+0xca8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_DMA_IRQHandler+0xcac>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xc62>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a14      	ldr	r2, [pc, #80]	; (8004914 <HAL_DMA_IRQHandler+0xcb0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d128      	bne.n	8004918 <HAL_DMA_IRQHandler+0xcb4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0214 	bic.w	r2, r2, #20
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e027      	b.n	8004928 <HAL_DMA_IRQHandler+0xcc4>
 80048d8:	40020010 	.word	0x40020010
 80048dc:	40020028 	.word	0x40020028
 80048e0:	40020040 	.word	0x40020040
 80048e4:	40020058 	.word	0x40020058
 80048e8:	40020070 	.word	0x40020070
 80048ec:	40020088 	.word	0x40020088
 80048f0:	400200a0 	.word	0x400200a0
 80048f4:	400200b8 	.word	0x400200b8
 80048f8:	40020410 	.word	0x40020410
 80048fc:	40020428 	.word	0x40020428
 8004900:	40020440 	.word	0x40020440
 8004904:	40020458 	.word	0x40020458
 8004908:	40020470 	.word	0x40020470
 800490c:	40020488 	.word	0x40020488
 8004910:	400204a0 	.word	0x400204a0
 8004914:	400204b8 	.word	0x400204b8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 020a 	bic.w	r2, r2, #10
 8004926:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8097 	beq.w	8004a70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800494a:	e091      	b.n	8004a70 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2208      	movs	r2, #8
 8004956:	409a      	lsls	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 8088 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8082 	beq.w	8004a72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a41      	ldr	r2, [pc, #260]	; (8004a78 <HAL_DMA_IRQHandler+0xe14>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d04a      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a3f      	ldr	r2, [pc, #252]	; (8004a7c <HAL_DMA_IRQHandler+0xe18>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d045      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3e      	ldr	r2, [pc, #248]	; (8004a80 <HAL_DMA_IRQHandler+0xe1c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d040      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3c      	ldr	r2, [pc, #240]	; (8004a84 <HAL_DMA_IRQHandler+0xe20>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d03b      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a3b      	ldr	r2, [pc, #236]	; (8004a88 <HAL_DMA_IRQHandler+0xe24>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d036      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a39      	ldr	r2, [pc, #228]	; (8004a8c <HAL_DMA_IRQHandler+0xe28>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d031      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a38      	ldr	r2, [pc, #224]	; (8004a90 <HAL_DMA_IRQHandler+0xe2c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d02c      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a36      	ldr	r2, [pc, #216]	; (8004a94 <HAL_DMA_IRQHandler+0xe30>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d027      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <HAL_DMA_IRQHandler+0xe34>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d022      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a33      	ldr	r2, [pc, #204]	; (8004a9c <HAL_DMA_IRQHandler+0xe38>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a32      	ldr	r2, [pc, #200]	; (8004aa0 <HAL_DMA_IRQHandler+0xe3c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a30      	ldr	r2, [pc, #192]	; (8004aa4 <HAL_DMA_IRQHandler+0xe40>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2f      	ldr	r2, [pc, #188]	; (8004aa8 <HAL_DMA_IRQHandler+0xe44>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2d      	ldr	r2, [pc, #180]	; (8004aac <HAL_DMA_IRQHandler+0xe48>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2c      	ldr	r2, [pc, #176]	; (8004ab0 <HAL_DMA_IRQHandler+0xe4c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xdaa>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2a      	ldr	r2, [pc, #168]	; (8004ab4 <HAL_DMA_IRQHandler+0xe50>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <HAL_DMA_IRQHandler+0xdbc>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 021c 	bic.w	r2, r2, #28
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e007      	b.n	8004a30 <HAL_DMA_IRQHandler+0xdcc>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 020e 	bic.w	r2, r2, #14
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a34:	f003 031f 	and.w	r3, r3, #31
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
 8004a66:	e004      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a68:	bf00      	nop
 8004a6a:	e002      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a72:	3728      	adds	r7, #40	; 0x28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40020010 	.word	0x40020010
 8004a7c:	40020028 	.word	0x40020028
 8004a80:	40020040 	.word	0x40020040
 8004a84:	40020058 	.word	0x40020058
 8004a88:	40020070 	.word	0x40020070
 8004a8c:	40020088 	.word	0x40020088
 8004a90:	400200a0 	.word	0x400200a0
 8004a94:	400200b8 	.word	0x400200b8
 8004a98:	40020410 	.word	0x40020410
 8004a9c:	40020428 	.word	0x40020428
 8004aa0:	40020440 	.word	0x40020440
 8004aa4:	40020458 	.word	0x40020458
 8004aa8:	40020470 	.word	0x40020470
 8004aac:	40020488 	.word	0x40020488
 8004ab0:	400204a0 	.word	0x400204a0
 8004ab4:	400204b8 	.word	0x400204b8

08004ab8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7f      	ldr	r2, [pc, #508]	; (8004cd4 <DMA_SetConfig+0x21c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d072      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7d      	ldr	r2, [pc, #500]	; (8004cd8 <DMA_SetConfig+0x220>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d06d      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <DMA_SetConfig+0x224>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d068      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a7a      	ldr	r2, [pc, #488]	; (8004ce0 <DMA_SetConfig+0x228>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d063      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a79      	ldr	r2, [pc, #484]	; (8004ce4 <DMA_SetConfig+0x22c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d05e      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a77      	ldr	r2, [pc, #476]	; (8004ce8 <DMA_SetConfig+0x230>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d059      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a76      	ldr	r2, [pc, #472]	; (8004cec <DMA_SetConfig+0x234>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d054      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a74      	ldr	r2, [pc, #464]	; (8004cf0 <DMA_SetConfig+0x238>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d04f      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a73      	ldr	r2, [pc, #460]	; (8004cf4 <DMA_SetConfig+0x23c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d04a      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a71      	ldr	r2, [pc, #452]	; (8004cf8 <DMA_SetConfig+0x240>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d045      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a70      	ldr	r2, [pc, #448]	; (8004cfc <DMA_SetConfig+0x244>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d040      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a6e      	ldr	r2, [pc, #440]	; (8004d00 <DMA_SetConfig+0x248>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d03b      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6d      	ldr	r2, [pc, #436]	; (8004d04 <DMA_SetConfig+0x24c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d036      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6b      	ldr	r2, [pc, #428]	; (8004d08 <DMA_SetConfig+0x250>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d031      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a6a      	ldr	r2, [pc, #424]	; (8004d0c <DMA_SetConfig+0x254>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d02c      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a68      	ldr	r2, [pc, #416]	; (8004d10 <DMA_SetConfig+0x258>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d027      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a67      	ldr	r2, [pc, #412]	; (8004d14 <DMA_SetConfig+0x25c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d022      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a65      	ldr	r2, [pc, #404]	; (8004d18 <DMA_SetConfig+0x260>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d01d      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a64      	ldr	r2, [pc, #400]	; (8004d1c <DMA_SetConfig+0x264>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d018      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a62      	ldr	r2, [pc, #392]	; (8004d20 <DMA_SetConfig+0x268>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d013      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a61      	ldr	r2, [pc, #388]	; (8004d24 <DMA_SetConfig+0x26c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00e      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5f      	ldr	r2, [pc, #380]	; (8004d28 <DMA_SetConfig+0x270>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d009      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5e      	ldr	r2, [pc, #376]	; (8004d2c <DMA_SetConfig+0x274>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d004      	beq.n	8004bc2 <DMA_SetConfig+0x10a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5c      	ldr	r2, [pc, #368]	; (8004d30 <DMA_SetConfig+0x278>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <DMA_SetConfig+0x10e>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <DMA_SetConfig+0x110>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00d      	beq.n	8004be8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004bd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004be6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a39      	ldr	r2, [pc, #228]	; (8004cd4 <DMA_SetConfig+0x21c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d04a      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a38      	ldr	r2, [pc, #224]	; (8004cd8 <DMA_SetConfig+0x220>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d045      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a36      	ldr	r2, [pc, #216]	; (8004cdc <DMA_SetConfig+0x224>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d040      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <DMA_SetConfig+0x228>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d03b      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a33      	ldr	r2, [pc, #204]	; (8004ce4 <DMA_SetConfig+0x22c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d036      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <DMA_SetConfig+0x230>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d031      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a30      	ldr	r2, [pc, #192]	; (8004cec <DMA_SetConfig+0x234>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d02c      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2f      	ldr	r2, [pc, #188]	; (8004cf0 <DMA_SetConfig+0x238>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d027      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <DMA_SetConfig+0x23c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2c      	ldr	r2, [pc, #176]	; (8004cf8 <DMA_SetConfig+0x240>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d01d      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <DMA_SetConfig+0x244>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <DMA_SetConfig+0x248>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <DMA_SetConfig+0x24c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <DMA_SetConfig+0x250>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <DMA_SetConfig+0x254>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <DMA_SetConfig+0x1d0>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <DMA_SetConfig+0x258>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <DMA_SetConfig+0x1d4>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <DMA_SetConfig+0x1d6>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d059      	beq.n	8004d46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	223f      	movs	r2, #63	; 0x3f
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b40      	cmp	r3, #64	; 0x40
 8004cc0:	d138      	bne.n	8004d34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cd2:	e086      	b.n	8004de2 <DMA_SetConfig+0x32a>
 8004cd4:	40020010 	.word	0x40020010
 8004cd8:	40020028 	.word	0x40020028
 8004cdc:	40020040 	.word	0x40020040
 8004ce0:	40020058 	.word	0x40020058
 8004ce4:	40020070 	.word	0x40020070
 8004ce8:	40020088 	.word	0x40020088
 8004cec:	400200a0 	.word	0x400200a0
 8004cf0:	400200b8 	.word	0x400200b8
 8004cf4:	40020410 	.word	0x40020410
 8004cf8:	40020428 	.word	0x40020428
 8004cfc:	40020440 	.word	0x40020440
 8004d00:	40020458 	.word	0x40020458
 8004d04:	40020470 	.word	0x40020470
 8004d08:	40020488 	.word	0x40020488
 8004d0c:	400204a0 	.word	0x400204a0
 8004d10:	400204b8 	.word	0x400204b8
 8004d14:	58025408 	.word	0x58025408
 8004d18:	5802541c 	.word	0x5802541c
 8004d1c:	58025430 	.word	0x58025430
 8004d20:	58025444 	.word	0x58025444
 8004d24:	58025458 	.word	0x58025458
 8004d28:	5802546c 	.word	0x5802546c
 8004d2c:	58025480 	.word	0x58025480
 8004d30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
}
 8004d44:	e04d      	b.n	8004de2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <DMA_SetConfig+0x338>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a27      	ldr	r2, [pc, #156]	; (8004df4 <DMA_SetConfig+0x33c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <DMA_SetConfig+0x340>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <DMA_SetConfig+0x344>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a23      	ldr	r2, [pc, #140]	; (8004e00 <DMA_SetConfig+0x348>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <DMA_SetConfig+0x34c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <DMA_SetConfig+0x350>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <DMA_SetConfig+0x2de>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <DMA_SetConfig+0x354>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <DMA_SetConfig+0x2e2>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <DMA_SetConfig+0x2e4>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da4:	f003 031f 	and.w	r3, r3, #31
 8004da8:	2201      	movs	r2, #1
 8004daa:	409a      	lsls	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d108      	bne.n	8004dd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	60da      	str	r2, [r3, #12]
}
 8004dd0:	e007      	b.n	8004de2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]
}
 8004de2:	bf00      	nop
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	58025408 	.word	0x58025408
 8004df4:	5802541c 	.word	0x5802541c
 8004df8:	58025430 	.word	0x58025430
 8004dfc:	58025444 	.word	0x58025444
 8004e00:	58025458 	.word	0x58025458
 8004e04:	5802546c 	.word	0x5802546c
 8004e08:	58025480 	.word	0x58025480
 8004e0c:	58025494 	.word	0x58025494

08004e10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a42      	ldr	r2, [pc, #264]	; (8004f28 <DMA_CalcBaseAndBitshift+0x118>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d04a      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a41      	ldr	r2, [pc, #260]	; (8004f2c <DMA_CalcBaseAndBitshift+0x11c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d045      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3f      	ldr	r2, [pc, #252]	; (8004f30 <DMA_CalcBaseAndBitshift+0x120>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d040      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a3e      	ldr	r2, [pc, #248]	; (8004f34 <DMA_CalcBaseAndBitshift+0x124>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d03b      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3c      	ldr	r2, [pc, #240]	; (8004f38 <DMA_CalcBaseAndBitshift+0x128>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d036      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <DMA_CalcBaseAndBitshift+0x12c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d031      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a39      	ldr	r2, [pc, #228]	; (8004f40 <DMA_CalcBaseAndBitshift+0x130>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02c      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <DMA_CalcBaseAndBitshift+0x134>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d027      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a36      	ldr	r2, [pc, #216]	; (8004f48 <DMA_CalcBaseAndBitshift+0x138>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a35      	ldr	r2, [pc, #212]	; (8004f4c <DMA_CalcBaseAndBitshift+0x13c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a33      	ldr	r2, [pc, #204]	; (8004f50 <DMA_CalcBaseAndBitshift+0x140>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a32      	ldr	r2, [pc, #200]	; (8004f54 <DMA_CalcBaseAndBitshift+0x144>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a30      	ldr	r2, [pc, #192]	; (8004f58 <DMA_CalcBaseAndBitshift+0x148>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <DMA_CalcBaseAndBitshift+0x14c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <DMA_CalcBaseAndBitshift+0x150>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <DMA_CalcBaseAndBitshift+0xa8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <DMA_CalcBaseAndBitshift+0x154>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <DMA_CalcBaseAndBitshift+0xac>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <DMA_CalcBaseAndBitshift+0xae>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d024      	beq.n	8004f0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	3b10      	subs	r3, #16
 8004eca:	4a27      	ldr	r2, [pc, #156]	; (8004f68 <DMA_CalcBaseAndBitshift+0x158>)
 8004ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <DMA_CalcBaseAndBitshift+0x15c>)
 8004edc:	5cd3      	ldrb	r3, [r2, r3]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d908      	bls.n	8004efc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <DMA_CalcBaseAndBitshift+0x160>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	659a      	str	r2, [r3, #88]	; 0x58
 8004efa:	e00d      	b.n	8004f18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	4b1b      	ldr	r3, [pc, #108]	; (8004f70 <DMA_CalcBaseAndBitshift+0x160>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6593      	str	r3, [r2, #88]	; 0x58
 8004f0a:	e005      	b.n	8004f18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40020010 	.word	0x40020010
 8004f2c:	40020028 	.word	0x40020028
 8004f30:	40020040 	.word	0x40020040
 8004f34:	40020058 	.word	0x40020058
 8004f38:	40020070 	.word	0x40020070
 8004f3c:	40020088 	.word	0x40020088
 8004f40:	400200a0 	.word	0x400200a0
 8004f44:	400200b8 	.word	0x400200b8
 8004f48:	40020410 	.word	0x40020410
 8004f4c:	40020428 	.word	0x40020428
 8004f50:	40020440 	.word	0x40020440
 8004f54:	40020458 	.word	0x40020458
 8004f58:	40020470 	.word	0x40020470
 8004f5c:	40020488 	.word	0x40020488
 8004f60:	400204a0 	.word	0x400204a0
 8004f64:	400204b8 	.word	0x400204b8
 8004f68:	aaaaaaab 	.word	0xaaaaaaab
 8004f6c:	0800b440 	.word	0x0800b440
 8004f70:	fffffc00 	.word	0xfffffc00

08004f74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d120      	bne.n	8004fca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d858      	bhi.n	8005042 <DMA_CheckFifoParam+0xce>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <DMA_CheckFifoParam+0x24>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fa9 	.word	0x08004fa9
 8004fa4:	08005043 	.word	0x08005043
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d048      	beq.n	8005046 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fb8:	e045      	b.n	8005046 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc2:	d142      	bne.n	800504a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fc8:	e03f      	b.n	800504a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd2:	d123      	bne.n	800501c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d838      	bhi.n	800504e <DMA_CheckFifoParam+0xda>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <DMA_CheckFifoParam+0x70>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08004ffb 	.word	0x08004ffb
 8004fec:	08004ff5 	.word	0x08004ff5
 8004ff0:	0800500d 	.word	0x0800500d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ff8:	e030      	b.n	800505c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d025      	beq.n	8005052 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800500a:	e022      	b.n	8005052 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005014:	d11f      	bne.n	8005056 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800501a:	e01c      	b.n	8005056 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	2b02      	cmp	r3, #2
 8005022:	d902      	bls.n	800502a <DMA_CheckFifoParam+0xb6>
 8005024:	2b03      	cmp	r3, #3
 8005026:	d003      	beq.n	8005030 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005028:	e018      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
        break;
 800502e:	e015      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00e      	beq.n	800505a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
    break;
 8005040:	e00b      	b.n	800505a <DMA_CheckFifoParam+0xe6>
        break;
 8005042:	bf00      	nop
 8005044:	e00a      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 8005046:	bf00      	nop
 8005048:	e008      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 800504a:	bf00      	nop
 800504c:	e006      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 800504e:	bf00      	nop
 8005050:	e004      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <DMA_CheckFifoParam+0xe8>
        break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <DMA_CheckFifoParam+0xe8>
    break;
 800505a:	bf00      	nop
    }
  }

  return status;
 800505c:	7bfb      	ldrb	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop

0800506c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a38      	ldr	r2, [pc, #224]	; (8005160 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d022      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01d      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a35      	ldr	r2, [pc, #212]	; (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d018      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a33      	ldr	r2, [pc, #204]	; (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a32      	ldr	r2, [pc, #200]	; (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a30      	ldr	r2, [pc, #192]	; (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2d      	ldr	r2, [pc, #180]	; (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d01a      	beq.n	800510a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	3b08      	subs	r3, #8
 80050dc:	4a28      	ldr	r2, [pc, #160]	; (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	091b      	lsrs	r3, r3, #4
 80050e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4b26      	ldr	r3, [pc, #152]	; (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	461a      	mov	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a24      	ldr	r2, [pc, #144]	; (8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005108:	e024      	b.n	8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	3b10      	subs	r3, #16
 8005112:	4a1e      	ldr	r2, [pc, #120]	; (800518c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005114:	fba2 2303 	umull	r2, r3, r2, r3
 8005118:	091b      	lsrs	r3, r3, #4
 800511a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d806      	bhi.n	8005132 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	4a1b      	ldr	r2, [pc, #108]	; (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d902      	bls.n	8005132 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3308      	adds	r3, #8
 8005130:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	461a      	mov	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005144:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	58025408 	.word	0x58025408
 8005164:	5802541c 	.word	0x5802541c
 8005168:	58025430 	.word	0x58025430
 800516c:	58025444 	.word	0x58025444
 8005170:	58025458 	.word	0x58025458
 8005174:	5802546c 	.word	0x5802546c
 8005178:	58025480 	.word	0x58025480
 800517c:	58025494 	.word	0x58025494
 8005180:	cccccccd 	.word	0xcccccccd
 8005184:	16009600 	.word	0x16009600
 8005188:	58025880 	.word	0x58025880
 800518c:	aaaaaaab 	.word	0xaaaaaaab
 8005190:	400204b8 	.word	0x400204b8
 8005194:	4002040f 	.word	0x4002040f
 8005198:	10008200 	.word	0x10008200
 800519c:	40020880 	.word	0x40020880

080051a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d04a      	beq.n	800524c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d847      	bhi.n	800524c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a25      	ldr	r2, [pc, #148]	; (8005258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d022      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a24      	ldr	r2, [pc, #144]	; (800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d01d      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a22      	ldr	r2, [pc, #136]	; (8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d018      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a21      	ldr	r2, [pc, #132]	; (8005264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d013      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d00e      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1e      	ldr	r2, [pc, #120]	; (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d009      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	; (8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	; (8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d101      	bne.n	8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005210:	2300      	movs	r3, #0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005228:	671a      	str	r2, [r3, #112]	; 0x70
 800522a:	e009      	b.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4b14      	ldr	r3, [pc, #80]	; (8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	461a      	mov	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a11      	ldr	r2, [pc, #68]	; (8005284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800523e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b01      	subs	r3, #1
 8005244:	2201      	movs	r2, #1
 8005246:	409a      	lsls	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	58025408 	.word	0x58025408
 800525c:	5802541c 	.word	0x5802541c
 8005260:	58025430 	.word	0x58025430
 8005264:	58025444 	.word	0x58025444
 8005268:	58025458 	.word	0x58025458
 800526c:	5802546c 	.word	0x5802546c
 8005270:	58025480 	.word	0x58025480
 8005274:	58025494 	.word	0x58025494
 8005278:	1600963f 	.word	0x1600963f
 800527c:	58025940 	.word	0x58025940
 8005280:	1000823f 	.word	0x1000823f
 8005284:	40020940 	.word	0x40020940

08005288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005288:	b480      	push	{r7}
 800528a:	b089      	sub	sp, #36	; 0x24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005296:	4b89      	ldr	r3, [pc, #548]	; (80054bc <HAL_GPIO_Init+0x234>)
 8005298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800529a:	e194      	b.n	80055c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2101      	movs	r1, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa01 f303 	lsl.w	r3, r1, r3
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8186 	beq.w	80055c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d005      	beq.n	80052cc <HAL_GPIO_Init+0x44>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d130      	bne.n	800532e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	2203      	movs	r2, #3
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005302:	2201      	movs	r2, #1
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4013      	ands	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	091b      	lsrs	r3, r3, #4
 8005318:	f003 0201 	and.w	r2, r3, #1
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	2b03      	cmp	r3, #3
 8005338:	d017      	beq.n	800536a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	2203      	movs	r2, #3
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d123      	bne.n	80053be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	08da      	lsrs	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3208      	adds	r2, #8
 800537e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	220f      	movs	r2, #15
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	08da      	lsrs	r2, r3, #3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3208      	adds	r2, #8
 80053b8:	69b9      	ldr	r1, [r7, #24]
 80053ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	2203      	movs	r2, #3
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 0203 	and.w	r2, r3, #3
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 80e0 	beq.w	80055c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_GPIO_Init+0x238>)
 8005402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005406:	4a2e      	ldr	r2, [pc, #184]	; (80054c0 <HAL_GPIO_Init+0x238>)
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005410:	4b2b      	ldr	r3, [pc, #172]	; (80054c0 <HAL_GPIO_Init+0x238>)
 8005412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800541e:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <HAL_GPIO_Init+0x23c>)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	089b      	lsrs	r3, r3, #2
 8005424:	3302      	adds	r3, #2
 8005426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	220f      	movs	r2, #15
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <HAL_GPIO_Init+0x240>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d052      	beq.n	80054f0 <HAL_GPIO_Init+0x268>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_GPIO_Init+0x244>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d031      	beq.n	80054b6 <HAL_GPIO_Init+0x22e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_GPIO_Init+0x248>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d02b      	beq.n	80054b2 <HAL_GPIO_Init+0x22a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <HAL_GPIO_Init+0x24c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d025      	beq.n	80054ae <HAL_GPIO_Init+0x226>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1c      	ldr	r2, [pc, #112]	; (80054d8 <HAL_GPIO_Init+0x250>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01f      	beq.n	80054aa <HAL_GPIO_Init+0x222>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <HAL_GPIO_Init+0x254>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d019      	beq.n	80054a6 <HAL_GPIO_Init+0x21e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1a      	ldr	r2, [pc, #104]	; (80054e0 <HAL_GPIO_Init+0x258>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d013      	beq.n	80054a2 <HAL_GPIO_Init+0x21a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a19      	ldr	r2, [pc, #100]	; (80054e4 <HAL_GPIO_Init+0x25c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00d      	beq.n	800549e <HAL_GPIO_Init+0x216>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <HAL_GPIO_Init+0x260>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d007      	beq.n	800549a <HAL_GPIO_Init+0x212>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a17      	ldr	r2, [pc, #92]	; (80054ec <HAL_GPIO_Init+0x264>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d101      	bne.n	8005496 <HAL_GPIO_Init+0x20e>
 8005492:	2309      	movs	r3, #9
 8005494:	e02d      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 8005496:	230a      	movs	r3, #10
 8005498:	e02b      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 800549a:	2308      	movs	r3, #8
 800549c:	e029      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 800549e:	2307      	movs	r3, #7
 80054a0:	e027      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 80054a2:	2306      	movs	r3, #6
 80054a4:	e025      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 80054a6:	2305      	movs	r3, #5
 80054a8:	e023      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 80054aa:	2304      	movs	r3, #4
 80054ac:	e021      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 80054ae:	2303      	movs	r3, #3
 80054b0:	e01f      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e01d      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e01b      	b.n	80054f2 <HAL_GPIO_Init+0x26a>
 80054ba:	bf00      	nop
 80054bc:	58000080 	.word	0x58000080
 80054c0:	58024400 	.word	0x58024400
 80054c4:	58000400 	.word	0x58000400
 80054c8:	58020000 	.word	0x58020000
 80054cc:	58020400 	.word	0x58020400
 80054d0:	58020800 	.word	0x58020800
 80054d4:	58020c00 	.word	0x58020c00
 80054d8:	58021000 	.word	0x58021000
 80054dc:	58021400 	.word	0x58021400
 80054e0:	58021800 	.word	0x58021800
 80054e4:	58021c00 	.word	0x58021c00
 80054e8:	58022000 	.word	0x58022000
 80054ec:	58022400 	.word	0x58022400
 80054f0:	2300      	movs	r3, #0
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	f002 0203 	and.w	r2, r2, #3
 80054f8:	0092      	lsls	r2, r2, #2
 80054fa:	4093      	lsls	r3, r2
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005502:	4938      	ldr	r1, [pc, #224]	; (80055e4 <HAL_GPIO_Init+0x35c>)
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	089b      	lsrs	r3, r3, #2
 8005508:	3302      	adds	r3, #2
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800553e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	43db      	mvns	r3, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4013      	ands	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	43db      	mvns	r3, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4013      	ands	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	3301      	adds	r3, #1
 80055c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f47f ae63 	bne.w	800529c <HAL_GPIO_Init+0x14>
  }
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	3724      	adds	r7, #36	; 0x24
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	58000400 	.word	0x58000400

080055e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	460b      	mov	r3, r1
 80055f2:	807b      	strh	r3, [r7, #2]
 80055f4:	4613      	mov	r3, r2
 80055f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055f8:	787b      	ldrb	r3, [r7, #1]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055fe:	887a      	ldrh	r2, [r7, #2]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005604:	e003      	b.n	800560e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005606:	887b      	ldrh	r3, [r7, #2]
 8005608:	041a      	lsls	r2, r3, #16
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	619a      	str	r2, [r3, #24]
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005624:	4a08      	ldr	r2, [pc, #32]	; (8005648 <HAL_HSEM_FastTake+0x2c>)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3320      	adds	r3, #32
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	4a07      	ldr	r2, [pc, #28]	; (800564c <HAL_HSEM_FastTake+0x30>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d101      	bne.n	8005638 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	58026400 	.word	0x58026400
 800564c:	80000300 	.word	0x80000300

08005650 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800565a:	4906      	ldr	r1, [pc, #24]	; (8005674 <HAL_HSEM_Release+0x24>)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	58026400 	.word	0x58026400

08005678 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005680:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_PWREx_ConfigSupply+0xb0>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	2b06      	cmp	r3, #6
 800568a:	d00a      	beq.n	80056a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800568c:	4b26      	ldr	r3, [pc, #152]	; (8005728 <HAL_PWREx_ConfigSupply+0xb0>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	429a      	cmp	r2, r3
 8005698:	d001      	beq.n	800569e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e040      	b.n	8005720 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e03e      	b.n	8005720 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056a2:	4b21      	ldr	r3, [pc, #132]	; (8005728 <HAL_PWREx_ConfigSupply+0xb0>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80056aa:	491f      	ldr	r1, [pc, #124]	; (8005728 <HAL_PWREx_ConfigSupply+0xb0>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056b2:	f7fb ffbd 	bl	8001630 <HAL_GetTick>
 80056b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056b8:	e009      	b.n	80056ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056ba:	f7fb ffb9 	bl	8001630 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c8:	d901      	bls.n	80056ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e028      	b.n	8005720 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056ce:	4b16      	ldr	r3, [pc, #88]	; (8005728 <HAL_PWREx_ConfigSupply+0xb0>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056da:	d1ee      	bne.n	80056ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b1e      	cmp	r3, #30
 80056e0:	d008      	beq.n	80056f4 <HAL_PWREx_ConfigSupply+0x7c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b2e      	cmp	r3, #46	; 0x2e
 80056e6:	d005      	beq.n	80056f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b1d      	cmp	r3, #29
 80056ec:	d002      	beq.n	80056f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b2d      	cmp	r3, #45	; 0x2d
 80056f2:	d114      	bne.n	800571e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80056f4:	f7fb ff9c 	bl	8001630 <HAL_GetTick>
 80056f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056fa:	e009      	b.n	8005710 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056fc:	f7fb ff98 	bl	8001630 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800570a:	d901      	bls.n	8005710 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e007      	b.n	8005720 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_PWREx_ConfigSupply+0xb0>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d1ee      	bne.n	80056fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	58024800 	.word	0x58024800

0800572c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	; 0x30
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d102      	bne.n	8005740 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f000 bc48 	b.w	8005fd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8088 	beq.w	800585e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574e:	4b99      	ldr	r3, [pc, #612]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005758:	4b96      	ldr	r3, [pc, #600]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	2b10      	cmp	r3, #16
 8005762:	d007      	beq.n	8005774 <HAL_RCC_OscConfig+0x48>
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2b18      	cmp	r3, #24
 8005768:	d111      	bne.n	800578e <HAL_RCC_OscConfig+0x62>
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d10c      	bne.n	800578e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005774:	4b8f      	ldr	r3, [pc, #572]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d06d      	beq.n	800585c <HAL_RCC_OscConfig+0x130>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d169      	bne.n	800585c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	f000 bc21 	b.w	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005796:	d106      	bne.n	80057a6 <HAL_RCC_OscConfig+0x7a>
 8005798:	4b86      	ldr	r3, [pc, #536]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a85      	ldr	r2, [pc, #532]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800579e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	e02e      	b.n	8005804 <HAL_RCC_OscConfig+0xd8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10c      	bne.n	80057c8 <HAL_RCC_OscConfig+0x9c>
 80057ae:	4b81      	ldr	r3, [pc, #516]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a80      	ldr	r2, [pc, #512]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a7d      	ldr	r2, [pc, #500]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e01d      	b.n	8005804 <HAL_RCC_OscConfig+0xd8>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0xc0>
 80057d2:	4b78      	ldr	r3, [pc, #480]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a77      	ldr	r2, [pc, #476]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	4b75      	ldr	r3, [pc, #468]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a74      	ldr	r2, [pc, #464]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e00b      	b.n	8005804 <HAL_RCC_OscConfig+0xd8>
 80057ec:	4b71      	ldr	r3, [pc, #452]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a70      	ldr	r2, [pc, #448]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4b6e      	ldr	r3, [pc, #440]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a6d      	ldr	r2, [pc, #436]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80057fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d013      	beq.n	8005834 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fb ff10 	bl	8001630 <HAL_GetTick>
 8005810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005814:	f7fb ff0c 	bl	8001630 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b64      	cmp	r3, #100	; 0x64
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e3d4      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005826:	4b63      	ldr	r3, [pc, #396]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0xe8>
 8005832:	e014      	b.n	800585e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fb fefc 	bl	8001630 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800583c:	f7fb fef8 	bl	8001630 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	; 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e3c0      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800584e:	4b59      	ldr	r3, [pc, #356]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0x110>
 800585a:	e000      	b.n	800585e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 80ca 	beq.w	8005a00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800586c:	4b51      	ldr	r3, [pc, #324]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005874:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005876:	4b4f      	ldr	r3, [pc, #316]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <HAL_RCC_OscConfig+0x166>
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	2b18      	cmp	r3, #24
 8005886:	d156      	bne.n	8005936 <HAL_RCC_OscConfig+0x20a>
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d151      	bne.n	8005936 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005892:	4b48      	ldr	r3, [pc, #288]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_RCC_OscConfig+0x17e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e392      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058aa:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f023 0219 	bic.w	r2, r3, #25
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	493f      	ldr	r1, [pc, #252]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058bc:	f7fb feb8 	bl	8001630 <HAL_GetTick>
 80058c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058c4:	f7fb feb4 	bl	8001630 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e37c      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058d6:	4b37      	ldr	r3, [pc, #220]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0f0      	beq.n	80058c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e2:	f7fb fed5 	bl	8001690 <HAL_GetREVID>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d817      	bhi.n	8005920 <HAL_RCC_OscConfig+0x1f4>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	d108      	bne.n	800590a <HAL_RCC_OscConfig+0x1de>
 80058f8:	4b2e      	ldr	r3, [pc, #184]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005900:	4a2c      	ldr	r2, [pc, #176]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005906:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005908:	e07a      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590a:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	031b      	lsls	r3, r3, #12
 8005918:	4926      	ldr	r1, [pc, #152]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800591a:	4313      	orrs	r3, r2
 800591c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800591e:	e06f      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005920:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	4921      	ldr	r1, [pc, #132]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005930:	4313      	orrs	r3, r2
 8005932:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005934:	e064      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d047      	beq.n	80059ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800593e:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 0219 	bic.w	r2, r3, #25
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	491a      	ldr	r1, [pc, #104]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005950:	f7fb fe6e 	bl	8001630 <HAL_GetTick>
 8005954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005958:	f7fb fe6a 	bl	8001630 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e332      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800596a:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005976:	f7fb fe8b 	bl	8001690 <HAL_GetREVID>
 800597a:	4603      	mov	r3, r0
 800597c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005980:	4293      	cmp	r3, r2
 8005982:	d819      	bhi.n	80059b8 <HAL_RCC_OscConfig+0x28c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d108      	bne.n	800599e <HAL_RCC_OscConfig+0x272>
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005994:	4a07      	ldr	r2, [pc, #28]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	6053      	str	r3, [r2, #4]
 800599c:	e030      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	031b      	lsls	r3, r3, #12
 80059ac:	4901      	ldr	r1, [pc, #4]	; (80059b4 <HAL_RCC_OscConfig+0x288>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	604b      	str	r3, [r1, #4]
 80059b2:	e025      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
 80059b4:	58024400 	.word	0x58024400
 80059b8:	4b9a      	ldr	r3, [pc, #616]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	4997      	ldr	r1, [pc, #604]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	604b      	str	r3, [r1, #4]
 80059cc:	e018      	b.n	8005a00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ce:	4b95      	ldr	r3, [pc, #596]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a94      	ldr	r2, [pc, #592]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059d4:	f023 0301 	bic.w	r3, r3, #1
 80059d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fb fe29 	bl	8001630 <HAL_GetTick>
 80059de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059e2:	f7fb fe25 	bl	8001630 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e2ed      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059f4:	4b8b      	ldr	r3, [pc, #556]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f0      	bne.n	80059e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80a9 	beq.w	8005b60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0e:	4b85      	ldr	r3, [pc, #532]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a18:	4b82      	ldr	r3, [pc, #520]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d007      	beq.n	8005a34 <HAL_RCC_OscConfig+0x308>
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b18      	cmp	r3, #24
 8005a28:	d13a      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x374>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d135      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a34:	4b7b      	ldr	r3, [pc, #492]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_RCC_OscConfig+0x320>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e2c1      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a4c:	f7fb fe20 	bl	8001690 <HAL_GetREVID>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d817      	bhi.n	8005a8a <HAL_RCC_OscConfig+0x35e>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d108      	bne.n	8005a74 <HAL_RCC_OscConfig+0x348>
 8005a62:	4b70      	ldr	r3, [pc, #448]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a6a:	4a6e      	ldr	r2, [pc, #440]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a72:	e075      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a74:	4b6b      	ldr	r3, [pc, #428]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	069b      	lsls	r3, r3, #26
 8005a82:	4968      	ldr	r1, [pc, #416]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a88:	e06a      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a8a:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	061b      	lsls	r3, r3, #24
 8005a98:	4962      	ldr	r1, [pc, #392]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a9e:	e05f      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d042      	beq.n	8005b2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005aa8:	4b5e      	ldr	r3, [pc, #376]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a5d      	ldr	r2, [pc, #372]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fb fdbc 	bl	8001630 <HAL_GetTick>
 8005ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005abc:	f7fb fdb8 	bl	8001630 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e280      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ace:	4b55      	ldr	r3, [pc, #340]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ada:	f7fb fdd9 	bl	8001690 <HAL_GetREVID>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d817      	bhi.n	8005b18 <HAL_RCC_OscConfig+0x3ec>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	d108      	bne.n	8005b02 <HAL_RCC_OscConfig+0x3d6>
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005af8:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005afa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afe:	6053      	str	r3, [r2, #4]
 8005b00:	e02e      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
 8005b02:	4b48      	ldr	r3, [pc, #288]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	069b      	lsls	r3, r3, #26
 8005b10:	4944      	ldr	r1, [pc, #272]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	604b      	str	r3, [r1, #4]
 8005b16:	e023      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
 8005b18:	4b42      	ldr	r3, [pc, #264]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	061b      	lsls	r3, r3, #24
 8005b26:	493f      	ldr	r1, [pc, #252]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60cb      	str	r3, [r1, #12]
 8005b2c:	e018      	b.n	8005b60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a3c      	ldr	r2, [pc, #240]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fb fd79 	bl	8001630 <HAL_GetTick>
 8005b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b42:	f7fb fd75 	bl	8001630 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e23d      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b54:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f0      	bne.n	8005b42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d036      	beq.n	8005bda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d019      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b74:	4b2b      	ldr	r3, [pc, #172]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b78:	4a2a      	ldr	r2, [pc, #168]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b80:	f7fb fd56 	bl	8001630 <HAL_GetTick>
 8005b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b88:	f7fb fd52 	bl	8001630 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e21a      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b9a:	4b22      	ldr	r3, [pc, #136]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCC_OscConfig+0x45c>
 8005ba6:	e018      	b.n	8005bda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba8:	4b1e      	ldr	r3, [pc, #120]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bac:	4a1d      	ldr	r2, [pc, #116]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb4:	f7fb fd3c 	bl	8001630 <HAL_GetTick>
 8005bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bbc:	f7fb fd38 	bl	8001630 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e200      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bce:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d039      	beq.n	8005c5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01c      	beq.n	8005c28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bee:	4b0d      	ldr	r3, [pc, #52]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bfa:	f7fb fd19 	bl	8001630 <HAL_GetTick>
 8005bfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c02:	f7fb fd15 	bl	8001630 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e1dd      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <HAL_RCC_OscConfig+0x4f8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x4d6>
 8005c20:	e01b      	b.n	8005c5a <HAL_RCC_OscConfig+0x52e>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c28:	4b9b      	ldr	r3, [pc, #620]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a9a      	ldr	r2, [pc, #616]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c34:	f7fb fcfc 	bl	8001630 <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c3c:	f7fb fcf8 	bl	8001630 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e1c0      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c4e:	4b92      	ldr	r3, [pc, #584]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 8081 	beq.w	8005d6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c68:	4b8c      	ldr	r3, [pc, #560]	; (8005e9c <HAL_RCC_OscConfig+0x770>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a8b      	ldr	r2, [pc, #556]	; (8005e9c <HAL_RCC_OscConfig+0x770>)
 8005c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c74:	f7fb fcdc 	bl	8001630 <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7c:	f7fb fcd8 	bl	8001630 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e1a0      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c8e:	4b83      	ldr	r3, [pc, #524]	; (8005e9c <HAL_RCC_OscConfig+0x770>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d106      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x584>
 8005ca2:	4b7d      	ldr	r3, [pc, #500]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	4a7c      	ldr	r2, [pc, #496]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ca8:	f043 0301 	orr.w	r3, r3, #1
 8005cac:	6713      	str	r3, [r2, #112]	; 0x70
 8005cae:	e02d      	b.n	8005d0c <HAL_RCC_OscConfig+0x5e0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10c      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x5a6>
 8005cb8:	4b77      	ldr	r3, [pc, #476]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbc:	4a76      	ldr	r2, [pc, #472]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc4:	4b74      	ldr	r3, [pc, #464]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc8:	4a73      	ldr	r2, [pc, #460]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cca:	f023 0304 	bic.w	r3, r3, #4
 8005cce:	6713      	str	r3, [r2, #112]	; 0x70
 8005cd0:	e01c      	b.n	8005d0c <HAL_RCC_OscConfig+0x5e0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c8>
 8005cda:	4b6f      	ldr	r3, [pc, #444]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cde:	4a6e      	ldr	r2, [pc, #440]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	f043 0304 	orr.w	r3, r3, #4
 8005ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	4a6b      	ldr	r2, [pc, #428]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf2:	e00b      	b.n	8005d0c <HAL_RCC_OscConfig+0x5e0>
 8005cf4:	4b68      	ldr	r3, [pc, #416]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf8:	4a67      	ldr	r2, [pc, #412]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005d00:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	4a64      	ldr	r2, [pc, #400]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d06:	f023 0304 	bic.w	r3, r3, #4
 8005d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d015      	beq.n	8005d40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d14:	f7fb fc8c 	bl	8001630 <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d1c:	f7fb fc88 	bl	8001630 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e14e      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d32:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d0ee      	beq.n	8005d1c <HAL_RCC_OscConfig+0x5f0>
 8005d3e:	e014      	b.n	8005d6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d40:	f7fb fc76 	bl	8001630 <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d48:	f7fb fc72 	bl	8001630 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e138      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d5e:	4b4e      	ldr	r3, [pc, #312]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ee      	bne.n	8005d48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 812d 	beq.w	8005fce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d74:	4b48      	ldr	r3, [pc, #288]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d7c:	2b18      	cmp	r3, #24
 8005d7e:	f000 80bd 	beq.w	8005efc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	f040 809e 	bne.w	8005ec8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8c:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a41      	ldr	r2, [pc, #260]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d98:	f7fb fc4a 	bl	8001630 <HAL_GetTick>
 8005d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fb fc46 	bl	8001630 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e10e      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005db2:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dbe:	4b36      	ldr	r3, [pc, #216]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc2:	4b37      	ldr	r3, [pc, #220]	; (8005ea0 <HAL_RCC_OscConfig+0x774>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dce:	0112      	lsls	r2, r2, #4
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	4931      	ldr	r1, [pc, #196]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	628b      	str	r3, [r1, #40]	; 0x28
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	3b01      	subs	r3, #1
 8005de8:	025b      	lsls	r3, r3, #9
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	3b01      	subs	r3, #1
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e00:	3b01      	subs	r3, #1
 8005e02:	061b      	lsls	r3, r3, #24
 8005e04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e08:	4923      	ldr	r1, [pc, #140]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e0e:	4b22      	ldr	r3, [pc, #136]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e1a:	4b1f      	ldr	r3, [pc, #124]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1e:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <HAL_RCC_OscConfig+0x778>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e26:	00d2      	lsls	r2, r2, #3
 8005e28:	491b      	ldr	r1, [pc, #108]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	f023 020c 	bic.w	r2, r3, #12
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4917      	ldr	r1, [pc, #92]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f023 0202 	bic.w	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	4912      	ldr	r1, [pc, #72]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e52:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	4a10      	ldr	r2, [pc, #64]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005e76:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	4a07      	ldr	r2, [pc, #28]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e82:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_RCC_OscConfig+0x76c>)
 8005e88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fb fbcf 	bl	8001630 <HAL_GetTick>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e94:	e011      	b.n	8005eba <HAL_RCC_OscConfig+0x78e>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	58024800 	.word	0x58024800
 8005ea0:	fffffc0c 	.word	0xfffffc0c
 8005ea4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea8:	f7fb fbc2 	bl	8001630 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e08a      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0f0      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x77c>
 8005ec6:	e082      	b.n	8005fce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec8:	4b43      	ldr	r3, [pc, #268]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a42      	ldr	r2, [pc, #264]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed4:	f7fb fbac 	bl	8001630 <HAL_GetTick>
 8005ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fb fba8 	bl	8001630 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e070      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eee:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x7b0>
 8005efa:	e068      	b.n	8005fce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005efc:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f02:	4b35      	ldr	r3, [pc, #212]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d031      	beq.n	8005f74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f003 0203 	and.w	r2, r3, #3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d12a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	091b      	lsrs	r3, r3, #4
 8005f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d122      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d11a      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	0a5b      	lsrs	r3, r3, #9
 8005f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d111      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0c1b      	lsrs	r3, r3, #16
 8005f54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d108      	bne.n	8005f74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	0e1b      	lsrs	r3, r3, #24
 8005f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e02b      	b.n	8005fd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005f78:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	08db      	lsrs	r3, r3, #3
 8005f7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d01f      	beq.n	8005fce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f8e:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	4a11      	ldr	r2, [pc, #68]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f9a:	f7fb fb49 	bl	8001630 <HAL_GetTick>
 8005f9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fa0:	bf00      	nop
 8005fa2:	f7fb fb45 	bl	8001630 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d0f9      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <HAL_RCC_OscConfig+0x8b0>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fba:	00d2      	lsls	r2, r2, #3
 8005fbc:	4906      	ldr	r1, [pc, #24]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005fc2:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	4a04      	ldr	r2, [pc, #16]	; (8005fd8 <HAL_RCC_OscConfig+0x8ac>)
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3730      	adds	r7, #48	; 0x30
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	ffff0007 	.word	0xffff0007

08005fe0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e19c      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff4:	4b8a      	ldr	r3, [pc, #552]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d910      	bls.n	8006024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006002:	4b87      	ldr	r3, [pc, #540]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f023 020f 	bic.w	r2, r3, #15
 800600a:	4985      	ldr	r1, [pc, #532]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	4313      	orrs	r3, r2
 8006010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006012:	4b83      	ldr	r3, [pc, #524]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e184      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d010      	beq.n	8006052 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	4b7b      	ldr	r3, [pc, #492]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800603c:	429a      	cmp	r2, r3
 800603e:	d908      	bls.n	8006052 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006040:	4b78      	ldr	r3, [pc, #480]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	4975      	ldr	r1, [pc, #468]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 800604e:	4313      	orrs	r3, r2
 8006050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d010      	beq.n	8006080 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	4b70      	ldr	r3, [pc, #448]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800606a:	429a      	cmp	r2, r3
 800606c:	d908      	bls.n	8006080 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800606e:	4b6d      	ldr	r3, [pc, #436]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	496a      	ldr	r1, [pc, #424]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 800607c:	4313      	orrs	r3, r2
 800607e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b00      	cmp	r3, #0
 800608a:	d010      	beq.n	80060ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	4b64      	ldr	r3, [pc, #400]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006098:	429a      	cmp	r2, r3
 800609a:	d908      	bls.n	80060ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800609c:	4b61      	ldr	r3, [pc, #388]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	495e      	ldr	r1, [pc, #376]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d010      	beq.n	80060dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d908      	bls.n	80060dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060ca:	4b56      	ldr	r3, [pc, #344]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	4953      	ldr	r1, [pc, #332]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d010      	beq.n	800610a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d908      	bls.n	800610a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f8:	4b4a      	ldr	r3, [pc, #296]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f023 020f 	bic.w	r2, r3, #15
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4947      	ldr	r1, [pc, #284]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006106:	4313      	orrs	r3, r2
 8006108:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d055      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006116:	4b43      	ldr	r3, [pc, #268]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	4940      	ldr	r1, [pc, #256]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006124:	4313      	orrs	r3, r2
 8006126:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d107      	bne.n	8006140 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006130:	4b3c      	ldr	r3, [pc, #240]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d121      	bne.n	8006180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0f6      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	2b03      	cmp	r3, #3
 8006146:	d107      	bne.n	8006158 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006148:	4b36      	ldr	r3, [pc, #216]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d115      	bne.n	8006180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0ea      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d107      	bne.n	8006170 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006160:	4b30      	ldr	r3, [pc, #192]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d109      	bne.n	8006180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0de      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006170:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e0d6      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006180:	4b28      	ldr	r3, [pc, #160]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f023 0207 	bic.w	r2, r3, #7
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4925      	ldr	r1, [pc, #148]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 800618e:	4313      	orrs	r3, r2
 8006190:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006192:	f7fb fa4d 	bl	8001630 <HAL_GetTick>
 8006196:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006198:	e00a      	b.n	80061b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800619a:	f7fb fa49 	bl	8001630 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0be      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b0:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	429a      	cmp	r2, r3
 80061c0:	d1eb      	bne.n	800619a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d010      	beq.n	80061f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	429a      	cmp	r2, r3
 80061dc:	d208      	bcs.n	80061f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f023 020f 	bic.w	r2, r3, #15
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	490e      	ldr	r1, [pc, #56]	; (8006224 <HAL_RCC_ClockConfig+0x244>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d214      	bcs.n	8006228 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061fe:	4b08      	ldr	r3, [pc, #32]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f023 020f 	bic.w	r2, r3, #15
 8006206:	4906      	ldr	r1, [pc, #24]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	4313      	orrs	r3, r2
 800620c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <HAL_RCC_ClockConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d005      	beq.n	8006228 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e086      	b.n	800632e <HAL_RCC_ClockConfig+0x34e>
 8006220:	52002000 	.word	0x52002000
 8006224:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006240:	429a      	cmp	r2, r3
 8006242:	d208      	bcs.n	8006256 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006244:	4b3c      	ldr	r3, [pc, #240]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	4939      	ldr	r1, [pc, #228]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 8006252:	4313      	orrs	r3, r2
 8006254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d010      	beq.n	8006284 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695a      	ldr	r2, [r3, #20]
 8006266:	4b34      	ldr	r3, [pc, #208]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800626e:	429a      	cmp	r2, r3
 8006270:	d208      	bcs.n	8006284 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006272:	4b31      	ldr	r3, [pc, #196]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	492e      	ldr	r1, [pc, #184]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 8006280:	4313      	orrs	r3, r2
 8006282:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	d010      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699a      	ldr	r2, [r3, #24]
 8006294:	4b28      	ldr	r3, [pc, #160]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800629c:	429a      	cmp	r2, r3
 800629e:	d208      	bcs.n	80062b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	4922      	ldr	r1, [pc, #136]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d010      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69da      	ldr	r2, [r3, #28]
 80062c2:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d208      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	4917      	ldr	r1, [pc, #92]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062e0:	f000 f834 	bl	800634c <HAL_RCC_GetSysClockFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b14      	ldr	r3, [pc, #80]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	4912      	ldr	r1, [pc, #72]	; (800633c <HAL_RCC_ClockConfig+0x35c>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	f003 031f 	and.w	r3, r3, #31
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062fe:	4b0e      	ldr	r3, [pc, #56]	; (8006338 <HAL_RCC_ClockConfig+0x358>)
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	4a0d      	ldr	r2, [pc, #52]	; (800633c <HAL_RCC_ClockConfig+0x35c>)
 8006308:	5cd3      	ldrb	r3, [r2, r3]
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
 8006314:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <HAL_RCC_ClockConfig+0x360>)
 8006316:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006318:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <HAL_RCC_ClockConfig+0x364>)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x368>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fb f93a 	bl	800159c <HAL_InitTick>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800632c:	7bfb      	ldrb	r3, [r7, #15]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400
 800633c:	0800b430 	.word	0x0800b430
 8006340:	24000004 	.word	0x24000004
 8006344:	24000000 	.word	0x24000000
 8006348:	24000008 	.word	0x24000008

0800634c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800634c:	b480      	push	{r7}
 800634e:	b089      	sub	sp, #36	; 0x24
 8006350:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006352:	4bb3      	ldr	r3, [pc, #716]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800635a:	2b18      	cmp	r3, #24
 800635c:	f200 8155 	bhi.w	800660a <HAL_RCC_GetSysClockFreq+0x2be>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	080063cd 	.word	0x080063cd
 800636c:	0800660b 	.word	0x0800660b
 8006370:	0800660b 	.word	0x0800660b
 8006374:	0800660b 	.word	0x0800660b
 8006378:	0800660b 	.word	0x0800660b
 800637c:	0800660b 	.word	0x0800660b
 8006380:	0800660b 	.word	0x0800660b
 8006384:	0800660b 	.word	0x0800660b
 8006388:	080063f3 	.word	0x080063f3
 800638c:	0800660b 	.word	0x0800660b
 8006390:	0800660b 	.word	0x0800660b
 8006394:	0800660b 	.word	0x0800660b
 8006398:	0800660b 	.word	0x0800660b
 800639c:	0800660b 	.word	0x0800660b
 80063a0:	0800660b 	.word	0x0800660b
 80063a4:	0800660b 	.word	0x0800660b
 80063a8:	080063f9 	.word	0x080063f9
 80063ac:	0800660b 	.word	0x0800660b
 80063b0:	0800660b 	.word	0x0800660b
 80063b4:	0800660b 	.word	0x0800660b
 80063b8:	0800660b 	.word	0x0800660b
 80063bc:	0800660b 	.word	0x0800660b
 80063c0:	0800660b 	.word	0x0800660b
 80063c4:	0800660b 	.word	0x0800660b
 80063c8:	080063ff 	.word	0x080063ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063cc:	4b94      	ldr	r3, [pc, #592]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d009      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063d8:	4b91      	ldr	r3, [pc, #580]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	08db      	lsrs	r3, r3, #3
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	4a90      	ldr	r2, [pc, #576]	; (8006624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80063ea:	e111      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063ec:	4b8d      	ldr	r3, [pc, #564]	; (8006624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063ee:	61bb      	str	r3, [r7, #24]
      break;
 80063f0:	e10e      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80063f2:	4b8d      	ldr	r3, [pc, #564]	; (8006628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063f4:	61bb      	str	r3, [r7, #24]
      break;
 80063f6:	e10b      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80063f8:	4b8c      	ldr	r3, [pc, #560]	; (800662c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063fa:	61bb      	str	r3, [r7, #24]
      break;
 80063fc:	e108      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063fe:	4b88      	ldr	r3, [pc, #544]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006408:	4b85      	ldr	r3, [pc, #532]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	091b      	lsrs	r3, r3, #4
 800640e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006412:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006414:	4b82      	ldr	r3, [pc, #520]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800641e:	4b80      	ldr	r3, [pc, #512]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	08db      	lsrs	r3, r3, #3
 8006424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80e1 	beq.w	8006604 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b02      	cmp	r3, #2
 8006446:	f000 8083 	beq.w	8006550 <HAL_RCC_GetSysClockFreq+0x204>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b02      	cmp	r3, #2
 800644e:	f200 80a1 	bhi.w	8006594 <HAL_RCC_GetSysClockFreq+0x248>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <HAL_RCC_GetSysClockFreq+0x114>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d056      	beq.n	800650c <HAL_RCC_GetSysClockFreq+0x1c0>
 800645e:	e099      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006460:	4b6f      	ldr	r3, [pc, #444]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	d02d      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800646c:	4b6c      	ldr	r3, [pc, #432]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	08db      	lsrs	r3, r3, #3
 8006472:	f003 0303 	and.w	r3, r3, #3
 8006476:	4a6b      	ldr	r2, [pc, #428]	; (8006624 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006496:	4b62      	ldr	r3, [pc, #392]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064c6:	e087      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006634 <HAL_RCC_GetSysClockFreq+0x2e8>
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064da:	4b51      	ldr	r3, [pc, #324]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800650a:	e065      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006638 <HAL_RCC_GetSysClockFreq+0x2ec>
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	4b40      	ldr	r3, [pc, #256]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006532:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006630 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800654e:	e043      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800655a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800663c <HAL_RCC_GetSysClockFreq+0x2f0>
 800655e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006562:	4b2f      	ldr	r3, [pc, #188]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006572:	ed97 6a02 	vldr	s12, [r7, #8]
 8006576:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006630 <HAL_RCC_GetSysClockFreq+0x2e4>
 800657a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800657e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800658a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006592:	e021      	b.n	80065d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006638 <HAL_RCC_GetSysClockFreq+0x2ec>
 80065a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065a6:	4b1e      	ldr	r3, [pc, #120]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006630 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80065d8:	4b11      	ldr	r3, [pc, #68]	; (8006620 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	0a5b      	lsrs	r3, r3, #9
 80065de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e2:	3301      	adds	r3, #1
 80065e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065fc:	ee17 3a90 	vmov	r3, s15
 8006600:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006602:	e005      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	61bb      	str	r3, [r7, #24]
      break;
 8006608:	e002      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800660c:	61bb      	str	r3, [r7, #24]
      break;
 800660e:	bf00      	nop
  }

  return sysclockfreq;
 8006610:	69bb      	ldr	r3, [r7, #24]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3724      	adds	r7, #36	; 0x24
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	003d0900 	.word	0x003d0900
 800662c:	007a1200 	.word	0x007a1200
 8006630:	46000000 	.word	0x46000000
 8006634:	4c742400 	.word	0x4c742400
 8006638:	4a742400 	.word	0x4a742400
 800663c:	4af42400 	.word	0x4af42400

08006640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006646:	f7ff fe81 	bl	800634c <HAL_RCC_GetSysClockFreq>
 800664a:	4602      	mov	r2, r0
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <HAL_RCC_GetHCLKFreq+0x50>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	490f      	ldr	r1, [pc, #60]	; (8006694 <HAL_RCC_GetHCLKFreq+0x54>)
 8006658:	5ccb      	ldrb	r3, [r1, r3]
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	fa22 f303 	lsr.w	r3, r2, r3
 8006662:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <HAL_RCC_GetHCLKFreq+0x50>)
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	4a09      	ldr	r2, [pc, #36]	; (8006694 <HAL_RCC_GetHCLKFreq+0x54>)
 800666e:	5cd3      	ldrb	r3, [r2, r3]
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	fa22 f303 	lsr.w	r3, r2, r3
 800667a:	4a07      	ldr	r2, [pc, #28]	; (8006698 <HAL_RCC_GetHCLKFreq+0x58>)
 800667c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800667e:	4a07      	ldr	r2, [pc, #28]	; (800669c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006684:	4b04      	ldr	r3, [pc, #16]	; (8006698 <HAL_RCC_GetHCLKFreq+0x58>)
 8006686:	681b      	ldr	r3, [r3, #0]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	58024400 	.word	0x58024400
 8006694:	0800b430 	.word	0x0800b430
 8006698:	24000004 	.word	0x24000004
 800669c:	24000000 	.word	0x24000000

080066a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066a4:	f7ff ffcc 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 80066a8:	4602      	mov	r2, r0
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	091b      	lsrs	r3, r3, #4
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4904      	ldr	r1, [pc, #16]	; (80066c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80066b6:	5ccb      	ldrb	r3, [r1, r3]
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	58024400 	.word	0x58024400
 80066c8:	0800b430 	.word	0x0800b430

080066cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066d0:	f7ff ffb6 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 80066d4:	4602      	mov	r2, r0
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	4904      	ldr	r1, [pc, #16]	; (80066f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066e2:	5ccb      	ldrb	r3, [r1, r3]
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	58024400 	.word	0x58024400
 80066f4:	0800b430 	.word	0x0800b430

080066f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066fc:	b0ca      	sub	sp, #296	; 0x128
 80066fe:	af00      	add	r7, sp, #0
 8006700:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006704:	2300      	movs	r3, #0
 8006706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800670a:	2300      	movs	r3, #0
 800670c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800671c:	2500      	movs	r5, #0
 800671e:	ea54 0305 	orrs.w	r3, r4, r5
 8006722:	d049      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800672a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800672e:	d02f      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006730:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006734:	d828      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800673a:	d01a      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800673c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006740:	d822      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800674a:	d007      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800674c:	e01c      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674e:	4bb8      	ldr	r3, [pc, #736]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	4ab7      	ldr	r2, [pc, #732]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800675a:	e01a      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006760:	3308      	adds	r3, #8
 8006762:	2102      	movs	r1, #2
 8006764:	4618      	mov	r0, r3
 8006766:	f002 fb61 	bl	8008e2c <RCCEx_PLL2_Config>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006770:	e00f      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006776:	3328      	adds	r3, #40	; 0x28
 8006778:	2102      	movs	r1, #2
 800677a:	4618      	mov	r0, r3
 800677c:	f002 fc08 	bl	8008f90 <RCCEx_PLL3_Config>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006786:	e004      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800678e:	e000      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10a      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800679a:	4ba5      	ldr	r3, [pc, #660]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800679c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a8:	4aa1      	ldr	r2, [pc, #644]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067aa:	430b      	orrs	r3, r1
 80067ac:	6513      	str	r3, [r2, #80]	; 0x50
 80067ae:	e003      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80067c4:	f04f 0900 	mov.w	r9, #0
 80067c8:	ea58 0309 	orrs.w	r3, r8, r9
 80067cc:	d047      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d82a      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80067d8:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80067da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067de:	bf00      	nop
 80067e0:	080067f5 	.word	0x080067f5
 80067e4:	08006803 	.word	0x08006803
 80067e8:	08006819 	.word	0x08006819
 80067ec:	08006837 	.word	0x08006837
 80067f0:	08006837 	.word	0x08006837
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f4:	4b8e      	ldr	r3, [pc, #568]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4a8d      	ldr	r2, [pc, #564]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006800:	e01a      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006806:	3308      	adds	r3, #8
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f002 fb0e 	bl	8008e2c <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006816:	e00f      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800681c:	3328      	adds	r3, #40	; 0x28
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f002 fbb5 	bl	8008f90 <RCCEx_PLL3_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800682c:	e004      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006834:	e000      	b.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006840:	4b7b      	ldr	r3, [pc, #492]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006844:	f023 0107 	bic.w	r1, r3, #7
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800684c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684e:	4a78      	ldr	r2, [pc, #480]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006850:	430b      	orrs	r3, r1
 8006852:	6513      	str	r3, [r2, #80]	; 0x50
 8006854:	e003      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800685a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800685e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800686a:	f04f 0b00 	mov.w	fp, #0
 800686e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006872:	d04c      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687e:	d030      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006884:	d829      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006886:	2bc0      	cmp	r3, #192	; 0xc0
 8006888:	d02d      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800688a:	2bc0      	cmp	r3, #192	; 0xc0
 800688c:	d825      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d018      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d821      	bhi.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d007      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800689e:	e01c      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a0:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a62      	ldr	r2, [pc, #392]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068ac:	e01c      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b2:	3308      	adds	r3, #8
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f002 fab8 	bl	8008e2c <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068c2:	e011      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c8:	3328      	adds	r3, #40	; 0x28
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f002 fb5f 	bl	8008f90 <RCCEx_PLL3_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068d8:	e006      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068e0:	e002      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80068f0:	4b4f      	ldr	r3, [pc, #316]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fe:	4a4c      	ldr	r2, [pc, #304]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006900:	430b      	orrs	r3, r1
 8006902:	6513      	str	r3, [r2, #80]	; 0x50
 8006904:	e003      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800690a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800691a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800691e:	2300      	movs	r3, #0
 8006920:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006924:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d053      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006936:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800693a:	d035      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800693c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006940:	d82e      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006942:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006946:	d031      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006948:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800694c:	d828      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800694e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006952:	d01a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006958:	d822      	bhi.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800695e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006962:	d007      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006964:	e01c      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006966:	4b32      	ldr	r3, [pc, #200]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	4a31      	ldr	r2, [pc, #196]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800696c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006970:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006972:	e01c      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006978:	3308      	adds	r3, #8
 800697a:	2100      	movs	r1, #0
 800697c:	4618      	mov	r0, r3
 800697e:	f002 fa55 	bl	8008e2c <RCCEx_PLL2_Config>
 8006982:	4603      	mov	r3, r0
 8006984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006988:	e011      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698e:	3328      	adds	r3, #40	; 0x28
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f002 fafc 	bl	8008f90 <RCCEx_PLL3_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800699e:	e006      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069a6:	e002      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069a8:	bf00      	nop
 80069aa:	e000      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10b      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069b6:	4b1e      	ldr	r3, [pc, #120]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ba:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069c6:	4a1a      	ldr	r2, [pc, #104]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c8:	430b      	orrs	r3, r1
 80069ca:	6593      	str	r3, [r2, #88]	; 0x58
 80069cc:	e003      	b.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80069e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80069ec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80069f0:	460b      	mov	r3, r1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	d056      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a02:	d038      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a08:	d831      	bhi.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a0e:	d034      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a14:	d82b      	bhi.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a1a:	d01d      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a20:	d825      	bhi.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d006      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a2c:	e01f      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a2e:	bf00      	nop
 8006a30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a34:	4ba2      	ldr	r3, [pc, #648]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	4aa1      	ldr	r2, [pc, #644]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a40:	e01c      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a46:	3308      	adds	r3, #8
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f002 f9ee 	bl	8008e2c <RCCEx_PLL2_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a56:	e011      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5c:	3328      	adds	r3, #40	; 0x28
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f002 fa95 	bl	8008f90 <RCCEx_PLL3_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a6c:	e006      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a74:	e002      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10b      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a84:	4b8e      	ldr	r3, [pc, #568]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a88:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a94:	4a8a      	ldr	r2, [pc, #552]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a96:	430b      	orrs	r3, r1
 8006a98:	6593      	str	r3, [r2, #88]	; 0x58
 8006a9a:	e003      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006aba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	d03a      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aca:	2b30      	cmp	r3, #48	; 0x30
 8006acc:	d01f      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006ace:	2b30      	cmp	r3, #48	; 0x30
 8006ad0:	d819      	bhi.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d00c      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d815      	bhi.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d019      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ade:	2b10      	cmp	r3, #16
 8006ae0:	d111      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae2:	4b77      	ldr	r3, [pc, #476]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	4a76      	ldr	r2, [pc, #472]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006aee:	e011      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af4:	3308      	adds	r3, #8
 8006af6:	2102      	movs	r1, #2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f002 f997 	bl	8008e2c <RCCEx_PLL2_Config>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b0c:	e002      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b1c:	4b68      	ldr	r3, [pc, #416]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b20:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	4a65      	ldr	r2, [pc, #404]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b30:	e003      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006b46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4313      	orrs	r3, r2
 8006b58:	d051      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b64:	d035      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b6a:	d82e      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b70:	d031      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b76:	d828      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7c:	d01a      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	d822      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8c:	d007      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006b8e:	e01c      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	4a4a      	ldr	r2, [pc, #296]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b9c:	e01c      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 f940 	bl	8008e2c <RCCEx_PLL2_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bb2:	e011      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb8:	3328      	adds	r3, #40	; 0x28
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 f9e7 	bl	8008f90 <RCCEx_PLL3_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bc8:	e006      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bd0:	e002      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006bd2:	bf00      	nop
 8006bd4:	e000      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006be0:	4b37      	ldr	r3, [pc, #220]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bee:	4a34      	ldr	r2, [pc, #208]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6513      	str	r3, [r2, #80]	; 0x50
 8006bf4:	e003      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	d056      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c28:	d033      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c2e:	d82c      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c34:	d02f      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c3a:	d826      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c40:	d02b      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c46:	d820      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4c:	d012      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c52:	d81a      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d022      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c5c:	d115      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c62:	3308      	adds	r3, #8
 8006c64:	2101      	movs	r1, #1
 8006c66:	4618      	mov	r0, r3
 8006c68:	f002 f8e0 	bl	8008e2c <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c72:	e015      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c78:	3328      	adds	r3, #40	; 0x28
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f002 f987 	bl	8008f90 <RCCEx_PLL3_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c88:	e00a      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c90:	e006      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c92:	bf00      	nop
 8006c94:	e004      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb6:	4a02      	ldr	r2, [pc, #8]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	6513      	str	r3, [r2, #80]	; 0x50
 8006cbc:	e006      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006cbe:	bf00      	nop
 8006cc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cdc:	2300      	movs	r3, #0
 8006cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ce2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	d055      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cf8:	d033      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cfe:	d82c      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d04:	d02f      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d826      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d10:	d02b      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d16:	d820      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1c:	d012      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d22:	d81a      	bhi.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d022      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d2c:	d115      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d32:	3308      	adds	r3, #8
 8006d34:	2101      	movs	r1, #1
 8006d36:	4618      	mov	r0, r3
 8006d38:	f002 f878 	bl	8008e2c <RCCEx_PLL2_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d42:	e015      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d48:	3328      	adds	r3, #40	; 0x28
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f002 f91f 	bl	8008f90 <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d58:	e00a      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d60:	e006      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d62:	bf00      	nop
 8006d64:	e004      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10b      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d78:	4ba3      	ldr	r3, [pc, #652]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d88:	4a9f      	ldr	r2, [pc, #636]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d8e:	e003      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006da4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006db2:	460b      	mov	r3, r1
 8006db4:	4313      	orrs	r3, r2
 8006db6:	d037      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc2:	d00e      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc8:	d816      	bhi.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d018      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dd2:	d111      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd4:	4b8c      	ldr	r3, [pc, #560]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	4a8b      	ldr	r2, [pc, #556]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006de0:	e00f      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006de6:	3308      	adds	r3, #8
 8006de8:	2101      	movs	r1, #1
 8006dea:	4618      	mov	r0, r3
 8006dec:	f002 f81e 	bl	8008e2c <RCCEx_PLL2_Config>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006df6:	e004      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dfe:	e000      	b.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e0a:	4b7f      	ldr	r3, [pc, #508]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e18:	4a7b      	ldr	r2, [pc, #492]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e1a:	430b      	orrs	r3, r1
 8006e1c:	6513      	str	r3, [r2, #80]	; 0x50
 8006e1e:	e003      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e3e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4313      	orrs	r3, r2
 8006e46:	d039      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d81c      	bhi.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e95 	.word	0x08006e95
 8006e5c:	08006e69 	.word	0x08006e69
 8006e60:	08006e77 	.word	0x08006e77
 8006e64:	08006e95 	.word	0x08006e95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e68:	4b67      	ldr	r3, [pc, #412]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	4a66      	ldr	r2, [pc, #408]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e74:	e00f      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e7a:	3308      	adds	r3, #8
 8006e7c:	2102      	movs	r1, #2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 ffd4 	bl	8008e2c <RCCEx_PLL2_Config>
 8006e84:	4603      	mov	r3, r0
 8006e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e8a:	e004      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e92:	e000      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e9e:	4b5a      	ldr	r3, [pc, #360]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea2:	f023 0103 	bic.w	r1, r3, #3
 8006ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eac:	4a56      	ldr	r2, [pc, #344]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006eb2:	e003      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ed2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	f000 809f 	beq.w	800701c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ede:	4b4b      	ldr	r3, [pc, #300]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a4a      	ldr	r2, [pc, #296]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006eea:	f7fa fba1 	bl	8001630 <HAL_GetTick>
 8006eee:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ef2:	e00b      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef4:	f7fa fb9c 	bl	8001630 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b64      	cmp	r3, #100	; 0x64
 8006f02:	d903      	bls.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f0a:	e005      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f0c:	4b3f      	ldr	r3, [pc, #252]	; (800700c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0ed      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d179      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f20:	4b39      	ldr	r3, [pc, #228]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f2c:	4053      	eors	r3, r2
 8006f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d015      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f36:	4b34      	ldr	r3, [pc, #208]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f42:	4b31      	ldr	r3, [pc, #196]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f46:	4a30      	ldr	r2, [pc, #192]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f4e:	4b2e      	ldr	r3, [pc, #184]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	4a2d      	ldr	r2, [pc, #180]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f5a:	4a2b      	ldr	r2, [pc, #172]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6e:	d118      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fa fb5e 	bl	8001630 <HAL_GetTick>
 8006f74:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f78:	e00d      	b.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7a:	f7fa fb59 	bl	8001630 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f84:	1ad2      	subs	r2, r2, r3
 8006f86:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d903      	bls.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006f94:	e005      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f96:	4b1c      	ldr	r3, [pc, #112]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0eb      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d129      	bne.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fba:	d10e      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006fbc:	4b12      	ldr	r3, [pc, #72]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fcc:	091a      	lsrs	r2, r3, #4
 8006fce:	4b10      	ldr	r3, [pc, #64]	; (8007010 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	4a0d      	ldr	r2, [pc, #52]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6113      	str	r3, [r2, #16]
 8006fd8:	e005      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006fda:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	4a0a      	ldr	r2, [pc, #40]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006fe4:	6113      	str	r3, [r2, #16]
 8006fe6:	4b08      	ldr	r3, [pc, #32]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff6:	4a04      	ldr	r2, [pc, #16]	; (8007008 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffc:	e00e      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007006:	e009      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007008:	58024400 	.word	0x58024400
 800700c:	58024800 	.word	0x58024800
 8007010:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007018:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f002 0301 	and.w	r3, r2, #1
 8007028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007032:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	f000 8089 	beq.w	8007150 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007044:	2b28      	cmp	r3, #40	; 0x28
 8007046:	d86b      	bhi.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	08007129 	.word	0x08007129
 8007054:	08007121 	.word	0x08007121
 8007058:	08007121 	.word	0x08007121
 800705c:	08007121 	.word	0x08007121
 8007060:	08007121 	.word	0x08007121
 8007064:	08007121 	.word	0x08007121
 8007068:	08007121 	.word	0x08007121
 800706c:	08007121 	.word	0x08007121
 8007070:	080070f5 	.word	0x080070f5
 8007074:	08007121 	.word	0x08007121
 8007078:	08007121 	.word	0x08007121
 800707c:	08007121 	.word	0x08007121
 8007080:	08007121 	.word	0x08007121
 8007084:	08007121 	.word	0x08007121
 8007088:	08007121 	.word	0x08007121
 800708c:	08007121 	.word	0x08007121
 8007090:	0800710b 	.word	0x0800710b
 8007094:	08007121 	.word	0x08007121
 8007098:	08007121 	.word	0x08007121
 800709c:	08007121 	.word	0x08007121
 80070a0:	08007121 	.word	0x08007121
 80070a4:	08007121 	.word	0x08007121
 80070a8:	08007121 	.word	0x08007121
 80070ac:	08007121 	.word	0x08007121
 80070b0:	08007129 	.word	0x08007129
 80070b4:	08007121 	.word	0x08007121
 80070b8:	08007121 	.word	0x08007121
 80070bc:	08007121 	.word	0x08007121
 80070c0:	08007121 	.word	0x08007121
 80070c4:	08007121 	.word	0x08007121
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007121 	.word	0x08007121
 80070d0:	08007129 	.word	0x08007129
 80070d4:	08007121 	.word	0x08007121
 80070d8:	08007121 	.word	0x08007121
 80070dc:	08007121 	.word	0x08007121
 80070e0:	08007121 	.word	0x08007121
 80070e4:	08007121 	.word	0x08007121
 80070e8:	08007121 	.word	0x08007121
 80070ec:	08007121 	.word	0x08007121
 80070f0:	08007129 	.word	0x08007129
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f8:	3308      	adds	r3, #8
 80070fa:	2101      	movs	r1, #1
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 fe95 	bl	8008e2c <RCCEx_PLL2_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007108:	e00f      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800710a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710e:	3328      	adds	r3, #40	; 0x28
 8007110:	2101      	movs	r1, #1
 8007112:	4618      	mov	r0, r3
 8007114:	f001 ff3c 	bl	8008f90 <RCCEx_PLL3_Config>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800711e:	e004      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007126:	e000      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800712a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007132:	4bbf      	ldr	r3, [pc, #764]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800713a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007140:	4abb      	ldr	r2, [pc, #748]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007142:	430b      	orrs	r3, r1
 8007144:	6553      	str	r3, [r2, #84]	; 0x54
 8007146:	e003      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800714c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f002 0302 	and.w	r3, r2, #2
 800715c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007160:	2300      	movs	r3, #0
 8007162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007166:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d041      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007176:	2b05      	cmp	r3, #5
 8007178:	d824      	bhi.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800717a:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	080071cd 	.word	0x080071cd
 8007184:	08007199 	.word	0x08007199
 8007188:	080071af 	.word	0x080071af
 800718c:	080071cd 	.word	0x080071cd
 8007190:	080071cd 	.word	0x080071cd
 8007194:	080071cd 	.word	0x080071cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800719c:	3308      	adds	r3, #8
 800719e:	2101      	movs	r1, #1
 80071a0:	4618      	mov	r0, r3
 80071a2:	f001 fe43 	bl	8008e2c <RCCEx_PLL2_Config>
 80071a6:	4603      	mov	r3, r0
 80071a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071ac:	e00f      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b2:	3328      	adds	r3, #40	; 0x28
 80071b4:	2101      	movs	r1, #1
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 feea 	bl	8008f90 <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071c2:	e004      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071ca:	e000      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80071cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071d6:	4b96      	ldr	r3, [pc, #600]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f023 0107 	bic.w	r1, r3, #7
 80071de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071e4:	4a92      	ldr	r2, [pc, #584]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071e6:	430b      	orrs	r3, r1
 80071e8:	6553      	str	r3, [r2, #84]	; 0x54
 80071ea:	e003      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f002 0304 	and.w	r3, r2, #4
 8007200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007204:	2300      	movs	r3, #0
 8007206:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800720a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800720e:	460b      	mov	r3, r1
 8007210:	4313      	orrs	r3, r2
 8007212:	d044      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800721c:	2b05      	cmp	r3, #5
 800721e:	d825      	bhi.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	08007275 	.word	0x08007275
 800722c:	08007241 	.word	0x08007241
 8007230:	08007257 	.word	0x08007257
 8007234:	08007275 	.word	0x08007275
 8007238:	08007275 	.word	0x08007275
 800723c:	08007275 	.word	0x08007275
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007244:	3308      	adds	r3, #8
 8007246:	2101      	movs	r1, #1
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fdef 	bl	8008e2c <RCCEx_PLL2_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007254:	e00f      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800725a:	3328      	adds	r3, #40	; 0x28
 800725c:	2101      	movs	r1, #1
 800725e:	4618      	mov	r0, r3
 8007260:	f001 fe96 	bl	8008f90 <RCCEx_PLL3_Config>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800726a:	e004      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007272:	e000      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10b      	bne.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800727e:	4b6c      	ldr	r3, [pc, #432]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007282:	f023 0107 	bic.w	r1, r3, #7
 8007286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800728e:	4a68      	ldr	r2, [pc, #416]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007290:	430b      	orrs	r3, r1
 8007292:	6593      	str	r3, [r2, #88]	; 0x58
 8007294:	e003      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800729a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800729e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a6:	f002 0320 	and.w	r3, r2, #32
 80072aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072ae:	2300      	movs	r3, #0
 80072b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072b8:	460b      	mov	r3, r1
 80072ba:	4313      	orrs	r3, r2
 80072bc:	d055      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80072be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ca:	d033      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80072cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072d0:	d82c      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d6:	d02f      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80072d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072dc:	d826      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072e2:	d02b      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80072e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072e8:	d820      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ee:	d012      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80072f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f4:	d81a      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d022      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80072fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072fe:	d115      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007304:	3308      	adds	r3, #8
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f001 fd8f 	bl	8008e2c <RCCEx_PLL2_Config>
 800730e:	4603      	mov	r3, r0
 8007310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007314:	e015      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731a:	3328      	adds	r3, #40	; 0x28
 800731c:	2102      	movs	r1, #2
 800731e:	4618      	mov	r0, r3
 8007320:	f001 fe36 	bl	8008f90 <RCCEx_PLL3_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800732a:	e00a      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007332:	e006      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007334:	bf00      	nop
 8007336:	e004      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007338:	bf00      	nop
 800733a:	e002      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800733c:	bf00      	nop
 800733e:	e000      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10b      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800734a:	4b39      	ldr	r3, [pc, #228]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	4a35      	ldr	r2, [pc, #212]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800735c:	430b      	orrs	r3, r1
 800735e:	6553      	str	r3, [r2, #84]	; 0x54
 8007360:	e003      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800737a:	2300      	movs	r3, #0
 800737c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007380:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007384:	460b      	mov	r3, r1
 8007386:	4313      	orrs	r3, r2
 8007388:	d058      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007392:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007396:	d033      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007398:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800739c:	d82c      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800739e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a2:	d02f      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a8:	d826      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ae:	d02b      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80073b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073b4:	d820      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ba:	d012      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80073bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073c0:	d81a      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d022      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ca:	d115      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d0:	3308      	adds	r3, #8
 80073d2:	2100      	movs	r1, #0
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fd29 	bl	8008e2c <RCCEx_PLL2_Config>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073e0:	e015      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e6:	3328      	adds	r3, #40	; 0x28
 80073e8:	2102      	movs	r1, #2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fdd0 	bl	8008f90 <RCCEx_PLL3_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073f6:	e00a      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073fe:	e006      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007400:	bf00      	nop
 8007402:	e004      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007404:	bf00      	nop
 8007406:	e002      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007408:	bf00      	nop
 800740a:	e000      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800740c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10e      	bne.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007416:	4b06      	ldr	r3, [pc, #24]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800741e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007422:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007426:	4a02      	ldr	r2, [pc, #8]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007428:	430b      	orrs	r3, r1
 800742a:	6593      	str	r3, [r2, #88]	; 0x58
 800742c:	e006      	b.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800742e:	bf00      	nop
 8007430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007434:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800743c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800744c:	2300      	movs	r3, #0
 800744e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007452:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007456:	460b      	mov	r3, r1
 8007458:	4313      	orrs	r3, r2
 800745a:	d055      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800745c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007460:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007464:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007468:	d033      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800746a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800746e:	d82c      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007474:	d02f      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747a:	d826      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800747c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007480:	d02b      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007482:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007486:	d820      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800748c:	d012      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800748e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007492:	d81a      	bhi.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d022      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749c:	d115      	bne.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a2:	3308      	adds	r3, #8
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f001 fcc0 	bl	8008e2c <RCCEx_PLL2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074b2:	e015      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b8:	3328      	adds	r3, #40	; 0x28
 80074ba:	2102      	movs	r1, #2
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 fd67 	bl	8008f90 <RCCEx_PLL3_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074c8:	e00a      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074d0:	e006      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074d2:	bf00      	nop
 80074d4:	e004      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074d6:	bf00      	nop
 80074d8:	e002      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074da:	bf00      	nop
 80074dc:	e000      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80074e8:	4ba1      	ldr	r3, [pc, #644]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074f8:	4a9d      	ldr	r2, [pc, #628]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074fa:	430b      	orrs	r3, r1
 80074fc:	6593      	str	r3, [r2, #88]	; 0x58
 80074fe:	e003      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007504:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f002 0308 	and.w	r3, r2, #8
 8007514:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007518:	2300      	movs	r3, #0
 800751a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800751e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007522:	460b      	mov	r3, r1
 8007524:	4313      	orrs	r3, r2
 8007526:	d01e      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007534:	d10c      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753a:	3328      	adds	r3, #40	; 0x28
 800753c:	2102      	movs	r1, #2
 800753e:	4618      	mov	r0, r3
 8007540:	f001 fd26 	bl	8008f90 <RCCEx_PLL3_Config>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007550:	4b87      	ldr	r3, [pc, #540]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007560:	4a83      	ldr	r2, [pc, #524]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007562:	430b      	orrs	r3, r1
 8007564:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f002 0310 	and.w	r3, r2, #16
 8007572:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007576:	2300      	movs	r3, #0
 8007578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800757c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007580:	460b      	mov	r3, r1
 8007582:	4313      	orrs	r3, r2
 8007584:	d01e      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800758e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007592:	d10c      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007598:	3328      	adds	r3, #40	; 0x28
 800759a:	2102      	movs	r1, #2
 800759c:	4618      	mov	r0, r3
 800759e:	f001 fcf7 	bl	8008f90 <RCCEx_PLL3_Config>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075ae:	4b70      	ldr	r3, [pc, #448]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075be:	4a6c      	ldr	r2, [pc, #432]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80075d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075d4:	2300      	movs	r3, #0
 80075d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80075de:	460b      	mov	r3, r1
 80075e0:	4313      	orrs	r3, r2
 80075e2:	d03e      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80075ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075f0:	d022      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80075f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075f6:	d81b      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007600:	d00b      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007602:	e015      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007608:	3308      	adds	r3, #8
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f001 fc0d 	bl	8008e2c <RCCEx_PLL2_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007618:	e00f      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800761a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761e:	3328      	adds	r3, #40	; 0x28
 8007620:	2102      	movs	r1, #2
 8007622:	4618      	mov	r0, r3
 8007624:	f001 fcb4 	bl	8008f90 <RCCEx_PLL3_Config>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800762e:	e004      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007636:	e000      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007642:	4b4b      	ldr	r3, [pc, #300]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007646:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800764a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800764e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007652:	4a47      	ldr	r2, [pc, #284]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007654:	430b      	orrs	r3, r1
 8007656:	6593      	str	r3, [r2, #88]	; 0x58
 8007658:	e003      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800765a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800765e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800766e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007670:	2300      	movs	r3, #0
 8007672:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007674:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007678:	460b      	mov	r3, r1
 800767a:	4313      	orrs	r3, r2
 800767c:	d03b      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007686:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800768a:	d01f      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800768c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007690:	d818      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007696:	d003      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800769c:	d007      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800769e:	e011      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a0:	4b33      	ldr	r3, [pc, #204]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	4a32      	ldr	r2, [pc, #200]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80076ac:	e00f      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b2:	3328      	adds	r3, #40	; 0x28
 80076b4:	2101      	movs	r1, #1
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 fc6a 	bl	8008f90 <RCCEx_PLL3_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80076c2:	e004      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80076cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076d6:	4b26      	ldr	r3, [pc, #152]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80076de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e6:	4a22      	ldr	r2, [pc, #136]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6553      	str	r3, [r2, #84]	; 0x54
 80076ec:	e003      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007702:	673b      	str	r3, [r7, #112]	; 0x70
 8007704:	2300      	movs	r3, #0
 8007706:	677b      	str	r3, [r7, #116]	; 0x74
 8007708:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800770c:	460b      	mov	r3, r1
 800770e:	4313      	orrs	r3, r2
 8007710:	d034      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800771c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007720:	d007      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007722:	e011      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007724:	4b12      	ldr	r3, [pc, #72]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	4a11      	ldr	r2, [pc, #68]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800772a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007730:	e00e      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007736:	3308      	adds	r3, #8
 8007738:	2102      	movs	r1, #2
 800773a:	4618      	mov	r0, r3
 800773c:	f001 fb76 	bl	8008e2c <RCCEx_PLL2_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007746:	e003      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800774e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10d      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007766:	4a02      	ldr	r2, [pc, #8]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007768:	430b      	orrs	r3, r1
 800776a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800776c:	e006      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800776e:	bf00      	nop
 8007770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007778:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800777c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007788:	66bb      	str	r3, [r7, #104]	; 0x68
 800778a:	2300      	movs	r3, #0
 800778c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800778e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007792:	460b      	mov	r3, r1
 8007794:	4313      	orrs	r3, r2
 8007796:	d00c      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779c:	3328      	adds	r3, #40	; 0x28
 800779e:	2102      	movs	r1, #2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f001 fbf5 	bl	8008f90 <RCCEx_PLL3_Config>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80077be:	663b      	str	r3, [r7, #96]	; 0x60
 80077c0:	2300      	movs	r3, #0
 80077c2:	667b      	str	r3, [r7, #100]	; 0x64
 80077c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80077c8:	460b      	mov	r3, r1
 80077ca:	4313      	orrs	r3, r2
 80077cc:	d038      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077da:	d018      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80077dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e0:	d811      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e6:	d014      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80077e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ec:	d80b      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d011      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80077f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f6:	d106      	bne.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f8:	4bc3      	ldr	r3, [pc, #780]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	4ac2      	ldr	r2, [pc, #776]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007804:	e008      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800780c:	e004      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800780e:	bf00      	nop
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007812:	bf00      	nop
 8007814:	e000      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10b      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007820:	4bb9      	ldr	r3, [pc, #740]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007824:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007830:	4ab5      	ldr	r2, [pc, #724]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007832:	430b      	orrs	r3, r1
 8007834:	6553      	str	r3, [r2, #84]	; 0x54
 8007836:	e003      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800783c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007848:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800784c:	65bb      	str	r3, [r7, #88]	; 0x58
 800784e:	2300      	movs	r3, #0
 8007850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007852:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007856:	460b      	mov	r3, r1
 8007858:	4313      	orrs	r3, r2
 800785a:	d009      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800785c:	4baa      	ldr	r3, [pc, #680]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800785e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007860:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786a:	4aa7      	ldr	r2, [pc, #668]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800786c:	430b      	orrs	r3, r1
 800786e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800787c:	653b      	str	r3, [r7, #80]	; 0x50
 800787e:	2300      	movs	r3, #0
 8007880:	657b      	str	r3, [r7, #84]	; 0x54
 8007882:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007886:	460b      	mov	r3, r1
 8007888:	4313      	orrs	r3, r2
 800788a:	d00a      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800788c:	4b9e      	ldr	r3, [pc, #632]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007898:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800789c:	4a9a      	ldr	r2, [pc, #616]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800789e:	430b      	orrs	r3, r1
 80078a0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80078ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b0:	2300      	movs	r3, #0
 80078b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80078b8:	460b      	mov	r3, r1
 80078ba:	4313      	orrs	r3, r2
 80078bc:	d009      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078be:	4b92      	ldr	r3, [pc, #584]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80078c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	4a8e      	ldr	r2, [pc, #568]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ce:	430b      	orrs	r3, r1
 80078d0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80078de:	643b      	str	r3, [r7, #64]	; 0x40
 80078e0:	2300      	movs	r3, #0
 80078e2:	647b      	str	r3, [r7, #68]	; 0x44
 80078e4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80078e8:	460b      	mov	r3, r1
 80078ea:	4313      	orrs	r3, r2
 80078ec:	d00e      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078ee:	4b86      	ldr	r3, [pc, #536]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	4a85      	ldr	r2, [pc, #532]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078f8:	6113      	str	r3, [r2, #16]
 80078fa:	4b83      	ldr	r3, [pc, #524]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078fc:	6919      	ldr	r1, [r3, #16]
 80078fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007902:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007906:	4a80      	ldr	r2, [pc, #512]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007908:	430b      	orrs	r3, r1
 800790a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800790c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
 800791a:	2300      	movs	r3, #0
 800791c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800791e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d009      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007928:	4b77      	ldr	r3, [pc, #476]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800792a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800792c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007936:	4a74      	ldr	r2, [pc, #464]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007938:	430b      	orrs	r3, r1
 800793a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800793c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007948:	633b      	str	r3, [r7, #48]	; 0x30
 800794a:	2300      	movs	r3, #0
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
 800794e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007952:	460b      	mov	r3, r1
 8007954:	4313      	orrs	r3, r2
 8007956:	d00a      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007958:	4b6b      	ldr	r3, [pc, #428]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007968:	4a67      	ldr	r2, [pc, #412]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800796a:	430b      	orrs	r3, r1
 800796c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800796e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007976:	2100      	movs	r1, #0
 8007978:	62b9      	str	r1, [r7, #40]	; 0x28
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007980:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007984:	460b      	mov	r3, r1
 8007986:	4313      	orrs	r3, r2
 8007988:	d011      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800798e:	3308      	adds	r3, #8
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f001 fa4a 	bl	8008e2c <RCCEx_PLL2_Config>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800799e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d003      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	2100      	movs	r1, #0
 80079b8:	6239      	str	r1, [r7, #32]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
 80079c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079c4:	460b      	mov	r3, r1
 80079c6:	4313      	orrs	r3, r2
 80079c8:	d011      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ce:	3308      	adds	r3, #8
 80079d0:	2101      	movs	r1, #1
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fa2a 	bl	8008e2c <RCCEx_PLL2_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80079de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	2100      	movs	r1, #0
 80079f8:	61b9      	str	r1, [r7, #24]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a04:	460b      	mov	r3, r1
 8007a06:	4313      	orrs	r3, r2
 8007a08:	d011      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	3308      	adds	r3, #8
 8007a10:	2102      	movs	r1, #2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f001 fa0a 	bl	8008e2c <RCCEx_PLL2_Config>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	2100      	movs	r1, #0
 8007a38:	6139      	str	r1, [r7, #16]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	617b      	str	r3, [r7, #20]
 8007a40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a44:	460b      	mov	r3, r1
 8007a46:	4313      	orrs	r3, r2
 8007a48:	d011      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a4e:	3328      	adds	r3, #40	; 0x28
 8007a50:	2100      	movs	r1, #0
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 fa9c 	bl	8008f90 <RCCEx_PLL3_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	2100      	movs	r1, #0
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	f003 0310 	and.w	r3, r3, #16
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d011      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a8e:	3328      	adds	r3, #40	; 0x28
 8007a90:	2101      	movs	r1, #1
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 fa7c 	bl	8008f90 <RCCEx_PLL3_Config>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6039      	str	r1, [r7, #0]
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	d011      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ace:	3328      	adds	r3, #40	; 0x28
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f001 fa5c 	bl	8008f90 <RCCEx_PLL3_Config>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007aee:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e000      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007b02:	46bd      	mov	sp, r7
 8007b04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b08:	58024400 	.word	0x58024400

08007b0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b090      	sub	sp, #64	; 0x40
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b1a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007b1e:	430b      	orrs	r3, r1
 8007b20:	f040 8094 	bne.w	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b24:	4b9e      	ldr	r3, [pc, #632]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b28:	f003 0307 	and.w	r3, r3, #7
 8007b2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	f200 8087 	bhi.w	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b51 	.word	0x08007b51
 8007b40:	08007b79 	.word	0x08007b79
 8007b44:	08007ba1 	.word	0x08007ba1
 8007b48:	08007c3d 	.word	0x08007c3d
 8007b4c:	08007bc9 	.word	0x08007bc9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b50:	4b93      	ldr	r3, [pc, #588]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b5c:	d108      	bne.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f810 	bl	8008b88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b6c:	f000 bd45 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b74:	f000 bd41 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b78:	4b89      	ldr	r3, [pc, #548]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b84:	d108      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b86:	f107 0318 	add.w	r3, r7, #24
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fd54 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b94:	f000 bd31 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b9c:	f000 bd2d 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ba0:	4b7f      	ldr	r3, [pc, #508]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bac:	d108      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bae:	f107 030c 	add.w	r3, r7, #12
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fe94 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bbc:	f000 bd1d 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bc4:	f000 bd19 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bc8:	4b75      	ldr	r3, [pc, #468]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bd2:	4b73      	ldr	r3, [pc, #460]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b04      	cmp	r3, #4
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d109      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007be4:	4b6e      	ldr	r3, [pc, #440]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	08db      	lsrs	r3, r3, #3
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	4a6d      	ldr	r2, [pc, #436]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf6:	e01f      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bf8:	4b69      	ldr	r3, [pc, #420]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c04:	d106      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c0c:	d102      	bne.n	8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c0e:	4b66      	ldr	r3, [pc, #408]	; (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c12:	e011      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c14:	4b62      	ldr	r3, [pc, #392]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c20:	d106      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c28:	d102      	bne.n	8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c2a:	4b60      	ldr	r3, [pc, #384]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c2e:	e003      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c34:	f000 bce1 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c38:	f000 bcdf 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c3c:	4b5c      	ldr	r3, [pc, #368]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c40:	f000 bcdb 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c48:	f000 bcd7 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c50:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007c54:	430b      	orrs	r3, r1
 8007c56:	f040 80ad 	bne.w	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007c5a:	4b51      	ldr	r3, [pc, #324]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007c62:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6a:	d056      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c72:	f200 8090 	bhi.w	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	2bc0      	cmp	r3, #192	; 0xc0
 8007c7a:	f000 8088 	beq.w	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	2bc0      	cmp	r3, #192	; 0xc0
 8007c82:	f200 8088 	bhi.w	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c88:	2b80      	cmp	r3, #128	; 0x80
 8007c8a:	d032      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	2b80      	cmp	r3, #128	; 0x80
 8007c90:	f200 8081 	bhi.w	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2b40      	cmp	r3, #64	; 0x40
 8007c9e:	d014      	beq.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007ca0:	e079      	b.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ca2:	4b3f      	ldr	r3, [pc, #252]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cae:	d108      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 ff67 	bl	8008b88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cbe:	f000 bc9c 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc6:	f000 bc98 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cca:	4b35      	ldr	r3, [pc, #212]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cd6:	d108      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd8:	f107 0318 	add.w	r3, r7, #24
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fcab 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ce6:	f000 bc88 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cee:	f000 bc84 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cf2:	4b2b      	ldr	r3, [pc, #172]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cfe:	d108      	bne.n	8007d12 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d00:	f107 030c 	add.w	r3, r7, #12
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fdeb 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d0e:	f000 bc74 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d16:	f000 bc70 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d1a:	4b21      	ldr	r3, [pc, #132]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d24:	4b1e      	ldr	r3, [pc, #120]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d10c      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d36:	4b1a      	ldr	r3, [pc, #104]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	08db      	lsrs	r3, r3, #3
 8007d3c:	f003 0303 	and.w	r3, r3, #3
 8007d40:	4a18      	ldr	r2, [pc, #96]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d42:	fa22 f303 	lsr.w	r3, r2, r3
 8007d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d48:	e01f      	b.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d4a:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d56:	d106      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d5e:	d102      	bne.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d60:	4b11      	ldr	r3, [pc, #68]	; (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d64:	e011      	b.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d66:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d72:	d106      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7a:	d102      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d80:	e003      	b.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007d86:	f000 bc38 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d8a:	f000 bc36 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d8e:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d92:	f000 bc32 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9a:	f000 bc2e 	b.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d9e:	bf00      	nop
 8007da0:	58024400 	.word	0x58024400
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	003d0900 	.word	0x003d0900
 8007dac:	007a1200 	.word	0x007a1200
 8007db0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	f040 809c 	bne.w	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007dc2:	4b9e      	ldr	r3, [pc, #632]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007dd2:	d054      	beq.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007dda:	f200 808b 	bhi.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007de4:	f000 8083 	beq.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007dee:	f200 8081 	bhi.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007df8:	d02f      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e00:	d878      	bhi.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e0e:	d012      	beq.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e10:	e070      	b.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e12:	4b8a      	ldr	r3, [pc, #552]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e1e:	d107      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 feaf 	bl	8008b88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e2e:	e3e4      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e34:	e3e1      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e36:	4b81      	ldr	r3, [pc, #516]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e42:	d107      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e44:	f107 0318 	add.w	r3, r7, #24
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fbf5 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e52:	e3d2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e58:	e3cf      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e5a:	4b78      	ldr	r3, [pc, #480]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e66:	d107      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fd37 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e76:	e3c0      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e7c:	e3bd      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e7e:	4b6f      	ldr	r3, [pc, #444]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e88:	4b6c      	ldr	r3, [pc, #432]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d10c      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e9a:	4b68      	ldr	r3, [pc, #416]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	08db      	lsrs	r3, r3, #3
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	4a66      	ldr	r2, [pc, #408]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eac:	e01e      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eae:	4b63      	ldr	r3, [pc, #396]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eba:	d106      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ec2:	d102      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ec4:	4b5f      	ldr	r3, [pc, #380]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ec8:	e010      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eca:	4b5c      	ldr	r3, [pc, #368]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed6:	d106      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ede:	d102      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ee0:	4b59      	ldr	r3, [pc, #356]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007eea:	e386      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007eec:	e385      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007eee:	4b57      	ldr	r3, [pc, #348]	; (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef2:	e382      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef8:	e37f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007efe:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007f02:	430b      	orrs	r3, r1
 8007f04:	f040 80a7 	bne.w	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f08:	4b4c      	ldr	r3, [pc, #304]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f0c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f18:	d055      	beq.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f20:	f200 8096 	bhi.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f2a:	f000 8084 	beq.w	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f34:	f200 808c 	bhi.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f3e:	d030      	beq.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f46:	f200 8083 	bhi.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f56:	d012      	beq.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007f58:	e07a      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f5a:	4b38      	ldr	r3, [pc, #224]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f66:	d107      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fe0b 	bl	8008b88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f76:	e340      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f7c:	e33d      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f7e:	4b2f      	ldr	r3, [pc, #188]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f8a:	d107      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f8c:	f107 0318 	add.w	r3, r7, #24
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fb51 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f9a:	e32e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa0:	e32b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fae:	d107      	bne.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb0:	f107 030c 	add.w	r3, r7, #12
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fc93 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fbe:	e31c      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fc4:	e319      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fc6:	4b1d      	ldr	r3, [pc, #116]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0304 	and.w	r3, r3, #4
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d10c      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fe2:	4b16      	ldr	r3, [pc, #88]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	08db      	lsrs	r3, r3, #3
 8007fe8:	f003 0303 	and.w	r3, r3, #3
 8007fec:	4a14      	ldr	r2, [pc, #80]	; (8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007fee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff4:	e01e      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008002:	d106      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800800a:	d102      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008010:	e010      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008012:	4b0a      	ldr	r3, [pc, #40]	; (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800801e:	d106      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008026:	d102      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008028:	4b07      	ldr	r3, [pc, #28]	; (8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800802c:	e002      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008032:	e2e2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008034:	e2e1      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008036:	4b05      	ldr	r3, [pc, #20]	; (800804c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800803a:	e2de      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800803c:	58024400 	.word	0x58024400
 8008040:	03d09000 	.word	0x03d09000
 8008044:	003d0900 	.word	0x003d0900
 8008048:	007a1200 	.word	0x007a1200
 800804c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008054:	e2d1      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800805e:	430b      	orrs	r3, r1
 8008060:	f040 809c 	bne.w	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008064:	4b93      	ldr	r3, [pc, #588]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008068:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800806c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008074:	d054      	beq.n	8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800807c:	f200 808b 	bhi.w	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008086:	f000 8083 	beq.w	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008090:	f200 8081 	bhi.w	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800809a:	d02f      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a2:	d878      	bhi.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d004      	beq.n	80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b0:	d012      	beq.n	80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80080b2:	e070      	b.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080b4:	4b7f      	ldr	r3, [pc, #508]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080c0:	d107      	bne.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fd5e 	bl	8008b88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d0:	e293      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080d6:	e290      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080d8:	4b76      	ldr	r3, [pc, #472]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080e4:	d107      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e6:	f107 0318 	add.w	r3, r7, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 faa4 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f4:	e281      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80080f6:	2300      	movs	r3, #0
 80080f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080fa:	e27e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080fc:	4b6d      	ldr	r3, [pc, #436]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008108:	d107      	bne.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800810a:	f107 030c 	add.w	r3, r7, #12
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fbe6 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008118:	e26f      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800811a:	2300      	movs	r3, #0
 800811c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800811e:	e26c      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008120:	4b64      	ldr	r3, [pc, #400]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008128:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800812a:	4b62      	ldr	r3, [pc, #392]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b04      	cmp	r3, #4
 8008134:	d10c      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008138:	2b00      	cmp	r3, #0
 800813a:	d109      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800813c:	4b5d      	ldr	r3, [pc, #372]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	08db      	lsrs	r3, r3, #3
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	4a5c      	ldr	r2, [pc, #368]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008148:	fa22 f303 	lsr.w	r3, r2, r3
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800814e:	e01e      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008150:	4b58      	ldr	r3, [pc, #352]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800815c:	d106      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008164:	d102      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008166:	4b55      	ldr	r3, [pc, #340]	; (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800816a:	e010      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800816c:	4b51      	ldr	r3, [pc, #324]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008178:	d106      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008180:	d102      	bne.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008182:	4b4f      	ldr	r3, [pc, #316]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008186:	e002      	b.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800818c:	e235      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800818e:	e234      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008190:	4b4c      	ldr	r3, [pc, #304]	; (80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008194:	e231      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800819a:	e22e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800819c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081a0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80081a4:	430b      	orrs	r3, r1
 80081a6:	f040 808f 	bne.w	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081aa:	4b42      	ldr	r3, [pc, #264]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ae:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80081b2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ba:	d06b      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081c2:	d874      	bhi.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081ca:	d056      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081d2:	d86c      	bhi.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081da:	d03b      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081e2:	d864      	bhi.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ea:	d021      	beq.n	8008230 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f2:	d85c      	bhi.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d004      	beq.n	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008200:	d004      	beq.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008202:	e054      	b.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008204:	f7fe fa4c 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 8008208:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800820a:	e1f6      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800820c:	4b29      	ldr	r3, [pc, #164]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008218:	d107      	bne.n	800822a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800821a:	f107 0318 	add.w	r3, r7, #24
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fa0a 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008228:	e1e7      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800822e:	e1e4      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008230:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823c:	d107      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800823e:	f107 030c 	add.w	r3, r7, #12
 8008242:	4618      	mov	r0, r3
 8008244:	f000 fb4c 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800824c:	e1d5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008252:	e1d2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008254:	4b17      	ldr	r3, [pc, #92]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b04      	cmp	r3, #4
 800825e:	d109      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008260:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	08db      	lsrs	r3, r3, #3
 8008266:	f003 0303 	and.w	r3, r3, #3
 800826a:	4a13      	ldr	r2, [pc, #76]	; (80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800826c:	fa22 f303 	lsr.w	r3, r2, r3
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008272:	e1c2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008278:	e1bf      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800827a:	4b0e      	ldr	r3, [pc, #56]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008286:	d102      	bne.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008288:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800828a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828c:	e1b5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008292:	e1b2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082a0:	d102      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80082a2:	4b07      	ldr	r3, [pc, #28]	; (80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a6:	e1a8      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ac:	e1a5      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082b2:	e1a2      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082b4:	58024400 	.word	0x58024400
 80082b8:	03d09000 	.word	0x03d09000
 80082bc:	003d0900 	.word	0x003d0900
 80082c0:	007a1200 	.word	0x007a1200
 80082c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082cc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80082d0:	430b      	orrs	r3, r1
 80082d2:	d173      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80082d4:	4b9c      	ldr	r3, [pc, #624]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80082d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80082de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e4:	d02f      	beq.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082ec:	d863      	bhi.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fa:	d012      	beq.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80082fc:	e05b      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082fe:	4b92      	ldr	r3, [pc, #584]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800830a:	d107      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800830c:	f107 0318 	add.w	r3, r7, #24
 8008310:	4618      	mov	r0, r3
 8008312:	f000 f991 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800831a:	e16e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	e16b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008322:	4b89      	ldr	r3, [pc, #548]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800832a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800832e:	d107      	bne.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fad3 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800833e:	e15c      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008344:	e159      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008346:	4b80      	ldr	r3, [pc, #512]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800834a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800834e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008350:	4b7d      	ldr	r3, [pc, #500]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b04      	cmp	r3, #4
 800835a:	d10c      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800835c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800835e:	2b00      	cmp	r3, #0
 8008360:	d109      	bne.n	8008376 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008362:	4b79      	ldr	r3, [pc, #484]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	08db      	lsrs	r3, r3, #3
 8008368:	f003 0303 	and.w	r3, r3, #3
 800836c:	4a77      	ldr	r2, [pc, #476]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800836e:	fa22 f303 	lsr.w	r3, r2, r3
 8008372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008374:	e01e      	b.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008376:	4b74      	ldr	r3, [pc, #464]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008382:	d106      	bne.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800838a:	d102      	bne.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800838c:	4b70      	ldr	r3, [pc, #448]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008390:	e010      	b.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008392:	4b6d      	ldr	r3, [pc, #436]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800839e:	d106      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80083a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a6:	d102      	bne.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083a8:	4b6a      	ldr	r3, [pc, #424]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083ac:	e002      	b.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083b2:	e122      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083b4:	e121      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80083b6:	2300      	movs	r3, #0
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ba:	e11e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083c0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80083c4:	430b      	orrs	r3, r1
 80083c6:	d133      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083c8:	4b5f      	ldr	r3, [pc, #380]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d004      	beq.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083de:	d012      	beq.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80083e0:	e023      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083e2:	4b59      	ldr	r3, [pc, #356]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083ee:	d107      	bne.n	8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fbc7 	bl	8008b88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083fe:	e0fc      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008404:	e0f9      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008406:	4b50      	ldr	r3, [pc, #320]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800840e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008412:	d107      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008414:	f107 0318 	add.w	r3, r7, #24
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f90d 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008422:	e0ea      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008428:	e0e7      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800842e:	e0e4      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008434:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008438:	430b      	orrs	r3, r1
 800843a:	f040 808d 	bne.w	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800843e:	4b42      	ldr	r3, [pc, #264]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008442:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800844e:	d06b      	beq.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008456:	d874      	bhi.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800845e:	d056      	beq.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008466:	d86c      	bhi.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800846e:	d03b      	beq.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008476:	d864      	bhi.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800847e:	d021      	beq.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008486:	d85c      	bhi.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008494:	d004      	beq.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008496:	e054      	b.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008498:	f000 f8b8 	bl	800860c <HAL_RCCEx_GetD3PCLK1Freq>
 800849c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800849e:	e0ac      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084a0:	4b29      	ldr	r3, [pc, #164]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ac:	d107      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ae:	f107 0318 	add.w	r3, r7, #24
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 f8c0 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084bc:	e09d      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084c2:	e09a      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084c4:	4b20      	ldr	r3, [pc, #128]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084d0:	d107      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d2:	f107 030c 	add.w	r3, r7, #12
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fa02 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e0:	e08b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e6:	e088      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084e8:	4b17      	ldr	r3, [pc, #92]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0304 	and.w	r3, r3, #4
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d109      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084f4:	4b14      	ldr	r3, [pc, #80]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	08db      	lsrs	r3, r3, #3
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	4a13      	ldr	r2, [pc, #76]	; (800854c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008506:	e078      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800850c:	e075      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800850e:	4b0e      	ldr	r3, [pc, #56]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851a:	d102      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800851c:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800851e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008520:	e06b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008526:	e068      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008528:	4b07      	ldr	r3, [pc, #28]	; (8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008534:	d102      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008536:	4b07      	ldr	r3, [pc, #28]	; (8008554 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853a:	e05e      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008540:	e05b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008546:	e058      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008548:	58024400 	.word	0x58024400
 800854c:	03d09000 	.word	0x03d09000
 8008550:	003d0900 	.word	0x003d0900
 8008554:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800855c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008560:	430b      	orrs	r3, r1
 8008562:	d148      	bne.n	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800856c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008574:	d02a      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800857c:	d838      	bhi.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800858a:	d00d      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800858c:	e030      	b.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859a:	d102      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800859c:	4b1a      	ldr	r3, [pc, #104]	; (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a0:	e02b      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a6:	e028      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085a8:	4b16      	ldr	r3, [pc, #88]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fae4 	bl	8008b88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c4:	e019      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ca:	e016      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d8:	d107      	bne.n	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085da:	f107 0318 	add.w	r3, r7, #24
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f82a 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085e8:	e007      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ee:	e004      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085f4:	e001      	b.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80085fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3740      	adds	r7, #64	; 0x40
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	58024400 	.word	0x58024400
 8008608:	007a1200 	.word	0x007a1200

0800860c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008610:	f7fe f816 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8008614:	4602      	mov	r2, r0
 8008616:	4b06      	ldr	r3, [pc, #24]	; (8008630 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	091b      	lsrs	r3, r3, #4
 800861c:	f003 0307 	and.w	r3, r3, #7
 8008620:	4904      	ldr	r1, [pc, #16]	; (8008634 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008622:	5ccb      	ldrb	r3, [r1, r3]
 8008624:	f003 031f 	and.w	r3, r3, #31
 8008628:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800862c:	4618      	mov	r0, r3
 800862e:	bd80      	pop	{r7, pc}
 8008630:	58024400 	.word	0x58024400
 8008634:	0800b430 	.word	0x0800b430

08008638 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008638:	b480      	push	{r7}
 800863a:	b089      	sub	sp, #36	; 0x24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008640:	4ba1      	ldr	r3, [pc, #644]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	f003 0303 	and.w	r3, r3, #3
 8008648:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800864a:	4b9f      	ldr	r3, [pc, #636]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800864c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864e:	0b1b      	lsrs	r3, r3, #12
 8008650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008654:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008656:	4b9c      	ldr	r3, [pc, #624]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865a:	091b      	lsrs	r3, r3, #4
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008662:	4b99      	ldr	r3, [pc, #612]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008666:	08db      	lsrs	r3, r3, #3
 8008668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	fb02 f303 	mul.w	r3, r2, r3
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8111 	beq.w	80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b02      	cmp	r3, #2
 800868a:	f000 8083 	beq.w	8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	2b02      	cmp	r3, #2
 8008692:	f200 80a1 	bhi.w	80087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d056      	beq.n	8008750 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086a2:	e099      	b.n	80087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086a4:	4b88      	ldr	r3, [pc, #544]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0320 	and.w	r3, r3, #32
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d02d      	beq.n	800870c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086b0:	4b85      	ldr	r3, [pc, #532]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	08db      	lsrs	r3, r3, #3
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	4a84      	ldr	r2, [pc, #528]	; (80088cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
 80086c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	ee07 3a90 	vmov	s15, r3
 80086c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086da:	4b7b      	ldr	r3, [pc, #492]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008706:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800870a:	e087      	b.n	800881c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	ee07 3a90 	vmov	s15, r3
 8008712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008716:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800871a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871e:	4b6a      	ldr	r3, [pc, #424]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008732:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800874e:	e065      	b.n	800881c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	ee07 3a90 	vmov	s15, r3
 8008756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800875e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008762:	4b59      	ldr	r3, [pc, #356]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008772:	ed97 6a03 	vldr	s12, [r7, #12]
 8008776:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800877a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800877e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800878e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008792:	e043      	b.n	800881c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087a6:	4b48      	ldr	r3, [pc, #288]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087d6:	e021      	b.n	800881c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ea:	4b37      	ldr	r3, [pc, #220]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800880a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800880e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800881a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800881c:	4b2a      	ldr	r3, [pc, #168]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	0a5b      	lsrs	r3, r3, #9
 8008822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008836:	edd7 6a07 	vldr	s13, [r7, #28]
 800883a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800883e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008842:	ee17 2a90 	vmov	r2, s15
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800884a:	4b1f      	ldr	r3, [pc, #124]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884e:	0c1b      	lsrs	r3, r3, #16
 8008850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008864:	edd7 6a07 	vldr	s13, [r7, #28]
 8008868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008870:	ee17 2a90 	vmov	r2, s15
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008878:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800887a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887c:	0e1b      	lsrs	r3, r3, #24
 800887e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800888e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008892:	edd7 6a07 	vldr	s13, [r7, #28]
 8008896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800889a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800889e:	ee17 2a90 	vmov	r2, s15
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088a6:	e008      	b.n	80088ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	609a      	str	r2, [r3, #8]
}
 80088ba:	bf00      	nop
 80088bc:	3724      	adds	r7, #36	; 0x24
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	58024400 	.word	0x58024400
 80088cc:	03d09000 	.word	0x03d09000
 80088d0:	46000000 	.word	0x46000000
 80088d4:	4c742400 	.word	0x4c742400
 80088d8:	4a742400 	.word	0x4a742400
 80088dc:	4af42400 	.word	0x4af42400

080088e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b089      	sub	sp, #36	; 0x24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088e8:	4ba1      	ldr	r3, [pc, #644]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80088f2:	4b9f      	ldr	r3, [pc, #636]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	0d1b      	lsrs	r3, r3, #20
 80088f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088fe:	4b9c      	ldr	r3, [pc, #624]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800890a:	4b99      	ldr	r3, [pc, #612]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890e:	08db      	lsrs	r3, r3, #3
 8008910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8111 	beq.w	8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	2b02      	cmp	r3, #2
 8008932:	f000 8083 	beq.w	8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	2b02      	cmp	r3, #2
 800893a:	f200 80a1 	bhi.w	8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d056      	beq.n	80089f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800894a:	e099      	b.n	8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800894c:	4b88      	ldr	r3, [pc, #544]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	d02d      	beq.n	80089b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008958:	4b85      	ldr	r3, [pc, #532]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	08db      	lsrs	r3, r3, #3
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	4a84      	ldr	r2, [pc, #528]	; (8008b74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008982:	4b7b      	ldr	r3, [pc, #492]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898a:	ee07 3a90 	vmov	s15, r3
 800898e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008992:	ed97 6a03 	vldr	s12, [r7, #12]
 8008996:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800899a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089b2:	e087      	b.n	8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c6:	4b6a      	ldr	r3, [pc, #424]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089f6:	e065      	b.n	8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b59      	ldr	r3, [pc, #356]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a3a:	e043      	b.n	8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b48      	ldr	r3, [pc, #288]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a7e:	e021      	b.n	8008ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b37      	ldr	r3, [pc, #220]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ac2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ac4:	4b2a      	ldr	r3, [pc, #168]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac8:	0a5b      	lsrs	r3, r3, #9
 8008aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aea:	ee17 2a90 	vmov	r2, s15
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008af2:	4b1f      	ldr	r3, [pc, #124]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	0c1b      	lsrs	r3, r3, #16
 8008af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b18:	ee17 2a90 	vmov	r2, s15
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b20:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b24:	0e1b      	lsrs	r3, r3, #24
 8008b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b46:	ee17 2a90 	vmov	r2, s15
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b4e:	e008      	b.n	8008b62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	609a      	str	r2, [r3, #8]
}
 8008b62:	bf00      	nop
 8008b64:	3724      	adds	r7, #36	; 0x24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop
 8008b70:	58024400 	.word	0x58024400
 8008b74:	03d09000 	.word	0x03d09000
 8008b78:	46000000 	.word	0x46000000
 8008b7c:	4c742400 	.word	0x4c742400
 8008b80:	4a742400 	.word	0x4a742400
 8008b84:	4af42400 	.word	0x4af42400

08008b88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b089      	sub	sp, #36	; 0x24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b90:	4ba0      	ldr	r3, [pc, #640]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008b9a:	4b9e      	ldr	r3, [pc, #632]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9e:	091b      	lsrs	r3, r3, #4
 8008ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ba4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ba6:	4b9b      	ldr	r3, [pc, #620]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	f003 0301 	and.w	r3, r3, #1
 8008bae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bb0:	4b98      	ldr	r3, [pc, #608]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb4:	08db      	lsrs	r3, r3, #3
 8008bb6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	fb02 f303 	mul.w	r3, r2, r3
 8008bc0:	ee07 3a90 	vmov	s15, r3
 8008bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8111 	beq.w	8008df6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	f000 8083 	beq.w	8008ce2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	f200 80a1 	bhi.w	8008d26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d056      	beq.n	8008c9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008bf0:	e099      	b.n	8008d26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bf2:	4b88      	ldr	r3, [pc, #544]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d02d      	beq.n	8008c5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bfe:	4b85      	ldr	r3, [pc, #532]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	08db      	lsrs	r3, r3, #3
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	4a83      	ldr	r2, [pc, #524]	; (8008e18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c0e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	ee07 3a90 	vmov	s15, r3
 8008c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c28:	4b7a      	ldr	r3, [pc, #488]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c30:	ee07 3a90 	vmov	s15, r3
 8008c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c38:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c54:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c58:	e087      	b.n	8008d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	ee07 3a90 	vmov	s15, r3
 8008c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6c:	4b69      	ldr	r3, [pc, #420]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c74:	ee07 3a90 	vmov	s15, r3
 8008c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c9c:	e065      	b.n	8008d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	ee07 3a90 	vmov	s15, r3
 8008ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb0:	4b58      	ldr	r3, [pc, #352]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb8:	ee07 3a90 	vmov	s15, r3
 8008cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ce0:	e043      	b.n	8008d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf4:	4b47      	ldr	r3, [pc, #284]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfc:	ee07 3a90 	vmov	s15, r3
 8008d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d04:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d24:	e021      	b.n	8008d6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	ee07 3a90 	vmov	s15, r3
 8008d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d38:	4b36      	ldr	r3, [pc, #216]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d48:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d6a:	4b2a      	ldr	r3, [pc, #168]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	0a5b      	lsrs	r3, r3, #9
 8008d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d90:	ee17 2a90 	vmov	r2, s15
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008d98:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9c:	0c1b      	lsrs	r3, r3, #16
 8008d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dbe:	ee17 2a90 	vmov	r2, s15
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008dc6:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dca:	0e1b      	lsrs	r3, r3, #24
 8008dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd0:	ee07 3a90 	vmov	s15, r3
 8008dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dec:	ee17 2a90 	vmov	r2, s15
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008df4:	e008      	b.n	8008e08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	609a      	str	r2, [r3, #8]
}
 8008e08:	bf00      	nop
 8008e0a:	3724      	adds	r7, #36	; 0x24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	58024400 	.word	0x58024400
 8008e18:	03d09000 	.word	0x03d09000
 8008e1c:	46000000 	.word	0x46000000
 8008e20:	4c742400 	.word	0x4c742400
 8008e24:	4a742400 	.word	0x4a742400
 8008e28:	4af42400 	.word	0x4af42400

08008e2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e3a:	4b53      	ldr	r3, [pc, #332]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	f003 0303 	and.w	r3, r3, #3
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d101      	bne.n	8008e4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e099      	b.n	8008f7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e4a:	4b4f      	ldr	r3, [pc, #316]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a4e      	ldr	r2, [pc, #312]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008e50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e56:	f7f8 fbeb 	bl	8001630 <HAL_GetTick>
 8008e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e5c:	e008      	b.n	8008e70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e5e:	f7f8 fbe7 	bl	8001630 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d901      	bls.n	8008e70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e086      	b.n	8008f7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e70:	4b45      	ldr	r3, [pc, #276]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1f0      	bne.n	8008e5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e7c:	4b42      	ldr	r3, [pc, #264]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	031b      	lsls	r3, r3, #12
 8008e8a:	493f      	ldr	r1, [pc, #252]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	628b      	str	r3, [r1, #40]	; 0x28
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	025b      	lsls	r3, r3, #9
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	041b      	lsls	r3, r3, #16
 8008eae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	061b      	lsls	r3, r3, #24
 8008ebc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ec0:	4931      	ldr	r1, [pc, #196]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ec6:	4b30      	ldr	r3, [pc, #192]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	492d      	ldr	r1, [pc, #180]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ed8:	4b2b      	ldr	r3, [pc, #172]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	f023 0220 	bic.w	r2, r3, #32
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	4928      	ldr	r1, [pc, #160]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008eea:	4b27      	ldr	r3, [pc, #156]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	4a26      	ldr	r2, [pc, #152]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008ef0:	f023 0310 	bic.w	r3, r3, #16
 8008ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008ef6:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008efa:	4b24      	ldr	r3, [pc, #144]	; (8008f8c <RCCEx_PLL2_Config+0x160>)
 8008efc:	4013      	ands	r3, r2
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	69d2      	ldr	r2, [r2, #28]
 8008f02:	00d2      	lsls	r2, r2, #3
 8008f04:	4920      	ldr	r1, [pc, #128]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f06:	4313      	orrs	r3, r2
 8008f08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f0a:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f10:	f043 0310 	orr.w	r3, r3, #16
 8008f14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	4a19      	ldr	r2, [pc, #100]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f28:	e00f      	b.n	8008f4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d106      	bne.n	8008f3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f30:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f34:	4a14      	ldr	r2, [pc, #80]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f3c:	e005      	b.n	8008f4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	4a11      	ldr	r2, [pc, #68]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f4a:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a0e      	ldr	r2, [pc, #56]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f56:	f7f8 fb6b 	bl	8001630 <HAL_GetTick>
 8008f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f5c:	e008      	b.n	8008f70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f5e:	f7f8 fb67 	bl	8001630 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d901      	bls.n	8008f70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e006      	b.n	8008f7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f70:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <RCCEx_PLL2_Config+0x15c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0f0      	beq.n	8008f5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	58024400 	.word	0x58024400
 8008f8c:	ffff0007 	.word	0xffff0007

08008f90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f9e:	4b53      	ldr	r3, [pc, #332]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8008fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d101      	bne.n	8008fae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e099      	b.n	80090e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fae:	4b4f      	ldr	r3, [pc, #316]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a4e      	ldr	r2, [pc, #312]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8008fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fba:	f7f8 fb39 	bl	8001630 <HAL_GetTick>
 8008fbe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fc0:	e008      	b.n	8008fd4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fc2:	f7f8 fb35 	bl	8001630 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d901      	bls.n	8008fd4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e086      	b.n	80090e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fd4:	4b45      	ldr	r3, [pc, #276]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f0      	bne.n	8008fc2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fe0:	4b42      	ldr	r3, [pc, #264]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8008fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	493f      	ldr	r1, [pc, #252]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	628b      	str	r3, [r1, #40]	; 0x28
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	3b01      	subs	r3, #1
 8009004:	025b      	lsls	r3, r3, #9
 8009006:	b29b      	uxth	r3, r3
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	3b01      	subs	r3, #1
 8009010:	041b      	lsls	r3, r3, #16
 8009012:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009016:	431a      	orrs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	3b01      	subs	r3, #1
 800901e:	061b      	lsls	r3, r3, #24
 8009020:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009024:	4931      	ldr	r1, [pc, #196]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009026:	4313      	orrs	r3, r2
 8009028:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800902a:	4b30      	ldr	r3, [pc, #192]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	492d      	ldr	r1, [pc, #180]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009038:	4313      	orrs	r3, r2
 800903a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800903c:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	4928      	ldr	r1, [pc, #160]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 800904a:	4313      	orrs	r3, r2
 800904c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800904e:	4b27      	ldr	r3, [pc, #156]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009052:	4a26      	ldr	r2, [pc, #152]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800905a:	4b24      	ldr	r3, [pc, #144]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 800905c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800905e:	4b24      	ldr	r3, [pc, #144]	; (80090f0 <RCCEx_PLL3_Config+0x160>)
 8009060:	4013      	ands	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	69d2      	ldr	r2, [r2, #28]
 8009066:	00d2      	lsls	r2, r2, #3
 8009068:	4920      	ldr	r1, [pc, #128]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 800906a:	4313      	orrs	r3, r2
 800906c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800906e:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009078:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009080:	4b1a      	ldr	r3, [pc, #104]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	4a19      	ldr	r2, [pc, #100]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800908a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800908c:	e00f      	b.n	80090ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d106      	bne.n	80090a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009094:	4b15      	ldr	r3, [pc, #84]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	4a14      	ldr	r2, [pc, #80]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 800909a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800909e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090a0:	e005      	b.n	80090ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090a2:	4b12      	ldr	r3, [pc, #72]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	4a11      	ldr	r2, [pc, #68]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 80090a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090ae:	4b0f      	ldr	r3, [pc, #60]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a0e      	ldr	r2, [pc, #56]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 80090b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ba:	f7f8 fab9 	bl	8001630 <HAL_GetTick>
 80090be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090c0:	e008      	b.n	80090d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090c2:	f7f8 fab5 	bl	8001630 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d901      	bls.n	80090d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e006      	b.n	80090e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <RCCEx_PLL3_Config+0x15c>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0f0      	beq.n	80090c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	58024400 	.word	0x58024400
 80090f0:	ffff0007 	.word	0xffff0007

080090f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d071      	beq.n	80091ea <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7f8 f84a 	bl	80011b4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f003 0310 	and.w	r3, r3, #16
 8009132:	2b10      	cmp	r3, #16
 8009134:	d050      	beq.n	80091d8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	22ca      	movs	r2, #202	; 0xca
 800913c:	625a      	str	r2, [r3, #36]	; 0x24
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2253      	movs	r2, #83	; 0x53
 8009144:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa4a 	bl	80095e0 <RTC_EnterInitMode>
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d124      	bne.n	80091a0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6899      	ldr	r1, [r3, #8]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	4b24      	ldr	r3, [pc, #144]	; (80091f4 <HAL_RTC_Init+0x100>)
 8009162:	400b      	ands	r3, r1
 8009164:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6899      	ldr	r1, [r3, #8]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	431a      	orrs	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	0419      	lsls	r1, r3, #16
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa56 	bl	8009648 <RTC_ExitInitMode>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d113      	bne.n	80091ce <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0203 	bic.w	r2, r2, #3
 80091b4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	69da      	ldr	r2, [r3, #28]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	22ff      	movs	r2, #255	; 0xff
 80091d4:	625a      	str	r2, [r3, #36]	; 0x24
 80091d6:	e001      	b.n	80091dc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d103      	bne.n	80091ea <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	ff8fffbf 	.word	0xff8fffbf

080091f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80091f8:	b590      	push	{r4, r7, lr}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d101      	bne.n	8009212 <HAL_RTC_SetTime+0x1a>
 800920e:	2302      	movs	r3, #2
 8009210:	e089      	b.n	8009326 <HAL_RTC_SetTime+0x12e>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2202      	movs	r2, #2
 800921e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	22ca      	movs	r2, #202	; 0xca
 8009228:	625a      	str	r2, [r3, #36]	; 0x24
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2253      	movs	r2, #83	; 0x53
 8009230:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 f9d4 	bl	80095e0 <RTC_EnterInitMode>
 8009238:	4603      	mov	r3, r0
 800923a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800923c:	7cfb      	ldrb	r3, [r7, #19]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d161      	bne.n	8009306 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d126      	bne.n	8009296 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	d102      	bne.n	800925c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2200      	movs	r2, #0
 800925a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fa2f 	bl	80096c4 <RTC_ByteToBcd2>
 8009266:	4603      	mov	r3, r0
 8009268:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fa28 	bl	80096c4 <RTC_ByteToBcd2>
 8009274:	4603      	mov	r3, r0
 8009276:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009278:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	789b      	ldrb	r3, [r3, #2]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fa20 	bl	80096c4 <RTC_ByteToBcd2>
 8009284:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009286:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	78db      	ldrb	r3, [r3, #3]
 800928e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009290:	4313      	orrs	r3, r2
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e018      	b.n	80092c8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2200      	movs	r2, #0
 80092a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	785b      	ldrb	r3, [r3, #1]
 80092b4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092b6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092bc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	78db      	ldrb	r3, [r3, #3]
 80092c2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092c4:	4313      	orrs	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	6979      	ldr	r1, [r7, #20]
 80092ce:	4b18      	ldr	r3, [pc, #96]	; (8009330 <HAL_RTC_SetTime+0x138>)
 80092d0:	400b      	ands	r3, r1
 80092d2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80092e2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6899      	ldr	r1, [r3, #8]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	68da      	ldr	r2, [r3, #12]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f9a3 	bl	8009648 <RTC_ExitInitMode>
 8009302:	4603      	mov	r3, r0
 8009304:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	22ff      	movs	r2, #255	; 0xff
 800930c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800930e:	7cfb      	ldrb	r3, [r7, #19]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009324:	7cfb      	ldrb	r3, [r7, #19]
}
 8009326:	4618      	mov	r0, r3
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	bd90      	pop	{r4, r7, pc}
 800932e:	bf00      	nop
 8009330:	007f7f7f 	.word	0x007f7f7f

08009334 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4b22      	ldr	r3, [pc, #136]	; (80093e8 <HAL_RTC_GetTime+0xb4>)
 8009360:	4013      	ands	r3, r2
 8009362:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	0c1b      	lsrs	r3, r3, #16
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800936e:	b2da      	uxtb	r2, r3
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	0a1b      	lsrs	r3, r3, #8
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800937e:	b2da      	uxtb	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800938c:	b2da      	uxtb	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	0d9b      	lsrs	r3, r3, #22
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	b2da      	uxtb	r2, r3
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11a      	bne.n	80093de <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	4618      	mov	r0, r3
 80093ae:	f000 f9a9 	bl	8009704 <RTC_Bcd2ToByte>
 80093b2:	4603      	mov	r3, r0
 80093b4:	461a      	mov	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	785b      	ldrb	r3, [r3, #1]
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 f9a0 	bl	8009704 <RTC_Bcd2ToByte>
 80093c4:	4603      	mov	r3, r0
 80093c6:	461a      	mov	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	789b      	ldrb	r3, [r3, #2]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 f997 	bl	8009704 <RTC_Bcd2ToByte>
 80093d6:	4603      	mov	r3, r0
 80093d8:	461a      	mov	r2, r3
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3718      	adds	r7, #24
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	007f7f7f 	.word	0x007f7f7f

080093ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80093ec:	b590      	push	{r4, r7, lr}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_RTC_SetDate+0x1a>
 8009402:	2302      	movs	r3, #2
 8009404:	e073      	b.n	80094ee <HAL_RTC_SetDate+0x102>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2202      	movs	r2, #2
 8009412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d10e      	bne.n	800943a <HAL_RTC_SetDate+0x4e>
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	785b      	ldrb	r3, [r3, #1]
 8009420:	f003 0310 	and.w	r3, r3, #16
 8009424:	2b00      	cmp	r3, #0
 8009426:	d008      	beq.n	800943a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	f023 0310 	bic.w	r3, r3, #16
 8009430:	b2db      	uxtb	r3, r3
 8009432:	330a      	adds	r3, #10
 8009434:	b2da      	uxtb	r2, r3
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d11c      	bne.n	800947a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	78db      	ldrb	r3, [r3, #3]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f93d 	bl	80096c4 <RTC_ByteToBcd2>
 800944a:	4603      	mov	r3, r0
 800944c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	785b      	ldrb	r3, [r3, #1]
 8009452:	4618      	mov	r0, r3
 8009454:	f000 f936 	bl	80096c4 <RTC_ByteToBcd2>
 8009458:	4603      	mov	r3, r0
 800945a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800945c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	789b      	ldrb	r3, [r3, #2]
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f92e 	bl	80096c4 <RTC_ByteToBcd2>
 8009468:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800946a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009474:	4313      	orrs	r3, r2
 8009476:	617b      	str	r3, [r7, #20]
 8009478:	e00e      	b.n	8009498 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	78db      	ldrb	r3, [r3, #3]
 800947e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	785b      	ldrb	r3, [r3, #1]
 8009484:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009486:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800948c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009494:	4313      	orrs	r3, r2
 8009496:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	22ca      	movs	r2, #202	; 0xca
 800949e:	625a      	str	r2, [r3, #36]	; 0x24
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2253      	movs	r2, #83	; 0x53
 80094a6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 f899 	bl	80095e0 <RTC_EnterInitMode>
 80094ae:	4603      	mov	r3, r0
 80094b0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80094b2:	7cfb      	ldrb	r3, [r7, #19]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	6979      	ldr	r1, [r7, #20]
 80094be:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <HAL_RTC_SetDate+0x10c>)
 80094c0:	400b      	ands	r3, r1
 80094c2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 f8bf 	bl	8009648 <RTC_ExitInitMode>
 80094ca:	4603      	mov	r3, r0
 80094cc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	22ff      	movs	r2, #255	; 0xff
 80094d4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80094d6:	7cfb      	ldrb	r3, [r7, #19]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d103      	bne.n	80094e4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80094ec:	7cfb      	ldrb	r3, [r7, #19]


}
 80094ee:	4618      	mov	r0, r3
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd90      	pop	{r4, r7, pc}
 80094f6:	bf00      	nop
 80094f8:	00ffff3f 	.word	0x00ffff3f

080094fc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	4b21      	ldr	r3, [pc, #132]	; (8009594 <HAL_RTC_GetDate+0x98>)
 8009510:	4013      	ands	r3, r2
 8009512:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	0c1b      	lsrs	r3, r3, #16
 8009518:	b2da      	uxtb	r2, r3
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	0a1b      	lsrs	r3, r3, #8
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 031f 	and.w	r3, r3, #31
 8009528:	b2da      	uxtb	r2, r3
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009536:	b2da      	uxtb	r2, r3
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	0b5b      	lsrs	r3, r3, #13
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	b2da      	uxtb	r2, r3
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d11a      	bne.n	8009588 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	78db      	ldrb	r3, [r3, #3]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f8d4 	bl	8009704 <RTC_Bcd2ToByte>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	785b      	ldrb	r3, [r3, #1]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 f8cb 	bl	8009704 <RTC_Bcd2ToByte>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	789b      	ldrb	r3, [r3, #2]
 800957a:	4618      	mov	r0, r3
 800957c:	f000 f8c2 	bl	8009704 <RTC_Bcd2ToByte>
 8009580:	4603      	mov	r3, r0
 8009582:	461a      	mov	r2, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	00ffff3f 	.word	0x00ffff3f

08009598 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a0d      	ldr	r2, [pc, #52]	; (80095dc <HAL_RTC_WaitForSynchro+0x44>)
 80095a6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80095a8:	f7f8 f842 	bl	8001630 <HAL_GetTick>
 80095ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095ae:	e009      	b.n	80095c4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095b0:	f7f8 f83e 	bl	8001630 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095be:	d901      	bls.n	80095c4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80095c0:	2303      	movs	r3, #3
 80095c2:	e007      	b.n	80095d4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0ee      	beq.n	80095b0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	0003ff5f 	.word	0x0003ff5f

080095e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d120      	bne.n	800963c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009604:	f7f8 f814 	bl	8001630 <HAL_GetTick>
 8009608:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800960a:	e00d      	b.n	8009628 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800960c:	f7f8 f810 	bl	8001630 <HAL_GetTick>
 8009610:	4602      	mov	r2, r0
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800961a:	d905      	bls.n	8009628 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2203      	movs	r2, #3
 8009624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <RTC_EnterInitMode+0x5c>
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	2b03      	cmp	r3, #3
 800963a:	d1e7      	bne.n	800960c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800963c:	7bfb      	ldrb	r3, [r7, #15]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009654:	4b1a      	ldr	r3, [pc, #104]	; (80096c0 <RTC_ExitInitMode+0x78>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	4a19      	ldr	r2, [pc, #100]	; (80096c0 <RTC_ExitInitMode+0x78>)
 800965a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800965e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009660:	4b17      	ldr	r3, [pc, #92]	; (80096c0 <RTC_ExitInitMode+0x78>)
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10c      	bne.n	8009686 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ff93 	bl	8009598 <HAL_RTC_WaitForSynchro>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01e      	beq.n	80096b6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2203      	movs	r2, #3
 800967c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	73fb      	strb	r3, [r7, #15]
 8009684:	e017      	b.n	80096b6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009686:	4b0e      	ldr	r3, [pc, #56]	; (80096c0 <RTC_ExitInitMode+0x78>)
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	4a0d      	ldr	r2, [pc, #52]	; (80096c0 <RTC_ExitInitMode+0x78>)
 800968c:	f023 0320 	bic.w	r3, r3, #32
 8009690:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7ff ff80 	bl	8009598 <HAL_RTC_WaitForSynchro>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2203      	movs	r2, #3
 80096a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096aa:	4b05      	ldr	r3, [pc, #20]	; (80096c0 <RTC_ExitInitMode+0x78>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	4a04      	ldr	r2, [pc, #16]	; (80096c0 <RTC_ExitInitMode+0x78>)
 80096b0:	f043 0320 	orr.w	r3, r3, #32
 80096b4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	58004000 	.word	0x58004000

080096c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	4603      	mov	r3, r0
 80096cc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80096d6:	e005      	b.n	80096e4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	3b0a      	subs	r3, #10
 80096e2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80096e4:	7afb      	ldrb	r3, [r7, #11]
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d8f6      	bhi.n	80096d8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	b2da      	uxtb	r2, r3
 80096f2:	7afb      	ldrb	r3, [r7, #11]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	b2db      	uxtb	r3, r3
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	4603      	mov	r3, r0
 800970c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	091b      	lsrs	r3, r3, #4
 8009712:	b2db      	uxtb	r3, r3
 8009714:	461a      	mov	r2, r3
 8009716:	0092      	lsls	r2, r2, #2
 8009718:	4413      	add	r3, r2
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800971e:	79fb      	ldrb	r3, [r7, #7]
 8009720:	f003 030f 	and.w	r3, r3, #15
 8009724:	b2da      	uxtb	r2, r3
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	4413      	add	r3, r2
 800972a:	b2db      	uxtb	r3, r3
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d101      	bne.n	8009750 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800974c:	2302      	movs	r3, #2
 800974e:	e034      	b.n	80097ba <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	22ca      	movs	r2, #202	; 0xca
 8009766:	625a      	str	r2, [r3, #36]	; 0x24
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2253      	movs	r2, #83	; 0x53
 800976e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800977e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6899      	ldr	r1, [r3, #8]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	430a      	orrs	r2, r1
 800978e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689a      	ldr	r2, [r3, #8]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800979e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	22ff      	movs	r2, #255	; 0xff
 80097a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e042      	b.n	800985e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d106      	bne.n	80097f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7f7 fd42 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2224      	movs	r2, #36	; 0x24
 80097f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0201 	bic.w	r2, r2, #1
 8009806:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f8bb 	bl	8009984 <UART_SetConfig>
 800980e:	4603      	mov	r3, r0
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e022      	b.n	800985e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fe17 	bl	800a454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009834:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009844:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0201 	orr.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fe9e 	bl	800a598 <UART_CheckIdleState>
 800985c:	4603      	mov	r3, r0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b08a      	sub	sp, #40	; 0x28
 800986a:	af02      	add	r7, sp, #8
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	603b      	str	r3, [r7, #0]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987c:	2b20      	cmp	r3, #32
 800987e:	d17b      	bne.n	8009978 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <HAL_UART_Transmit+0x26>
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e074      	b.n	800997a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2221      	movs	r2, #33	; 0x21
 800989c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098a0:	f7f7 fec6 	bl	8001630 <HAL_GetTick>
 80098a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	88fa      	ldrh	r2, [r7, #6]
 80098b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098be:	d108      	bne.n	80098d2 <HAL_UART_Transmit+0x6c>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	e003      	b.n	80098da <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80098da:	e030      	b.n	800993e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	2200      	movs	r2, #0
 80098e4:	2180      	movs	r1, #128	; 0x80
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 ff00 	bl	800a6ec <UART_WaitOnFlagUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e03d      	b.n	800997a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10b      	bne.n	800991c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	461a      	mov	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009912:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	3302      	adds	r3, #2
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e007      	b.n	800992c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	781a      	ldrb	r2, [r3, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	3301      	adds	r3, #1
 800992a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009932:	b29b      	uxth	r3, r3
 8009934:	3b01      	subs	r3, #1
 8009936:	b29a      	uxth	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009944:	b29b      	uxth	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1c8      	bne.n	80098dc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2200      	movs	r2, #0
 8009952:	2140      	movs	r1, #64	; 0x40
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fec9 	bl	800a6ec <UART_WaitOnFlagUntilTimeout>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009968:	2303      	movs	r3, #3
 800996a:	e006      	b.n	800997a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2220      	movs	r2, #32
 8009970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	e000      	b.n	800997a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009978:	2302      	movs	r3, #2
  }
}
 800997a:	4618      	mov	r0, r3
 800997c:	3720      	adds	r7, #32
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009988:	b092      	sub	sp, #72	; 0x48
 800998a:	af00      	add	r7, sp, #0
 800998c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	431a      	orrs	r2, r3
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	431a      	orrs	r2, r3
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	4bbe      	ldr	r3, [pc, #760]	; (8009cac <UART_SetConfig+0x328>)
 80099b4:	4013      	ands	r3, r2
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	6812      	ldr	r2, [r2, #0]
 80099ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099bc:	430b      	orrs	r3, r1
 80099be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4ab3      	ldr	r2, [pc, #716]	; (8009cb0 <UART_SetConfig+0x32c>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d004      	beq.n	80099f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099ec:	4313      	orrs	r3, r2
 80099ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	4baf      	ldr	r3, [pc, #700]	; (8009cb4 <UART_SetConfig+0x330>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	6812      	ldr	r2, [r2, #0]
 80099fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a00:	430b      	orrs	r3, r1
 8009a02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0a:	f023 010f 	bic.w	r1, r3, #15
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	430a      	orrs	r2, r1
 8009a18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4aa6      	ldr	r2, [pc, #664]	; (8009cb8 <UART_SetConfig+0x334>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d177      	bne.n	8009b14 <UART_SetConfig+0x190>
 8009a24:	4ba5      	ldr	r3, [pc, #660]	; (8009cbc <UART_SetConfig+0x338>)
 8009a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a2c:	2b28      	cmp	r3, #40	; 0x28
 8009a2e:	d86d      	bhi.n	8009b0c <UART_SetConfig+0x188>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <UART_SetConfig+0xb4>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009add 	.word	0x08009add
 8009a3c:	08009b0d 	.word	0x08009b0d
 8009a40:	08009b0d 	.word	0x08009b0d
 8009a44:	08009b0d 	.word	0x08009b0d
 8009a48:	08009b0d 	.word	0x08009b0d
 8009a4c:	08009b0d 	.word	0x08009b0d
 8009a50:	08009b0d 	.word	0x08009b0d
 8009a54:	08009b0d 	.word	0x08009b0d
 8009a58:	08009ae5 	.word	0x08009ae5
 8009a5c:	08009b0d 	.word	0x08009b0d
 8009a60:	08009b0d 	.word	0x08009b0d
 8009a64:	08009b0d 	.word	0x08009b0d
 8009a68:	08009b0d 	.word	0x08009b0d
 8009a6c:	08009b0d 	.word	0x08009b0d
 8009a70:	08009b0d 	.word	0x08009b0d
 8009a74:	08009b0d 	.word	0x08009b0d
 8009a78:	08009aed 	.word	0x08009aed
 8009a7c:	08009b0d 	.word	0x08009b0d
 8009a80:	08009b0d 	.word	0x08009b0d
 8009a84:	08009b0d 	.word	0x08009b0d
 8009a88:	08009b0d 	.word	0x08009b0d
 8009a8c:	08009b0d 	.word	0x08009b0d
 8009a90:	08009b0d 	.word	0x08009b0d
 8009a94:	08009b0d 	.word	0x08009b0d
 8009a98:	08009af5 	.word	0x08009af5
 8009a9c:	08009b0d 	.word	0x08009b0d
 8009aa0:	08009b0d 	.word	0x08009b0d
 8009aa4:	08009b0d 	.word	0x08009b0d
 8009aa8:	08009b0d 	.word	0x08009b0d
 8009aac:	08009b0d 	.word	0x08009b0d
 8009ab0:	08009b0d 	.word	0x08009b0d
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009afd 	.word	0x08009afd
 8009abc:	08009b0d 	.word	0x08009b0d
 8009ac0:	08009b0d 	.word	0x08009b0d
 8009ac4:	08009b0d 	.word	0x08009b0d
 8009ac8:	08009b0d 	.word	0x08009b0d
 8009acc:	08009b0d 	.word	0x08009b0d
 8009ad0:	08009b0d 	.word	0x08009b0d
 8009ad4:	08009b0d 	.word	0x08009b0d
 8009ad8:	08009b05 	.word	0x08009b05
 8009adc:	2301      	movs	r3, #1
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e222      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009ae4:	2304      	movs	r3, #4
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e21e      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009aec:	2308      	movs	r3, #8
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e21a      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009af4:	2310      	movs	r3, #16
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e216      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009afc:	2320      	movs	r3, #32
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e212      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b04:	2340      	movs	r3, #64	; 0x40
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e20e      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e20a      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a69      	ldr	r2, [pc, #420]	; (8009cc0 <UART_SetConfig+0x33c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d130      	bne.n	8009b80 <UART_SetConfig+0x1fc>
 8009b1e:	4b67      	ldr	r3, [pc, #412]	; (8009cbc <UART_SetConfig+0x338>)
 8009b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b22:	f003 0307 	and.w	r3, r3, #7
 8009b26:	2b05      	cmp	r3, #5
 8009b28:	d826      	bhi.n	8009b78 <UART_SetConfig+0x1f4>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <UART_SetConfig+0x1ac>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b51 	.word	0x08009b51
 8009b38:	08009b59 	.word	0x08009b59
 8009b3c:	08009b61 	.word	0x08009b61
 8009b40:	08009b69 	.word	0x08009b69
 8009b44:	08009b71 	.word	0x08009b71
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4e:	e1ec      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e1e8      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e1e4      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e1e0      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e1dc      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b70:	2340      	movs	r3, #64	; 0x40
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e1d8      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e1d4      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a4f      	ldr	r2, [pc, #316]	; (8009cc4 <UART_SetConfig+0x340>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d130      	bne.n	8009bec <UART_SetConfig+0x268>
 8009b8a:	4b4c      	ldr	r3, [pc, #304]	; (8009cbc <UART_SetConfig+0x338>)
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d826      	bhi.n	8009be4 <UART_SetConfig+0x260>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <UART_SetConfig+0x218>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bb5 	.word	0x08009bb5
 8009ba0:	08009bbd 	.word	0x08009bbd
 8009ba4:	08009bc5 	.word	0x08009bc5
 8009ba8:	08009bcd 	.word	0x08009bcd
 8009bac:	08009bd5 	.word	0x08009bd5
 8009bb0:	08009bdd 	.word	0x08009bdd
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bba:	e1b6      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e1b2      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bca:	e1ae      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e1aa      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e1a6      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e1a2      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e19e      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a35      	ldr	r2, [pc, #212]	; (8009cc8 <UART_SetConfig+0x344>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d130      	bne.n	8009c58 <UART_SetConfig+0x2d4>
 8009bf6:	4b31      	ldr	r3, [pc, #196]	; (8009cbc <UART_SetConfig+0x338>)
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d826      	bhi.n	8009c50 <UART_SetConfig+0x2cc>
 8009c02:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <UART_SetConfig+0x284>)
 8009c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c29 	.word	0x08009c29
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c41 	.word	0x08009c41
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e180      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c28:	2304      	movs	r3, #4
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e17c      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c30:	2308      	movs	r3, #8
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e178      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e174      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e170      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e16c      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e168      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	; (8009ccc <UART_SetConfig+0x348>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d142      	bne.n	8009ce8 <UART_SetConfig+0x364>
 8009c62:	4b16      	ldr	r3, [pc, #88]	; (8009cbc <UART_SetConfig+0x338>)
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d838      	bhi.n	8009ce0 <UART_SetConfig+0x35c>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x2f0>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c9d 	.word	0x08009c9d
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cd1 	.word	0x08009cd1
 8009c88:	08009cd9 	.word	0x08009cd9
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e14a      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c94:	2304      	movs	r3, #4
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e146      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca2:	e142      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009caa:	e13e      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009cac:	cfff69f3 	.word	0xcfff69f3
 8009cb0:	58000c00 	.word	0x58000c00
 8009cb4:	11fff4ff 	.word	0x11fff4ff
 8009cb8:	40011000 	.word	0x40011000
 8009cbc:	58024400 	.word	0x58024400
 8009cc0:	40004400 	.word	0x40004400
 8009cc4:	40004800 	.word	0x40004800
 8009cc8:	40004c00 	.word	0x40004c00
 8009ccc:	40005000 	.word	0x40005000
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e128      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009cd8:	2340      	movs	r3, #64	; 0x40
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e124      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009ce0:	2380      	movs	r3, #128	; 0x80
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e120      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4acb      	ldr	r2, [pc, #812]	; (800a01c <UART_SetConfig+0x698>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d176      	bne.n	8009de0 <UART_SetConfig+0x45c>
 8009cf2:	4bcb      	ldr	r3, [pc, #812]	; (800a020 <UART_SetConfig+0x69c>)
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cfa:	2b28      	cmp	r3, #40	; 0x28
 8009cfc:	d86c      	bhi.n	8009dd8 <UART_SetConfig+0x454>
 8009cfe:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <UART_SetConfig+0x380>)
 8009d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d04:	08009da9 	.word	0x08009da9
 8009d08:	08009dd9 	.word	0x08009dd9
 8009d0c:	08009dd9 	.word	0x08009dd9
 8009d10:	08009dd9 	.word	0x08009dd9
 8009d14:	08009dd9 	.word	0x08009dd9
 8009d18:	08009dd9 	.word	0x08009dd9
 8009d1c:	08009dd9 	.word	0x08009dd9
 8009d20:	08009dd9 	.word	0x08009dd9
 8009d24:	08009db1 	.word	0x08009db1
 8009d28:	08009dd9 	.word	0x08009dd9
 8009d2c:	08009dd9 	.word	0x08009dd9
 8009d30:	08009dd9 	.word	0x08009dd9
 8009d34:	08009dd9 	.word	0x08009dd9
 8009d38:	08009dd9 	.word	0x08009dd9
 8009d3c:	08009dd9 	.word	0x08009dd9
 8009d40:	08009dd9 	.word	0x08009dd9
 8009d44:	08009db9 	.word	0x08009db9
 8009d48:	08009dd9 	.word	0x08009dd9
 8009d4c:	08009dd9 	.word	0x08009dd9
 8009d50:	08009dd9 	.word	0x08009dd9
 8009d54:	08009dd9 	.word	0x08009dd9
 8009d58:	08009dd9 	.word	0x08009dd9
 8009d5c:	08009dd9 	.word	0x08009dd9
 8009d60:	08009dd9 	.word	0x08009dd9
 8009d64:	08009dc1 	.word	0x08009dc1
 8009d68:	08009dd9 	.word	0x08009dd9
 8009d6c:	08009dd9 	.word	0x08009dd9
 8009d70:	08009dd9 	.word	0x08009dd9
 8009d74:	08009dd9 	.word	0x08009dd9
 8009d78:	08009dd9 	.word	0x08009dd9
 8009d7c:	08009dd9 	.word	0x08009dd9
 8009d80:	08009dd9 	.word	0x08009dd9
 8009d84:	08009dc9 	.word	0x08009dc9
 8009d88:	08009dd9 	.word	0x08009dd9
 8009d8c:	08009dd9 	.word	0x08009dd9
 8009d90:	08009dd9 	.word	0x08009dd9
 8009d94:	08009dd9 	.word	0x08009dd9
 8009d98:	08009dd9 	.word	0x08009dd9
 8009d9c:	08009dd9 	.word	0x08009dd9
 8009da0:	08009dd9 	.word	0x08009dd9
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	2301      	movs	r3, #1
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e0bc      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009db0:	2304      	movs	r3, #4
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e0b8      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009db8:	2308      	movs	r3, #8
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e0b4      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009dc0:	2310      	movs	r3, #16
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e0b0      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009dc8:	2320      	movs	r3, #32
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e0ac      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009dd0:	2340      	movs	r3, #64	; 0x40
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e0a8      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009dd8:	2380      	movs	r3, #128	; 0x80
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e0a4      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a8f      	ldr	r2, [pc, #572]	; (800a024 <UART_SetConfig+0x6a0>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d130      	bne.n	8009e4c <UART_SetConfig+0x4c8>
 8009dea:	4b8d      	ldr	r3, [pc, #564]	; (800a020 <UART_SetConfig+0x69c>)
 8009dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	d826      	bhi.n	8009e44 <UART_SetConfig+0x4c0>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <UART_SetConfig+0x478>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e15 	.word	0x08009e15
 8009e00:	08009e1d 	.word	0x08009e1d
 8009e04:	08009e25 	.word	0x08009e25
 8009e08:	08009e2d 	.word	0x08009e2d
 8009e0c:	08009e35 	.word	0x08009e35
 8009e10:	08009e3d 	.word	0x08009e3d
 8009e14:	2300      	movs	r3, #0
 8009e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e1a:	e086      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e082      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e07e      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e07a      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e34:	2320      	movs	r3, #32
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e076      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e3c:	2340      	movs	r3, #64	; 0x40
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e072      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e44:	2380      	movs	r3, #128	; 0x80
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e06e      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a75      	ldr	r2, [pc, #468]	; (800a028 <UART_SetConfig+0x6a4>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d130      	bne.n	8009eb8 <UART_SetConfig+0x534>
 8009e56:	4b72      	ldr	r3, [pc, #456]	; (800a020 <UART_SetConfig+0x69c>)
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d826      	bhi.n	8009eb0 <UART_SetConfig+0x52c>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <UART_SetConfig+0x4e4>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009e89 	.word	0x08009e89
 8009e70:	08009e91 	.word	0x08009e91
 8009e74:	08009e99 	.word	0x08009e99
 8009e78:	08009ea1 	.word	0x08009ea1
 8009e7c:	08009ea9 	.word	0x08009ea9
 8009e80:	2300      	movs	r3, #0
 8009e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e86:	e050      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8e:	e04c      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e90:	2308      	movs	r3, #8
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e048      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e044      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009ea0:	2320      	movs	r3, #32
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e040      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009ea8:	2340      	movs	r3, #64	; 0x40
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e03c      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e038      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a5b      	ldr	r2, [pc, #364]	; (800a02c <UART_SetConfig+0x6a8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d130      	bne.n	8009f24 <UART_SetConfig+0x5a0>
 8009ec2:	4b57      	ldr	r3, [pc, #348]	; (800a020 <UART_SetConfig+0x69c>)
 8009ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	d826      	bhi.n	8009f1c <UART_SetConfig+0x598>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <UART_SetConfig+0x550>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009eed 	.word	0x08009eed
 8009ed8:	08009ef5 	.word	0x08009ef5
 8009edc:	08009efd 	.word	0x08009efd
 8009ee0:	08009f05 	.word	0x08009f05
 8009ee4:	08009f0d 	.word	0x08009f0d
 8009ee8:	08009f15 	.word	0x08009f15
 8009eec:	2302      	movs	r3, #2
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e01a      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e016      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009efc:	2308      	movs	r3, #8
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e012      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009f04:	2310      	movs	r3, #16
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e00e      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009f0c:	2320      	movs	r3, #32
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e00a      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009f14:	2340      	movs	r3, #64	; 0x40
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e006      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009f1c:	2380      	movs	r3, #128	; 0x80
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e002      	b.n	8009f2a <UART_SetConfig+0x5a6>
 8009f24:	2380      	movs	r3, #128	; 0x80
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a3f      	ldr	r2, [pc, #252]	; (800a02c <UART_SetConfig+0x6a8>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	f040 80f8 	bne.w	800a126 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f3a:	2b20      	cmp	r3, #32
 8009f3c:	dc46      	bgt.n	8009fcc <UART_SetConfig+0x648>
 8009f3e:	2b02      	cmp	r3, #2
 8009f40:	f2c0 8082 	blt.w	800a048 <UART_SetConfig+0x6c4>
 8009f44:	3b02      	subs	r3, #2
 8009f46:	2b1e      	cmp	r3, #30
 8009f48:	d87e      	bhi.n	800a048 <UART_SetConfig+0x6c4>
 8009f4a:	a201      	add	r2, pc, #4	; (adr r2, 8009f50 <UART_SetConfig+0x5cc>)
 8009f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f50:	08009fd3 	.word	0x08009fd3
 8009f54:	0800a049 	.word	0x0800a049
 8009f58:	08009fdb 	.word	0x08009fdb
 8009f5c:	0800a049 	.word	0x0800a049
 8009f60:	0800a049 	.word	0x0800a049
 8009f64:	0800a049 	.word	0x0800a049
 8009f68:	08009feb 	.word	0x08009feb
 8009f6c:	0800a049 	.word	0x0800a049
 8009f70:	0800a049 	.word	0x0800a049
 8009f74:	0800a049 	.word	0x0800a049
 8009f78:	0800a049 	.word	0x0800a049
 8009f7c:	0800a049 	.word	0x0800a049
 8009f80:	0800a049 	.word	0x0800a049
 8009f84:	0800a049 	.word	0x0800a049
 8009f88:	08009ffb 	.word	0x08009ffb
 8009f8c:	0800a049 	.word	0x0800a049
 8009f90:	0800a049 	.word	0x0800a049
 8009f94:	0800a049 	.word	0x0800a049
 8009f98:	0800a049 	.word	0x0800a049
 8009f9c:	0800a049 	.word	0x0800a049
 8009fa0:	0800a049 	.word	0x0800a049
 8009fa4:	0800a049 	.word	0x0800a049
 8009fa8:	0800a049 	.word	0x0800a049
 8009fac:	0800a049 	.word	0x0800a049
 8009fb0:	0800a049 	.word	0x0800a049
 8009fb4:	0800a049 	.word	0x0800a049
 8009fb8:	0800a049 	.word	0x0800a049
 8009fbc:	0800a049 	.word	0x0800a049
 8009fc0:	0800a049 	.word	0x0800a049
 8009fc4:	0800a049 	.word	0x0800a049
 8009fc8:	0800a03b 	.word	0x0800a03b
 8009fcc:	2b40      	cmp	r3, #64	; 0x40
 8009fce:	d037      	beq.n	800a040 <UART_SetConfig+0x6bc>
 8009fd0:	e03a      	b.n	800a048 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fd2:	f7fe fb1b 	bl	800860c <HAL_RCCEx_GetD3PCLK1Freq>
 8009fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fd8:	e03c      	b.n	800a054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe fb2a 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe8:	e034      	b.n	800a054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fea:	f107 0318 	add.w	r3, r7, #24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fc76 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff8:	e02c      	b.n	800a054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ffa:	4b09      	ldr	r3, [pc, #36]	; (800a020 <UART_SetConfig+0x69c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	d016      	beq.n	800a034 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a006:	4b06      	ldr	r3, [pc, #24]	; (800a020 <UART_SetConfig+0x69c>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	08db      	lsrs	r3, r3, #3
 800a00c:	f003 0303 	and.w	r3, r3, #3
 800a010:	4a07      	ldr	r2, [pc, #28]	; (800a030 <UART_SetConfig+0x6ac>)
 800a012:	fa22 f303 	lsr.w	r3, r2, r3
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a018:	e01c      	b.n	800a054 <UART_SetConfig+0x6d0>
 800a01a:	bf00      	nop
 800a01c:	40011400 	.word	0x40011400
 800a020:	58024400 	.word	0x58024400
 800a024:	40007800 	.word	0x40007800
 800a028:	40007c00 	.word	0x40007c00
 800a02c:	58000c00 	.word	0x58000c00
 800a030:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a034:	4b9d      	ldr	r3, [pc, #628]	; (800a2ac <UART_SetConfig+0x928>)
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a038:	e00c      	b.n	800a054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a03a:	4b9d      	ldr	r3, [pc, #628]	; (800a2b0 <UART_SetConfig+0x92c>)
 800a03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a03e:	e009      	b.n	800a054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a046:	e005      	b.n	800a054 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a052:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 81de 	beq.w	800a418 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	4a94      	ldr	r2, [pc, #592]	; (800a2b4 <UART_SetConfig+0x930>)
 800a062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a066:	461a      	mov	r2, r3
 800a068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a06a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a06e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	4613      	mov	r3, r2
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	4413      	add	r3, r2
 800a07a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d305      	bcc.n	800a08c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a088:	429a      	cmp	r2, r3
 800a08a:	d903      	bls.n	800a094 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a092:	e1c1      	b.n	800a418 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a096:	2200      	movs	r2, #0
 800a098:	60bb      	str	r3, [r7, #8]
 800a09a:	60fa      	str	r2, [r7, #12]
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	4a84      	ldr	r2, [pc, #528]	; (800a2b4 <UART_SetConfig+0x930>)
 800a0a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	603b      	str	r3, [r7, #0]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0b6:	f7f6 f96b 	bl	8000390 <__aeabi_uldivmod>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4610      	mov	r0, r2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f04f 0200 	mov.w	r2, #0
 800a0c6:	f04f 0300 	mov.w	r3, #0
 800a0ca:	020b      	lsls	r3, r1, #8
 800a0cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0d0:	0202      	lsls	r2, r0, #8
 800a0d2:	6979      	ldr	r1, [r7, #20]
 800a0d4:	6849      	ldr	r1, [r1, #4]
 800a0d6:	0849      	lsrs	r1, r1, #1
 800a0d8:	2000      	movs	r0, #0
 800a0da:	460c      	mov	r4, r1
 800a0dc:	4605      	mov	r5, r0
 800a0de:	eb12 0804 	adds.w	r8, r2, r4
 800a0e2:	eb43 0905 	adc.w	r9, r3, r5
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	469a      	mov	sl, r3
 800a0ee:	4693      	mov	fp, r2
 800a0f0:	4652      	mov	r2, sl
 800a0f2:	465b      	mov	r3, fp
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	f7f6 f94a 	bl	8000390 <__aeabi_uldivmod>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4613      	mov	r3, r2
 800a102:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a10a:	d308      	bcc.n	800a11e <UART_SetConfig+0x79a>
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a112:	d204      	bcs.n	800a11e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a11a:	60da      	str	r2, [r3, #12]
 800a11c:	e17c      	b.n	800a418 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a124:	e178      	b.n	800a418 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a12e:	f040 80c5 	bne.w	800a2bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a132:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a136:	2b20      	cmp	r3, #32
 800a138:	dc48      	bgt.n	800a1cc <UART_SetConfig+0x848>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	db7b      	blt.n	800a236 <UART_SetConfig+0x8b2>
 800a13e:	2b20      	cmp	r3, #32
 800a140:	d879      	bhi.n	800a236 <UART_SetConfig+0x8b2>
 800a142:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <UART_SetConfig+0x7c4>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a1d3 	.word	0x0800a1d3
 800a14c:	0800a1db 	.word	0x0800a1db
 800a150:	0800a237 	.word	0x0800a237
 800a154:	0800a237 	.word	0x0800a237
 800a158:	0800a1e3 	.word	0x0800a1e3
 800a15c:	0800a237 	.word	0x0800a237
 800a160:	0800a237 	.word	0x0800a237
 800a164:	0800a237 	.word	0x0800a237
 800a168:	0800a1f3 	.word	0x0800a1f3
 800a16c:	0800a237 	.word	0x0800a237
 800a170:	0800a237 	.word	0x0800a237
 800a174:	0800a237 	.word	0x0800a237
 800a178:	0800a237 	.word	0x0800a237
 800a17c:	0800a237 	.word	0x0800a237
 800a180:	0800a237 	.word	0x0800a237
 800a184:	0800a237 	.word	0x0800a237
 800a188:	0800a203 	.word	0x0800a203
 800a18c:	0800a237 	.word	0x0800a237
 800a190:	0800a237 	.word	0x0800a237
 800a194:	0800a237 	.word	0x0800a237
 800a198:	0800a237 	.word	0x0800a237
 800a19c:	0800a237 	.word	0x0800a237
 800a1a0:	0800a237 	.word	0x0800a237
 800a1a4:	0800a237 	.word	0x0800a237
 800a1a8:	0800a237 	.word	0x0800a237
 800a1ac:	0800a237 	.word	0x0800a237
 800a1b0:	0800a237 	.word	0x0800a237
 800a1b4:	0800a237 	.word	0x0800a237
 800a1b8:	0800a237 	.word	0x0800a237
 800a1bc:	0800a237 	.word	0x0800a237
 800a1c0:	0800a237 	.word	0x0800a237
 800a1c4:	0800a237 	.word	0x0800a237
 800a1c8:	0800a229 	.word	0x0800a229
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	d02e      	beq.n	800a22e <UART_SetConfig+0x8aa>
 800a1d0:	e031      	b.n	800a236 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1d2:	f7fc fa65 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 800a1d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1d8:	e033      	b.n	800a242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1da:	f7fc fa77 	bl	80066cc <HAL_RCC_GetPCLK2Freq>
 800a1de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1e0:	e02f      	b.n	800a242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7fe fa26 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1f0:	e027      	b.n	800a242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1f2:	f107 0318 	add.w	r3, r7, #24
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe fb72 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a200:	e01f      	b.n	800a242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a202:	4b2d      	ldr	r3, [pc, #180]	; (800a2b8 <UART_SetConfig+0x934>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0320 	and.w	r3, r3, #32
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d009      	beq.n	800a222 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a20e:	4b2a      	ldr	r3, [pc, #168]	; (800a2b8 <UART_SetConfig+0x934>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	08db      	lsrs	r3, r3, #3
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	4a24      	ldr	r2, [pc, #144]	; (800a2ac <UART_SetConfig+0x928>)
 800a21a:	fa22 f303 	lsr.w	r3, r2, r3
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a220:	e00f      	b.n	800a242 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a222:	4b22      	ldr	r3, [pc, #136]	; (800a2ac <UART_SetConfig+0x928>)
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a226:	e00c      	b.n	800a242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a228:	4b21      	ldr	r3, [pc, #132]	; (800a2b0 <UART_SetConfig+0x92c>)
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a22c:	e009      	b.n	800a242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a22e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a234:	e005      	b.n	800a242 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 80e7 	beq.w	800a418 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	4a19      	ldr	r2, [pc, #100]	; (800a2b4 <UART_SetConfig+0x930>)
 800a250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a254:	461a      	mov	r2, r3
 800a256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a258:	fbb3 f3f2 	udiv	r3, r3, r2
 800a25c:	005a      	lsls	r2, r3, #1
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	085b      	lsrs	r3, r3, #1
 800a264:	441a      	add	r2, r3
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a26e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a272:	2b0f      	cmp	r3, #15
 800a274:	d916      	bls.n	800a2a4 <UART_SetConfig+0x920>
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a27c:	d212      	bcs.n	800a2a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	b29b      	uxth	r3, r3
 800a282:	f023 030f 	bic.w	r3, r3, #15
 800a286:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	085b      	lsrs	r3, r3, #1
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	b29a      	uxth	r2, r3
 800a294:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a296:	4313      	orrs	r3, r2
 800a298:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2a0:	60da      	str	r2, [r3, #12]
 800a2a2:	e0b9      	b.n	800a418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2aa:	e0b5      	b.n	800a418 <UART_SetConfig+0xa94>
 800a2ac:	03d09000 	.word	0x03d09000
 800a2b0:	003d0900 	.word	0x003d0900
 800a2b4:	0800b448 	.word	0x0800b448
 800a2b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2c0:	2b20      	cmp	r3, #32
 800a2c2:	dc49      	bgt.n	800a358 <UART_SetConfig+0x9d4>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	db7c      	blt.n	800a3c2 <UART_SetConfig+0xa3e>
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d87a      	bhi.n	800a3c2 <UART_SetConfig+0xa3e>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <UART_SetConfig+0x950>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a35f 	.word	0x0800a35f
 800a2d8:	0800a367 	.word	0x0800a367
 800a2dc:	0800a3c3 	.word	0x0800a3c3
 800a2e0:	0800a3c3 	.word	0x0800a3c3
 800a2e4:	0800a36f 	.word	0x0800a36f
 800a2e8:	0800a3c3 	.word	0x0800a3c3
 800a2ec:	0800a3c3 	.word	0x0800a3c3
 800a2f0:	0800a3c3 	.word	0x0800a3c3
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a3c3 	.word	0x0800a3c3
 800a2fc:	0800a3c3 	.word	0x0800a3c3
 800a300:	0800a3c3 	.word	0x0800a3c3
 800a304:	0800a3c3 	.word	0x0800a3c3
 800a308:	0800a3c3 	.word	0x0800a3c3
 800a30c:	0800a3c3 	.word	0x0800a3c3
 800a310:	0800a3c3 	.word	0x0800a3c3
 800a314:	0800a38f 	.word	0x0800a38f
 800a318:	0800a3c3 	.word	0x0800a3c3
 800a31c:	0800a3c3 	.word	0x0800a3c3
 800a320:	0800a3c3 	.word	0x0800a3c3
 800a324:	0800a3c3 	.word	0x0800a3c3
 800a328:	0800a3c3 	.word	0x0800a3c3
 800a32c:	0800a3c3 	.word	0x0800a3c3
 800a330:	0800a3c3 	.word	0x0800a3c3
 800a334:	0800a3c3 	.word	0x0800a3c3
 800a338:	0800a3c3 	.word	0x0800a3c3
 800a33c:	0800a3c3 	.word	0x0800a3c3
 800a340:	0800a3c3 	.word	0x0800a3c3
 800a344:	0800a3c3 	.word	0x0800a3c3
 800a348:	0800a3c3 	.word	0x0800a3c3
 800a34c:	0800a3c3 	.word	0x0800a3c3
 800a350:	0800a3c3 	.word	0x0800a3c3
 800a354:	0800a3b5 	.word	0x0800a3b5
 800a358:	2b40      	cmp	r3, #64	; 0x40
 800a35a:	d02e      	beq.n	800a3ba <UART_SetConfig+0xa36>
 800a35c:	e031      	b.n	800a3c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a35e:	f7fc f99f 	bl	80066a0 <HAL_RCC_GetPCLK1Freq>
 800a362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a364:	e033      	b.n	800a3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a366:	f7fc f9b1 	bl	80066cc <HAL_RCC_GetPCLK2Freq>
 800a36a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a36c:	e02f      	b.n	800a3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a36e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a372:	4618      	mov	r0, r3
 800a374:	f7fe f960 	bl	8008638 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a37c:	e027      	b.n	800a3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a37e:	f107 0318 	add.w	r3, r7, #24
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe faac 	bl	80088e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38c:	e01f      	b.n	800a3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a38e:	4b2d      	ldr	r3, [pc, #180]	; (800a444 <UART_SetConfig+0xac0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f003 0320 	and.w	r3, r3, #32
 800a396:	2b00      	cmp	r3, #0
 800a398:	d009      	beq.n	800a3ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a39a:	4b2a      	ldr	r3, [pc, #168]	; (800a444 <UART_SetConfig+0xac0>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	08db      	lsrs	r3, r3, #3
 800a3a0:	f003 0303 	and.w	r3, r3, #3
 800a3a4:	4a28      	ldr	r2, [pc, #160]	; (800a448 <UART_SetConfig+0xac4>)
 800a3a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3ac:	e00f      	b.n	800a3ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a3ae:	4b26      	ldr	r3, [pc, #152]	; (800a448 <UART_SetConfig+0xac4>)
 800a3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b2:	e00c      	b.n	800a3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3b4:	4b25      	ldr	r3, [pc, #148]	; (800a44c <UART_SetConfig+0xac8>)
 800a3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b8:	e009      	b.n	800a3ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c0:	e005      	b.n	800a3ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3cc:	bf00      	nop
    }

    if (pclk != 0U)
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d021      	beq.n	800a418 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d8:	4a1d      	ldr	r2, [pc, #116]	; (800a450 <UART_SetConfig+0xacc>)
 800a3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	441a      	add	r2, r3
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	2b0f      	cmp	r3, #15
 800a3fc:	d909      	bls.n	800a412 <UART_SetConfig+0xa8e>
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a404:	d205      	bcs.n	800a412 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	b29a      	uxth	r2, r3
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	60da      	str	r2, [r3, #12]
 800a410:	e002      	b.n	800a418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2201      	movs	r2, #1
 800a424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2200      	movs	r2, #0
 800a42c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	2200      	movs	r2, #0
 800a432:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a434:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3748      	adds	r7, #72	; 0x48
 800a43c:	46bd      	mov	sp, r7
 800a43e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a442:	bf00      	nop
 800a444:	58024400 	.word	0x58024400
 800a448:	03d09000 	.word	0x03d09000
 800a44c:	003d0900 	.word	0x003d0900
 800a450:	0800b448 	.word	0x0800b448

0800a454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00a      	beq.n	800a47e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	f003 0308 	and.w	r3, r3, #8
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e8:	f003 0310 	and.w	r3, r3, #16
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50a:	f003 0320 	and.w	r3, r3, #32
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01a      	beq.n	800a56a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a552:	d10a      	bne.n	800a56a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00a      	beq.n	800a58c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	430a      	orrs	r2, r1
 800a58a:	605a      	str	r2, [r3, #4]
  }
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b098      	sub	sp, #96	; 0x60
 800a59c:	af02      	add	r7, sp, #8
 800a59e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5a8:	f7f7 f842 	bl	8001630 <HAL_GetTick>
 800a5ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0308 	and.w	r3, r3, #8
 800a5b8:	2b08      	cmp	r3, #8
 800a5ba:	d12f      	bne.n	800a61c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f88e 	bl	800a6ec <UART_WaitOnFlagUntilTimeout>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d022      	beq.n	800a61c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5de:	e853 3f00 	ldrex	r3, [r3]
 800a5e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f4:	647b      	str	r3, [r7, #68]	; 0x44
 800a5f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5fc:	e841 2300 	strex	r3, r2, [r1]
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1e6      	bne.n	800a5d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	e063      	b.n	800a6e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0304 	and.w	r3, r3, #4
 800a626:	2b04      	cmp	r3, #4
 800a628:	d149      	bne.n	800a6be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a62a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a632:	2200      	movs	r2, #0
 800a634:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f857 	bl	800a6ec <UART_WaitOnFlagUntilTimeout>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d03c      	beq.n	800a6be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	623b      	str	r3, [r7, #32]
   return(result);
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a662:	633b      	str	r3, [r7, #48]	; 0x30
 800a664:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1e6      	bne.n	800a644 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3308      	adds	r3, #8
 800a67c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	60fb      	str	r3, [r7, #12]
   return(result);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f023 0301 	bic.w	r3, r3, #1
 800a68c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3308      	adds	r3, #8
 800a694:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a696:	61fa      	str	r2, [r7, #28]
 800a698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	69b9      	ldr	r1, [r7, #24]
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e5      	bne.n	800a676 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e012      	b.n	800a6e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3758      	adds	r7, #88	; 0x58
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6fc:	e049      	b.n	800a792 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d045      	beq.n	800a792 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a706:	f7f6 ff93 	bl	8001630 <HAL_GetTick>
 800a70a:	4602      	mov	r2, r0
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	429a      	cmp	r2, r3
 800a714:	d302      	bcc.n	800a71c <UART_WaitOnFlagUntilTimeout+0x30>
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e048      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d031      	beq.n	800a792 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b08      	cmp	r3, #8
 800a73a:	d110      	bne.n	800a75e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2208      	movs	r2, #8
 800a742:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 f839 	bl	800a7bc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2208      	movs	r2, #8
 800a74e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e029      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a76c:	d111      	bne.n	800a792 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 f81f 	bl	800a7bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2220      	movs	r2, #32
 800a782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e00f      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69da      	ldr	r2, [r3, #28]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	4013      	ands	r3, r2
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	bf0c      	ite	eq
 800a7a2:	2301      	moveq	r3, #1
 800a7a4:	2300      	movne	r3, #0
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	79fb      	ldrb	r3, [r7, #7]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d0a6      	beq.n	800a6fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b095      	sub	sp, #84	; 0x54
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e2:	643b      	str	r3, [r7, #64]	; 0x40
 800a7e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e6      	bne.n	800a7c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	3308      	adds	r3, #8
 800a7fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	61fb      	str	r3, [r7, #28]
   return(result);
 800a806:	69fa      	ldr	r2, [r7, #28]
 800a808:	4b1e      	ldr	r3, [pc, #120]	; (800a884 <UART_EndRxTransfer+0xc8>)
 800a80a:	4013      	ands	r3, r2
 800a80c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	3308      	adds	r3, #8
 800a814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a816:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a81c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e5      	bne.n	800a7f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d118      	bne.n	800a864 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	e853 3f00 	ldrex	r3, [r3]
 800a83e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f023 0310 	bic.w	r3, r3, #16
 800a846:	647b      	str	r3, [r7, #68]	; 0x44
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a850:	61bb      	str	r3, [r7, #24]
 800a852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a854:	6979      	ldr	r1, [r7, #20]
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	e841 2300 	strex	r3, r2, [r1]
 800a85c:	613b      	str	r3, [r7, #16]
   return(result);
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1e6      	bne.n	800a832 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2220      	movs	r2, #32
 800a868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a878:	bf00      	nop
 800a87a:	3754      	adds	r7, #84	; 0x54
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	effffffe 	.word	0xeffffffe

0800a888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HAL_UARTEx_DisableFifoMode+0x16>
 800a89a:	2302      	movs	r3, #2
 800a89c:	e027      	b.n	800a8ee <HAL_UARTEx_DisableFifoMode+0x66>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2224      	movs	r2, #36	; 0x24
 800a8aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f022 0201 	bic.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr

0800a8fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a90e:	2302      	movs	r3, #2
 800a910:	e02d      	b.n	800a96e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2224      	movs	r2, #36	; 0x24
 800a91e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 0201 	bic.w	r2, r2, #1
 800a938:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	430a      	orrs	r2, r1
 800a94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f850 	bl	800a9f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2220      	movs	r2, #32
 800a960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a986:	2b01      	cmp	r3, #1
 800a988:	d101      	bne.n	800a98e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a98a:	2302      	movs	r3, #2
 800a98c:	e02d      	b.n	800a9ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2224      	movs	r2, #36	; 0x24
 800a99a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f022 0201 	bic.w	r2, r2, #1
 800a9b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f812 	bl	800a9f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2220      	movs	r2, #32
 800a9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d108      	bne.n	800aa16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa14:	e031      	b.n	800aa7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa16:	2310      	movs	r3, #16
 800aa18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	0e5b      	lsrs	r3, r3, #25
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	f003 0307 	and.w	r3, r3, #7
 800aa2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	0f5b      	lsrs	r3, r3, #29
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	f003 0307 	and.w	r3, r3, #7
 800aa3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	7b3a      	ldrb	r2, [r7, #12]
 800aa42:	4911      	ldr	r1, [pc, #68]	; (800aa88 <UARTEx_SetNbDataToProcess+0x94>)
 800aa44:	5c8a      	ldrb	r2, [r1, r2]
 800aa46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa4a:	7b3a      	ldrb	r2, [r7, #12]
 800aa4c:	490f      	ldr	r1, [pc, #60]	; (800aa8c <UARTEx_SetNbDataToProcess+0x98>)
 800aa4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa50:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	7b7a      	ldrb	r2, [r7, #13]
 800aa60:	4909      	ldr	r1, [pc, #36]	; (800aa88 <UARTEx_SetNbDataToProcess+0x94>)
 800aa62:	5c8a      	ldrb	r2, [r1, r2]
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa68:	7b7a      	ldrb	r2, [r7, #13]
 800aa6a:	4908      	ldr	r1, [pc, #32]	; (800aa8c <UARTEx_SetNbDataToProcess+0x98>)
 800aa6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa7a:	bf00      	nop
 800aa7c:	3714      	adds	r7, #20
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	0800b460 	.word	0x0800b460
 800aa8c:	0800b468 	.word	0x0800b468

0800aa90 <_vsniprintf_r>:
 800aa90:	b530      	push	{r4, r5, lr}
 800aa92:	4614      	mov	r4, r2
 800aa94:	2c00      	cmp	r4, #0
 800aa96:	b09b      	sub	sp, #108	; 0x6c
 800aa98:	4605      	mov	r5, r0
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	da05      	bge.n	800aaaa <_vsniprintf_r+0x1a>
 800aa9e:	238b      	movs	r3, #139	; 0x8b
 800aaa0:	6003      	str	r3, [r0, #0]
 800aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa6:	b01b      	add	sp, #108	; 0x6c
 800aaa8:	bd30      	pop	{r4, r5, pc}
 800aaaa:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aaae:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aab2:	bf14      	ite	ne
 800aab4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aab8:	4623      	moveq	r3, r4
 800aaba:	9302      	str	r3, [sp, #8]
 800aabc:	9305      	str	r3, [sp, #20]
 800aabe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aac2:	9100      	str	r1, [sp, #0]
 800aac4:	9104      	str	r1, [sp, #16]
 800aac6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aaca:	4669      	mov	r1, sp
 800aacc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aace:	f000 f99f 	bl	800ae10 <_svfiprintf_r>
 800aad2:	1c43      	adds	r3, r0, #1
 800aad4:	bfbc      	itt	lt
 800aad6:	238b      	movlt	r3, #139	; 0x8b
 800aad8:	602b      	strlt	r3, [r5, #0]
 800aada:	2c00      	cmp	r4, #0
 800aadc:	d0e3      	beq.n	800aaa6 <_vsniprintf_r+0x16>
 800aade:	9b00      	ldr	r3, [sp, #0]
 800aae0:	2200      	movs	r2, #0
 800aae2:	701a      	strb	r2, [r3, #0]
 800aae4:	e7df      	b.n	800aaa6 <_vsniprintf_r+0x16>
	...

0800aae8 <vsniprintf>:
 800aae8:	b507      	push	{r0, r1, r2, lr}
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	4613      	mov	r3, r2
 800aaee:	460a      	mov	r2, r1
 800aaf0:	4601      	mov	r1, r0
 800aaf2:	4803      	ldr	r0, [pc, #12]	; (800ab00 <vsniprintf+0x18>)
 800aaf4:	6800      	ldr	r0, [r0, #0]
 800aaf6:	f7ff ffcb 	bl	800aa90 <_vsniprintf_r>
 800aafa:	b003      	add	sp, #12
 800aafc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab00:	2400005c 	.word	0x2400005c

0800ab04 <memset>:
 800ab04:	4402      	add	r2, r0
 800ab06:	4603      	mov	r3, r0
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d100      	bne.n	800ab0e <memset+0xa>
 800ab0c:	4770      	bx	lr
 800ab0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab12:	e7f9      	b.n	800ab08 <memset+0x4>

0800ab14 <__errno>:
 800ab14:	4b01      	ldr	r3, [pc, #4]	; (800ab1c <__errno+0x8>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	2400005c 	.word	0x2400005c

0800ab20 <__libc_init_array>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	4d0d      	ldr	r5, [pc, #52]	; (800ab58 <__libc_init_array+0x38>)
 800ab24:	4c0d      	ldr	r4, [pc, #52]	; (800ab5c <__libc_init_array+0x3c>)
 800ab26:	1b64      	subs	r4, r4, r5
 800ab28:	10a4      	asrs	r4, r4, #2
 800ab2a:	2600      	movs	r6, #0
 800ab2c:	42a6      	cmp	r6, r4
 800ab2e:	d109      	bne.n	800ab44 <__libc_init_array+0x24>
 800ab30:	4d0b      	ldr	r5, [pc, #44]	; (800ab60 <__libc_init_array+0x40>)
 800ab32:	4c0c      	ldr	r4, [pc, #48]	; (800ab64 <__libc_init_array+0x44>)
 800ab34:	f000 fc6a 	bl	800b40c <_init>
 800ab38:	1b64      	subs	r4, r4, r5
 800ab3a:	10a4      	asrs	r4, r4, #2
 800ab3c:	2600      	movs	r6, #0
 800ab3e:	42a6      	cmp	r6, r4
 800ab40:	d105      	bne.n	800ab4e <__libc_init_array+0x2e>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab48:	4798      	blx	r3
 800ab4a:	3601      	adds	r6, #1
 800ab4c:	e7ee      	b.n	800ab2c <__libc_init_array+0xc>
 800ab4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab52:	4798      	blx	r3
 800ab54:	3601      	adds	r6, #1
 800ab56:	e7f2      	b.n	800ab3e <__libc_init_array+0x1e>
 800ab58:	0800b4ac 	.word	0x0800b4ac
 800ab5c:	0800b4ac 	.word	0x0800b4ac
 800ab60:	0800b4ac 	.word	0x0800b4ac
 800ab64:	0800b4b0 	.word	0x0800b4b0

0800ab68 <__retarget_lock_acquire_recursive>:
 800ab68:	4770      	bx	lr

0800ab6a <__retarget_lock_release_recursive>:
 800ab6a:	4770      	bx	lr

0800ab6c <_free_r>:
 800ab6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab6e:	2900      	cmp	r1, #0
 800ab70:	d044      	beq.n	800abfc <_free_r+0x90>
 800ab72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab76:	9001      	str	r0, [sp, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab7e:	bfb8      	it	lt
 800ab80:	18e4      	addlt	r4, r4, r3
 800ab82:	f000 f8df 	bl	800ad44 <__malloc_lock>
 800ab86:	4a1e      	ldr	r2, [pc, #120]	; (800ac00 <_free_r+0x94>)
 800ab88:	9801      	ldr	r0, [sp, #4]
 800ab8a:	6813      	ldr	r3, [r2, #0]
 800ab8c:	b933      	cbnz	r3, 800ab9c <_free_r+0x30>
 800ab8e:	6063      	str	r3, [r4, #4]
 800ab90:	6014      	str	r4, [r2, #0]
 800ab92:	b003      	add	sp, #12
 800ab94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab98:	f000 b8da 	b.w	800ad50 <__malloc_unlock>
 800ab9c:	42a3      	cmp	r3, r4
 800ab9e:	d908      	bls.n	800abb2 <_free_r+0x46>
 800aba0:	6825      	ldr	r5, [r4, #0]
 800aba2:	1961      	adds	r1, r4, r5
 800aba4:	428b      	cmp	r3, r1
 800aba6:	bf01      	itttt	eq
 800aba8:	6819      	ldreq	r1, [r3, #0]
 800abaa:	685b      	ldreq	r3, [r3, #4]
 800abac:	1949      	addeq	r1, r1, r5
 800abae:	6021      	streq	r1, [r4, #0]
 800abb0:	e7ed      	b.n	800ab8e <_free_r+0x22>
 800abb2:	461a      	mov	r2, r3
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	b10b      	cbz	r3, 800abbc <_free_r+0x50>
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d9fa      	bls.n	800abb2 <_free_r+0x46>
 800abbc:	6811      	ldr	r1, [r2, #0]
 800abbe:	1855      	adds	r5, r2, r1
 800abc0:	42a5      	cmp	r5, r4
 800abc2:	d10b      	bne.n	800abdc <_free_r+0x70>
 800abc4:	6824      	ldr	r4, [r4, #0]
 800abc6:	4421      	add	r1, r4
 800abc8:	1854      	adds	r4, r2, r1
 800abca:	42a3      	cmp	r3, r4
 800abcc:	6011      	str	r1, [r2, #0]
 800abce:	d1e0      	bne.n	800ab92 <_free_r+0x26>
 800abd0:	681c      	ldr	r4, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	6053      	str	r3, [r2, #4]
 800abd6:	440c      	add	r4, r1
 800abd8:	6014      	str	r4, [r2, #0]
 800abda:	e7da      	b.n	800ab92 <_free_r+0x26>
 800abdc:	d902      	bls.n	800abe4 <_free_r+0x78>
 800abde:	230c      	movs	r3, #12
 800abe0:	6003      	str	r3, [r0, #0]
 800abe2:	e7d6      	b.n	800ab92 <_free_r+0x26>
 800abe4:	6825      	ldr	r5, [r4, #0]
 800abe6:	1961      	adds	r1, r4, r5
 800abe8:	428b      	cmp	r3, r1
 800abea:	bf04      	itt	eq
 800abec:	6819      	ldreq	r1, [r3, #0]
 800abee:	685b      	ldreq	r3, [r3, #4]
 800abf0:	6063      	str	r3, [r4, #4]
 800abf2:	bf04      	itt	eq
 800abf4:	1949      	addeq	r1, r1, r5
 800abf6:	6021      	streq	r1, [r4, #0]
 800abf8:	6054      	str	r4, [r2, #4]
 800abfa:	e7ca      	b.n	800ab92 <_free_r+0x26>
 800abfc:	b003      	add	sp, #12
 800abfe:	bd30      	pop	{r4, r5, pc}
 800ac00:	240023f4 	.word	0x240023f4

0800ac04 <sbrk_aligned>:
 800ac04:	b570      	push	{r4, r5, r6, lr}
 800ac06:	4e0e      	ldr	r6, [pc, #56]	; (800ac40 <sbrk_aligned+0x3c>)
 800ac08:	460c      	mov	r4, r1
 800ac0a:	6831      	ldr	r1, [r6, #0]
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	b911      	cbnz	r1, 800ac16 <sbrk_aligned+0x12>
 800ac10:	f000 fba6 	bl	800b360 <_sbrk_r>
 800ac14:	6030      	str	r0, [r6, #0]
 800ac16:	4621      	mov	r1, r4
 800ac18:	4628      	mov	r0, r5
 800ac1a:	f000 fba1 	bl	800b360 <_sbrk_r>
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	d00a      	beq.n	800ac38 <sbrk_aligned+0x34>
 800ac22:	1cc4      	adds	r4, r0, #3
 800ac24:	f024 0403 	bic.w	r4, r4, #3
 800ac28:	42a0      	cmp	r0, r4
 800ac2a:	d007      	beq.n	800ac3c <sbrk_aligned+0x38>
 800ac2c:	1a21      	subs	r1, r4, r0
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f000 fb96 	bl	800b360 <_sbrk_r>
 800ac34:	3001      	adds	r0, #1
 800ac36:	d101      	bne.n	800ac3c <sbrk_aligned+0x38>
 800ac38:	f04f 34ff 	mov.w	r4, #4294967295
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}
 800ac40:	240023f8 	.word	0x240023f8

0800ac44 <_malloc_r>:
 800ac44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac48:	1ccd      	adds	r5, r1, #3
 800ac4a:	f025 0503 	bic.w	r5, r5, #3
 800ac4e:	3508      	adds	r5, #8
 800ac50:	2d0c      	cmp	r5, #12
 800ac52:	bf38      	it	cc
 800ac54:	250c      	movcc	r5, #12
 800ac56:	2d00      	cmp	r5, #0
 800ac58:	4607      	mov	r7, r0
 800ac5a:	db01      	blt.n	800ac60 <_malloc_r+0x1c>
 800ac5c:	42a9      	cmp	r1, r5
 800ac5e:	d905      	bls.n	800ac6c <_malloc_r+0x28>
 800ac60:	230c      	movs	r3, #12
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	2600      	movs	r6, #0
 800ac66:	4630      	mov	r0, r6
 800ac68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad40 <_malloc_r+0xfc>
 800ac70:	f000 f868 	bl	800ad44 <__malloc_lock>
 800ac74:	f8d8 3000 	ldr.w	r3, [r8]
 800ac78:	461c      	mov	r4, r3
 800ac7a:	bb5c      	cbnz	r4, 800acd4 <_malloc_r+0x90>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f7ff ffc0 	bl	800ac04 <sbrk_aligned>
 800ac84:	1c43      	adds	r3, r0, #1
 800ac86:	4604      	mov	r4, r0
 800ac88:	d155      	bne.n	800ad36 <_malloc_r+0xf2>
 800ac8a:	f8d8 4000 	ldr.w	r4, [r8]
 800ac8e:	4626      	mov	r6, r4
 800ac90:	2e00      	cmp	r6, #0
 800ac92:	d145      	bne.n	800ad20 <_malloc_r+0xdc>
 800ac94:	2c00      	cmp	r4, #0
 800ac96:	d048      	beq.n	800ad2a <_malloc_r+0xe6>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4638      	mov	r0, r7
 800ac9e:	eb04 0903 	add.w	r9, r4, r3
 800aca2:	f000 fb5d 	bl	800b360 <_sbrk_r>
 800aca6:	4581      	cmp	r9, r0
 800aca8:	d13f      	bne.n	800ad2a <_malloc_r+0xe6>
 800acaa:	6821      	ldr	r1, [r4, #0]
 800acac:	1a6d      	subs	r5, r5, r1
 800acae:	4629      	mov	r1, r5
 800acb0:	4638      	mov	r0, r7
 800acb2:	f7ff ffa7 	bl	800ac04 <sbrk_aligned>
 800acb6:	3001      	adds	r0, #1
 800acb8:	d037      	beq.n	800ad2a <_malloc_r+0xe6>
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	442b      	add	r3, r5
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	f8d8 3000 	ldr.w	r3, [r8]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d038      	beq.n	800ad3a <_malloc_r+0xf6>
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	42a2      	cmp	r2, r4
 800accc:	d12b      	bne.n	800ad26 <_malloc_r+0xe2>
 800acce:	2200      	movs	r2, #0
 800acd0:	605a      	str	r2, [r3, #4]
 800acd2:	e00f      	b.n	800acf4 <_malloc_r+0xb0>
 800acd4:	6822      	ldr	r2, [r4, #0]
 800acd6:	1b52      	subs	r2, r2, r5
 800acd8:	d41f      	bmi.n	800ad1a <_malloc_r+0xd6>
 800acda:	2a0b      	cmp	r2, #11
 800acdc:	d917      	bls.n	800ad0e <_malloc_r+0xca>
 800acde:	1961      	adds	r1, r4, r5
 800ace0:	42a3      	cmp	r3, r4
 800ace2:	6025      	str	r5, [r4, #0]
 800ace4:	bf18      	it	ne
 800ace6:	6059      	strne	r1, [r3, #4]
 800ace8:	6863      	ldr	r3, [r4, #4]
 800acea:	bf08      	it	eq
 800acec:	f8c8 1000 	streq.w	r1, [r8]
 800acf0:	5162      	str	r2, [r4, r5]
 800acf2:	604b      	str	r3, [r1, #4]
 800acf4:	4638      	mov	r0, r7
 800acf6:	f104 060b 	add.w	r6, r4, #11
 800acfa:	f000 f829 	bl	800ad50 <__malloc_unlock>
 800acfe:	f026 0607 	bic.w	r6, r6, #7
 800ad02:	1d23      	adds	r3, r4, #4
 800ad04:	1af2      	subs	r2, r6, r3
 800ad06:	d0ae      	beq.n	800ac66 <_malloc_r+0x22>
 800ad08:	1b9b      	subs	r3, r3, r6
 800ad0a:	50a3      	str	r3, [r4, r2]
 800ad0c:	e7ab      	b.n	800ac66 <_malloc_r+0x22>
 800ad0e:	42a3      	cmp	r3, r4
 800ad10:	6862      	ldr	r2, [r4, #4]
 800ad12:	d1dd      	bne.n	800acd0 <_malloc_r+0x8c>
 800ad14:	f8c8 2000 	str.w	r2, [r8]
 800ad18:	e7ec      	b.n	800acf4 <_malloc_r+0xb0>
 800ad1a:	4623      	mov	r3, r4
 800ad1c:	6864      	ldr	r4, [r4, #4]
 800ad1e:	e7ac      	b.n	800ac7a <_malloc_r+0x36>
 800ad20:	4634      	mov	r4, r6
 800ad22:	6876      	ldr	r6, [r6, #4]
 800ad24:	e7b4      	b.n	800ac90 <_malloc_r+0x4c>
 800ad26:	4613      	mov	r3, r2
 800ad28:	e7cc      	b.n	800acc4 <_malloc_r+0x80>
 800ad2a:	230c      	movs	r3, #12
 800ad2c:	603b      	str	r3, [r7, #0]
 800ad2e:	4638      	mov	r0, r7
 800ad30:	f000 f80e 	bl	800ad50 <__malloc_unlock>
 800ad34:	e797      	b.n	800ac66 <_malloc_r+0x22>
 800ad36:	6025      	str	r5, [r4, #0]
 800ad38:	e7dc      	b.n	800acf4 <_malloc_r+0xb0>
 800ad3a:	605b      	str	r3, [r3, #4]
 800ad3c:	deff      	udf	#255	; 0xff
 800ad3e:	bf00      	nop
 800ad40:	240023f4 	.word	0x240023f4

0800ad44 <__malloc_lock>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__malloc_lock+0x8>)
 800ad46:	f7ff bf0f 	b.w	800ab68 <__retarget_lock_acquire_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	240023f0 	.word	0x240023f0

0800ad50 <__malloc_unlock>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__malloc_unlock+0x8>)
 800ad52:	f7ff bf0a 	b.w	800ab6a <__retarget_lock_release_recursive>
 800ad56:	bf00      	nop
 800ad58:	240023f0 	.word	0x240023f0

0800ad5c <__ssputs_r>:
 800ad5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad60:	688e      	ldr	r6, [r1, #8]
 800ad62:	461f      	mov	r7, r3
 800ad64:	42be      	cmp	r6, r7
 800ad66:	680b      	ldr	r3, [r1, #0]
 800ad68:	4682      	mov	sl, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	4690      	mov	r8, r2
 800ad6e:	d82c      	bhi.n	800adca <__ssputs_r+0x6e>
 800ad70:	898a      	ldrh	r2, [r1, #12]
 800ad72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad76:	d026      	beq.n	800adc6 <__ssputs_r+0x6a>
 800ad78:	6965      	ldr	r5, [r4, #20]
 800ad7a:	6909      	ldr	r1, [r1, #16]
 800ad7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad80:	eba3 0901 	sub.w	r9, r3, r1
 800ad84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad88:	1c7b      	adds	r3, r7, #1
 800ad8a:	444b      	add	r3, r9
 800ad8c:	106d      	asrs	r5, r5, #1
 800ad8e:	429d      	cmp	r5, r3
 800ad90:	bf38      	it	cc
 800ad92:	461d      	movcc	r5, r3
 800ad94:	0553      	lsls	r3, r2, #21
 800ad96:	d527      	bpl.n	800ade8 <__ssputs_r+0x8c>
 800ad98:	4629      	mov	r1, r5
 800ad9a:	f7ff ff53 	bl	800ac44 <_malloc_r>
 800ad9e:	4606      	mov	r6, r0
 800ada0:	b360      	cbz	r0, 800adfc <__ssputs_r+0xa0>
 800ada2:	6921      	ldr	r1, [r4, #16]
 800ada4:	464a      	mov	r2, r9
 800ada6:	f000 faeb 	bl	800b380 <memcpy>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800adb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	6126      	str	r6, [r4, #16]
 800adb8:	6165      	str	r5, [r4, #20]
 800adba:	444e      	add	r6, r9
 800adbc:	eba5 0509 	sub.w	r5, r5, r9
 800adc0:	6026      	str	r6, [r4, #0]
 800adc2:	60a5      	str	r5, [r4, #8]
 800adc4:	463e      	mov	r6, r7
 800adc6:	42be      	cmp	r6, r7
 800adc8:	d900      	bls.n	800adcc <__ssputs_r+0x70>
 800adca:	463e      	mov	r6, r7
 800adcc:	6820      	ldr	r0, [r4, #0]
 800adce:	4632      	mov	r2, r6
 800add0:	4641      	mov	r1, r8
 800add2:	f000 faab 	bl	800b32c <memmove>
 800add6:	68a3      	ldr	r3, [r4, #8]
 800add8:	1b9b      	subs	r3, r3, r6
 800adda:	60a3      	str	r3, [r4, #8]
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	4433      	add	r3, r6
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	2000      	movs	r0, #0
 800ade4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade8:	462a      	mov	r2, r5
 800adea:	f000 fad7 	bl	800b39c <_realloc_r>
 800adee:	4606      	mov	r6, r0
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d1e0      	bne.n	800adb6 <__ssputs_r+0x5a>
 800adf4:	6921      	ldr	r1, [r4, #16]
 800adf6:	4650      	mov	r0, sl
 800adf8:	f7ff feb8 	bl	800ab6c <_free_r>
 800adfc:	230c      	movs	r3, #12
 800adfe:	f8ca 3000 	str.w	r3, [sl]
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0e:	e7e9      	b.n	800ade4 <__ssputs_r+0x88>

0800ae10 <_svfiprintf_r>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	4698      	mov	r8, r3
 800ae16:	898b      	ldrh	r3, [r1, #12]
 800ae18:	061b      	lsls	r3, r3, #24
 800ae1a:	b09d      	sub	sp, #116	; 0x74
 800ae1c:	4607      	mov	r7, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	4614      	mov	r4, r2
 800ae22:	d50e      	bpl.n	800ae42 <_svfiprintf_r+0x32>
 800ae24:	690b      	ldr	r3, [r1, #16]
 800ae26:	b963      	cbnz	r3, 800ae42 <_svfiprintf_r+0x32>
 800ae28:	2140      	movs	r1, #64	; 0x40
 800ae2a:	f7ff ff0b 	bl	800ac44 <_malloc_r>
 800ae2e:	6028      	str	r0, [r5, #0]
 800ae30:	6128      	str	r0, [r5, #16]
 800ae32:	b920      	cbnz	r0, 800ae3e <_svfiprintf_r+0x2e>
 800ae34:	230c      	movs	r3, #12
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3c:	e0d0      	b.n	800afe0 <_svfiprintf_r+0x1d0>
 800ae3e:	2340      	movs	r3, #64	; 0x40
 800ae40:	616b      	str	r3, [r5, #20]
 800ae42:	2300      	movs	r3, #0
 800ae44:	9309      	str	r3, [sp, #36]	; 0x24
 800ae46:	2320      	movs	r3, #32
 800ae48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae50:	2330      	movs	r3, #48	; 0x30
 800ae52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aff8 <_svfiprintf_r+0x1e8>
 800ae56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae5a:	f04f 0901 	mov.w	r9, #1
 800ae5e:	4623      	mov	r3, r4
 800ae60:	469a      	mov	sl, r3
 800ae62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae66:	b10a      	cbz	r2, 800ae6c <_svfiprintf_r+0x5c>
 800ae68:	2a25      	cmp	r2, #37	; 0x25
 800ae6a:	d1f9      	bne.n	800ae60 <_svfiprintf_r+0x50>
 800ae6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae70:	d00b      	beq.n	800ae8a <_svfiprintf_r+0x7a>
 800ae72:	465b      	mov	r3, fp
 800ae74:	4622      	mov	r2, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	4638      	mov	r0, r7
 800ae7a:	f7ff ff6f 	bl	800ad5c <__ssputs_r>
 800ae7e:	3001      	adds	r0, #1
 800ae80:	f000 80a9 	beq.w	800afd6 <_svfiprintf_r+0x1c6>
 800ae84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae86:	445a      	add	r2, fp
 800ae88:	9209      	str	r2, [sp, #36]	; 0x24
 800ae8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 80a1 	beq.w	800afd6 <_svfiprintf_r+0x1c6>
 800ae94:	2300      	movs	r3, #0
 800ae96:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae9e:	f10a 0a01 	add.w	sl, sl, #1
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	9307      	str	r3, [sp, #28]
 800aea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aeaa:	931a      	str	r3, [sp, #104]	; 0x68
 800aeac:	4654      	mov	r4, sl
 800aeae:	2205      	movs	r2, #5
 800aeb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb4:	4850      	ldr	r0, [pc, #320]	; (800aff8 <_svfiprintf_r+0x1e8>)
 800aeb6:	f7f5 fa1b 	bl	80002f0 <memchr>
 800aeba:	9a04      	ldr	r2, [sp, #16]
 800aebc:	b9d8      	cbnz	r0, 800aef6 <_svfiprintf_r+0xe6>
 800aebe:	06d0      	lsls	r0, r2, #27
 800aec0:	bf44      	itt	mi
 800aec2:	2320      	movmi	r3, #32
 800aec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec8:	0711      	lsls	r1, r2, #28
 800aeca:	bf44      	itt	mi
 800aecc:	232b      	movmi	r3, #43	; 0x2b
 800aece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aed2:	f89a 3000 	ldrb.w	r3, [sl]
 800aed6:	2b2a      	cmp	r3, #42	; 0x2a
 800aed8:	d015      	beq.n	800af06 <_svfiprintf_r+0xf6>
 800aeda:	9a07      	ldr	r2, [sp, #28]
 800aedc:	4654      	mov	r4, sl
 800aede:	2000      	movs	r0, #0
 800aee0:	f04f 0c0a 	mov.w	ip, #10
 800aee4:	4621      	mov	r1, r4
 800aee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeea:	3b30      	subs	r3, #48	; 0x30
 800aeec:	2b09      	cmp	r3, #9
 800aeee:	d94d      	bls.n	800af8c <_svfiprintf_r+0x17c>
 800aef0:	b1b0      	cbz	r0, 800af20 <_svfiprintf_r+0x110>
 800aef2:	9207      	str	r2, [sp, #28]
 800aef4:	e014      	b.n	800af20 <_svfiprintf_r+0x110>
 800aef6:	eba0 0308 	sub.w	r3, r0, r8
 800aefa:	fa09 f303 	lsl.w	r3, r9, r3
 800aefe:	4313      	orrs	r3, r2
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	46a2      	mov	sl, r4
 800af04:	e7d2      	b.n	800aeac <_svfiprintf_r+0x9c>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	1d19      	adds	r1, r3, #4
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	9103      	str	r1, [sp, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfbb      	ittet	lt
 800af12:	425b      	neglt	r3, r3
 800af14:	f042 0202 	orrlt.w	r2, r2, #2
 800af18:	9307      	strge	r3, [sp, #28]
 800af1a:	9307      	strlt	r3, [sp, #28]
 800af1c:	bfb8      	it	lt
 800af1e:	9204      	strlt	r2, [sp, #16]
 800af20:	7823      	ldrb	r3, [r4, #0]
 800af22:	2b2e      	cmp	r3, #46	; 0x2e
 800af24:	d10c      	bne.n	800af40 <_svfiprintf_r+0x130>
 800af26:	7863      	ldrb	r3, [r4, #1]
 800af28:	2b2a      	cmp	r3, #42	; 0x2a
 800af2a:	d134      	bne.n	800af96 <_svfiprintf_r+0x186>
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	1d1a      	adds	r2, r3, #4
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	9203      	str	r2, [sp, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfb8      	it	lt
 800af38:	f04f 33ff 	movlt.w	r3, #4294967295
 800af3c:	3402      	adds	r4, #2
 800af3e:	9305      	str	r3, [sp, #20]
 800af40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b008 <_svfiprintf_r+0x1f8>
 800af44:	7821      	ldrb	r1, [r4, #0]
 800af46:	2203      	movs	r2, #3
 800af48:	4650      	mov	r0, sl
 800af4a:	f7f5 f9d1 	bl	80002f0 <memchr>
 800af4e:	b138      	cbz	r0, 800af60 <_svfiprintf_r+0x150>
 800af50:	9b04      	ldr	r3, [sp, #16]
 800af52:	eba0 000a 	sub.w	r0, r0, sl
 800af56:	2240      	movs	r2, #64	; 0x40
 800af58:	4082      	lsls	r2, r0
 800af5a:	4313      	orrs	r3, r2
 800af5c:	3401      	adds	r4, #1
 800af5e:	9304      	str	r3, [sp, #16]
 800af60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af64:	4825      	ldr	r0, [pc, #148]	; (800affc <_svfiprintf_r+0x1ec>)
 800af66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af6a:	2206      	movs	r2, #6
 800af6c:	f7f5 f9c0 	bl	80002f0 <memchr>
 800af70:	2800      	cmp	r0, #0
 800af72:	d038      	beq.n	800afe6 <_svfiprintf_r+0x1d6>
 800af74:	4b22      	ldr	r3, [pc, #136]	; (800b000 <_svfiprintf_r+0x1f0>)
 800af76:	bb1b      	cbnz	r3, 800afc0 <_svfiprintf_r+0x1b0>
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	3307      	adds	r3, #7
 800af7c:	f023 0307 	bic.w	r3, r3, #7
 800af80:	3308      	adds	r3, #8
 800af82:	9303      	str	r3, [sp, #12]
 800af84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af86:	4433      	add	r3, r6
 800af88:	9309      	str	r3, [sp, #36]	; 0x24
 800af8a:	e768      	b.n	800ae5e <_svfiprintf_r+0x4e>
 800af8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af90:	460c      	mov	r4, r1
 800af92:	2001      	movs	r0, #1
 800af94:	e7a6      	b.n	800aee4 <_svfiprintf_r+0xd4>
 800af96:	2300      	movs	r3, #0
 800af98:	3401      	adds	r4, #1
 800af9a:	9305      	str	r3, [sp, #20]
 800af9c:	4619      	mov	r1, r3
 800af9e:	f04f 0c0a 	mov.w	ip, #10
 800afa2:	4620      	mov	r0, r4
 800afa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa8:	3a30      	subs	r2, #48	; 0x30
 800afaa:	2a09      	cmp	r2, #9
 800afac:	d903      	bls.n	800afb6 <_svfiprintf_r+0x1a6>
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0c6      	beq.n	800af40 <_svfiprintf_r+0x130>
 800afb2:	9105      	str	r1, [sp, #20]
 800afb4:	e7c4      	b.n	800af40 <_svfiprintf_r+0x130>
 800afb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800afba:	4604      	mov	r4, r0
 800afbc:	2301      	movs	r3, #1
 800afbe:	e7f0      	b.n	800afa2 <_svfiprintf_r+0x192>
 800afc0:	ab03      	add	r3, sp, #12
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	462a      	mov	r2, r5
 800afc6:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <_svfiprintf_r+0x1f4>)
 800afc8:	a904      	add	r1, sp, #16
 800afca:	4638      	mov	r0, r7
 800afcc:	f3af 8000 	nop.w
 800afd0:	1c42      	adds	r2, r0, #1
 800afd2:	4606      	mov	r6, r0
 800afd4:	d1d6      	bne.n	800af84 <_svfiprintf_r+0x174>
 800afd6:	89ab      	ldrh	r3, [r5, #12]
 800afd8:	065b      	lsls	r3, r3, #25
 800afda:	f53f af2d 	bmi.w	800ae38 <_svfiprintf_r+0x28>
 800afde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afe0:	b01d      	add	sp, #116	; 0x74
 800afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	462a      	mov	r2, r5
 800afec:	4b05      	ldr	r3, [pc, #20]	; (800b004 <_svfiprintf_r+0x1f4>)
 800afee:	a904      	add	r1, sp, #16
 800aff0:	4638      	mov	r0, r7
 800aff2:	f000 f879 	bl	800b0e8 <_printf_i>
 800aff6:	e7eb      	b.n	800afd0 <_svfiprintf_r+0x1c0>
 800aff8:	0800b470 	.word	0x0800b470
 800affc:	0800b47a 	.word	0x0800b47a
 800b000:	00000000 	.word	0x00000000
 800b004:	0800ad5d 	.word	0x0800ad5d
 800b008:	0800b476 	.word	0x0800b476

0800b00c <_printf_common>:
 800b00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b010:	4616      	mov	r6, r2
 800b012:	4699      	mov	r9, r3
 800b014:	688a      	ldr	r2, [r1, #8]
 800b016:	690b      	ldr	r3, [r1, #16]
 800b018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b01c:	4293      	cmp	r3, r2
 800b01e:	bfb8      	it	lt
 800b020:	4613      	movlt	r3, r2
 800b022:	6033      	str	r3, [r6, #0]
 800b024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b028:	4607      	mov	r7, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	b10a      	cbz	r2, 800b032 <_printf_common+0x26>
 800b02e:	3301      	adds	r3, #1
 800b030:	6033      	str	r3, [r6, #0]
 800b032:	6823      	ldr	r3, [r4, #0]
 800b034:	0699      	lsls	r1, r3, #26
 800b036:	bf42      	ittt	mi
 800b038:	6833      	ldrmi	r3, [r6, #0]
 800b03a:	3302      	addmi	r3, #2
 800b03c:	6033      	strmi	r3, [r6, #0]
 800b03e:	6825      	ldr	r5, [r4, #0]
 800b040:	f015 0506 	ands.w	r5, r5, #6
 800b044:	d106      	bne.n	800b054 <_printf_common+0x48>
 800b046:	f104 0a19 	add.w	sl, r4, #25
 800b04a:	68e3      	ldr	r3, [r4, #12]
 800b04c:	6832      	ldr	r2, [r6, #0]
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	42ab      	cmp	r3, r5
 800b052:	dc26      	bgt.n	800b0a2 <_printf_common+0x96>
 800b054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b058:	1e13      	subs	r3, r2, #0
 800b05a:	6822      	ldr	r2, [r4, #0]
 800b05c:	bf18      	it	ne
 800b05e:	2301      	movne	r3, #1
 800b060:	0692      	lsls	r2, r2, #26
 800b062:	d42b      	bmi.n	800b0bc <_printf_common+0xb0>
 800b064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b068:	4649      	mov	r1, r9
 800b06a:	4638      	mov	r0, r7
 800b06c:	47c0      	blx	r8
 800b06e:	3001      	adds	r0, #1
 800b070:	d01e      	beq.n	800b0b0 <_printf_common+0xa4>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	6922      	ldr	r2, [r4, #16]
 800b076:	f003 0306 	and.w	r3, r3, #6
 800b07a:	2b04      	cmp	r3, #4
 800b07c:	bf02      	ittt	eq
 800b07e:	68e5      	ldreq	r5, [r4, #12]
 800b080:	6833      	ldreq	r3, [r6, #0]
 800b082:	1aed      	subeq	r5, r5, r3
 800b084:	68a3      	ldr	r3, [r4, #8]
 800b086:	bf0c      	ite	eq
 800b088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b08c:	2500      	movne	r5, #0
 800b08e:	4293      	cmp	r3, r2
 800b090:	bfc4      	itt	gt
 800b092:	1a9b      	subgt	r3, r3, r2
 800b094:	18ed      	addgt	r5, r5, r3
 800b096:	2600      	movs	r6, #0
 800b098:	341a      	adds	r4, #26
 800b09a:	42b5      	cmp	r5, r6
 800b09c:	d11a      	bne.n	800b0d4 <_printf_common+0xc8>
 800b09e:	2000      	movs	r0, #0
 800b0a0:	e008      	b.n	800b0b4 <_printf_common+0xa8>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	4652      	mov	r2, sl
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	4638      	mov	r0, r7
 800b0aa:	47c0      	blx	r8
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	d103      	bne.n	800b0b8 <_printf_common+0xac>
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b8:	3501      	adds	r5, #1
 800b0ba:	e7c6      	b.n	800b04a <_printf_common+0x3e>
 800b0bc:	18e1      	adds	r1, r4, r3
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	2030      	movs	r0, #48	; 0x30
 800b0c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0c6:	4422      	add	r2, r4
 800b0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0d0:	3302      	adds	r3, #2
 800b0d2:	e7c7      	b.n	800b064 <_printf_common+0x58>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	4649      	mov	r1, r9
 800b0da:	4638      	mov	r0, r7
 800b0dc:	47c0      	blx	r8
 800b0de:	3001      	adds	r0, #1
 800b0e0:	d0e6      	beq.n	800b0b0 <_printf_common+0xa4>
 800b0e2:	3601      	adds	r6, #1
 800b0e4:	e7d9      	b.n	800b09a <_printf_common+0x8e>
	...

0800b0e8 <_printf_i>:
 800b0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	7e0f      	ldrb	r7, [r1, #24]
 800b0ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b0f0:	2f78      	cmp	r7, #120	; 0x78
 800b0f2:	4691      	mov	r9, r2
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	469a      	mov	sl, r3
 800b0fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b0fe:	d807      	bhi.n	800b110 <_printf_i+0x28>
 800b100:	2f62      	cmp	r7, #98	; 0x62
 800b102:	d80a      	bhi.n	800b11a <_printf_i+0x32>
 800b104:	2f00      	cmp	r7, #0
 800b106:	f000 80d4 	beq.w	800b2b2 <_printf_i+0x1ca>
 800b10a:	2f58      	cmp	r7, #88	; 0x58
 800b10c:	f000 80c0 	beq.w	800b290 <_printf_i+0x1a8>
 800b110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b118:	e03a      	b.n	800b190 <_printf_i+0xa8>
 800b11a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b11e:	2b15      	cmp	r3, #21
 800b120:	d8f6      	bhi.n	800b110 <_printf_i+0x28>
 800b122:	a101      	add	r1, pc, #4	; (adr r1, 800b128 <_printf_i+0x40>)
 800b124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b128:	0800b181 	.word	0x0800b181
 800b12c:	0800b195 	.word	0x0800b195
 800b130:	0800b111 	.word	0x0800b111
 800b134:	0800b111 	.word	0x0800b111
 800b138:	0800b111 	.word	0x0800b111
 800b13c:	0800b111 	.word	0x0800b111
 800b140:	0800b195 	.word	0x0800b195
 800b144:	0800b111 	.word	0x0800b111
 800b148:	0800b111 	.word	0x0800b111
 800b14c:	0800b111 	.word	0x0800b111
 800b150:	0800b111 	.word	0x0800b111
 800b154:	0800b299 	.word	0x0800b299
 800b158:	0800b1c1 	.word	0x0800b1c1
 800b15c:	0800b253 	.word	0x0800b253
 800b160:	0800b111 	.word	0x0800b111
 800b164:	0800b111 	.word	0x0800b111
 800b168:	0800b2bb 	.word	0x0800b2bb
 800b16c:	0800b111 	.word	0x0800b111
 800b170:	0800b1c1 	.word	0x0800b1c1
 800b174:	0800b111 	.word	0x0800b111
 800b178:	0800b111 	.word	0x0800b111
 800b17c:	0800b25b 	.word	0x0800b25b
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	1d1a      	adds	r2, r3, #4
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	602a      	str	r2, [r5, #0]
 800b188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b18c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b190:	2301      	movs	r3, #1
 800b192:	e09f      	b.n	800b2d4 <_printf_i+0x1ec>
 800b194:	6820      	ldr	r0, [r4, #0]
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	0607      	lsls	r7, r0, #24
 800b19a:	f103 0104 	add.w	r1, r3, #4
 800b19e:	6029      	str	r1, [r5, #0]
 800b1a0:	d501      	bpl.n	800b1a6 <_printf_i+0xbe>
 800b1a2:	681e      	ldr	r6, [r3, #0]
 800b1a4:	e003      	b.n	800b1ae <_printf_i+0xc6>
 800b1a6:	0646      	lsls	r6, r0, #25
 800b1a8:	d5fb      	bpl.n	800b1a2 <_printf_i+0xba>
 800b1aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b1ae:	2e00      	cmp	r6, #0
 800b1b0:	da03      	bge.n	800b1ba <_printf_i+0xd2>
 800b1b2:	232d      	movs	r3, #45	; 0x2d
 800b1b4:	4276      	negs	r6, r6
 800b1b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ba:	485a      	ldr	r0, [pc, #360]	; (800b324 <_printf_i+0x23c>)
 800b1bc:	230a      	movs	r3, #10
 800b1be:	e012      	b.n	800b1e6 <_printf_i+0xfe>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	6820      	ldr	r0, [r4, #0]
 800b1c4:	1d19      	adds	r1, r3, #4
 800b1c6:	6029      	str	r1, [r5, #0]
 800b1c8:	0605      	lsls	r5, r0, #24
 800b1ca:	d501      	bpl.n	800b1d0 <_printf_i+0xe8>
 800b1cc:	681e      	ldr	r6, [r3, #0]
 800b1ce:	e002      	b.n	800b1d6 <_printf_i+0xee>
 800b1d0:	0641      	lsls	r1, r0, #25
 800b1d2:	d5fb      	bpl.n	800b1cc <_printf_i+0xe4>
 800b1d4:	881e      	ldrh	r6, [r3, #0]
 800b1d6:	4853      	ldr	r0, [pc, #332]	; (800b324 <_printf_i+0x23c>)
 800b1d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b1da:	bf0c      	ite	eq
 800b1dc:	2308      	moveq	r3, #8
 800b1de:	230a      	movne	r3, #10
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b1e6:	6865      	ldr	r5, [r4, #4]
 800b1e8:	60a5      	str	r5, [r4, #8]
 800b1ea:	2d00      	cmp	r5, #0
 800b1ec:	bfa2      	ittt	ge
 800b1ee:	6821      	ldrge	r1, [r4, #0]
 800b1f0:	f021 0104 	bicge.w	r1, r1, #4
 800b1f4:	6021      	strge	r1, [r4, #0]
 800b1f6:	b90e      	cbnz	r6, 800b1fc <_printf_i+0x114>
 800b1f8:	2d00      	cmp	r5, #0
 800b1fa:	d04b      	beq.n	800b294 <_printf_i+0x1ac>
 800b1fc:	4615      	mov	r5, r2
 800b1fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800b202:	fb03 6711 	mls	r7, r3, r1, r6
 800b206:	5dc7      	ldrb	r7, [r0, r7]
 800b208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b20c:	4637      	mov	r7, r6
 800b20e:	42bb      	cmp	r3, r7
 800b210:	460e      	mov	r6, r1
 800b212:	d9f4      	bls.n	800b1fe <_printf_i+0x116>
 800b214:	2b08      	cmp	r3, #8
 800b216:	d10b      	bne.n	800b230 <_printf_i+0x148>
 800b218:	6823      	ldr	r3, [r4, #0]
 800b21a:	07de      	lsls	r6, r3, #31
 800b21c:	d508      	bpl.n	800b230 <_printf_i+0x148>
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	6861      	ldr	r1, [r4, #4]
 800b222:	4299      	cmp	r1, r3
 800b224:	bfde      	ittt	le
 800b226:	2330      	movle	r3, #48	; 0x30
 800b228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b22c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b230:	1b52      	subs	r2, r2, r5
 800b232:	6122      	str	r2, [r4, #16]
 800b234:	f8cd a000 	str.w	sl, [sp]
 800b238:	464b      	mov	r3, r9
 800b23a:	aa03      	add	r2, sp, #12
 800b23c:	4621      	mov	r1, r4
 800b23e:	4640      	mov	r0, r8
 800b240:	f7ff fee4 	bl	800b00c <_printf_common>
 800b244:	3001      	adds	r0, #1
 800b246:	d14a      	bne.n	800b2de <_printf_i+0x1f6>
 800b248:	f04f 30ff 	mov.w	r0, #4294967295
 800b24c:	b004      	add	sp, #16
 800b24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	f043 0320 	orr.w	r3, r3, #32
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	4833      	ldr	r0, [pc, #204]	; (800b328 <_printf_i+0x240>)
 800b25c:	2778      	movs	r7, #120	; 0x78
 800b25e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	6829      	ldr	r1, [r5, #0]
 800b266:	061f      	lsls	r7, r3, #24
 800b268:	f851 6b04 	ldr.w	r6, [r1], #4
 800b26c:	d402      	bmi.n	800b274 <_printf_i+0x18c>
 800b26e:	065f      	lsls	r7, r3, #25
 800b270:	bf48      	it	mi
 800b272:	b2b6      	uxthmi	r6, r6
 800b274:	07df      	lsls	r7, r3, #31
 800b276:	bf48      	it	mi
 800b278:	f043 0320 	orrmi.w	r3, r3, #32
 800b27c:	6029      	str	r1, [r5, #0]
 800b27e:	bf48      	it	mi
 800b280:	6023      	strmi	r3, [r4, #0]
 800b282:	b91e      	cbnz	r6, 800b28c <_printf_i+0x1a4>
 800b284:	6823      	ldr	r3, [r4, #0]
 800b286:	f023 0320 	bic.w	r3, r3, #32
 800b28a:	6023      	str	r3, [r4, #0]
 800b28c:	2310      	movs	r3, #16
 800b28e:	e7a7      	b.n	800b1e0 <_printf_i+0xf8>
 800b290:	4824      	ldr	r0, [pc, #144]	; (800b324 <_printf_i+0x23c>)
 800b292:	e7e4      	b.n	800b25e <_printf_i+0x176>
 800b294:	4615      	mov	r5, r2
 800b296:	e7bd      	b.n	800b214 <_printf_i+0x12c>
 800b298:	682b      	ldr	r3, [r5, #0]
 800b29a:	6826      	ldr	r6, [r4, #0]
 800b29c:	6961      	ldr	r1, [r4, #20]
 800b29e:	1d18      	adds	r0, r3, #4
 800b2a0:	6028      	str	r0, [r5, #0]
 800b2a2:	0635      	lsls	r5, r6, #24
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	d501      	bpl.n	800b2ac <_printf_i+0x1c4>
 800b2a8:	6019      	str	r1, [r3, #0]
 800b2aa:	e002      	b.n	800b2b2 <_printf_i+0x1ca>
 800b2ac:	0670      	lsls	r0, r6, #25
 800b2ae:	d5fb      	bpl.n	800b2a8 <_printf_i+0x1c0>
 800b2b0:	8019      	strh	r1, [r3, #0]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	6123      	str	r3, [r4, #16]
 800b2b6:	4615      	mov	r5, r2
 800b2b8:	e7bc      	b.n	800b234 <_printf_i+0x14c>
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	1d1a      	adds	r2, r3, #4
 800b2be:	602a      	str	r2, [r5, #0]
 800b2c0:	681d      	ldr	r5, [r3, #0]
 800b2c2:	6862      	ldr	r2, [r4, #4]
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f7f5 f812 	bl	80002f0 <memchr>
 800b2cc:	b108      	cbz	r0, 800b2d2 <_printf_i+0x1ea>
 800b2ce:	1b40      	subs	r0, r0, r5
 800b2d0:	6060      	str	r0, [r4, #4]
 800b2d2:	6863      	ldr	r3, [r4, #4]
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2dc:	e7aa      	b.n	800b234 <_printf_i+0x14c>
 800b2de:	6923      	ldr	r3, [r4, #16]
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	4649      	mov	r1, r9
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	47d0      	blx	sl
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d0ad      	beq.n	800b248 <_printf_i+0x160>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	079b      	lsls	r3, r3, #30
 800b2f0:	d413      	bmi.n	800b31a <_printf_i+0x232>
 800b2f2:	68e0      	ldr	r0, [r4, #12]
 800b2f4:	9b03      	ldr	r3, [sp, #12]
 800b2f6:	4298      	cmp	r0, r3
 800b2f8:	bfb8      	it	lt
 800b2fa:	4618      	movlt	r0, r3
 800b2fc:	e7a6      	b.n	800b24c <_printf_i+0x164>
 800b2fe:	2301      	movs	r3, #1
 800b300:	4632      	mov	r2, r6
 800b302:	4649      	mov	r1, r9
 800b304:	4640      	mov	r0, r8
 800b306:	47d0      	blx	sl
 800b308:	3001      	adds	r0, #1
 800b30a:	d09d      	beq.n	800b248 <_printf_i+0x160>
 800b30c:	3501      	adds	r5, #1
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	9903      	ldr	r1, [sp, #12]
 800b312:	1a5b      	subs	r3, r3, r1
 800b314:	42ab      	cmp	r3, r5
 800b316:	dcf2      	bgt.n	800b2fe <_printf_i+0x216>
 800b318:	e7eb      	b.n	800b2f2 <_printf_i+0x20a>
 800b31a:	2500      	movs	r5, #0
 800b31c:	f104 0619 	add.w	r6, r4, #25
 800b320:	e7f5      	b.n	800b30e <_printf_i+0x226>
 800b322:	bf00      	nop
 800b324:	0800b481 	.word	0x0800b481
 800b328:	0800b492 	.word	0x0800b492

0800b32c <memmove>:
 800b32c:	4288      	cmp	r0, r1
 800b32e:	b510      	push	{r4, lr}
 800b330:	eb01 0402 	add.w	r4, r1, r2
 800b334:	d902      	bls.n	800b33c <memmove+0x10>
 800b336:	4284      	cmp	r4, r0
 800b338:	4623      	mov	r3, r4
 800b33a:	d807      	bhi.n	800b34c <memmove+0x20>
 800b33c:	1e43      	subs	r3, r0, #1
 800b33e:	42a1      	cmp	r1, r4
 800b340:	d008      	beq.n	800b354 <memmove+0x28>
 800b342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b34a:	e7f8      	b.n	800b33e <memmove+0x12>
 800b34c:	4402      	add	r2, r0
 800b34e:	4601      	mov	r1, r0
 800b350:	428a      	cmp	r2, r1
 800b352:	d100      	bne.n	800b356 <memmove+0x2a>
 800b354:	bd10      	pop	{r4, pc}
 800b356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b35a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b35e:	e7f7      	b.n	800b350 <memmove+0x24>

0800b360 <_sbrk_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d06      	ldr	r5, [pc, #24]	; (800b37c <_sbrk_r+0x1c>)
 800b364:	2300      	movs	r3, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	f7f6 f87a 	bl	8001464 <_sbrk>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d102      	bne.n	800b37a <_sbrk_r+0x1a>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b103      	cbz	r3, 800b37a <_sbrk_r+0x1a>
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	240023ec 	.word	0x240023ec

0800b380 <memcpy>:
 800b380:	440a      	add	r2, r1
 800b382:	4291      	cmp	r1, r2
 800b384:	f100 33ff 	add.w	r3, r0, #4294967295
 800b388:	d100      	bne.n	800b38c <memcpy+0xc>
 800b38a:	4770      	bx	lr
 800b38c:	b510      	push	{r4, lr}
 800b38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b392:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b396:	4291      	cmp	r1, r2
 800b398:	d1f9      	bne.n	800b38e <memcpy+0xe>
 800b39a:	bd10      	pop	{r4, pc}

0800b39c <_realloc_r>:
 800b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a0:	4680      	mov	r8, r0
 800b3a2:	4614      	mov	r4, r2
 800b3a4:	460e      	mov	r6, r1
 800b3a6:	b921      	cbnz	r1, 800b3b2 <_realloc_r+0x16>
 800b3a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	f7ff bc49 	b.w	800ac44 <_malloc_r>
 800b3b2:	b92a      	cbnz	r2, 800b3c0 <_realloc_r+0x24>
 800b3b4:	f7ff fbda 	bl	800ab6c <_free_r>
 800b3b8:	4625      	mov	r5, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	f000 f81b 	bl	800b3fa <_malloc_usable_size_r>
 800b3c4:	4284      	cmp	r4, r0
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	d802      	bhi.n	800b3d0 <_realloc_r+0x34>
 800b3ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3ce:	d812      	bhi.n	800b3f6 <_realloc_r+0x5a>
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	f7ff fc36 	bl	800ac44 <_malloc_r>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d0ed      	beq.n	800b3ba <_realloc_r+0x1e>
 800b3de:	42bc      	cmp	r4, r7
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	bf28      	it	cs
 800b3e6:	463a      	movcs	r2, r7
 800b3e8:	f7ff ffca 	bl	800b380 <memcpy>
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	f7ff fbbc 	bl	800ab6c <_free_r>
 800b3f4:	e7e1      	b.n	800b3ba <_realloc_r+0x1e>
 800b3f6:	4635      	mov	r5, r6
 800b3f8:	e7df      	b.n	800b3ba <_realloc_r+0x1e>

0800b3fa <_malloc_usable_size_r>:
 800b3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3fe:	1f18      	subs	r0, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	bfbc      	itt	lt
 800b404:	580b      	ldrlt	r3, [r1, r0]
 800b406:	18c0      	addlt	r0, r0, r3
 800b408:	4770      	bx	lr
	...

0800b40c <_init>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	bf00      	nop
 800b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b412:	bc08      	pop	{r3}
 800b414:	469e      	mov	lr, r3
 800b416:	4770      	bx	lr

0800b418 <_fini>:
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41a:	bf00      	nop
 800b41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41e:	bc08      	pop	{r3}
 800b420:	469e      	mov	lr, r3
 800b422:	4770      	bx	lr
