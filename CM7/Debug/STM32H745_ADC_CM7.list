
STM32H745_ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d8  0800b4d8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e0  0800b4e0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e0  0800b4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800b4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018af8  24000060  0800b548  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24018b58  0800b548  00028b58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b9e0  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ec3  00000000  00000000  0003bab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  0003e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e47  00000000  00000000  0003fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d518  00000000  00000000  00040a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a2a2  00000000  00000000  0007df4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019ae83  00000000  00000000  000981f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053d4  00000000  00000000  00233074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00238448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b440 	.word	0x0800b440

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b440 	.word	0x0800b440

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <myprintf2>:
  _write(0, (char*)buffer,len);
  //HAL_USART_Transmit(&husart2, (uint8_t*)buffer, len, -1);

}

void myprintf2(const char *fmt, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <myprintf2+0x44>)
 80007ce:	f00a f9a5 	bl	800ab1c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <myprintf2+0x44>)
 80007d4:	f7ff fd84 	bl	80002e0 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <myprintf2+0x44>)
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <myprintf2+0x48>)
 80007e8:	f009 f857 	bl	800989a <HAL_UART_Transmit>

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	240189a0 	.word	0x240189a0
 8000800:	24000234 	.word	0x24000234

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef _time;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000810:	bf00      	nop
 8000812:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <main+0x100>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <main+0x24>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	61fa      	str	r2, [r7, #28]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dcf4      	bgt.n	8000812 <main+0xe>
  if ( timeout < 0 )
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	da01      	bge.n	8000832 <main+0x2e>
  {
  Error_Handler();
 800082e:	f000 fbed 	bl	800100c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fe91 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f871 	bl	800091c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800083a:	f000 f8e9 	bl	8000a10 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <main+0x100>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	4a2f      	ldr	r2, [pc, #188]	; (8000904 <main+0x100>)
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084e:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <main+0x100>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085c:	2000      	movs	r0, #0
 800085e:	f004 fef7 	bl	8005650 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f004 ff0d 	bl	8005684 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000870:	bf00      	nop
 8000872:	4b24      	ldr	r3, [pc, #144]	; (8000904 <main+0x100>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d104      	bne.n	8000888 <main+0x84>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	61fa      	str	r2, [r7, #28]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dcf4      	bgt.n	8000872 <main+0x6e>
if ( timeout < 0 )
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	2b00      	cmp	r3, #0
 800088c:	da01      	bge.n	8000892 <main+0x8e>
{
Error_Handler();
 800088e:	f000 fbbd 	bl	800100c <Error_Handler>
  //SWD_Init();
  //write(0,"Hello",5);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fab5 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000896:	f000 fa93 	bl	8000dc0 <MX_DMA_Init>
  //MX_LPUART1_UART_Init();
  MX_USART3_UART_Init();
 800089a:	f000 fa45 	bl	8000d28 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800089e:	f000 f94d 	bl	8000b3c <MX_ADC1_Init>
  MX_ADC2_Init();
 80008a2:	f000 f9d5 	bl	8000c50 <MX_ADC2_Init>
  MX_RTC_Init();
 80008a6:	f000 f8e3 	bl	8000a70 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BCD);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	4815      	ldr	r0, [pc, #84]	; (8000908 <main+0x104>)
 80008b2:	f008 fd59 	bl	8009368 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BCD);
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <main+0x104>)
 80008c0:	f008 fe36 	bl	8009530 <HAL_RTC_GetDate>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t *)ADC_DualModeVal,4);
 80008c4:	2204      	movs	r2, #4
 80008c6:	4911      	ldr	r1, [pc, #68]	; (800090c <main+0x108>)
 80008c8:	4811      	ldr	r0, [pc, #68]	; (8000910 <main+0x10c>)
 80008ca:	f002 f94f 	bl	8002b6c <HAL_ADCEx_MultiModeStart_DMA>

  while (1)
  {

	  if(ctr==BUFFER_SIZE){
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <main+0x110>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d10b      	bne.n	80008f2 <main+0xee>
    //  MovingAvg();
#if USE_FOR_LORA
			PeakDetectnEdge();
#endif
			//TransferDataADC();
			myprintf2("ADC0 : \n");
 80008da:	480f      	ldr	r0, [pc, #60]	; (8000918 <main+0x114>)
 80008dc:	f7ff ff6c 	bl	80007b8 <myprintf2>
			HAL_Delay(1000);
 80008e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008e4:	f000 feca 	bl	800167c <HAL_Delay>
		  ctr=0;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <main+0x110>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
		  MX_DMA_Init();
 80008ee:	f000 fa67 	bl	8000dc0 <MX_DMA_Init>
	  }

	  HAL_Delay(1000);
 80008f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f6:	f000 fec1 	bl	800167c <HAL_Delay>
	  myprintf2("ADC0 : \n");
 80008fa:	4807      	ldr	r0, [pc, #28]	; (8000918 <main+0x114>)
 80008fc:	f7ff ff5c 	bl	80007b8 <myprintf2>
	  if(ctr==BUFFER_SIZE){
 8000900:	e7e5      	b.n	80008ce <main+0xca>
 8000902:	bf00      	nop
 8000904:	58024400 	.word	0x58024400
 8000908:	240002c8 	.word	0x240002c8
 800090c:	2401898c 	.word	0x2401898c
 8000910:	2400007c 	.word	0x2400007c
 8000914:	2401899c 	.word	0x2401899c
 8000918:	0800b458 	.word	0x0800b458

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09c      	sub	sp, #112	; 0x70
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	224c      	movs	r2, #76	; 0x4c
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00a f904 	bl	800ab38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f00a f8fe 	bl	800ab38 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800093c:	2004      	movs	r0, #4
 800093e:	f004 feb5 	bl	80056ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <SystemClock_Config+0xec>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a2f      	ldr	r2, [pc, #188]	; (8000a08 <SystemClock_Config+0xec>)
 800094c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <SystemClock_Config+0xec>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <SystemClock_Config+0xf0>)
 800095e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000960:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <SystemClock_Config+0xf0>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <SystemClock_Config+0xf0>)
 800096a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000974:	bf00      	nop
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <SystemClock_Config+0xec>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000982:	d1f8      	bne.n	8000976 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000988:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	2302      	movs	r3, #2
 8000994:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800099a:	2378      	movs	r3, #120	; 0x78
 800099c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4618      	mov	r0, r3
 80009bc:	f004 fed0 	bl	8005760 <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009c6:	f000 fb21 	bl	800100c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	233f      	movs	r3, #63	; 0x3f
 80009cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2303      	movs	r3, #3
 80009d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009d6:	2308      	movs	r3, #8
 80009d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2104      	movs	r1, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f005 fb0f 	bl	8006014 <HAL_RCC_ClockConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009fc:	f000 fb06 	bl	800100c <Error_Handler>
  }

   //HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_8);

}
 8000a00:	bf00      	nop
 8000a02:	3770      	adds	r7, #112	; 0x70
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	58024800 	.word	0x58024800
 8000a0c:	58000400 	.word	0x58000400

08000a10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0b0      	sub	sp, #192	; 0xc0
 8000a14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	22c0      	movs	r2, #192	; 0xc0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f00a f88b 	bl	800ab38 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000a32:	2314      	movs	r3, #20
 8000a34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000a36:	2304      	movs	r3, #4
 8000a38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a42:	23c0      	movs	r3, #192	; 0xc0
 8000a44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a46:	2320      	movs	r3, #32
 8000a48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fe68 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a62:	f000 fad3 	bl	800100c <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	37c0      	adds	r7, #192	; 0xc0
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a84:	2300      	movs	r3, #0
 8000a86:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000a8a:	4a2b      	ldr	r2, [pc, #172]	; (8000b38 <MX_RTC_Init+0xc8>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000a96:	227f      	movs	r2, #127	; 0x7f
 8000a98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ab8:	481e      	ldr	r0, [pc, #120]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000aba:	f008 fb35 	bl	8009128 <HAL_RTC_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ac4:	f000 faa2 	bl	800100c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = HOURS;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MINUTES;
 8000acc:	2306      	movs	r3, #6
 8000ace:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000ae4:	f008 fba2 	bl	800922c <HAL_RTC_SetTime>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000aee:	f000 fa8d 	bl	800100c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000af2:	2307      	movs	r3, #7
 8000af4:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8000af6:	2310      	movs	r3, #16
 8000af8:	707b      	strb	r3, [r7, #1]
  sDate.Date = DATE;
 8000afa:	2310      	movs	r3, #16
 8000afc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8000afe:	2323      	movs	r3, #35	; 0x23
 8000b00:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b02:	463b      	mov	r3, r7
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	480a      	ldr	r0, [pc, #40]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000b0a:	f008 fc89 	bl	8009420 <HAL_RTC_SetDate>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b14:	f000 fa7a 	bl	800100c <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000b18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_RTC_Init+0xc4>)
 8000b1e:	f008 fe25 	bl	800976c <HAL_RTCEx_SetCalibrationOutPut>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000b28:	f000 fa70 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	240002c8 	.word	0x240002c8
 8000b38:	58004000 	.word	0x58004000

08000b3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b60:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b62:	4a39      	ldr	r2, [pc, #228]	; (8000c48 <MX_ADC1_Init+0x10c>)
 8000b64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b6c:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b6e:	2208      	movs	r2, #8
 8000b70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bbc:	4821      	ldr	r0, [pc, #132]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000bbe:	f000 ff73 	bl	8001aa8 <HAL_ADC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bc8:	f000 fa20 	bl	800100c <Error_Handler>



  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_ADC1_Init+0x110>)
 8000bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bd8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000bdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bde:	2304      	movs	r3, #4
 8000be0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bea:	463b      	mov	r3, r7
 8000bec:	4619      	mov	r1, r3
 8000bee:	4815      	ldr	r0, [pc, #84]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000bf0:	f001 f910 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000bfa:	f000 fa07 	bl	800100c <Error_Handler>
  }

/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000bfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c06:	480f      	ldr	r0, [pc, #60]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000c08:	f001 ff4c 	bl	8002aa4 <HAL_ADCEx_Calibration_Start>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_ADC1_Init+0xda>
  {
    /* Calibration Error */
    Error_Handler();
 8000c12:	f000 f9fb 	bl	800100c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000c16:	2307      	movs	r3, #7
 8000c18:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c1e:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_ADC1_Init+0x108>)
 8000c2c:	f002 f84e 	bl	8002ccc <HAL_ADCEx_MultiModeConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000c36:	f000 f9e9 	bl	800100c <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2400007c 	.word	0x2400007c
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	0c900008 	.word	0x0c900008

08000c50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c6a:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <MX_ADC2_Init+0xd0>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c76:	2208      	movs	r2, #8
 8000c78:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c82:	2204      	movs	r2, #4
 8000c84:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cb8:	4818      	ldr	r0, [pc, #96]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000cba:	f000 fef5 	bl	8001aa8 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000cc4:	f000 f9a2 	bl	800100c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_ADC2_Init+0xd4>)
 8000cca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000cd8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000cec:	f001 f892 	bl	8001e14 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000cf6:	f000 f989 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000cfa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000cfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_ADC2_Init+0xcc>)
 8000d04:	f001 fece 	bl	8002aa4 <HAL_ADCEx_Calibration_Start>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC2_Init+0xc2>
  {
    /* Calibration Error */
    Error_Handler();
 8000d0e:	f000 f97d 	bl	800100c <Error_Handler>
  }
  /* USER CODE END ADC2_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	240000e0 	.word	0x240000e0
 8000d20:	40022100 	.word	0x40022100
 8000d24:	0c900008 	.word	0x0c900008

08000d28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <MX_USART3_UART_Init+0x94>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d72:	f008 fd42 	bl	80097fa <HAL_UART_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f000 f946 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d84:	f009 fdd3 	bl	800a92e <HAL_UARTEx_SetTxFifoThreshold>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 f93d 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000d96:	f009 fe08 	bl	800a9aa <HAL_UARTEx_SetRxFifoThreshold>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000da0:	f000 f934 	bl	800100c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_USART3_UART_Init+0x90>)
 8000da6:	f009 fd89 	bl	800a8bc <HAL_UARTEx_DisableFifoMode>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 f92c 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000234 	.word	0x24000234
 8000dbc:	40004800 	.word	0x40004800

08000dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_DMA_Init+0x3c>)
 8000dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <MX_DMA_Init+0x3c>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_DMA_Init+0x3c>)
 8000dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	200b      	movs	r0, #11
 8000dea:	f002 f94c 	bl	8003086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dee:	200b      	movs	r0, #11
 8000df0:	f002 f963 	bl	80030ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);

}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	58024400 	.word	0x58024400

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	4a43      	ldr	r2, [pc, #268]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e16:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
 8000e22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e24:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	4a3c      	ldr	r2, [pc, #240]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e34:	4b39      	ldr	r3, [pc, #228]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	4a34      	ldr	r2, [pc, #208]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e52:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]


 GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a16      	ldr	r2, [pc, #88]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_GPIO_Init+0x11c>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /* Configure PC.13 pin as the EXTI input event line in interrupt mode for both CPU1 and CPU2*/
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;    /* current CPU (CM7) config in IT rising */
 8000ed8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  //HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;    /* current CPU (CM7) config in IT rising */
 8000eea:	2301      	movs	r3, #1
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_9;
 8000ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000efc:	f107 031c 	add.w	r3, r7, #28
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_GPIO_Init+0x120>)
 8000f04:	f004 f9da 	bl	80052bc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0x120>)
 8000f10:	f004 fb84 	bl	800561c <HAL_GPIO_WritePin>
  /* Configure the second CPU (CM4) EXTI line for IT*/
 // HAL_EXTI_D1_EventInputConfig(EXTI_LINE5 , EXTI_MODE_IT,  ENABLE);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58020800 	.word	0x58020800

08000f24 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    if(ctr < BUFFER_SIZE){
 8000f2c:	4b34      	ldr	r3, [pc, #208]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d85c      	bhi.n	8000ff2 <HAL_ADC_ConvCpltCallback+0xce>
        PA6_Data[ctr++] = ADC_DualModeVal[0] & 0XFFFF;
 8000f38:	4b32      	ldr	r3, [pc, #200]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	4b30      	ldr	r3, [pc, #192]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	1c5a      	adds	r2, r3, #1
 8000f42:	492f      	ldr	r1, [pc, #188]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f44:	600a      	str	r2, [r1, #0]
 8000f46:	b281      	uxth	r1, r0
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        PA6_Data[ctr++] = (ADC_DualModeVal[0] >> 16) & 0XFFFF ;
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	0c18      	lsrs	r0, r3, #16
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	4929      	ldr	r1, [pc, #164]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f5c:	600a      	str	r2, [r1, #0]
 8000f5e:	b281      	uxth	r1, r0
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        PA6_Data[ctr++] = ADC_DualModeVal[1] & 0XFFFF ;
 8000f66:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f68:	6858      	ldr	r0, [r3, #4]
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	4923      	ldr	r1, [pc, #140]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f72:	600a      	str	r2, [r1, #0]
 8000f74:	b281      	uxth	r1, r0
 8000f76:	4a24      	ldr	r2, [pc, #144]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        PA6_Data[ctr++] = (ADC_DualModeVal[1] >> 16) & 0XFFFF ;
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	0c18      	lsrs	r0, r3, #16
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	491d      	ldr	r1, [pc, #116]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f8a:	600a      	str	r2, [r1, #0]
 8000f8c:	b281      	uxth	r1, r0
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = ADC_DualModeVal[2] & 0XFFFF ;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f96:	6898      	ldr	r0, [r3, #8]
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	1c5a      	adds	r2, r3, #1
 8000f9e:	4918      	ldr	r1, [pc, #96]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fa0:	600a      	str	r2, [r1, #0]
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	4a18      	ldr	r2, [pc, #96]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = (ADC_DualModeVal[2] >> 16) & 0XFFFF ;
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	0c18      	lsrs	r0, r3, #16
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	4912      	ldr	r1, [pc, #72]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fb8:	600a      	str	r2, [r1, #0]
 8000fba:	b281      	uxth	r1, r0
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = ADC_DualModeVal[3] & 0XFFFF ;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fc4:	68d8      	ldr	r0, [r3, #12]
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fce:	600a      	str	r2, [r1, #0]
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fd4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = (ADC_DualModeVal[3] >> 16) & 0XFFFF ;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0c18      	lsrs	r0, r3, #16
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	4906      	ldr	r1, [pc, #24]	; (8001000 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fe6:	600a      	str	r2, [r1, #0]
 8000fe8:	b281      	uxth	r1, r0
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//HAL_ADC_Stop(&hadc2);
   //   HAL_ADCEx_MultiModeStop_DMA(&hdma_adc1);

    }

}
 8000ff0:	e002      	b.n	8000ff8 <HAL_ADC_ConvCpltCallback+0xd4>
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000ff2:	200b      	movs	r0, #11
 8000ff4:	f002 f86f 	bl	80030d6 <HAL_NVIC_DisableIRQ>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2401899c 	.word	0x2401899c
 8001004:	2401898c 	.word	0x2401898c
 8001008:	240002ec 	.word	0x240002ec

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	e7fe      	b.n	8001014 <Error_Handler+0x8>
	...

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_MspInit+0x30>)
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x30>)
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x30>)
 8001030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	58024400 	.word	0x58024400

0800104c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a58      	ldr	r2, [pc, #352]	; (80011cc <HAL_ADC_MspInit+0x180>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d17d      	bne.n	800116a <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 8001070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001074:	4a56      	ldr	r2, [pc, #344]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 8001080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800108c:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3301      	adds	r3, #1
 8001092:	4a50      	ldr	r2, [pc, #320]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001094:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d10e      	bne.n	80010bc <HAL_ADC_MspInit+0x70>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80010a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a4:	4a4a      	ldr	r2, [pc, #296]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010ae:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010cc:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010da:	2340      	movs	r3, #64	; 0x40
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	483a      	ldr	r0, [pc, #232]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 80010ee:	f004 f8e5 	bl	80052bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80010f2:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <HAL_ADC_MspInit+0x190>)
 80010f4:	4a3a      	ldr	r2, [pc, #232]	; (80011e0 <HAL_ADC_MspInit+0x194>)
 80010f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <HAL_ADC_MspInit+0x190>)
 80010fa:	2209      	movs	r2, #9
 80010fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fe:	4b37      	ldr	r3, [pc, #220]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	4b35      	ldr	r3, [pc, #212]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800110a:	4b34      	ldr	r3, [pc, #208]	; (80011dc <HAL_ADC_MspInit+0x190>)
 800110c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001110:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001112:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001114:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001118:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 800111a:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_ADC_MspInit+0x190>)
 800111c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001120:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001122:	4b2e      	ldr	r3, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001128:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0x190>)
 800112c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001130:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001134:	2204      	movs	r2, #4
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001138:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0x190>)
 800113a:	2203      	movs	r2, #3
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800113e:	4b27      	ldr	r3, [pc, #156]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001140:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001148:	2200      	movs	r2, #0
 800114a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800114c:	4823      	ldr	r0, [pc, #140]	; (80011dc <HAL_ADC_MspInit+0x190>)
 800114e:	f001 ffdd 	bl	800310c <HAL_DMA_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8001158:	f7ff ff58 	bl	800100c <Error_Handler>
    }

   __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001160:	64da      	str	r2, [r3, #76]	; 0x4c
 8001162:	4a1e      	ldr	r2, [pc, #120]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6393      	str	r3, [r2, #56]	; 0x38
    // HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
    // HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001168:	e02b      	b.n	80011c2 <HAL_ADC_MspInit+0x176>
  else if(hadc->Instance==ADC2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_ADC_MspInit+0x198>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d126      	bne.n	80011c2 <HAL_ADC_MspInit+0x176>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 800117c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d10e      	bne.n	80011a4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 8001188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118c:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 8001198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	; 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000
 80011d0:	58024400 	.word	0x58024400
 80011d4:	24018a04 	.word	0x24018a04
 80011d8:	58020000 	.word	0x58020000
 80011dc:	24000144 	.word	0x24000144
 80011e0:	40020010 	.word	0x40020010
 80011e4:	40022100 	.word	0x40022100

080011e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0ba      	sub	sp, #232	; 0xe8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	22c0      	movs	r2, #192	; 0xc0
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f009 fc95 	bl	800ab38 <memset>
  if(hrtc->Instance==RTC)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_RTC_MspInit+0xb4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d13d      	bne.n	8001294 <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001218:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4618      	mov	r0, r3
 8001232:	f005 fa7b 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 800123c:	f7ff fee6 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_RTC_MspInit+0xb8>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <HAL_RTC_MspInit+0xb8>)
 8001246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124a:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_RTC_MspInit+0xb8>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <HAL_RTC_MspInit+0xb8>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_RTC_MspInit+0xb8>)
 800125e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800126a:	2304      	movs	r3, #4
 800126c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001288:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_RTC_MspInit+0xbc>)
 8001290:	f004 f814 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	37e8      	adds	r7, #232	; 0xe8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	58004000 	.word	0x58004000
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58020400 	.word	0x58020400

080012a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0bc      	sub	sp, #240	; 0xf0
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	22c0      	movs	r2, #192	; 0xc0
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f009 fc35 	bl	800ab38 <memset>

  if(huart->Instance==LPUART1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a4d      	ldr	r2, [pc, #308]	; (8001408 <HAL_UART_MspInit+0x160>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d146      	bne.n	8001366 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012d8:	f04f 0204 	mov.w	r2, #4
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 fa1c 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012fa:	f7ff fe87 	bl	800100c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012fe:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_UART_MspInit+0x164>)
 8001300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001304:	4a41      	ldr	r2, [pc, #260]	; (800140c <HAL_UART_MspInit+0x164>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <HAL_UART_MspInit+0x164>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <HAL_UART_MspInit+0x164>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a3a      	ldr	r2, [pc, #232]	; (800140c <HAL_UART_MspInit+0x164>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_UART_MspInit+0x164>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800133a:	23c0      	movs	r3, #192	; 0xc0
 800133c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8001352:	2308      	movs	r3, #8
 8001354:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800135c:	4619      	mov	r1, r3
 800135e:	482c      	ldr	r0, [pc, #176]	; (8001410 <HAL_UART_MspInit+0x168>)
 8001360:	f003 ffac 	bl	80052bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001364:	e04b      	b.n	80013fe <HAL_UART_MspInit+0x156>
  if(huart->Instance==USART3)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <HAL_UART_MspInit+0x16c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d146      	bne.n	80013fe <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001370:	f04f 0202 	mov.w	r2, #2
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4618      	mov	r0, r3
 8001388:	f005 f9d0 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001392:	f7ff fe3b 	bl	800100c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_UART_MspInit+0x164>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800139c:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_UART_MspInit+0x164>)
 800139e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0x164>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b4:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_UART_MspInit+0x164>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	4a14      	ldr	r2, [pc, #80]	; (800140c <HAL_UART_MspInit+0x164>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_UART_MspInit+0x164>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ec:	2307      	movs	r3, #7
 80013ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <HAL_UART_MspInit+0x170>)
 80013fa:	f003 ff5f 	bl	80052bc <HAL_GPIO_Init>
}
 80013fe:	bf00      	nop
 8001400:	37f0      	adds	r7, #240	; 0xf0
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	58000c00 	.word	0x58000c00
 800140c:	58024400 	.word	0x58024400
 8001410:	58020400 	.word	0x58020400
 8001414:	40004800 	.word	0x40004800
 8001418:	58020c00 	.word	0x58020c00

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f8e8 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <DMA1_Stream0_IRQHandler+0x10>)
 8001476:	f002 fc0f 	bl	8003c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	24000144 	.word	0x24000144

08001484 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <DMA1_Stream1_IRQHandler+0x10>)
 800148a:	f002 fc05 	bl	8003c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	240001bc 	.word	0x240001bc

08001498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a0:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <_sbrk+0x5c>)
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <_sbrk+0x60>)
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <_sbrk+0x64>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <_sbrk+0x68>)
 80014b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <_sbrk+0x64>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d207      	bcs.n	80014d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c8:	f009 fb3e 	bl	800ab48 <__errno>
 80014cc:	4603      	mov	r3, r0
 80014ce:	220c      	movs	r2, #12
 80014d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e009      	b.n	80014ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <_sbrk+0x64>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <_sbrk+0x64>)
 80014e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ea:	68fb      	ldr	r3, [r7, #12]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	24080000 	.word	0x24080000
 80014f8:	00000400 	.word	0x00000400
 80014fc:	24018a08 	.word	0x24018a08
 8001500:	24018b58 	.word	0x24018b58

08001504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800153c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001508:	f7ff f8c0 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150e:	490d      	ldr	r1, [pc, #52]	; (8001544 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001524:	4c0a      	ldr	r4, [pc, #40]	; (8001550 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f009 fb0f 	bl	800ab54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001536:	f7ff f965 	bl	8000804 <main>
  bx  lr
 800153a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800153c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001540:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001544:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001548:	0800b4e8 	.word	0x0800b4e8
  ldr r2, =_sbss
 800154c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001550:	24018b58 	.word	0x24018b58

08001554 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC3_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155e:	2003      	movs	r0, #3
 8001560:	f001 fd86 	bl	8003070 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001564:	f004 ff0c 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 8001568:	4602      	mov	r2, r0
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_Init+0x68>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	4913      	ldr	r1, [pc, #76]	; (80015c4 <HAL_Init+0x6c>)
 8001576:	5ccb      	ldrb	r3, [r1, r3]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001582:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_Init+0x68>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <HAL_Init+0x6c>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
 8001598:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <HAL_Init+0x70>)
 800159a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_Init+0x74>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f814 	bl	80015d0 <HAL_InitTick>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e002      	b.n	80015b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015b2:	f7ff fd31 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	58024400 	.word	0x58024400
 80015c4:	0800b464 	.word	0x0800b464
 80015c8:	24000004 	.word	0x24000004
 80015cc:	24000000 	.word	0x24000000

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_InitTick+0x60>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e021      	b.n	8001628 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_InitTick+0x64>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_InitTick+0x60>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fd79 	bl	80030f2 <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f001 fd35 	bl	8003086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <HAL_InitTick+0x68>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2400000c 	.word	0x2400000c
 8001634:	24000000 	.word	0x24000000
 8001638:	24000008 	.word	0x24000008

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	; (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2400000c 	.word	0x2400000c
 8001660:	24018a0c 	.word	0x24018a0c

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	24018a0c 	.word	0x24018a0c

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2400000c 	.word	0x2400000c

080016c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016c8:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <HAL_GetREVID+0x14>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	0c1b      	lsrs	r3, r3, #16
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	5c001000 	.word	0x5c001000

080016dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
 8001750:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3360      	adds	r3, #96	; 0x60
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	431a      	orrs	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	431a      	orrs	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	611a      	str	r2, [r3, #16]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b087      	sub	sp, #28
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	60b9      	str	r1, [r7, #8]
 80017c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3360      	adds	r3, #96	; 0x60
 80017c6:	461a      	mov	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	431a      	orrs	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	601a      	str	r2, [r3, #0]
  }
}
 80017e0:	bf00      	nop
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001812:	b480      	push	{r7}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3330      	adds	r3, #48	; 0x30
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	211f      	movs	r1, #31
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0e9b      	lsrs	r3, r3, #26
 800184a:	f003 011f 	and.w	r1, r3, #31
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800186a:	b480      	push	{r7}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3314      	adds	r3, #20
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	0e5b      	lsrs	r3, r3, #25
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	0d1b      	lsrs	r3, r3, #20
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2107      	movs	r1, #7
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0d1b      	lsrs	r3, r3, #20
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0318 	and.w	r3, r3, #24
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	400b      	ands	r3, r1
 80018ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	000fffff 	.word	0x000fffff

08001908 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 031f 	and.w	r3, r3, #31
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6093      	str	r3, [r2, #8]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	5fffffc0 	.word	0x5fffffc0

08001948 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800195c:	d101      	bne.n	8001962 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LL_ADC_EnableInternalRegulator+0x24>)
 800197e:	4013      	ands	r3, r2
 8001980:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	6fffffc0 	.word	0x6fffffc0

08001998 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019ac:	d101      	bne.n	80019b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_ADC_Enable+0x24>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	7fffffc0 	.word	0x7fffffc0

080019e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <LL_ADC_Disable+0x24>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	f043 0202 	orr.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	7fffffc0 	.word	0x7fffffc0

08001a10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <LL_ADC_IsEnabled+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_ADC_IsEnabled+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d101      	bne.n	8001a4e <LL_ADC_IsDisableOngoing+0x18>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <LL_ADC_IsDisableOngoing+0x1a>
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d101      	bne.n	8001a74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d101      	bne.n	8001a9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e18f      	b.n	8001de2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fabb 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff2d 	bl	8001948 <LL_ADC_IsDeepPowerDownEnabled>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff13 	bl	8001924 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff48 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d114      	bne.n	8001b38 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff2c 	bl	8001970 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b18:	4b87      	ldr	r3, [pc, #540]	; (8001d38 <HAL_ADC_Init+0x290>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	4a87      	ldr	r2, [pc, #540]	; (8001d3c <HAL_ADC_Init+0x294>)
 8001b20:	fba2 2303 	umull	r2, r3, r2, r3
 8001b24:	099b      	lsrs	r3, r3, #6
 8001b26:	3301      	adds	r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b2a:	e002      	b.n	8001b32 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f9      	bne.n	8001b2c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff2b 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	f043 0210 	orr.w	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff77 	bl	8001a5c <LL_ADC_REG_IsConversionOngoing>
 8001b6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 8129 	bne.w	8001dd0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 8125 	bne.w	8001dd0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b8e:	f043 0202 	orr.w	r2, r3, #2
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff38 	bl	8001a10 <LL_ADC_IsEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d136      	bne.n	8001c14 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_ADC_Init+0x298>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d004      	beq.n	8001bba <HAL_ADC_Init+0x112>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a63      	ldr	r2, [pc, #396]	; (8001d44 <HAL_ADC_Init+0x29c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_ADC_Init+0x130>
 8001bba:	4861      	ldr	r0, [pc, #388]	; (8001d40 <HAL_ADC_Init+0x298>)
 8001bbc:	f7ff ff28 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	4860      	ldr	r0, [pc, #384]	; (8001d44 <HAL_ADC_Init+0x29c>)
 8001bc4:	f7ff ff24 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4323      	orrs	r3, r4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e008      	b.n	8001bea <HAL_ADC_Init+0x142>
 8001bd8:	485b      	ldr	r0, [pc, #364]	; (8001d48 <HAL_ADC_Init+0x2a0>)
 8001bda:	f7ff ff19 	bl	8001a10 <LL_ADC_IsEnabled>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d012      	beq.n	8001c14 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a53      	ldr	r2, [pc, #332]	; (8001d40 <HAL_ADC_Init+0x298>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d004      	beq.n	8001c02 <HAL_ADC_Init+0x15a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <HAL_ADC_Init+0x29c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_ADC_Init+0x15e>
 8001c02:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_ADC_Init+0x2a4>)
 8001c04:	e000      	b.n	8001c08 <HAL_ADC_Init+0x160>
 8001c06:	4a52      	ldr	r2, [pc, #328]	; (8001d50 <HAL_ADC_Init+0x2a8>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7ff fd64 	bl	80016dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c14:	f7ff fd56 	bl	80016c4 <HAL_GetREVID>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d914      	bls.n	8001c4c <HAL_ADC_Init+0x1a4>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d110      	bne.n	8001c4c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7d5b      	ldrb	r3, [r3, #21]
 8001c2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c34:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7f1b      	ldrb	r3, [r3, #28]
 8001c40:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c42:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c44:	f043 030c 	orr.w	r3, r3, #12
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	e00d      	b.n	8001c68 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7d5b      	ldrb	r3, [r3, #21]
 8001c50:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c56:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c5c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7f1b      	ldrb	r3, [r3, #28]
 8001c62:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	7f1b      	ldrb	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	045b      	lsls	r3, r3, #17
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_ADC_Init+0x2ac>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	69b9      	ldr	r1, [r7, #24]
 8001caa:	430b      	orrs	r3, r1
 8001cac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fed2 	bl	8001a5c <LL_ADC_REG_IsConversionOngoing>
 8001cb8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fedf 	bl	8001a82 <LL_ADC_INJ_IsConversionOngoing>
 8001cc4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d15f      	bne.n	8001d8c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d15c      	bne.n	8001d8c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7d1b      	ldrb	r3, [r3, #20]
 8001cd6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_ADC_Init+0x2b0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	69b9      	ldr	r1, [r7, #24]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d130      	bne.n	8001d60 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_ADC_Init+0x2b4>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d12:	3a01      	subs	r2, #1
 8001d14:	0411      	lsls	r1, r2, #16
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d20:	4311      	orrs	r1, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d26:	430a      	orrs	r2, r1
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	e01c      	b.n	8001d70 <HAL_ADC_Init+0x2c8>
 8001d36:	bf00      	nop
 8001d38:	24000000 	.word	0x24000000
 8001d3c:	053e2d63 	.word	0x053e2d63
 8001d40:	40022000 	.word	0x40022000
 8001d44:	40022100 	.word	0x40022100
 8001d48:	58026000 	.word	0x58026000
 8001d4c:	40022300 	.word	0x40022300
 8001d50:	58026300 	.word	0x58026300
 8001d54:	fff0c003 	.word	0xfff0c003
 8001d58:	ffffbffc 	.word	0xffffbffc
 8001d5c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fd12 	bl	80027b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10c      	bne.n	8001dae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f023 010f 	bic.w	r1, r3, #15
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	1e5a      	subs	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
 8001dac:	e007      	b.n	8001dbe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 020f 	bic.w	r2, r2, #15
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f023 0303 	bic.w	r3, r3, #3
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
 8001dce:	e007      	b.n	8001de0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd4:	f043 0210 	orr.w	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop

08001dec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b0a1      	sub	sp, #132	; 0x84
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a9d      	ldr	r2, [pc, #628]	; (80020a4 <HAL_ADC_ConfigChannel+0x290>)
 8001e2e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x2a>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e321      	b.n	8002482 <HAL_ADC_ConfigChannel+0x66e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fe06 	bl	8001a5c <LL_ADC_REG_IsConversionOngoing>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 8306 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d108      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x62>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2201      	movs	r2, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	e016      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x90>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e86:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e003      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001e92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	69d1      	ldr	r1, [r2, #28]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f7ff fca7 	bl	8001812 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fdc7 	bl	8001a5c <LL_ADC_REG_IsConversionOngoing>
 8001ece:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fdd4 	bl	8001a82 <LL_ADC_INJ_IsConversionOngoing>
 8001eda:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001edc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80b3 	bne.w	800204a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80af 	bne.w	800204a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	6819      	ldr	r1, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f7ff fcb6 	bl	800186a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001efe:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_ADC_ConfigChannel+0x294>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f0a:	d10b      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x110>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	e01d      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x14c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x136>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	e00a      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x14c>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d027      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6919      	ldr	r1, [r3, #16]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f78:	f7ff fbe4 	bl	8001744 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6919      	ldr	r1, [r3, #16]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	7e5b      	ldrb	r3, [r3, #25]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d102      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x17e>
 8001f8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f90:	e000      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x180>
 8001f92:	2300      	movs	r3, #0
 8001f94:	461a      	mov	r2, r3
 8001f96:	f7ff fc0e 	bl	80017b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6919      	ldr	r1, [r3, #16]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7e1b      	ldrb	r3, [r3, #24]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x19c>
 8001faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fae:	e000      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x19e>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f7ff fbe6 	bl	8001784 <LL_ADC_SetDataRightShift>
 8001fb8:	e047      	b.n	800204a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	069b      	lsls	r3, r3, #26
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d107      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fdc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	069b      	lsls	r3, r3, #26
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d107      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002000:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	069b      	lsls	r3, r3, #26
 8002012:	429a      	cmp	r2, r3
 8002014:	d107      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002024:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800202c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	069b      	lsls	r3, r3, #26
 8002036:	429a      	cmp	r2, r3
 8002038:	d107      	bne.n	800204a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002048:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fcde 	bl	8001a10 <LL_ADC_IsEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 820d 	bne.w	8002476 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	461a      	mov	r2, r3
 800206a:	f7ff fc29 	bl	80018c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_ADC_ConfigChannel+0x290>)
 8002074:	4293      	cmp	r3, r2
 8002076:	f040 8133 	bne.w	80022e0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002086:	2b00      	cmp	r3, #0
 8002088:	d110      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x298>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	3301      	adds	r3, #1
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2b09      	cmp	r3, #9
 8002098:	bf94      	ite	ls
 800209a:	2301      	movls	r3, #1
 800209c:	2300      	movhi	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	e01e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x2cc>
 80020a2:	bf00      	nop
 80020a4:	47ff0000 	.word	0x47ff0000
 80020a8:	5c001000 	.word	0x5c001000
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80020ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80020be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80020c4:	2320      	movs	r3, #32
 80020c6:	e003      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80020c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2b09      	cmp	r3, #9
 80020d8:	bf94      	ite	ls
 80020da:	2301      	movls	r3, #1
 80020dc:	2300      	movhi	r3, #0
 80020de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d079      	beq.n	80021d8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d107      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x2ec>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	3301      	adds	r3, #1
 80020f8:	069b      	lsls	r3, r3, #26
 80020fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020fe:	e015      	b.n	800212c <HAL_ADC_ConfigChannel+0x318>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800210e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002110:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e003      	b.n	8002124 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	069b      	lsls	r3, r3, #26
 8002128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_ADC_ConfigChannel+0x338>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	3301      	adds	r3, #1
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	e017      	b.n	800217c <HAL_ADC_ConfigChannel+0x368>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800215a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800215e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2101      	movs	r1, #1
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	ea42 0103 	orr.w	r1, r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10a      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x38e>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	3301      	adds	r3, #1
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	051b      	lsls	r3, r3, #20
 80021a0:	e018      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x3c0>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80021ba:	2320      	movs	r3, #32
 80021bc:	e003      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d4:	430b      	orrs	r3, r1
 80021d6:	e07e      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d107      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x3e0>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	3301      	adds	r3, #1
 80021ec:	069b      	lsls	r3, r3, #26
 80021ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021f2:	e015      	b.n	8002220 <HAL_ADC_ConfigChannel+0x40c>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fc:	fa93 f3a3 	rbit	r3, r3
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e003      	b.n	8002218 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	3301      	adds	r3, #1
 800221a:	069b      	lsls	r3, r3, #26
 800221c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002228:	2b00      	cmp	r3, #0
 800222a:	d109      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x42c>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	3301      	adds	r3, #1
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	e017      	b.n	8002270 <HAL_ADC_ConfigChannel+0x45c>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	61bb      	str	r3, [r7, #24]
  return result;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f303 	lsl.w	r3, r1, r3
 8002270:	ea42 0103 	orr.w	r1, r2, r3
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_ADC_ConfigChannel+0x488>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0e9b      	lsrs	r3, r3, #26
 8002286:	3301      	adds	r3, #1
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	3b1e      	subs	r3, #30
 8002294:	051b      	lsls	r3, r3, #20
 8002296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800229a:	e01b      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x4c0>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	60fb      	str	r3, [r7, #12]
  return result;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 021f 	and.w	r2, r3, #31
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	3b1e      	subs	r3, #30
 80022ce:	051b      	lsls	r3, r3, #20
 80022d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d4:	430b      	orrs	r3, r1
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	6892      	ldr	r2, [r2, #8]
 80022da:	4619      	mov	r1, r3
 80022dc:	f7ff fac5 	bl	800186a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f280 80c6 	bge.w	8002476 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a67      	ldr	r2, [pc, #412]	; (800248c <HAL_ADC_ConfigChannel+0x678>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x4ea>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_ADC_ConfigChannel+0x67c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x4ee>
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <HAL_ADC_ConfigChannel+0x680>)
 8002300:	e000      	b.n	8002304 <HAL_ADC_ConfigChannel+0x4f0>
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_ADC_ConfigChannel+0x684>)
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fa0f 	bl	8001728 <LL_ADC_GetCommonPathInternalCh>
 800230a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a5e      	ldr	r2, [pc, #376]	; (800248c <HAL_ADC_ConfigChannel+0x678>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_ADC_ConfigChannel+0x50c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <HAL_ADC_ConfigChannel+0x67c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d10e      	bne.n	800233e <HAL_ADC_ConfigChannel+0x52a>
 8002320:	485a      	ldr	r0, [pc, #360]	; (800248c <HAL_ADC_ConfigChannel+0x678>)
 8002322:	f7ff fb75 	bl	8001a10 <LL_ADC_IsEnabled>
 8002326:	4604      	mov	r4, r0
 8002328:	4859      	ldr	r0, [pc, #356]	; (8002490 <HAL_ADC_ConfigChannel+0x67c>)
 800232a:	f7ff fb71 	bl	8001a10 <LL_ADC_IsEnabled>
 800232e:	4603      	mov	r3, r0
 8002330:	4323      	orrs	r3, r4
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf0c      	ite	eq
 8002336:	2301      	moveq	r3, #1
 8002338:	2300      	movne	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	e008      	b.n	8002350 <HAL_ADC_ConfigChannel+0x53c>
 800233e:	4857      	ldr	r0, [pc, #348]	; (800249c <HAL_ADC_ConfigChannel+0x688>)
 8002340:	f7ff fb66 	bl	8001a10 <LL_ADC_IsEnabled>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d07d      	beq.n	8002450 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a51      	ldr	r2, [pc, #324]	; (80024a0 <HAL_ADC_ConfigChannel+0x68c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d130      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x5ac>
 800235e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d12b      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4b      	ldr	r2, [pc, #300]	; (800249c <HAL_ADC_ConfigChannel+0x688>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 8081 	bne.w	8002476 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a44      	ldr	r2, [pc, #272]	; (800248c <HAL_ADC_ConfigChannel+0x678>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d004      	beq.n	8002388 <HAL_ADC_ConfigChannel+0x574>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a43      	ldr	r2, [pc, #268]	; (8002490 <HAL_ADC_ConfigChannel+0x67c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x578>
 8002388:	4a42      	ldr	r2, [pc, #264]	; (8002494 <HAL_ADC_ConfigChannel+0x680>)
 800238a:	e000      	b.n	800238e <HAL_ADC_ConfigChannel+0x57a>
 800238c:	4a42      	ldr	r2, [pc, #264]	; (8002498 <HAL_ADC_ConfigChannel+0x684>)
 800238e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f7ff f9b3 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239c:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_ADC_ConfigChannel+0x690>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	4a41      	ldr	r2, [pc, #260]	; (80024a8 <HAL_ADC_ConfigChannel+0x694>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	3301      	adds	r3, #1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023b0:	e002      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f9      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023be:	e05a      	b.n	8002476 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a39      	ldr	r2, [pc, #228]	; (80024ac <HAL_ADC_ConfigChannel+0x698>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d11e      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x5f4>
 80023ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d119      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a30      	ldr	r2, [pc, #192]	; (800249c <HAL_ADC_ConfigChannel+0x688>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d14b      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2a      	ldr	r2, [pc, #168]	; (800248c <HAL_ADC_ConfigChannel+0x678>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x5de>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a28      	ldr	r2, [pc, #160]	; (8002490 <HAL_ADC_ConfigChannel+0x67c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x5e2>
 80023f2:	4a28      	ldr	r2, [pc, #160]	; (8002494 <HAL_ADC_ConfigChannel+0x680>)
 80023f4:	e000      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5e4>
 80023f6:	4a28      	ldr	r2, [pc, #160]	; (8002498 <HAL_ADC_ConfigChannel+0x684>)
 80023f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7ff f97e 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002406:	e036      	b.n	8002476 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a28      	ldr	r2, [pc, #160]	; (80024b0 <HAL_ADC_ConfigChannel+0x69c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d131      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x662>
 8002412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d12c      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1e      	ldr	r2, [pc, #120]	; (800249c <HAL_ADC_ConfigChannel+0x688>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d127      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <HAL_ADC_ConfigChannel+0x678>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_ADC_ConfigChannel+0x626>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_ADC_ConfigChannel+0x67c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x62a>
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_ADC_ConfigChannel+0x680>)
 800243c:	e000      	b.n	8002440 <HAL_ADC_ConfigChannel+0x62c>
 800243e:	4a16      	ldr	r2, [pc, #88]	; (8002498 <HAL_ADC_ConfigChannel+0x684>)
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f7ff f95a 	bl	8001702 <LL_ADC_SetCommonPathInternalCh>
 800244e:	e012      	b.n	8002476 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	f043 0220 	orr.w	r2, r3, #32
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002462:	e008      	b.n	8002476 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800247e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002482:	4618      	mov	r0, r3
 8002484:	3784      	adds	r7, #132	; 0x84
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40022100 	.word	0x40022100
 8002494:	40022300 	.word	0x40022300
 8002498:	58026300 	.word	0x58026300
 800249c:	58026000 	.word	0x58026000
 80024a0:	cb840000 	.word	0xcb840000
 80024a4:	24000000 	.word	0x24000000
 80024a8:	053e2d63 	.word	0x053e2d63
 80024ac:	c7520000 	.word	0xc7520000
 80024b0:	cfb80000 	.word	0xcfb80000

080024b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff faa5 	bl	8001a10 <LL_ADC_IsEnabled>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d16e      	bne.n	80025aa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <ADC_Enable+0x100>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00d      	beq.n	80024f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e05a      	b.n	80025ac <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fa60 	bl	80019c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002500:	f7ff f8b0 	bl	8001664 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <ADC_Enable+0x104>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <ADC_Enable+0x66>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <ADC_Enable+0x108>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <ADC_Enable+0x6a>
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <ADC_Enable+0x10c>)
 800251c:	e000      	b.n	8002520 <ADC_Enable+0x6c>
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <ADC_Enable+0x110>)
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f9f1 	bl	8001908 <LL_ADC_GetMultimode>
 8002526:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a23      	ldr	r2, [pc, #140]	; (80025bc <ADC_Enable+0x108>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d002      	beq.n	8002538 <ADC_Enable+0x84>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	e000      	b.n	800253a <ADC_Enable+0x86>
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <ADC_Enable+0x104>)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	4293      	cmp	r3, r2
 8002540:	d02c      	beq.n	800259c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d130      	bne.n	80025aa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002548:	e028      	b.n	800259c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fa5e 	bl	8001a10 <LL_ADC_IsEnabled>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fa2e 	bl	80019c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002564:	f7ff f87e 	bl	8001664 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d914      	bls.n	800259c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d00d      	beq.n	800259c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e007      	b.n	80025ac <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d1cf      	bne.n	800254a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	8000003f 	.word	0x8000003f
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40022100 	.word	0x40022100
 80025c0:	40022300 	.word	0x40022300
 80025c4:	58026300 	.word	0x58026300

080025c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fa2e 	bl	8001a36 <LL_ADC_IsDisableOngoing>
 80025da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff fa15 	bl	8001a10 <LL_ADC_IsEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d047      	beq.n	800267c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d144      	bne.n	800267c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030d 	and.w	r3, r3, #13
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10c      	bne.n	800261a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f9ef 	bl	80019e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2203      	movs	r2, #3
 8002610:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002612:	f7ff f827 	bl	8001664 <HAL_GetTick>
 8002616:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002618:	e029      	b.n	800266e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e023      	b.n	800267e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002636:	f7ff f815 	bl	8001664 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d914      	bls.n	800266e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00d      	beq.n	800266e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e007      	b.n	800267e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1dc      	bne.n	8002636 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800269c:	2b00      	cmp	r3, #0
 800269e:	d14b      	bne.n	8002738 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d021      	beq.n	80026fe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff f894 	bl	80017ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d032      	beq.n	8002730 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d12b      	bne.n	8002730 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11f      	bne.n	8002730 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
 80026fc:	e018      	b.n	8002730 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f043 0201 	orr.w	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7fe fbf7 	bl	8000f24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002736:	e00e      	b.n	8002756 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff fb5b 	bl	8001e00 <HAL_ADC_ErrorCallback>
}
 800274a:	e004      	b.n	8002756 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4798      	blx	r3
}
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b084      	sub	sp, #16
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fb3d 	bl	8001dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f043 0204 	orr.w	r2, r3, #4
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff fb2d 	bl	8001e00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a7a      	ldr	r2, [pc, #488]	; (80029a8 <ADC_ConfigureBoostMode+0x1f8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <ADC_ConfigureBoostMode+0x1c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a79      	ldr	r2, [pc, #484]	; (80029ac <ADC_ConfigureBoostMode+0x1fc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d109      	bne.n	80027e0 <ADC_ConfigureBoostMode+0x30>
 80027cc:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <ADC_ConfigureBoostMode+0x200>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e008      	b.n	80027f2 <ADC_ConfigureBoostMode+0x42>
 80027e0:	4b74      	ldr	r3, [pc, #464]	; (80029b4 <ADC_ConfigureBoostMode+0x204>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01c      	beq.n	8002830 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027f6:	f003 ff3d 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 80027fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002804:	d010      	beq.n	8002828 <ADC_ConfigureBoostMode+0x78>
 8002806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800280a:	d873      	bhi.n	80028f4 <ADC_ConfigureBoostMode+0x144>
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002810:	d002      	beq.n	8002818 <ADC_ConfigureBoostMode+0x68>
 8002812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002816:	d16d      	bne.n	80028f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	60fb      	str	r3, [r7, #12]
        break;
 8002826:	e068      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	60fb      	str	r3, [r7, #12]
        break;
 800282e:	e064      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002830:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	f005 f982 	bl	8007b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800283c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002846:	d051      	beq.n	80028ec <ADC_ConfigureBoostMode+0x13c>
 8002848:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800284c:	d854      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 800284e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002852:	d047      	beq.n	80028e4 <ADC_ConfigureBoostMode+0x134>
 8002854:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002858:	d84e      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 800285a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800285e:	d03d      	beq.n	80028dc <ADC_ConfigureBoostMode+0x12c>
 8002860:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002864:	d848      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 8002866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800286a:	d033      	beq.n	80028d4 <ADC_ConfigureBoostMode+0x124>
 800286c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002870:	d842      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 8002872:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002876:	d029      	beq.n	80028cc <ADC_ConfigureBoostMode+0x11c>
 8002878:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800287c:	d83c      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 800287e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002882:	d01a      	beq.n	80028ba <ADC_ConfigureBoostMode+0x10a>
 8002884:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002888:	d836      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 800288a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800288e:	d014      	beq.n	80028ba <ADC_ConfigureBoostMode+0x10a>
 8002890:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002894:	d830      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 8002896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289a:	d00e      	beq.n	80028ba <ADC_ConfigureBoostMode+0x10a>
 800289c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028a0:	d82a      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 80028a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028a6:	d008      	beq.n	80028ba <ADC_ConfigureBoostMode+0x10a>
 80028a8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028ac:	d824      	bhi.n	80028f8 <ADC_ConfigureBoostMode+0x148>
 80028ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028b2:	d002      	beq.n	80028ba <ADC_ConfigureBoostMode+0x10a>
 80028b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028b8:	d11e      	bne.n	80028f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	0c9b      	lsrs	r3, r3, #18
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	60fb      	str	r3, [r7, #12]
        break;
 80028ca:	e016      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
        break;
 80028d2:	e012      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	60fb      	str	r3, [r7, #12]
        break;
 80028da:	e00e      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	60fb      	str	r3, [r7, #12]
        break;
 80028e2:	e00a      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	09db      	lsrs	r3, r3, #7
 80028e8:	60fb      	str	r3, [r7, #12]
        break;
 80028ea:	e006      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	60fb      	str	r3, [r7, #12]
        break;
 80028f2:	e002      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
        break;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80028f8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80028fa:	f7fe fee3 	bl	80016c4 <HAL_GetREVID>
 80028fe:	4603      	mov	r3, r0
 8002900:	f241 0203 	movw	r2, #4099	; 0x1003
 8002904:	4293      	cmp	r3, r2
 8002906:	d815      	bhi.n	8002934 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a2b      	ldr	r2, [pc, #172]	; (80029b8 <ADC_ConfigureBoostMode+0x208>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d908      	bls.n	8002922 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002920:	e03e      	b.n	80029a0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002930:	609a      	str	r2, [r3, #8]
}
 8002932:	e035      	b.n	80029a0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <ADC_ConfigureBoostMode+0x20c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d808      	bhi.n	8002954 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002950:	609a      	str	r2, [r3, #8]
}
 8002952:	e025      	b.n	80029a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <ADC_ConfigureBoostMode+0x210>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d80a      	bhi.n	8002972 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	e016      	b.n	80029a0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <ADC_ConfigureBoostMode+0x214>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d80a      	bhi.n	8002990 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	e007      	b.n	80029a0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800299e:	609a      	str	r2, [r3, #8]
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40022100 	.word	0x40022100
 80029b0:	40022300 	.word	0x40022300
 80029b4:	58026300 	.word	0x58026300
 80029b8:	01312d00 	.word	0x01312d00
 80029bc:	005f5e10 	.word	0x005f5e10
 80029c0:	00bebc20 	.word	0x00bebc20
 80029c4:	017d7840 	.word	0x017d7840

080029c8 <LL_ADC_IsEnabled>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <LL_ADC_IsEnabled+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_IsEnabled+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <LL_ADC_StartCalibration>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <LL_ADC_StartCalibration+0x38>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	3ffeffc0 	.word	0x3ffeffc0

08002a2c <LL_ADC_IsCalibrationOnGoing>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a40:	d101      	bne.n	8002a46 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_REG_StartConversion>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <LL_ADC_REG_StartConversion+0x24>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	7fffffc0 	.word	0x7fffffc0

08002a7c <LL_ADC_REG_IsConversionOngoing>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d101      	bne.n	8002a94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e04c      	b.n	8002b5c <HAL_ADCEx_Calibration_Start+0xb8>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fd7c 	bl	80025c8 <ADC_Disable>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d135      	bne.n	8002b46 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ade:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff7c 	bl	80029f0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002af8:	e014      	b.n	8002b24 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3301      	adds	r3, #1
 8002afe:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d30d      	bcc.n	8002b24 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0c:	f023 0312 	bic.w	r3, r3, #18
 8002b10:	f043 0210 	orr.w	r2, r3, #16
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e01b      	b.n	8002b5c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff7f 	bl	8002a2c <LL_ADC_IsCalibrationOnGoing>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e2      	bne.n	8002afa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b38:	f023 0303 	bic.w	r3, r3, #3
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	655a      	str	r2, [r3, #84]	; 0x54
 8002b44:	e005      	b.n	8002b52 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	f043 0210 	orr.w	r2, r3, #16
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	ffffeefd 	.word	0xffffeefd
 8002b68:	25c3f800 	.word	0x25c3f800

08002b6c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0a0      	sub	sp, #128	; 0x80
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff7d 	bl	8002a7c <LL_ADC_REG_IsConversionOngoing>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e08a      	b.n	8002ca2 <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e083      	b.n	8002ca2 <HAL_ADCEx_MultiModeStart_DMA+0x136>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a3f      	ldr	r2, [pc, #252]	; (8002cac <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8002bb4:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e001      	b.n	8002bbe <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e062      	b.n	8002ca2 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f7ff fc69 	bl	80024b4 <ADC_Enable>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002be8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fc5d 	bl	80024b4 <ADC_Enable>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002c00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d146      	bne.n	8002c96 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c0c:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c22:	4a25      	ldr	r2, [pc, #148]	; (8002cb8 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8002c24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	4a24      	ldr	r2, [pc, #144]	; (8002cbc <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4a23      	ldr	r2, [pc, #140]	; (8002cc0 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8002c34:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002c4c:	e000      	b.n	8002c50 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002c50:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	221c      	movs	r2, #28
 8002c58:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0210 	orr.w	r2, r2, #16
 8002c70:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c78:	330c      	adds	r3, #12
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f000 fda0 	bl	80037c4 <HAL_DMA_Start_IT>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fee0 	bl	8002a54 <LL_ADC_REG_StartConversion>
 8002c94:	e003      	b.n	8002c9e <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002c9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3780      	adds	r7, #128	; 0x80
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40022100 	.word	0x40022100
 8002cb4:	fffff0fe 	.word	0xfffff0fe
 8002cb8:	08002687 	.word	0x08002687
 8002cbc:	0800275f 	.word	0x0800275f
 8002cc0:	0800277b 	.word	0x0800277b
 8002cc4:	40022300 	.word	0x40022300
 8002cc8:	58026300 	.word	0x58026300

08002ccc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ccc:	b590      	push	{r4, r7, lr}
 8002cce:	b09f      	sub	sp, #124	; 0x7c
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0be      	b.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d102      	bne.n	8002d0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d04:	4b5b      	ldr	r3, [pc, #364]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	e001      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e09d      	b.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fea4 	bl	8002a7c <LL_ADC_REG_IsConversionOngoing>
 8002d34:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff fe9e 	bl	8002a7c <LL_ADC_REG_IsConversionOngoing>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d17f      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d17c      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a46      	ldr	r2, [pc, #280]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002d62:	e000      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002d64:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002d66:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d039      	beq.n	8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d80:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a3a      	ldr	r2, [pc, #232]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a38      	ldr	r2, [pc, #224]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10e      	bne.n	8002db4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002d96:	4836      	ldr	r0, [pc, #216]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d98:	f7ff fe16 	bl	80029c8 <LL_ADC_IsEnabled>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4835      	ldr	r0, [pc, #212]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002da0:	f7ff fe12 	bl	80029c8 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e008      	b.n	8002dc6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002db4:	4832      	ldr	r0, [pc, #200]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002db6:	f7ff fe07 	bl	80029c8 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d047      	beq.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	6811      	ldr	r1, [r2, #0]
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	6892      	ldr	r2, [r2, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002de2:	e03a      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10e      	bne.n	8002e22 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002e04:	481a      	ldr	r0, [pc, #104]	; (8002e70 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e06:	f7ff fddf 	bl	80029c8 <LL_ADC_IsEnabled>
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	4819      	ldr	r0, [pc, #100]	; (8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e0e:	f7ff fddb 	bl	80029c8 <LL_ADC_IsEnabled>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4323      	orrs	r3, r4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bf0c      	ite	eq
 8002e1a:	2301      	moveq	r3, #1
 8002e1c:	2300      	movne	r3, #0
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	e008      	b.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e22:	4817      	ldr	r0, [pc, #92]	; (8002e80 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e24:	f7ff fdd0 	bl	80029c8 <LL_ADC_IsEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2301      	moveq	r3, #1
 8002e30:	2300      	movne	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e42:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e44:	e009      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e58:	e000      	b.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e5a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	377c      	adds	r7, #124	; 0x7c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40022100 	.word	0x40022100
 8002e78:	40022300 	.word	0x40022300
 8002e7c:	58026300 	.word	0x58026300
 8002e80:	58026000 	.word	0x58026000
 8002e84:	fffff0e0 	.word	0xfffff0e0

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00
 8002ecc:	05fa0000 	.word	0x05fa0000

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db12      	blt.n	8002f60 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	490a      	ldr	r1, [pc, #40]	; (8002f6c <__NVIC_DisableIRQ+0x44>)
 8002f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	3320      	adds	r3, #32
 8002f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f54:	f3bf 8f4f 	dsb	sy
}
 8002f58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f5a:	f3bf 8f6f 	isb	sy
}
 8002f5e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800303c:	d301      	bcc.n	8003042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <SysTick_Config+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	f7ff ff8e 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <SysTick_Config+0x40>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <SysTick_Config+0x40>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff05 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003094:	f7ff ff1c 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 8003098:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	6978      	ldr	r0, [r7, #20]
 80030a0:	f7ff ff90 	bl	8002fc4 <NVIC_EncodePriority>
 80030a4:	4602      	mov	r2, r0
 80030a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff5f 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b2:	bf00      	nop
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	4603      	mov	r3, r0
 80030c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff0f 	bl	8002eec <__NVIC_EnableIRQ>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff1f 	bl	8002f28 <__NVIC_DisableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ff96 	bl	800302c <SysTick_Config>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003114:	f7fe faa6 	bl	8001664 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e316      	b.n	8003752 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a66      	ldr	r2, [pc, #408]	; (80032c4 <HAL_DMA_Init+0x1b8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d04a      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a65      	ldr	r2, [pc, #404]	; (80032c8 <HAL_DMA_Init+0x1bc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d045      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_DMA_Init+0x1c0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d040      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a62      	ldr	r2, [pc, #392]	; (80032d0 <HAL_DMA_Init+0x1c4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d03b      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a60      	ldr	r2, [pc, #384]	; (80032d4 <HAL_DMA_Init+0x1c8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d036      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5f      	ldr	r2, [pc, #380]	; (80032d8 <HAL_DMA_Init+0x1cc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d031      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_DMA_Init+0x1d0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d02c      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5c      	ldr	r2, [pc, #368]	; (80032e0 <HAL_DMA_Init+0x1d4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d027      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5a      	ldr	r2, [pc, #360]	; (80032e4 <HAL_DMA_Init+0x1d8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d022      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a59      	ldr	r2, [pc, #356]	; (80032e8 <HAL_DMA_Init+0x1dc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d01d      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a57      	ldr	r2, [pc, #348]	; (80032ec <HAL_DMA_Init+0x1e0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a56      	ldr	r2, [pc, #344]	; (80032f0 <HAL_DMA_Init+0x1e4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_DMA_Init+0x1e8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a53      	ldr	r2, [pc, #332]	; (80032f8 <HAL_DMA_Init+0x1ec>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a51      	ldr	r2, [pc, #324]	; (80032fc <HAL_DMA_Init+0x1f0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_DMA_Init+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a50      	ldr	r2, [pc, #320]	; (8003300 <HAL_DMA_Init+0x1f4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_DMA_Init+0xbc>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_DMA_Init+0xbe>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 813b 	beq.w	8003446 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <HAL_DMA_Init+0x1b8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_Init+0x174>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a36      	ldr	r2, [pc, #216]	; (80032c8 <HAL_DMA_Init+0x1bc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d045      	beq.n	8003280 <HAL_DMA_Init+0x174>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a34      	ldr	r2, [pc, #208]	; (80032cc <HAL_DMA_Init+0x1c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d040      	beq.n	8003280 <HAL_DMA_Init+0x174>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a33      	ldr	r2, [pc, #204]	; (80032d0 <HAL_DMA_Init+0x1c4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d03b      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a31      	ldr	r2, [pc, #196]	; (80032d4 <HAL_DMA_Init+0x1c8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d036      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a30      	ldr	r2, [pc, #192]	; (80032d8 <HAL_DMA_Init+0x1cc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d031      	beq.n	8003280 <HAL_DMA_Init+0x174>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2e      	ldr	r2, [pc, #184]	; (80032dc <HAL_DMA_Init+0x1d0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2d      	ldr	r2, [pc, #180]	; (80032e0 <HAL_DMA_Init+0x1d4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d027      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <HAL_DMA_Init+0x1d8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_Init+0x174>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <HAL_DMA_Init+0x1dc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a28      	ldr	r2, [pc, #160]	; (80032ec <HAL_DMA_Init+0x1e0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_Init+0x174>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_DMA_Init+0x1e4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <HAL_DMA_Init+0x1e8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_DMA_Init+0x1ec>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_Init+0x174>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a22      	ldr	r2, [pc, #136]	; (80032fc <HAL_DMA_Init+0x1f0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_Init+0x174>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_DMA_Init+0x1f4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <HAL_DMA_Init+0x186>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e007      	b.n	80032a2 <HAL_DMA_Init+0x196>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032a2:	e02f      	b.n	8003304 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032a4:	f7fe f9de 	bl	8001664 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	d928      	bls.n	8003304 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2203      	movs	r2, #3
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e246      	b.n	8003752 <HAL_DMA_Init+0x646>
 80032c4:	40020010 	.word	0x40020010
 80032c8:	40020028 	.word	0x40020028
 80032cc:	40020040 	.word	0x40020040
 80032d0:	40020058 	.word	0x40020058
 80032d4:	40020070 	.word	0x40020070
 80032d8:	40020088 	.word	0x40020088
 80032dc:	400200a0 	.word	0x400200a0
 80032e0:	400200b8 	.word	0x400200b8
 80032e4:	40020410 	.word	0x40020410
 80032e8:	40020428 	.word	0x40020428
 80032ec:	40020440 	.word	0x40020440
 80032f0:	40020458 	.word	0x40020458
 80032f4:	40020470 	.word	0x40020470
 80032f8:	40020488 	.word	0x40020488
 80032fc:	400204a0 	.word	0x400204a0
 8003300:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1c8      	bne.n	80032a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4b83      	ldr	r3, [pc, #524]	; (800352c <HAL_DMA_Init+0x420>)
 800331e:	4013      	ands	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800332a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003336:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003342:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	2b04      	cmp	r3, #4
 8003356:	d107      	bne.n	8003368 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4313      	orrs	r3, r2
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003368:	4b71      	ldr	r3, [pc, #452]	; (8003530 <HAL_DMA_Init+0x424>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b71      	ldr	r3, [pc, #452]	; (8003534 <HAL_DMA_Init+0x428>)
 800336e:	4013      	ands	r3, r2
 8003370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003374:	d328      	bcc.n	80033c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b28      	cmp	r3, #40	; 0x28
 800337c:	d903      	bls.n	8003386 <HAL_DMA_Init+0x27a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b2e      	cmp	r3, #46	; 0x2e
 8003384:	d917      	bls.n	80033b6 <HAL_DMA_Init+0x2aa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b3e      	cmp	r3, #62	; 0x3e
 800338c:	d903      	bls.n	8003396 <HAL_DMA_Init+0x28a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b42      	cmp	r3, #66	; 0x42
 8003394:	d90f      	bls.n	80033b6 <HAL_DMA_Init+0x2aa>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b46      	cmp	r3, #70	; 0x46
 800339c:	d903      	bls.n	80033a6 <HAL_DMA_Init+0x29a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b48      	cmp	r3, #72	; 0x48
 80033a4:	d907      	bls.n	80033b6 <HAL_DMA_Init+0x2aa>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b4e      	cmp	r3, #78	; 0x4e
 80033ac:	d905      	bls.n	80033ba <HAL_DMA_Init+0x2ae>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b52      	cmp	r3, #82	; 0x52
 80033b4:	d801      	bhi.n	80033ba <HAL_DMA_Init+0x2ae>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_DMA_Init+0x2b0>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0307 	bic.w	r3, r3, #7
 80033de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d117      	bne.n	8003422 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f001 fdcf 	bl	8004fa8 <DMA_CheckFifoParam>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e197      	b.n	8003752 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f001 fd0a 	bl	8004e44 <DMA_CalcBaseAndBitshift>
 8003430:	4603      	mov	r3, r0
 8003432:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	223f      	movs	r2, #63	; 0x3f
 800343e:	409a      	lsls	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e0cd      	b.n	80035e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a3b      	ldr	r2, [pc, #236]	; (8003538 <HAL_DMA_Init+0x42c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_Init+0x38a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a39      	ldr	r2, [pc, #228]	; (800353c <HAL_DMA_Init+0x430>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_Init+0x38a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a38      	ldr	r2, [pc, #224]	; (8003540 <HAL_DMA_Init+0x434>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_DMA_Init+0x38a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a36      	ldr	r2, [pc, #216]	; (8003544 <HAL_DMA_Init+0x438>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_DMA_Init+0x38a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a35      	ldr	r2, [pc, #212]	; (8003548 <HAL_DMA_Init+0x43c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_Init+0x38a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a33      	ldr	r2, [pc, #204]	; (800354c <HAL_DMA_Init+0x440>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_DMA_Init+0x38a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a32      	ldr	r2, [pc, #200]	; (8003550 <HAL_DMA_Init+0x444>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_Init+0x38a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a30      	ldr	r2, [pc, #192]	; (8003554 <HAL_DMA_Init+0x448>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d101      	bne.n	800349a <HAL_DMA_Init+0x38e>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_DMA_Init+0x390>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8097 	beq.w	80035d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a24      	ldr	r2, [pc, #144]	; (8003538 <HAL_DMA_Init+0x42c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d021      	beq.n	80034f0 <HAL_DMA_Init+0x3e4>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <HAL_DMA_Init+0x430>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01c      	beq.n	80034f0 <HAL_DMA_Init+0x3e4>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a21      	ldr	r2, [pc, #132]	; (8003540 <HAL_DMA_Init+0x434>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d017      	beq.n	80034f0 <HAL_DMA_Init+0x3e4>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_DMA_Init+0x438>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d012      	beq.n	80034f0 <HAL_DMA_Init+0x3e4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <HAL_DMA_Init+0x43c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00d      	beq.n	80034f0 <HAL_DMA_Init+0x3e4>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_DMA_Init+0x440>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d008      	beq.n	80034f0 <HAL_DMA_Init+0x3e4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_DMA_Init+0x444>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d003      	beq.n	80034f0 <HAL_DMA_Init+0x3e4>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_DMA_Init+0x448>)
 80034ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_DMA_Init+0x44c>)
 800350c:	4013      	ands	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d021      	beq.n	800355c <HAL_DMA_Init+0x450>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b80      	cmp	r3, #128	; 0x80
 800351e:	d102      	bne.n	8003526 <HAL_DMA_Init+0x41a>
 8003520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003524:	e01b      	b.n	800355e <HAL_DMA_Init+0x452>
 8003526:	2300      	movs	r3, #0
 8003528:	e019      	b.n	800355e <HAL_DMA_Init+0x452>
 800352a:	bf00      	nop
 800352c:	fe10803f 	.word	0xfe10803f
 8003530:	5c001000 	.word	0x5c001000
 8003534:	ffff0000 	.word	0xffff0000
 8003538:	58025408 	.word	0x58025408
 800353c:	5802541c 	.word	0x5802541c
 8003540:	58025430 	.word	0x58025430
 8003544:	58025444 	.word	0x58025444
 8003548:	58025458 	.word	0x58025458
 800354c:	5802546c 	.word	0x5802546c
 8003550:	58025480 	.word	0x58025480
 8003554:	58025494 	.word	0x58025494
 8003558:	fffe000f 	.word	0xfffe000f
 800355c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68d2      	ldr	r2, [r2, #12]
 8003562:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800356c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003574:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800357c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800358c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b6e      	ldr	r3, [pc, #440]	; (800375c <HAL_DMA_Init+0x650>)
 80035a4:	4413      	add	r3, r2
 80035a6:	4a6e      	ldr	r2, [pc, #440]	; (8003760 <HAL_DMA_Init+0x654>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f001 fc45 	bl	8004e44 <DMA_CalcBaseAndBitshift>
 80035ba:	4603      	mov	r3, r0
 80035bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2201      	movs	r2, #1
 80035c8:	409a      	lsls	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]
 80035ce:	e008      	b.n	80035e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2240      	movs	r2, #64	; 0x40
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e0b7      	b.n	8003752 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5f      	ldr	r2, [pc, #380]	; (8003764 <HAL_DMA_Init+0x658>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d072      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a5d      	ldr	r2, [pc, #372]	; (8003768 <HAL_DMA_Init+0x65c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d06d      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a5c      	ldr	r2, [pc, #368]	; (800376c <HAL_DMA_Init+0x660>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d068      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a5a      	ldr	r2, [pc, #360]	; (8003770 <HAL_DMA_Init+0x664>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d063      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a59      	ldr	r2, [pc, #356]	; (8003774 <HAL_DMA_Init+0x668>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d05e      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_DMA_Init+0x66c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d059      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a56      	ldr	r2, [pc, #344]	; (800377c <HAL_DMA_Init+0x670>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d054      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a54      	ldr	r2, [pc, #336]	; (8003780 <HAL_DMA_Init+0x674>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d04f      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a53      	ldr	r2, [pc, #332]	; (8003784 <HAL_DMA_Init+0x678>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d04a      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a51      	ldr	r2, [pc, #324]	; (8003788 <HAL_DMA_Init+0x67c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d045      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a50      	ldr	r2, [pc, #320]	; (800378c <HAL_DMA_Init+0x680>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d040      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a4e      	ldr	r2, [pc, #312]	; (8003790 <HAL_DMA_Init+0x684>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d03b      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a4d      	ldr	r2, [pc, #308]	; (8003794 <HAL_DMA_Init+0x688>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d036      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a4b      	ldr	r2, [pc, #300]	; (8003798 <HAL_DMA_Init+0x68c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d031      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4a      	ldr	r2, [pc, #296]	; (800379c <HAL_DMA_Init+0x690>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d02c      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a48      	ldr	r2, [pc, #288]	; (80037a0 <HAL_DMA_Init+0x694>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d027      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a47      	ldr	r2, [pc, #284]	; (80037a4 <HAL_DMA_Init+0x698>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a45      	ldr	r2, [pc, #276]	; (80037a8 <HAL_DMA_Init+0x69c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01d      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a44      	ldr	r2, [pc, #272]	; (80037ac <HAL_DMA_Init+0x6a0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a42      	ldr	r2, [pc, #264]	; (80037b0 <HAL_DMA_Init+0x6a4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a41      	ldr	r2, [pc, #260]	; (80037b4 <HAL_DMA_Init+0x6a8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <HAL_DMA_Init+0x6ac>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <HAL_DMA_Init+0x6b0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_Init+0x5c6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <HAL_DMA_Init+0x6b4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_Init+0x5ca>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_DMA_Init+0x5cc>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d032      	beq.n	8003742 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f001 fcdf 	bl	80050a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d102      	bne.n	80036f0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003704:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d010      	beq.n	8003730 <HAL_DMA_Init+0x624>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d80c      	bhi.n	8003730 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f001 fd5c 	bl	80051d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	e008      	b.n	8003742 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	a7fdabf8 	.word	0xa7fdabf8
 8003760:	cccccccd 	.word	0xcccccccd
 8003764:	40020010 	.word	0x40020010
 8003768:	40020028 	.word	0x40020028
 800376c:	40020040 	.word	0x40020040
 8003770:	40020058 	.word	0x40020058
 8003774:	40020070 	.word	0x40020070
 8003778:	40020088 	.word	0x40020088
 800377c:	400200a0 	.word	0x400200a0
 8003780:	400200b8 	.word	0x400200b8
 8003784:	40020410 	.word	0x40020410
 8003788:	40020428 	.word	0x40020428
 800378c:	40020440 	.word	0x40020440
 8003790:	40020458 	.word	0x40020458
 8003794:	40020470 	.word	0x40020470
 8003798:	40020488 	.word	0x40020488
 800379c:	400204a0 	.word	0x400204a0
 80037a0:	400204b8 	.word	0x400204b8
 80037a4:	58025408 	.word	0x58025408
 80037a8:	5802541c 	.word	0x5802541c
 80037ac:	58025430 	.word	0x58025430
 80037b0:	58025444 	.word	0x58025444
 80037b4:	58025458 	.word	0x58025458
 80037b8:	5802546c 	.word	0x5802546c
 80037bc:	58025480 	.word	0x58025480
 80037c0:	58025494 	.word	0x58025494

080037c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e226      	b.n	8003c2e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_DMA_Start_IT+0x2a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e21f      	b.n	8003c2e <HAL_DMA_Start_IT+0x46a>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	f040 820a 	bne.w	8003c18 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a68      	ldr	r2, [pc, #416]	; (80039b8 <HAL_DMA_Start_IT+0x1f4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d04a      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a66      	ldr	r2, [pc, #408]	; (80039bc <HAL_DMA_Start_IT+0x1f8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d045      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a65      	ldr	r2, [pc, #404]	; (80039c0 <HAL_DMA_Start_IT+0x1fc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d040      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a63      	ldr	r2, [pc, #396]	; (80039c4 <HAL_DMA_Start_IT+0x200>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03b      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a62      	ldr	r2, [pc, #392]	; (80039c8 <HAL_DMA_Start_IT+0x204>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d036      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a60      	ldr	r2, [pc, #384]	; (80039cc <HAL_DMA_Start_IT+0x208>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5f      	ldr	r2, [pc, #380]	; (80039d0 <HAL_DMA_Start_IT+0x20c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d02c      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a5d      	ldr	r2, [pc, #372]	; (80039d4 <HAL_DMA_Start_IT+0x210>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5c      	ldr	r2, [pc, #368]	; (80039d8 <HAL_DMA_Start_IT+0x214>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5a      	ldr	r2, [pc, #360]	; (80039dc <HAL_DMA_Start_IT+0x218>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a59      	ldr	r2, [pc, #356]	; (80039e0 <HAL_DMA_Start_IT+0x21c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a57      	ldr	r2, [pc, #348]	; (80039e4 <HAL_DMA_Start_IT+0x220>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a56      	ldr	r2, [pc, #344]	; (80039e8 <HAL_DMA_Start_IT+0x224>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a54      	ldr	r2, [pc, #336]	; (80039ec <HAL_DMA_Start_IT+0x228>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a53      	ldr	r2, [pc, #332]	; (80039f0 <HAL_DMA_Start_IT+0x22c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_Start_IT+0xee>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a51      	ldr	r2, [pc, #324]	; (80039f4 <HAL_DMA_Start_IT+0x230>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d108      	bne.n	80038c4 <HAL_DMA_Start_IT+0x100>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e007      	b.n	80038d4 <HAL_DMA_Start_IT+0x110>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f001 f906 	bl	8004aec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <HAL_DMA_Start_IT+0x1f4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d04a      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a33      	ldr	r2, [pc, #204]	; (80039bc <HAL_DMA_Start_IT+0x1f8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d045      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a31      	ldr	r2, [pc, #196]	; (80039c0 <HAL_DMA_Start_IT+0x1fc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d040      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a30      	ldr	r2, [pc, #192]	; (80039c4 <HAL_DMA_Start_IT+0x200>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d03b      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a2e      	ldr	r2, [pc, #184]	; (80039c8 <HAL_DMA_Start_IT+0x204>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d036      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a2d      	ldr	r2, [pc, #180]	; (80039cc <HAL_DMA_Start_IT+0x208>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d031      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <HAL_DMA_Start_IT+0x20c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d02c      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2a      	ldr	r2, [pc, #168]	; (80039d4 <HAL_DMA_Start_IT+0x210>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d027      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_DMA_Start_IT+0x214>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a27      	ldr	r2, [pc, #156]	; (80039dc <HAL_DMA_Start_IT+0x218>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <HAL_DMA_Start_IT+0x21c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a24      	ldr	r2, [pc, #144]	; (80039e4 <HAL_DMA_Start_IT+0x220>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <HAL_DMA_Start_IT+0x224>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <HAL_DMA_Start_IT+0x228>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <HAL_DMA_Start_IT+0x22c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_Start_IT+0x1bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_DMA_Start_IT+0x230>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_DMA_Start_IT+0x1c0>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_DMA_Start_IT+0x1c2>
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d036      	beq.n	80039f8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 021e 	bic.w	r2, r3, #30
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0216 	orr.w	r2, r2, #22
 800399c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d03e      	beq.n	8003a24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0208 	orr.w	r2, r2, #8
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e035      	b.n	8003a24 <HAL_DMA_Start_IT+0x260>
 80039b8:	40020010 	.word	0x40020010
 80039bc:	40020028 	.word	0x40020028
 80039c0:	40020040 	.word	0x40020040
 80039c4:	40020058 	.word	0x40020058
 80039c8:	40020070 	.word	0x40020070
 80039cc:	40020088 	.word	0x40020088
 80039d0:	400200a0 	.word	0x400200a0
 80039d4:	400200b8 	.word	0x400200b8
 80039d8:	40020410 	.word	0x40020410
 80039dc:	40020428 	.word	0x40020428
 80039e0:	40020440 	.word	0x40020440
 80039e4:	40020458 	.word	0x40020458
 80039e8:	40020470 	.word	0x40020470
 80039ec:	40020488 	.word	0x40020488
 80039f0:	400204a0 	.word	0x400204a0
 80039f4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 020e 	bic.w	r2, r3, #14
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 020a 	orr.w	r2, r2, #10
 8003a0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0204 	orr.w	r2, r2, #4
 8003a22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_DMA_Start_IT+0x474>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d072      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a82      	ldr	r2, [pc, #520]	; (8003c3c <HAL_DMA_Start_IT+0x478>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d06d      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a80      	ldr	r2, [pc, #512]	; (8003c40 <HAL_DMA_Start_IT+0x47c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d068      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a7f      	ldr	r2, [pc, #508]	; (8003c44 <HAL_DMA_Start_IT+0x480>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d063      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a7d      	ldr	r2, [pc, #500]	; (8003c48 <HAL_DMA_Start_IT+0x484>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d05e      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7c      	ldr	r2, [pc, #496]	; (8003c4c <HAL_DMA_Start_IT+0x488>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d059      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a7a      	ldr	r2, [pc, #488]	; (8003c50 <HAL_DMA_Start_IT+0x48c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d054      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a79      	ldr	r2, [pc, #484]	; (8003c54 <HAL_DMA_Start_IT+0x490>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d04f      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a77      	ldr	r2, [pc, #476]	; (8003c58 <HAL_DMA_Start_IT+0x494>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04a      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a76      	ldr	r2, [pc, #472]	; (8003c5c <HAL_DMA_Start_IT+0x498>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d045      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a74      	ldr	r2, [pc, #464]	; (8003c60 <HAL_DMA_Start_IT+0x49c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d040      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a73      	ldr	r2, [pc, #460]	; (8003c64 <HAL_DMA_Start_IT+0x4a0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d03b      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a71      	ldr	r2, [pc, #452]	; (8003c68 <HAL_DMA_Start_IT+0x4a4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d036      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a70      	ldr	r2, [pc, #448]	; (8003c6c <HAL_DMA_Start_IT+0x4a8>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d031      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a6e      	ldr	r2, [pc, #440]	; (8003c70 <HAL_DMA_Start_IT+0x4ac>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02c      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a6d      	ldr	r2, [pc, #436]	; (8003c74 <HAL_DMA_Start_IT+0x4b0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d027      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6b      	ldr	r2, [pc, #428]	; (8003c78 <HAL_DMA_Start_IT+0x4b4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a6a      	ldr	r2, [pc, #424]	; (8003c7c <HAL_DMA_Start_IT+0x4b8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d01d      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a68      	ldr	r2, [pc, #416]	; (8003c80 <HAL_DMA_Start_IT+0x4bc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a67      	ldr	r2, [pc, #412]	; (8003c84 <HAL_DMA_Start_IT+0x4c0>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a65      	ldr	r2, [pc, #404]	; (8003c88 <HAL_DMA_Start_IT+0x4c4>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a64      	ldr	r2, [pc, #400]	; (8003c8c <HAL_DMA_Start_IT+0x4c8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a62      	ldr	r2, [pc, #392]	; (8003c90 <HAL_DMA_Start_IT+0x4cc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_DMA_Start_IT+0x350>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a61      	ldr	r2, [pc, #388]	; (8003c94 <HAL_DMA_Start_IT+0x4d0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <HAL_DMA_Start_IT+0x354>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_DMA_Start_IT+0x356>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01a      	beq.n	8003b54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a37      	ldr	r2, [pc, #220]	; (8003c38 <HAL_DMA_Start_IT+0x474>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d04a      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a36      	ldr	r2, [pc, #216]	; (8003c3c <HAL_DMA_Start_IT+0x478>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d045      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a34      	ldr	r2, [pc, #208]	; (8003c40 <HAL_DMA_Start_IT+0x47c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d040      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a33      	ldr	r2, [pc, #204]	; (8003c44 <HAL_DMA_Start_IT+0x480>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d03b      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a31      	ldr	r2, [pc, #196]	; (8003c48 <HAL_DMA_Start_IT+0x484>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d036      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a30      	ldr	r2, [pc, #192]	; (8003c4c <HAL_DMA_Start_IT+0x488>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d031      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2e      	ldr	r2, [pc, #184]	; (8003c50 <HAL_DMA_Start_IT+0x48c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02c      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <HAL_DMA_Start_IT+0x490>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d027      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a2b      	ldr	r2, [pc, #172]	; (8003c58 <HAL_DMA_Start_IT+0x494>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d022      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a2a      	ldr	r2, [pc, #168]	; (8003c5c <HAL_DMA_Start_IT+0x498>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d01d      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a28      	ldr	r2, [pc, #160]	; (8003c60 <HAL_DMA_Start_IT+0x49c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d018      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <HAL_DMA_Start_IT+0x4a0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d013      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <HAL_DMA_Start_IT+0x4a4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <HAL_DMA_Start_IT+0x4a8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d009      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <HAL_DMA_Start_IT+0x4ac>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x430>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_DMA_Start_IT+0x4b0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d108      	bne.n	8003c06 <HAL_DMA_Start_IT+0x442>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e012      	b.n	8003c2c <HAL_DMA_Start_IT+0x468>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e009      	b.n	8003c2c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40020010 	.word	0x40020010
 8003c3c:	40020028 	.word	0x40020028
 8003c40:	40020040 	.word	0x40020040
 8003c44:	40020058 	.word	0x40020058
 8003c48:	40020070 	.word	0x40020070
 8003c4c:	40020088 	.word	0x40020088
 8003c50:	400200a0 	.word	0x400200a0
 8003c54:	400200b8 	.word	0x400200b8
 8003c58:	40020410 	.word	0x40020410
 8003c5c:	40020428 	.word	0x40020428
 8003c60:	40020440 	.word	0x40020440
 8003c64:	40020458 	.word	0x40020458
 8003c68:	40020470 	.word	0x40020470
 8003c6c:	40020488 	.word	0x40020488
 8003c70:	400204a0 	.word	0x400204a0
 8003c74:	400204b8 	.word	0x400204b8
 8003c78:	58025408 	.word	0x58025408
 8003c7c:	5802541c 	.word	0x5802541c
 8003c80:	58025430 	.word	0x58025430
 8003c84:	58025444 	.word	0x58025444
 8003c88:	58025458 	.word	0x58025458
 8003c8c:	5802546c 	.word	0x5802546c
 8003c90:	58025480 	.word	0x58025480
 8003c94:	58025494 	.word	0x58025494

08003c98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ca4:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <HAL_DMA_IRQHandler+0x1ac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a67      	ldr	r2, [pc, #412]	; (8003e48 <HAL_DMA_IRQHandler+0x1b0>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a9b      	lsrs	r3, r3, #10
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5f      	ldr	r2, [pc, #380]	; (8003e4c <HAL_DMA_IRQHandler+0x1b4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d04a      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a5d      	ldr	r2, [pc, #372]	; (8003e50 <HAL_DMA_IRQHandler+0x1b8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d045      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a5c      	ldr	r2, [pc, #368]	; (8003e54 <HAL_DMA_IRQHandler+0x1bc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d040      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5a      	ldr	r2, [pc, #360]	; (8003e58 <HAL_DMA_IRQHandler+0x1c0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d03b      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a59      	ldr	r2, [pc, #356]	; (8003e5c <HAL_DMA_IRQHandler+0x1c4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d036      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <HAL_DMA_IRQHandler+0x1c8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a56      	ldr	r2, [pc, #344]	; (8003e64 <HAL_DMA_IRQHandler+0x1cc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d02c      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a54      	ldr	r2, [pc, #336]	; (8003e68 <HAL_DMA_IRQHandler+0x1d0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d027      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a53      	ldr	r2, [pc, #332]	; (8003e6c <HAL_DMA_IRQHandler+0x1d4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d022      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a51      	ldr	r2, [pc, #324]	; (8003e70 <HAL_DMA_IRQHandler+0x1d8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01d      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a50      	ldr	r2, [pc, #320]	; (8003e74 <HAL_DMA_IRQHandler+0x1dc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d018      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a4e      	ldr	r2, [pc, #312]	; (8003e78 <HAL_DMA_IRQHandler+0x1e0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a4d      	ldr	r2, [pc, #308]	; (8003e7c <HAL_DMA_IRQHandler+0x1e4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00e      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a4b      	ldr	r2, [pc, #300]	; (8003e80 <HAL_DMA_IRQHandler+0x1e8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d009      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a4a      	ldr	r2, [pc, #296]	; (8003e84 <HAL_DMA_IRQHandler+0x1ec>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d004      	beq.n	8003d6a <HAL_DMA_IRQHandler+0xd2>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a48      	ldr	r2, [pc, #288]	; (8003e88 <HAL_DMA_IRQHandler+0x1f0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_DMA_IRQHandler+0xd6>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_DMA_IRQHandler+0xd8>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 842b 	beq.w	80045cc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	2208      	movs	r2, #8
 8003d80:	409a      	lsls	r2, r3
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80a2 	beq.w	8003ed0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2e      	ldr	r2, [pc, #184]	; (8003e4c <HAL_DMA_IRQHandler+0x1b4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d04a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	; (8003e50 <HAL_DMA_IRQHandler+0x1b8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d045      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <HAL_DMA_IRQHandler+0x1bc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d040      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2a      	ldr	r2, [pc, #168]	; (8003e58 <HAL_DMA_IRQHandler+0x1c0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d03b      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a28      	ldr	r2, [pc, #160]	; (8003e5c <HAL_DMA_IRQHandler+0x1c4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d036      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <HAL_DMA_IRQHandler+0x1c8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d031      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a25      	ldr	r2, [pc, #148]	; (8003e64 <HAL_DMA_IRQHandler+0x1cc>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02c      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_DMA_IRQHandler+0x1d0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d027      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <HAL_DMA_IRQHandler+0x1d4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d022      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <HAL_DMA_IRQHandler+0x1d8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d01d      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <HAL_DMA_IRQHandler+0x1dc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d018      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <HAL_DMA_IRQHandler+0x1e0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d013      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_DMA_IRQHandler+0x1e4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00e      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_DMA_IRQHandler+0x1e8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d009      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a19      	ldr	r2, [pc, #100]	; (8003e84 <HAL_DMA_IRQHandler+0x1ec>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x194>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_DMA_IRQHandler+0x1f0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d12f      	bne.n	8003e8c <HAL_DMA_IRQHandler+0x1f4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e02e      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x208>
 8003e42:	bf00      	nop
 8003e44:	24000000 	.word	0x24000000
 8003e48:	1b4e81b5 	.word	0x1b4e81b5
 8003e4c:	40020010 	.word	0x40020010
 8003e50:	40020028 	.word	0x40020028
 8003e54:	40020040 	.word	0x40020040
 8003e58:	40020058 	.word	0x40020058
 8003e5c:	40020070 	.word	0x40020070
 8003e60:	40020088 	.word	0x40020088
 8003e64:	400200a0 	.word	0x400200a0
 8003e68:	400200b8 	.word	0x400200b8
 8003e6c:	40020410 	.word	0x40020410
 8003e70:	40020428 	.word	0x40020428
 8003e74:	40020440 	.word	0x40020440
 8003e78:	40020458 	.word	0x40020458
 8003e7c:	40020470 	.word	0x40020470
 8003e80:	40020488 	.word	0x40020488
 8003e84:	400204a0 	.word	0x400204a0
 8003e88:	400204b8 	.word	0x400204b8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	f043 0201 	orr.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	fa22 f303 	lsr.w	r3, r2, r3
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d06e      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a69      	ldr	r2, [pc, #420]	; (8004090 <HAL_DMA_IRQHandler+0x3f8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d04a      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a67      	ldr	r2, [pc, #412]	; (8004094 <HAL_DMA_IRQHandler+0x3fc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d045      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a66      	ldr	r2, [pc, #408]	; (8004098 <HAL_DMA_IRQHandler+0x400>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d040      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a64      	ldr	r2, [pc, #400]	; (800409c <HAL_DMA_IRQHandler+0x404>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d03b      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a63      	ldr	r2, [pc, #396]	; (80040a0 <HAL_DMA_IRQHandler+0x408>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d036      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a61      	ldr	r2, [pc, #388]	; (80040a4 <HAL_DMA_IRQHandler+0x40c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d031      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a60      	ldr	r2, [pc, #384]	; (80040a8 <HAL_DMA_IRQHandler+0x410>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d02c      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5e      	ldr	r2, [pc, #376]	; (80040ac <HAL_DMA_IRQHandler+0x414>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d027      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a5d      	ldr	r2, [pc, #372]	; (80040b0 <HAL_DMA_IRQHandler+0x418>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d022      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a5b      	ldr	r2, [pc, #364]	; (80040b4 <HAL_DMA_IRQHandler+0x41c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a5a      	ldr	r2, [pc, #360]	; (80040b8 <HAL_DMA_IRQHandler+0x420>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d018      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_DMA_IRQHandler+0x424>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <HAL_DMA_IRQHandler+0x428>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a55      	ldr	r2, [pc, #340]	; (80040c4 <HAL_DMA_IRQHandler+0x42c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a54      	ldr	r2, [pc, #336]	; (80040c8 <HAL_DMA_IRQHandler+0x430>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x2ee>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a52      	ldr	r2, [pc, #328]	; (80040cc <HAL_DMA_IRQHandler+0x434>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10a      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x304>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e003      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x30c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	f043 0202 	orr.w	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2204      	movs	r2, #4
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 808f 	beq.w	80040f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <HAL_DMA_IRQHandler+0x3f8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04a      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <HAL_DMA_IRQHandler+0x3fc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d045      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a29      	ldr	r2, [pc, #164]	; (8004098 <HAL_DMA_IRQHandler+0x400>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d040      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a27      	ldr	r2, [pc, #156]	; (800409c <HAL_DMA_IRQHandler+0x404>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d03b      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <HAL_DMA_IRQHandler+0x408>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d036      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <HAL_DMA_IRQHandler+0x40c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d031      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <HAL_DMA_IRQHandler+0x410>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d02c      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a21      	ldr	r2, [pc, #132]	; (80040ac <HAL_DMA_IRQHandler+0x414>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d027      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a20      	ldr	r2, [pc, #128]	; (80040b0 <HAL_DMA_IRQHandler+0x418>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <HAL_DMA_IRQHandler+0x41c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01d      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_DMA_IRQHandler+0x420>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d018      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1b      	ldr	r2, [pc, #108]	; (80040bc <HAL_DMA_IRQHandler+0x424>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1a      	ldr	r2, [pc, #104]	; (80040c0 <HAL_DMA_IRQHandler+0x428>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00e      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a18      	ldr	r2, [pc, #96]	; (80040c4 <HAL_DMA_IRQHandler+0x42c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <HAL_DMA_IRQHandler+0x430>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_DMA_IRQHandler+0x3e2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <HAL_DMA_IRQHandler+0x434>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d12a      	bne.n	80040d0 <HAL_DMA_IRQHandler+0x438>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e023      	b.n	80040d8 <HAL_DMA_IRQHandler+0x440>
 8004090:	40020010 	.word	0x40020010
 8004094:	40020028 	.word	0x40020028
 8004098:	40020040 	.word	0x40020040
 800409c:	40020058 	.word	0x40020058
 80040a0:	40020070 	.word	0x40020070
 80040a4:	40020088 	.word	0x40020088
 80040a8:	400200a0 	.word	0x400200a0
 80040ac:	400200b8 	.word	0x400200b8
 80040b0:	40020410 	.word	0x40020410
 80040b4:	40020428 	.word	0x40020428
 80040b8:	40020440 	.word	0x40020440
 80040bc:	40020458 	.word	0x40020458
 80040c0:	40020470 	.word	0x40020470
 80040c4:	40020488 	.word	0x40020488
 80040c8:	400204a0 	.word	0x400204a0
 80040cc:	400204b8 	.word	0x400204b8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2300      	movs	r3, #0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00d      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2204      	movs	r2, #4
 80040e6:	409a      	lsls	r2, r3
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	f043 0204 	orr.w	r2, r3, #4
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	2210      	movs	r2, #16
 8004102:	409a      	lsls	r2, r3
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80a6 	beq.w	800425a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a85      	ldr	r2, [pc, #532]	; (8004328 <HAL_DMA_IRQHandler+0x690>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d04a      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a83      	ldr	r2, [pc, #524]	; (800432c <HAL_DMA_IRQHandler+0x694>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d045      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a82      	ldr	r2, [pc, #520]	; (8004330 <HAL_DMA_IRQHandler+0x698>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d040      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a80      	ldr	r2, [pc, #512]	; (8004334 <HAL_DMA_IRQHandler+0x69c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d03b      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a7f      	ldr	r2, [pc, #508]	; (8004338 <HAL_DMA_IRQHandler+0x6a0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d036      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a7d      	ldr	r2, [pc, #500]	; (800433c <HAL_DMA_IRQHandler+0x6a4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d031      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a7c      	ldr	r2, [pc, #496]	; (8004340 <HAL_DMA_IRQHandler+0x6a8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d02c      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a7a      	ldr	r2, [pc, #488]	; (8004344 <HAL_DMA_IRQHandler+0x6ac>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d027      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a79      	ldr	r2, [pc, #484]	; (8004348 <HAL_DMA_IRQHandler+0x6b0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d022      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a77      	ldr	r2, [pc, #476]	; (800434c <HAL_DMA_IRQHandler+0x6b4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01d      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a76      	ldr	r2, [pc, #472]	; (8004350 <HAL_DMA_IRQHandler+0x6b8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d018      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a74      	ldr	r2, [pc, #464]	; (8004354 <HAL_DMA_IRQHandler+0x6bc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a73      	ldr	r2, [pc, #460]	; (8004358 <HAL_DMA_IRQHandler+0x6c0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00e      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a71      	ldr	r2, [pc, #452]	; (800435c <HAL_DMA_IRQHandler+0x6c4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a70      	ldr	r2, [pc, #448]	; (8004360 <HAL_DMA_IRQHandler+0x6c8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_DMA_IRQHandler+0x516>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a6e      	ldr	r2, [pc, #440]	; (8004364 <HAL_DMA_IRQHandler+0x6cc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10a      	bne.n	80041c4 <HAL_DMA_IRQHandler+0x52c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf14      	ite	ne
 80041bc:	2301      	movne	r3, #1
 80041be:	2300      	moveq	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	e009      	b.n	80041d8 <HAL_DMA_IRQHandler+0x540>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03e      	beq.n	800425a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	2210      	movs	r2, #16
 80041e6:	409a      	lsls	r2, r3
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d018      	beq.n	800422c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d024      	beq.n	800425a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
 8004218:	e01f      	b.n	800425a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01b      	beq.n	800425a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
 800422a:	e016      	b.n	800425a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004236:	2b00      	cmp	r3, #0
 8004238:	d107      	bne.n	800424a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0208 	bic.w	r2, r2, #8
 8004248:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	2220      	movs	r2, #32
 8004264:	409a      	lsls	r2, r3
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8110 	beq.w	8004490 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <HAL_DMA_IRQHandler+0x690>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d04a      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2b      	ldr	r2, [pc, #172]	; (800432c <HAL_DMA_IRQHandler+0x694>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d045      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_DMA_IRQHandler+0x698>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d040      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a28      	ldr	r2, [pc, #160]	; (8004334 <HAL_DMA_IRQHandler+0x69c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d03b      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a26      	ldr	r2, [pc, #152]	; (8004338 <HAL_DMA_IRQHandler+0x6a0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d036      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a25      	ldr	r2, [pc, #148]	; (800433c <HAL_DMA_IRQHandler+0x6a4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d031      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a23      	ldr	r2, [pc, #140]	; (8004340 <HAL_DMA_IRQHandler+0x6a8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02c      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a22      	ldr	r2, [pc, #136]	; (8004344 <HAL_DMA_IRQHandler+0x6ac>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d027      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a20      	ldr	r2, [pc, #128]	; (8004348 <HAL_DMA_IRQHandler+0x6b0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d022      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_DMA_IRQHandler+0x6b4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d01d      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <HAL_DMA_IRQHandler+0x6b8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d018      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <HAL_DMA_IRQHandler+0x6bc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_DMA_IRQHandler+0x6c0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00e      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a19      	ldr	r2, [pc, #100]	; (800435c <HAL_DMA_IRQHandler+0x6c4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a17      	ldr	r2, [pc, #92]	; (8004360 <HAL_DMA_IRQHandler+0x6c8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <HAL_DMA_IRQHandler+0x678>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a16      	ldr	r2, [pc, #88]	; (8004364 <HAL_DMA_IRQHandler+0x6cc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d12b      	bne.n	8004368 <HAL_DMA_IRQHandler+0x6d0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf14      	ite	ne
 800431e:	2301      	movne	r3, #1
 8004320:	2300      	moveq	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e02a      	b.n	800437c <HAL_DMA_IRQHandler+0x6e4>
 8004326:	bf00      	nop
 8004328:	40020010 	.word	0x40020010
 800432c:	40020028 	.word	0x40020028
 8004330:	40020040 	.word	0x40020040
 8004334:	40020058 	.word	0x40020058
 8004338:	40020070 	.word	0x40020070
 800433c:	40020088 	.word	0x40020088
 8004340:	400200a0 	.word	0x400200a0
 8004344:	400200b8 	.word	0x400200b8
 8004348:	40020410 	.word	0x40020410
 800434c:	40020428 	.word	0x40020428
 8004350:	40020440 	.word	0x40020440
 8004354:	40020458 	.word	0x40020458
 8004358:	40020470 	.word	0x40020470
 800435c:	40020488 	.word	0x40020488
 8004360:	400204a0 	.word	0x400204a0
 8004364:	400204b8 	.word	0x400204b8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	bf14      	ite	ne
 8004376:	2301      	movne	r3, #1
 8004378:	2300      	moveq	r3, #0
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8087 	beq.w	8004490 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2220      	movs	r2, #32
 800438c:	409a      	lsls	r2, r3
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b04      	cmp	r3, #4
 800439c:	d139      	bne.n	8004412 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0216 	bic.w	r2, r2, #22
 80043ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <HAL_DMA_IRQHandler+0x736>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0208 	bic.w	r2, r2, #8
 80043dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	223f      	movs	r2, #63	; 0x3f
 80043e8:	409a      	lsls	r2, r3
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 834a 	beq.w	8004a9c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	4798      	blx	r3
          }
          return;
 8004410:	e344      	b.n	8004a9c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d018      	beq.n	8004452 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d108      	bne.n	8004440 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02c      	beq.n	8004490 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e027      	b.n	8004490 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d023      	beq.n	8004490 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
 8004450:	e01e      	b.n	8004490 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0210 	bic.w	r2, r2, #16
 800446e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8306 	beq.w	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8088 	beq.w	80045b8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2204      	movs	r2, #4
 80044ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a7a      	ldr	r2, [pc, #488]	; (80046a0 <HAL_DMA_IRQHandler+0xa08>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d04a      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a79      	ldr	r2, [pc, #484]	; (80046a4 <HAL_DMA_IRQHandler+0xa0c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d045      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a77      	ldr	r2, [pc, #476]	; (80046a8 <HAL_DMA_IRQHandler+0xa10>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d040      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a76      	ldr	r2, [pc, #472]	; (80046ac <HAL_DMA_IRQHandler+0xa14>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d03b      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a74      	ldr	r2, [pc, #464]	; (80046b0 <HAL_DMA_IRQHandler+0xa18>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d036      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a73      	ldr	r2, [pc, #460]	; (80046b4 <HAL_DMA_IRQHandler+0xa1c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d031      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a71      	ldr	r2, [pc, #452]	; (80046b8 <HAL_DMA_IRQHandler+0xa20>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d02c      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a70      	ldr	r2, [pc, #448]	; (80046bc <HAL_DMA_IRQHandler+0xa24>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d027      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a6e      	ldr	r2, [pc, #440]	; (80046c0 <HAL_DMA_IRQHandler+0xa28>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d022      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6d      	ldr	r2, [pc, #436]	; (80046c4 <HAL_DMA_IRQHandler+0xa2c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d01d      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a6b      	ldr	r2, [pc, #428]	; (80046c8 <HAL_DMA_IRQHandler+0xa30>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d018      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6a      	ldr	r2, [pc, #424]	; (80046cc <HAL_DMA_IRQHandler+0xa34>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d013      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a68      	ldr	r2, [pc, #416]	; (80046d0 <HAL_DMA_IRQHandler+0xa38>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00e      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a67      	ldr	r2, [pc, #412]	; (80046d4 <HAL_DMA_IRQHandler+0xa3c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a65      	ldr	r2, [pc, #404]	; (80046d8 <HAL_DMA_IRQHandler+0xa40>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_DMA_IRQHandler+0x8b8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a64      	ldr	r2, [pc, #400]	; (80046dc <HAL_DMA_IRQHandler+0xa44>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <HAL_DMA_IRQHandler+0x8ca>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	e007      	b.n	8004572 <HAL_DMA_IRQHandler+0x8da>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3301      	adds	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457a:	429a      	cmp	r2, r3
 800457c:	d307      	bcc.n	800458e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f2      	bne.n	8004572 <HAL_DMA_IRQHandler+0x8da>
 800458c:	e000      	b.n	8004590 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800458e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2203      	movs	r2, #3
 80045a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80045a6:	e003      	b.n	80045b0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 8272 	beq.w	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4798      	blx	r3
 80045ca:	e26c      	b.n	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a43      	ldr	r2, [pc, #268]	; (80046e0 <HAL_DMA_IRQHandler+0xa48>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d022      	beq.n	800461c <HAL_DMA_IRQHandler+0x984>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a42      	ldr	r2, [pc, #264]	; (80046e4 <HAL_DMA_IRQHandler+0xa4c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d01d      	beq.n	800461c <HAL_DMA_IRQHandler+0x984>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <HAL_DMA_IRQHandler+0xa50>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d018      	beq.n	800461c <HAL_DMA_IRQHandler+0x984>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a3f      	ldr	r2, [pc, #252]	; (80046ec <HAL_DMA_IRQHandler+0xa54>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d013      	beq.n	800461c <HAL_DMA_IRQHandler+0x984>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3d      	ldr	r2, [pc, #244]	; (80046f0 <HAL_DMA_IRQHandler+0xa58>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00e      	beq.n	800461c <HAL_DMA_IRQHandler+0x984>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a3c      	ldr	r2, [pc, #240]	; (80046f4 <HAL_DMA_IRQHandler+0xa5c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d009      	beq.n	800461c <HAL_DMA_IRQHandler+0x984>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a3a      	ldr	r2, [pc, #232]	; (80046f8 <HAL_DMA_IRQHandler+0xa60>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_DMA_IRQHandler+0x984>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a39      	ldr	r2, [pc, #228]	; (80046fc <HAL_DMA_IRQHandler+0xa64>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_DMA_IRQHandler+0x988>
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <HAL_DMA_IRQHandler+0x98a>
 8004620:	2300      	movs	r3, #0
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 823f 	beq.w	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2204      	movs	r2, #4
 800463a:	409a      	lsls	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80cd 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xb48>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80c7 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004656:	f003 031f 	and.w	r3, r3, #31
 800465a:	2204      	movs	r2, #4
 800465c:	409a      	lsls	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d049      	beq.n	8004700 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 8210 	beq.w	8004aa0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004688:	e20a      	b.n	8004aa0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8206 	beq.w	8004aa0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800469c:	e200      	b.n	8004aa0 <HAL_DMA_IRQHandler+0xe08>
 800469e:	bf00      	nop
 80046a0:	40020010 	.word	0x40020010
 80046a4:	40020028 	.word	0x40020028
 80046a8:	40020040 	.word	0x40020040
 80046ac:	40020058 	.word	0x40020058
 80046b0:	40020070 	.word	0x40020070
 80046b4:	40020088 	.word	0x40020088
 80046b8:	400200a0 	.word	0x400200a0
 80046bc:	400200b8 	.word	0x400200b8
 80046c0:	40020410 	.word	0x40020410
 80046c4:	40020428 	.word	0x40020428
 80046c8:	40020440 	.word	0x40020440
 80046cc:	40020458 	.word	0x40020458
 80046d0:	40020470 	.word	0x40020470
 80046d4:	40020488 	.word	0x40020488
 80046d8:	400204a0 	.word	0x400204a0
 80046dc:	400204b8 	.word	0x400204b8
 80046e0:	58025408 	.word	0x58025408
 80046e4:	5802541c 	.word	0x5802541c
 80046e8:	58025430 	.word	0x58025430
 80046ec:	58025444 	.word	0x58025444
 80046f0:	58025458 	.word	0x58025458
 80046f4:	5802546c 	.word	0x5802546c
 80046f8:	58025480 	.word	0x58025480
 80046fc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d160      	bne.n	80047cc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a7f      	ldr	r2, [pc, #508]	; (800490c <HAL_DMA_IRQHandler+0xc74>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d04a      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a7d      	ldr	r2, [pc, #500]	; (8004910 <HAL_DMA_IRQHandler+0xc78>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d045      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7c      	ldr	r2, [pc, #496]	; (8004914 <HAL_DMA_IRQHandler+0xc7c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d040      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7a      	ldr	r2, [pc, #488]	; (8004918 <HAL_DMA_IRQHandler+0xc80>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d03b      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a79      	ldr	r2, [pc, #484]	; (800491c <HAL_DMA_IRQHandler+0xc84>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d036      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a77      	ldr	r2, [pc, #476]	; (8004920 <HAL_DMA_IRQHandler+0xc88>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d031      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a76      	ldr	r2, [pc, #472]	; (8004924 <HAL_DMA_IRQHandler+0xc8c>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d02c      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a74      	ldr	r2, [pc, #464]	; (8004928 <HAL_DMA_IRQHandler+0xc90>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d027      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a73      	ldr	r2, [pc, #460]	; (800492c <HAL_DMA_IRQHandler+0xc94>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d022      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a71      	ldr	r2, [pc, #452]	; (8004930 <HAL_DMA_IRQHandler+0xc98>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01d      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a70      	ldr	r2, [pc, #448]	; (8004934 <HAL_DMA_IRQHandler+0xc9c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a6e      	ldr	r2, [pc, #440]	; (8004938 <HAL_DMA_IRQHandler+0xca0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6d      	ldr	r2, [pc, #436]	; (800493c <HAL_DMA_IRQHandler+0xca4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6b      	ldr	r2, [pc, #428]	; (8004940 <HAL_DMA_IRQHandler+0xca8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6a      	ldr	r2, [pc, #424]	; (8004944 <HAL_DMA_IRQHandler+0xcac>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_DMA_IRQHandler+0xb12>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a68      	ldr	r2, [pc, #416]	; (8004948 <HAL_DMA_IRQHandler+0xcb0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <HAL_DMA_IRQHandler+0xb24>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0208 	bic.w	r2, r2, #8
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e007      	b.n	80047cc <HAL_DMA_IRQHandler+0xb34>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8165 	beq.w	8004aa0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047de:	e15f      	b.n	8004aa0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2202      	movs	r2, #2
 80047ea:	409a      	lsls	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80c5 	beq.w	8004980 <HAL_DMA_IRQHandler+0xce8>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 80bf 	beq.w	8004980 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2202      	movs	r2, #2
 800480c:	409a      	lsls	r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d018      	beq.n	800484e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 813a 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004838:	e134      	b.n	8004aa4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8130 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800484c:	e12a      	b.n	8004aa4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 8089 	bne.w	800496c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2b      	ldr	r2, [pc, #172]	; (800490c <HAL_DMA_IRQHandler+0xc74>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04a      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a29      	ldr	r2, [pc, #164]	; (8004910 <HAL_DMA_IRQHandler+0xc78>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d045      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a28      	ldr	r2, [pc, #160]	; (8004914 <HAL_DMA_IRQHandler+0xc7c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d040      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a26      	ldr	r2, [pc, #152]	; (8004918 <HAL_DMA_IRQHandler+0xc80>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d03b      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a25      	ldr	r2, [pc, #148]	; (800491c <HAL_DMA_IRQHandler+0xc84>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d036      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a23      	ldr	r2, [pc, #140]	; (8004920 <HAL_DMA_IRQHandler+0xc88>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a22      	ldr	r2, [pc, #136]	; (8004924 <HAL_DMA_IRQHandler+0xc8c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d02c      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a20      	ldr	r2, [pc, #128]	; (8004928 <HAL_DMA_IRQHandler+0xc90>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d027      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_DMA_IRQHandler+0xc94>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <HAL_DMA_IRQHandler+0xc98>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_DMA_IRQHandler+0xc9c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <HAL_DMA_IRQHandler+0xca0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_DMA_IRQHandler+0xca4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_DMA_IRQHandler+0xca8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <HAL_DMA_IRQHandler+0xcac>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_DMA_IRQHandler+0xc62>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a14      	ldr	r2, [pc, #80]	; (8004948 <HAL_DMA_IRQHandler+0xcb0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d128      	bne.n	800494c <HAL_DMA_IRQHandler+0xcb4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0214 	bic.w	r2, r2, #20
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e027      	b.n	800495c <HAL_DMA_IRQHandler+0xcc4>
 800490c:	40020010 	.word	0x40020010
 8004910:	40020028 	.word	0x40020028
 8004914:	40020040 	.word	0x40020040
 8004918:	40020058 	.word	0x40020058
 800491c:	40020070 	.word	0x40020070
 8004920:	40020088 	.word	0x40020088
 8004924:	400200a0 	.word	0x400200a0
 8004928:	400200b8 	.word	0x400200b8
 800492c:	40020410 	.word	0x40020410
 8004930:	40020428 	.word	0x40020428
 8004934:	40020440 	.word	0x40020440
 8004938:	40020458 	.word	0x40020458
 800493c:	40020470 	.word	0x40020470
 8004940:	40020488 	.word	0x40020488
 8004944:	400204a0 	.word	0x400204a0
 8004948:	400204b8 	.word	0x400204b8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 020a 	bic.w	r2, r2, #10
 800495a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 8097 	beq.w	8004aa4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497e:	e091      	b.n	8004aa4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2208      	movs	r2, #8
 800498a:	409a      	lsls	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8088 	beq.w	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8082 	beq.w	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a41      	ldr	r2, [pc, #260]	; (8004aac <HAL_DMA_IRQHandler+0xe14>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a3f      	ldr	r2, [pc, #252]	; (8004ab0 <HAL_DMA_IRQHandler+0xe18>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a3e      	ldr	r2, [pc, #248]	; (8004ab4 <HAL_DMA_IRQHandler+0xe1c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a3c      	ldr	r2, [pc, #240]	; (8004ab8 <HAL_DMA_IRQHandler+0xe20>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a3b      	ldr	r2, [pc, #236]	; (8004abc <HAL_DMA_IRQHandler+0xe24>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a39      	ldr	r2, [pc, #228]	; (8004ac0 <HAL_DMA_IRQHandler+0xe28>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <HAL_DMA_IRQHandler+0xe2c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a36      	ldr	r2, [pc, #216]	; (8004ac8 <HAL_DMA_IRQHandler+0xe30>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a35      	ldr	r2, [pc, #212]	; (8004acc <HAL_DMA_IRQHandler+0xe34>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a33      	ldr	r2, [pc, #204]	; (8004ad0 <HAL_DMA_IRQHandler+0xe38>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a32      	ldr	r2, [pc, #200]	; (8004ad4 <HAL_DMA_IRQHandler+0xe3c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a30      	ldr	r2, [pc, #192]	; (8004ad8 <HAL_DMA_IRQHandler+0xe40>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a2f      	ldr	r2, [pc, #188]	; (8004adc <HAL_DMA_IRQHandler+0xe44>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a2d      	ldr	r2, [pc, #180]	; (8004ae0 <HAL_DMA_IRQHandler+0xe48>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2c      	ldr	r2, [pc, #176]	; (8004ae4 <HAL_DMA_IRQHandler+0xe4c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xdaa>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <HAL_DMA_IRQHandler+0xe50>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d108      	bne.n	8004a54 <HAL_DMA_IRQHandler+0xdbc>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 021c 	bic.w	r2, r2, #28
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e007      	b.n	8004a64 <HAL_DMA_IRQHandler+0xdcc>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 020e 	bic.w	r2, r2, #14
 8004a62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
 8004a9a:	e004      	b.n	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a9c:	bf00      	nop
 8004a9e:	e002      	b.n	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa0:	bf00      	nop
 8004aa2:	e000      	b.n	8004aa6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004aa6:	3728      	adds	r7, #40	; 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	40020028 	.word	0x40020028
 8004ab4:	40020040 	.word	0x40020040
 8004ab8:	40020058 	.word	0x40020058
 8004abc:	40020070 	.word	0x40020070
 8004ac0:	40020088 	.word	0x40020088
 8004ac4:	400200a0 	.word	0x400200a0
 8004ac8:	400200b8 	.word	0x400200b8
 8004acc:	40020410 	.word	0x40020410
 8004ad0:	40020428 	.word	0x40020428
 8004ad4:	40020440 	.word	0x40020440
 8004ad8:	40020458 	.word	0x40020458
 8004adc:	40020470 	.word	0x40020470
 8004ae0:	40020488 	.word	0x40020488
 8004ae4:	400204a0 	.word	0x400204a0
 8004ae8:	400204b8 	.word	0x400204b8

08004aec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7f      	ldr	r2, [pc, #508]	; (8004d08 <DMA_SetConfig+0x21c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d072      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7d      	ldr	r2, [pc, #500]	; (8004d0c <DMA_SetConfig+0x220>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d06d      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7c      	ldr	r2, [pc, #496]	; (8004d10 <DMA_SetConfig+0x224>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d068      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a7a      	ldr	r2, [pc, #488]	; (8004d14 <DMA_SetConfig+0x228>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d063      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a79      	ldr	r2, [pc, #484]	; (8004d18 <DMA_SetConfig+0x22c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d05e      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a77      	ldr	r2, [pc, #476]	; (8004d1c <DMA_SetConfig+0x230>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d059      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a76      	ldr	r2, [pc, #472]	; (8004d20 <DMA_SetConfig+0x234>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d054      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a74      	ldr	r2, [pc, #464]	; (8004d24 <DMA_SetConfig+0x238>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d04f      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a73      	ldr	r2, [pc, #460]	; (8004d28 <DMA_SetConfig+0x23c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d04a      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a71      	ldr	r2, [pc, #452]	; (8004d2c <DMA_SetConfig+0x240>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d045      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a70      	ldr	r2, [pc, #448]	; (8004d30 <DMA_SetConfig+0x244>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d040      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6e      	ldr	r2, [pc, #440]	; (8004d34 <DMA_SetConfig+0x248>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6d      	ldr	r2, [pc, #436]	; (8004d38 <DMA_SetConfig+0x24c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d036      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a6b      	ldr	r2, [pc, #428]	; (8004d3c <DMA_SetConfig+0x250>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d031      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a6a      	ldr	r2, [pc, #424]	; (8004d40 <DMA_SetConfig+0x254>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d02c      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a68      	ldr	r2, [pc, #416]	; (8004d44 <DMA_SetConfig+0x258>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d027      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a67      	ldr	r2, [pc, #412]	; (8004d48 <DMA_SetConfig+0x25c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a65      	ldr	r2, [pc, #404]	; (8004d4c <DMA_SetConfig+0x260>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01d      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a64      	ldr	r2, [pc, #400]	; (8004d50 <DMA_SetConfig+0x264>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d018      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a62      	ldr	r2, [pc, #392]	; (8004d54 <DMA_SetConfig+0x268>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d013      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a61      	ldr	r2, [pc, #388]	; (8004d58 <DMA_SetConfig+0x26c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00e      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a5f      	ldr	r2, [pc, #380]	; (8004d5c <DMA_SetConfig+0x270>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d009      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a5e      	ldr	r2, [pc, #376]	; (8004d60 <DMA_SetConfig+0x274>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d004      	beq.n	8004bf6 <DMA_SetConfig+0x10a>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a5c      	ldr	r2, [pc, #368]	; (8004d64 <DMA_SetConfig+0x278>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d101      	bne.n	8004bfa <DMA_SetConfig+0x10e>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e000      	b.n	8004bfc <DMA_SetConfig+0x110>
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00d      	beq.n	8004c1c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c08:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c1a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a39      	ldr	r2, [pc, #228]	; (8004d08 <DMA_SetConfig+0x21c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04a      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a38      	ldr	r2, [pc, #224]	; (8004d0c <DMA_SetConfig+0x220>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d045      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <DMA_SetConfig+0x224>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d040      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <DMA_SetConfig+0x228>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d03b      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a33      	ldr	r2, [pc, #204]	; (8004d18 <DMA_SetConfig+0x22c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d036      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a32      	ldr	r2, [pc, #200]	; (8004d1c <DMA_SetConfig+0x230>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d031      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a30      	ldr	r2, [pc, #192]	; (8004d20 <DMA_SetConfig+0x234>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02c      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	; (8004d24 <DMA_SetConfig+0x238>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d027      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	; (8004d28 <DMA_SetConfig+0x23c>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d022      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <DMA_SetConfig+0x240>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d01d      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <DMA_SetConfig+0x244>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d018      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <DMA_SetConfig+0x248>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d013      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <DMA_SetConfig+0x24c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00e      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <DMA_SetConfig+0x250>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <DMA_SetConfig+0x254>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <DMA_SetConfig+0x1d0>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <DMA_SetConfig+0x258>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <DMA_SetConfig+0x1d4>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <DMA_SetConfig+0x1d6>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d059      	beq.n	8004d7a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	223f      	movs	r2, #63	; 0x3f
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ce4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d138      	bne.n	8004d68 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d06:	e086      	b.n	8004e16 <DMA_SetConfig+0x32a>
 8004d08:	40020010 	.word	0x40020010
 8004d0c:	40020028 	.word	0x40020028
 8004d10:	40020040 	.word	0x40020040
 8004d14:	40020058 	.word	0x40020058
 8004d18:	40020070 	.word	0x40020070
 8004d1c:	40020088 	.word	0x40020088
 8004d20:	400200a0 	.word	0x400200a0
 8004d24:	400200b8 	.word	0x400200b8
 8004d28:	40020410 	.word	0x40020410
 8004d2c:	40020428 	.word	0x40020428
 8004d30:	40020440 	.word	0x40020440
 8004d34:	40020458 	.word	0x40020458
 8004d38:	40020470 	.word	0x40020470
 8004d3c:	40020488 	.word	0x40020488
 8004d40:	400204a0 	.word	0x400204a0
 8004d44:	400204b8 	.word	0x400204b8
 8004d48:	58025408 	.word	0x58025408
 8004d4c:	5802541c 	.word	0x5802541c
 8004d50:	58025430 	.word	0x58025430
 8004d54:	58025444 	.word	0x58025444
 8004d58:	58025458 	.word	0x58025458
 8004d5c:	5802546c 	.word	0x5802546c
 8004d60:	58025480 	.word	0x58025480
 8004d64:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
}
 8004d78:	e04d      	b.n	8004e16 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a29      	ldr	r2, [pc, #164]	; (8004e24 <DMA_SetConfig+0x338>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d022      	beq.n	8004dca <DMA_SetConfig+0x2de>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a27      	ldr	r2, [pc, #156]	; (8004e28 <DMA_SetConfig+0x33c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01d      	beq.n	8004dca <DMA_SetConfig+0x2de>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <DMA_SetConfig+0x340>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d018      	beq.n	8004dca <DMA_SetConfig+0x2de>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a24      	ldr	r2, [pc, #144]	; (8004e30 <DMA_SetConfig+0x344>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <DMA_SetConfig+0x2de>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a23      	ldr	r2, [pc, #140]	; (8004e34 <DMA_SetConfig+0x348>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00e      	beq.n	8004dca <DMA_SetConfig+0x2de>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <DMA_SetConfig+0x34c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d009      	beq.n	8004dca <DMA_SetConfig+0x2de>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <DMA_SetConfig+0x350>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <DMA_SetConfig+0x2de>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <DMA_SetConfig+0x354>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d101      	bne.n	8004dce <DMA_SetConfig+0x2e2>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <DMA_SetConfig+0x2e4>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	2201      	movs	r2, #1
 8004dde:	409a      	lsls	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d108      	bne.n	8004e06 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	60da      	str	r2, [r3, #12]
}
 8004e04:	e007      	b.n	8004e16 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	60da      	str	r2, [r3, #12]
}
 8004e16:	bf00      	nop
 8004e18:	371c      	adds	r7, #28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	58025408 	.word	0x58025408
 8004e28:	5802541c 	.word	0x5802541c
 8004e2c:	58025430 	.word	0x58025430
 8004e30:	58025444 	.word	0x58025444
 8004e34:	58025458 	.word	0x58025458
 8004e38:	5802546c 	.word	0x5802546c
 8004e3c:	58025480 	.word	0x58025480
 8004e40:	58025494 	.word	0x58025494

08004e44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a42      	ldr	r2, [pc, #264]	; (8004f5c <DMA_CalcBaseAndBitshift+0x118>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d04a      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a41      	ldr	r2, [pc, #260]	; (8004f60 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d045      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3f      	ldr	r2, [pc, #252]	; (8004f64 <DMA_CalcBaseAndBitshift+0x120>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d040      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3e      	ldr	r2, [pc, #248]	; (8004f68 <DMA_CalcBaseAndBitshift+0x124>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d03b      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <DMA_CalcBaseAndBitshift+0x128>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d036      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d031      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a39      	ldr	r2, [pc, #228]	; (8004f74 <DMA_CalcBaseAndBitshift+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d02c      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a38      	ldr	r2, [pc, #224]	; (8004f78 <DMA_CalcBaseAndBitshift+0x134>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d027      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a36      	ldr	r2, [pc, #216]	; (8004f7c <DMA_CalcBaseAndBitshift+0x138>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d022      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a35      	ldr	r2, [pc, #212]	; (8004f80 <DMA_CalcBaseAndBitshift+0x13c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d01d      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a33      	ldr	r2, [pc, #204]	; (8004f84 <DMA_CalcBaseAndBitshift+0x140>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a32      	ldr	r2, [pc, #200]	; (8004f88 <DMA_CalcBaseAndBitshift+0x144>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a30      	ldr	r2, [pc, #192]	; (8004f8c <DMA_CalcBaseAndBitshift+0x148>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a2d      	ldr	r2, [pc, #180]	; (8004f94 <DMA_CalcBaseAndBitshift+0x150>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <DMA_CalcBaseAndBitshift+0xa8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2c      	ldr	r2, [pc, #176]	; (8004f98 <DMA_CalcBaseAndBitshift+0x154>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <DMA_CalcBaseAndBitshift+0xac>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <DMA_CalcBaseAndBitshift+0xae>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d024      	beq.n	8004f40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	3b10      	subs	r3, #16
 8004efe:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <DMA_CalcBaseAndBitshift+0x158>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	4a24      	ldr	r2, [pc, #144]	; (8004fa0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f10:	5cd3      	ldrb	r3, [r2, r3]
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d908      	bls.n	8004f30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	1d1a      	adds	r2, r3, #4
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8004f2e:	e00d      	b.n	8004f4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f3e:	e005      	b.n	8004f4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	40020010 	.word	0x40020010
 8004f60:	40020028 	.word	0x40020028
 8004f64:	40020040 	.word	0x40020040
 8004f68:	40020058 	.word	0x40020058
 8004f6c:	40020070 	.word	0x40020070
 8004f70:	40020088 	.word	0x40020088
 8004f74:	400200a0 	.word	0x400200a0
 8004f78:	400200b8 	.word	0x400200b8
 8004f7c:	40020410 	.word	0x40020410
 8004f80:	40020428 	.word	0x40020428
 8004f84:	40020440 	.word	0x40020440
 8004f88:	40020458 	.word	0x40020458
 8004f8c:	40020470 	.word	0x40020470
 8004f90:	40020488 	.word	0x40020488
 8004f94:	400204a0 	.word	0x400204a0
 8004f98:	400204b8 	.word	0x400204b8
 8004f9c:	aaaaaaab 	.word	0xaaaaaaab
 8004fa0:	0800b474 	.word	0x0800b474
 8004fa4:	fffffc00 	.word	0xfffffc00

08004fa8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d120      	bne.n	8004ffe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d858      	bhi.n	8005076 <DMA_CheckFifoParam+0xce>
 8004fc4:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <DMA_CheckFifoParam+0x24>)
 8004fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fca:	bf00      	nop
 8004fcc:	08004fdd 	.word	0x08004fdd
 8004fd0:	08004fef 	.word	0x08004fef
 8004fd4:	08004fdd 	.word	0x08004fdd
 8004fd8:	08005077 	.word	0x08005077
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d048      	beq.n	800507a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fec:	e045      	b.n	800507a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ff6:	d142      	bne.n	800507e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ffc:	e03f      	b.n	800507e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005006:	d123      	bne.n	8005050 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	2b03      	cmp	r3, #3
 800500e:	d838      	bhi.n	8005082 <DMA_CheckFifoParam+0xda>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <DMA_CheckFifoParam+0x70>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	08005029 	.word	0x08005029
 800501c:	0800502f 	.word	0x0800502f
 8005020:	08005029 	.word	0x08005029
 8005024:	08005041 	.word	0x08005041
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
        break;
 800502c:	e030      	b.n	8005090 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d025      	beq.n	8005086 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800503e:	e022      	b.n	8005086 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005048:	d11f      	bne.n	800508a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800504e:	e01c      	b.n	800508a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	2b02      	cmp	r3, #2
 8005056:	d902      	bls.n	800505e <DMA_CheckFifoParam+0xb6>
 8005058:	2b03      	cmp	r3, #3
 800505a:	d003      	beq.n	8005064 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800505c:	e018      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
        break;
 8005062:	e015      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	73fb      	strb	r3, [r7, #15]
    break;
 8005074:	e00b      	b.n	800508e <DMA_CheckFifoParam+0xe6>
        break;
 8005076:	bf00      	nop
 8005078:	e00a      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 800507a:	bf00      	nop
 800507c:	e008      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 800507e:	bf00      	nop
 8005080:	e006      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 8005082:	bf00      	nop
 8005084:	e004      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
        break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <DMA_CheckFifoParam+0xe8>
    break;
 800508e:	bf00      	nop
    }
  }

  return status;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop

080050a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a38      	ldr	r2, [pc, #224]	; (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a36      	ldr	r2, [pc, #216]	; (8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a35      	ldr	r2, [pc, #212]	; (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a32      	ldr	r2, [pc, #200]	; (80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a30      	ldr	r2, [pc, #192]	; (80051a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2f      	ldr	r2, [pc, #188]	; (80051ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2d      	ldr	r2, [pc, #180]	; (80051b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01a      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	3b08      	subs	r3, #8
 8005110:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a24      	ldr	r2, [pc, #144]	; (80051bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800512c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2201      	movs	r2, #1
 8005136:	409a      	lsls	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800513c:	e024      	b.n	8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	3b10      	subs	r3, #16
 8005146:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	091b      	lsrs	r3, r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d806      	bhi.n	8005166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4a1b      	ldr	r2, [pc, #108]	; (80051c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d902      	bls.n	8005166 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3308      	adds	r3, #8
 8005164:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4b18      	ldr	r3, [pc, #96]	; (80051cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	461a      	mov	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005178:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2201      	movs	r2, #1
 8005182:	409a      	lsls	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	58025408 	.word	0x58025408
 8005198:	5802541c 	.word	0x5802541c
 800519c:	58025430 	.word	0x58025430
 80051a0:	58025444 	.word	0x58025444
 80051a4:	58025458 	.word	0x58025458
 80051a8:	5802546c 	.word	0x5802546c
 80051ac:	58025480 	.word	0x58025480
 80051b0:	58025494 	.word	0x58025494
 80051b4:	cccccccd 	.word	0xcccccccd
 80051b8:	16009600 	.word	0x16009600
 80051bc:	58025880 	.word	0x58025880
 80051c0:	aaaaaaab 	.word	0xaaaaaaab
 80051c4:	400204b8 	.word	0x400204b8
 80051c8:	4002040f 	.word	0x4002040f
 80051cc:	10008200 	.word	0x10008200
 80051d0:	40020880 	.word	0x40020880

080051d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04a      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d847      	bhi.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a25      	ldr	r2, [pc, #148]	; (800528c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d022      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a24      	ldr	r2, [pc, #144]	; (8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d01d      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a22      	ldr	r2, [pc, #136]	; (8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d018      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a21      	ldr	r2, [pc, #132]	; (8005298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00e      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d009      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005244:	2300      	movs	r3, #0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4b17      	ldr	r3, [pc, #92]	; (80052ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800525c:	671a      	str	r2, [r3, #112]	; 0x70
 800525e:	e009      	b.n	8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	461a      	mov	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a11      	ldr	r2, [pc, #68]	; (80052b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005272:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b01      	subs	r3, #1
 8005278:	2201      	movs	r2, #1
 800527a:	409a      	lsls	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	58025408 	.word	0x58025408
 8005290:	5802541c 	.word	0x5802541c
 8005294:	58025430 	.word	0x58025430
 8005298:	58025444 	.word	0x58025444
 800529c:	58025458 	.word	0x58025458
 80052a0:	5802546c 	.word	0x5802546c
 80052a4:	58025480 	.word	0x58025480
 80052a8:	58025494 	.word	0x58025494
 80052ac:	1600963f 	.word	0x1600963f
 80052b0:	58025940 	.word	0x58025940
 80052b4:	1000823f 	.word	0x1000823f
 80052b8:	40020940 	.word	0x40020940

080052bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052bc:	b480      	push	{r7}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052ca:	4b89      	ldr	r3, [pc, #548]	; (80054f0 <HAL_GPIO_Init+0x234>)
 80052cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ce:	e194      	b.n	80055fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2101      	movs	r1, #1
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	4013      	ands	r3, r2
 80052de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8186 	beq.w	80055f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d005      	beq.n	8005300 <HAL_GPIO_Init+0x44>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d130      	bne.n	8005362 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	2203      	movs	r2, #3
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005336:	2201      	movs	r2, #1
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 0201 	and.w	r2, r3, #1
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4313      	orrs	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b03      	cmp	r3, #3
 800536c:	d017      	beq.n	800539e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	2203      	movs	r2, #3
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4313      	orrs	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d123      	bne.n	80053f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	08da      	lsrs	r2, r3, #3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3208      	adds	r2, #8
 80053b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	220f      	movs	r2, #15
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4013      	ands	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	08da      	lsrs	r2, r3, #3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3208      	adds	r2, #8
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	2203      	movs	r2, #3
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0203 	and.w	r2, r3, #3
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80e0 	beq.w	80055f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005434:	4b2f      	ldr	r3, [pc, #188]	; (80054f4 <HAL_GPIO_Init+0x238>)
 8005436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800543a:	4a2e      	ldr	r2, [pc, #184]	; (80054f4 <HAL_GPIO_Init+0x238>)
 800543c:	f043 0302 	orr.w	r3, r3, #2
 8005440:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005444:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_GPIO_Init+0x238>)
 8005446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <HAL_GPIO_Init+0x23c>)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	089b      	lsrs	r3, r3, #2
 8005458:	3302      	adds	r3, #2
 800545a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	220f      	movs	r2, #15
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a20      	ldr	r2, [pc, #128]	; (80054fc <HAL_GPIO_Init+0x240>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d052      	beq.n	8005524 <HAL_GPIO_Init+0x268>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_GPIO_Init+0x244>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d031      	beq.n	80054ea <HAL_GPIO_Init+0x22e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <HAL_GPIO_Init+0x248>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d02b      	beq.n	80054e6 <HAL_GPIO_Init+0x22a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <HAL_GPIO_Init+0x24c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d025      	beq.n	80054e2 <HAL_GPIO_Init+0x226>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1c      	ldr	r2, [pc, #112]	; (800550c <HAL_GPIO_Init+0x250>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01f      	beq.n	80054de <HAL_GPIO_Init+0x222>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <HAL_GPIO_Init+0x254>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d019      	beq.n	80054da <HAL_GPIO_Init+0x21e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1a      	ldr	r2, [pc, #104]	; (8005514 <HAL_GPIO_Init+0x258>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_GPIO_Init+0x21a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a19      	ldr	r2, [pc, #100]	; (8005518 <HAL_GPIO_Init+0x25c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00d      	beq.n	80054d2 <HAL_GPIO_Init+0x216>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a18      	ldr	r2, [pc, #96]	; (800551c <HAL_GPIO_Init+0x260>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <HAL_GPIO_Init+0x212>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a17      	ldr	r2, [pc, #92]	; (8005520 <HAL_GPIO_Init+0x264>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_GPIO_Init+0x20e>
 80054c6:	2309      	movs	r3, #9
 80054c8:	e02d      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ca:	230a      	movs	r3, #10
 80054cc:	e02b      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ce:	2308      	movs	r3, #8
 80054d0:	e029      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054d2:	2307      	movs	r3, #7
 80054d4:	e027      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054d6:	2306      	movs	r3, #6
 80054d8:	e025      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054da:	2305      	movs	r3, #5
 80054dc:	e023      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054de:	2304      	movs	r3, #4
 80054e0:	e021      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054e2:	2303      	movs	r3, #3
 80054e4:	e01f      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e01d      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e01b      	b.n	8005526 <HAL_GPIO_Init+0x26a>
 80054ee:	bf00      	nop
 80054f0:	58000080 	.word	0x58000080
 80054f4:	58024400 	.word	0x58024400
 80054f8:	58000400 	.word	0x58000400
 80054fc:	58020000 	.word	0x58020000
 8005500:	58020400 	.word	0x58020400
 8005504:	58020800 	.word	0x58020800
 8005508:	58020c00 	.word	0x58020c00
 800550c:	58021000 	.word	0x58021000
 8005510:	58021400 	.word	0x58021400
 8005514:	58021800 	.word	0x58021800
 8005518:	58021c00 	.word	0x58021c00
 800551c:	58022000 	.word	0x58022000
 8005520:	58022400 	.word	0x58022400
 8005524:	2300      	movs	r3, #0
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	f002 0203 	and.w	r2, r2, #3
 800552c:	0092      	lsls	r2, r2, #2
 800552e:	4093      	lsls	r3, r2
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005536:	4938      	ldr	r1, [pc, #224]	; (8005618 <HAL_GPIO_Init+0x35c>)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	3302      	adds	r3, #2
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800556a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	43db      	mvns	r3, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4013      	ands	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f ae63 	bne.w	80052d0 <HAL_GPIO_Init+0x14>
  }
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	3724      	adds	r7, #36	; 0x24
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	58000400 	.word	0x58000400

0800561c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
 8005628:	4613      	mov	r3, r2
 800562a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800562c:	787b      	ldrb	r3, [r7, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005638:	e003      	b.n	8005642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	041a      	lsls	r2, r3, #16
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	619a      	str	r2, [r3, #24]
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
	...

08005650 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005658:	4a08      	ldr	r2, [pc, #32]	; (800567c <HAL_HSEM_FastTake+0x2c>)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3320      	adds	r3, #32
 800565e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005662:	4a07      	ldr	r2, [pc, #28]	; (8005680 <HAL_HSEM_FastTake+0x30>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e000      	b.n	800566e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
}
 800566e:	4618      	mov	r0, r3
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	58026400 	.word	0x58026400
 8005680:	80000300 	.word	0x80000300

08005684 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800568e:	4906      	ldr	r1, [pc, #24]	; (80056a8 <HAL_HSEM_Release+0x24>)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	58026400 	.word	0x58026400

080056ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80056b4:	4b29      	ldr	r3, [pc, #164]	; (800575c <HAL_PWREx_ConfigSupply+0xb0>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d00a      	beq.n	80056d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80056c0:	4b26      	ldr	r3, [pc, #152]	; (800575c <HAL_PWREx_ConfigSupply+0xb0>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d001      	beq.n	80056d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e040      	b.n	8005754 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e03e      	b.n	8005754 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80056d6:	4b21      	ldr	r3, [pc, #132]	; (800575c <HAL_PWREx_ConfigSupply+0xb0>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80056de:	491f      	ldr	r1, [pc, #124]	; (800575c <HAL_PWREx_ConfigSupply+0xb0>)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056e6:	f7fb ffbd 	bl	8001664 <HAL_GetTick>
 80056ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056ec:	e009      	b.n	8005702 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056ee:	f7fb ffb9 	bl	8001664 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056fc:	d901      	bls.n	8005702 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e028      	b.n	8005754 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005702:	4b16      	ldr	r3, [pc, #88]	; (800575c <HAL_PWREx_ConfigSupply+0xb0>)
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570e:	d1ee      	bne.n	80056ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b1e      	cmp	r3, #30
 8005714:	d008      	beq.n	8005728 <HAL_PWREx_ConfigSupply+0x7c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b2e      	cmp	r3, #46	; 0x2e
 800571a:	d005      	beq.n	8005728 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b1d      	cmp	r3, #29
 8005720:	d002      	beq.n	8005728 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b2d      	cmp	r3, #45	; 0x2d
 8005726:	d114      	bne.n	8005752 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005728:	f7fb ff9c 	bl	8001664 <HAL_GetTick>
 800572c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800572e:	e009      	b.n	8005744 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005730:	f7fb ff98 	bl	8001664 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573e:	d901      	bls.n	8005744 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e007      	b.n	8005754 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_PWREx_ConfigSupply+0xb0>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	d1ee      	bne.n	8005730 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	58024800 	.word	0x58024800

08005760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d102      	bne.n	8005774 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f000 bc48 	b.w	8006004 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 8088 	beq.w	8005892 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005782:	4b99      	ldr	r3, [pc, #612]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800578c:	4b96      	ldr	r3, [pc, #600]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b10      	cmp	r3, #16
 8005796:	d007      	beq.n	80057a8 <HAL_RCC_OscConfig+0x48>
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	2b18      	cmp	r3, #24
 800579c:	d111      	bne.n	80057c2 <HAL_RCC_OscConfig+0x62>
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	4b8f      	ldr	r3, [pc, #572]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d06d      	beq.n	8005890 <HAL_RCC_OscConfig+0x130>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d169      	bne.n	8005890 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f000 bc21 	b.w	8006004 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ca:	d106      	bne.n	80057da <HAL_RCC_OscConfig+0x7a>
 80057cc:	4b86      	ldr	r3, [pc, #536]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a85      	ldr	r2, [pc, #532]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80057d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	e02e      	b.n	8005838 <HAL_RCC_OscConfig+0xd8>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10c      	bne.n	80057fc <HAL_RCC_OscConfig+0x9c>
 80057e2:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a80      	ldr	r2, [pc, #512]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80057e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	4b7e      	ldr	r3, [pc, #504]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a7d      	ldr	r2, [pc, #500]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80057f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e01d      	b.n	8005838 <HAL_RCC_OscConfig+0xd8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005804:	d10c      	bne.n	8005820 <HAL_RCC_OscConfig+0xc0>
 8005806:	4b78      	ldr	r3, [pc, #480]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a77      	ldr	r2, [pc, #476]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 800580c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b75      	ldr	r3, [pc, #468]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a74      	ldr	r2, [pc, #464]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e00b      	b.n	8005838 <HAL_RCC_OscConfig+0xd8>
 8005820:	4b71      	ldr	r3, [pc, #452]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a70      	ldr	r2, [pc, #448]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6d      	ldr	r2, [pc, #436]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d013      	beq.n	8005868 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fb ff10 	bl	8001664 <HAL_GetTick>
 8005844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005848:	f7fb ff0c 	bl	8001664 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b64      	cmp	r3, #100	; 0x64
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e3d4      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800585a:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0xe8>
 8005866:	e014      	b.n	8005892 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fb fefc 	bl	8001664 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005870:	f7fb fef8 	bl	8001664 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b64      	cmp	r3, #100	; 0x64
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e3c0      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005882:	4b59      	ldr	r3, [pc, #356]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x110>
 800588e:	e000      	b.n	8005892 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80ca 	beq.w	8005a34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058a0:	4b51      	ldr	r3, [pc, #324]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058aa:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_RCC_OscConfig+0x166>
 80058b6:	6a3b      	ldr	r3, [r7, #32]
 80058b8:	2b18      	cmp	r3, #24
 80058ba:	d156      	bne.n	800596a <HAL_RCC_OscConfig+0x20a>
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d151      	bne.n	800596a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058c6:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_RCC_OscConfig+0x17e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e392      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058de:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 0219 	bic.w	r2, r3, #25
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	493f      	ldr	r1, [pc, #252]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fb feb8 	bl	8001664 <HAL_GetTick>
 80058f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f8:	f7fb feb4 	bl	8001664 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e37c      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800590a:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0304 	and.w	r3, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005916:	f7fb fed5 	bl	80016c4 <HAL_GetREVID>
 800591a:	4603      	mov	r3, r0
 800591c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005920:	4293      	cmp	r3, r2
 8005922:	d817      	bhi.n	8005954 <HAL_RCC_OscConfig+0x1f4>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	d108      	bne.n	800593e <HAL_RCC_OscConfig+0x1de>
 800592c:	4b2e      	ldr	r3, [pc, #184]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005934:	4a2c      	ldr	r2, [pc, #176]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800593a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800593c:	e07a      	b.n	8005a34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	031b      	lsls	r3, r3, #12
 800594c:	4926      	ldr	r1, [pc, #152]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 800594e:	4313      	orrs	r3, r2
 8005950:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005952:	e06f      	b.n	8005a34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	061b      	lsls	r3, r3, #24
 8005962:	4921      	ldr	r1, [pc, #132]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005964:	4313      	orrs	r3, r2
 8005966:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005968:	e064      	b.n	8005a34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d047      	beq.n	8005a02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005972:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f023 0219 	bic.w	r2, r3, #25
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	491a      	ldr	r1, [pc, #104]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 8005980:	4313      	orrs	r3, r2
 8005982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fb fe6e 	bl	8001664 <HAL_GetTick>
 8005988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598c:	f7fb fe6a 	bl	8001664 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e332      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059aa:	f7fb fe8b 	bl	80016c4 <HAL_GetREVID>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d819      	bhi.n	80059ec <HAL_RCC_OscConfig+0x28c>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d108      	bne.n	80059d2 <HAL_RCC_OscConfig+0x272>
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059c8:	4a07      	ldr	r2, [pc, #28]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80059ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ce:	6053      	str	r3, [r2, #4]
 80059d0:	e030      	b.n	8005a34 <HAL_RCC_OscConfig+0x2d4>
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	4901      	ldr	r1, [pc, #4]	; (80059e8 <HAL_RCC_OscConfig+0x288>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	604b      	str	r3, [r1, #4]
 80059e6:	e025      	b.n	8005a34 <HAL_RCC_OscConfig+0x2d4>
 80059e8:	58024400 	.word	0x58024400
 80059ec:	4b9a      	ldr	r3, [pc, #616]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	061b      	lsls	r3, r3, #24
 80059fa:	4997      	ldr	r1, [pc, #604]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	604b      	str	r3, [r1, #4]
 8005a00:	e018      	b.n	8005a34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a02:	4b95      	ldr	r3, [pc, #596]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a94      	ldr	r2, [pc, #592]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005a08:	f023 0301 	bic.w	r3, r3, #1
 8005a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fb fe29 	bl	8001664 <HAL_GetTick>
 8005a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a16:	f7fb fe25 	bl	8001664 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e2ed      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a28:	4b8b      	ldr	r3, [pc, #556]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1f0      	bne.n	8005a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80a9 	beq.w	8005b94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a42:	4b85      	ldr	r3, [pc, #532]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a4c:	4b82      	ldr	r3, [pc, #520]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d007      	beq.n	8005a68 <HAL_RCC_OscConfig+0x308>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b18      	cmp	r3, #24
 8005a5c:	d13a      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x374>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d135      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a68:	4b7b      	ldr	r3, [pc, #492]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_OscConfig+0x320>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	2b80      	cmp	r3, #128	; 0x80
 8005a7a:	d001      	beq.n	8005a80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e2c1      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a80:	f7fb fe20 	bl	80016c4 <HAL_GetREVID>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d817      	bhi.n	8005abe <HAL_RCC_OscConfig+0x35e>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x348>
 8005a96:	4b70      	ldr	r3, [pc, #448]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a9e:	4a6e      	ldr	r2, [pc, #440]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa6:	e075      	b.n	8005b94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aa8:	4b6b      	ldr	r3, [pc, #428]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	069b      	lsls	r3, r3, #26
 8005ab6:	4968      	ldr	r1, [pc, #416]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005abc:	e06a      	b.n	8005b94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005abe:	4b66      	ldr	r3, [pc, #408]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	4962      	ldr	r1, [pc, #392]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ad2:	e05f      	b.n	8005b94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d042      	beq.n	8005b62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005adc:	4b5e      	ldr	r3, [pc, #376]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a5d      	ldr	r2, [pc, #372]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fb fdbc 	bl	8001664 <HAL_GetTick>
 8005aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005af0:	f7fb fdb8 	bl	8001664 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e280      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b02:	4b55      	ldr	r3, [pc, #340]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b0e:	f7fb fdd9 	bl	80016c4 <HAL_GetREVID>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d817      	bhi.n	8005b4c <HAL_RCC_OscConfig+0x3ec>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	2b20      	cmp	r3, #32
 8005b22:	d108      	bne.n	8005b36 <HAL_RCC_OscConfig+0x3d6>
 8005b24:	4b4c      	ldr	r3, [pc, #304]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b2c:	4a4a      	ldr	r2, [pc, #296]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b32:	6053      	str	r3, [r2, #4]
 8005b34:	e02e      	b.n	8005b94 <HAL_RCC_OscConfig+0x434>
 8005b36:	4b48      	ldr	r3, [pc, #288]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	069b      	lsls	r3, r3, #26
 8005b44:	4944      	ldr	r1, [pc, #272]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	604b      	str	r3, [r1, #4]
 8005b4a:	e023      	b.n	8005b94 <HAL_RCC_OscConfig+0x434>
 8005b4c:	4b42      	ldr	r3, [pc, #264]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	061b      	lsls	r3, r3, #24
 8005b5a:	493f      	ldr	r1, [pc, #252]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60cb      	str	r3, [r1, #12]
 8005b60:	e018      	b.n	8005b94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b62:	4b3d      	ldr	r3, [pc, #244]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3c      	ldr	r2, [pc, #240]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6e:	f7fb fd79 	bl	8001664 <HAL_GetTick>
 8005b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b76:	f7fb fd75 	bl	8001664 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e23d      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b88:	4b33      	ldr	r3, [pc, #204]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f0      	bne.n	8005b76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d036      	beq.n	8005c0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d019      	beq.n	8005bdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ba8:	4b2b      	ldr	r3, [pc, #172]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bac:	4a2a      	ldr	r2, [pc, #168]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005bae:	f043 0301 	orr.w	r3, r3, #1
 8005bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb4:	f7fb fd56 	bl	8001664 <HAL_GetTick>
 8005bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bbc:	f7fb fd52 	bl	8001664 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e21a      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bce:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0x45c>
 8005bda:	e018      	b.n	8005c0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bdc:	4b1e      	ldr	r3, [pc, #120]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be0:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005be2:	f023 0301 	bic.w	r3, r3, #1
 8005be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be8:	f7fb fd3c 	bl	8001664 <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf0:	f7fb fd38 	bl	8001664 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e200      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d039      	beq.n	8005c8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01c      	beq.n	8005c5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c2e:	f7fb fd19 	bl	8001664 <HAL_GetTick>
 8005c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c36:	f7fb fd15 	bl	8001664 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e1dd      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_RCC_OscConfig+0x4f8>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x4d6>
 8005c54:	e01b      	b.n	8005c8e <HAL_RCC_OscConfig+0x52e>
 8005c56:	bf00      	nop
 8005c58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c5c:	4b9b      	ldr	r3, [pc, #620]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a9a      	ldr	r2, [pc, #616]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c68:	f7fb fcfc 	bl	8001664 <HAL_GetTick>
 8005c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c70:	f7fb fcf8 	bl	8001664 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e1c0      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c82:	4b92      	ldr	r3, [pc, #584]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8081 	beq.w	8005d9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c9c:	4b8c      	ldr	r3, [pc, #560]	; (8005ed0 <HAL_RCC_OscConfig+0x770>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a8b      	ldr	r2, [pc, #556]	; (8005ed0 <HAL_RCC_OscConfig+0x770>)
 8005ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ca8:	f7fb fcdc 	bl	8001664 <HAL_GetTick>
 8005cac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb0:	f7fb fcd8 	bl	8001664 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b64      	cmp	r3, #100	; 0x64
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e1a0      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cc2:	4b83      	ldr	r3, [pc, #524]	; (8005ed0 <HAL_RCC_OscConfig+0x770>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0f0      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x584>
 8005cd6:	4b7d      	ldr	r3, [pc, #500]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	4a7c      	ldr	r2, [pc, #496]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce2:	e02d      	b.n	8005d40 <HAL_RCC_OscConfig+0x5e0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10c      	bne.n	8005d06 <HAL_RCC_OscConfig+0x5a6>
 8005cec:	4b77      	ldr	r3, [pc, #476]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	4a76      	ldr	r2, [pc, #472]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005cf2:	f023 0301 	bic.w	r3, r3, #1
 8005cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf8:	4b74      	ldr	r3, [pc, #464]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfc:	4a73      	ldr	r2, [pc, #460]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005cfe:	f023 0304 	bic.w	r3, r3, #4
 8005d02:	6713      	str	r3, [r2, #112]	; 0x70
 8005d04:	e01c      	b.n	8005d40 <HAL_RCC_OscConfig+0x5e0>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x5c8>
 8005d0e:	4b6f      	ldr	r3, [pc, #444]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a6e      	ldr	r2, [pc, #440]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d14:	f043 0304 	orr.w	r3, r3, #4
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	4b6c      	ldr	r3, [pc, #432]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	4a6b      	ldr	r2, [pc, #428]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	6713      	str	r3, [r2, #112]	; 0x70
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0x5e0>
 8005d28:	4b68      	ldr	r3, [pc, #416]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	4a67      	ldr	r2, [pc, #412]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	6713      	str	r3, [r2, #112]	; 0x70
 8005d34:	4b65      	ldr	r3, [pc, #404]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d38:	4a64      	ldr	r2, [pc, #400]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d3a:	f023 0304 	bic.w	r3, r3, #4
 8005d3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d015      	beq.n	8005d74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d48:	f7fb fc8c 	bl	8001664 <HAL_GetTick>
 8005d4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d50:	f7fb fc88 	bl	8001664 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e14e      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d66:	4b59      	ldr	r3, [pc, #356]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0ee      	beq.n	8005d50 <HAL_RCC_OscConfig+0x5f0>
 8005d72:	e014      	b.n	8005d9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d74:	f7fb fc76 	bl	8001664 <HAL_GetTick>
 8005d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7c:	f7fb fc72 	bl	8001664 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e138      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d92:	4b4e      	ldr	r3, [pc, #312]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ee      	bne.n	8005d7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 812d 	beq.w	8006002 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005da8:	4b48      	ldr	r3, [pc, #288]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005db0:	2b18      	cmp	r3, #24
 8005db2:	f000 80bd 	beq.w	8005f30 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	f040 809e 	bne.w	8005efc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a41      	ldr	r2, [pc, #260]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fb fc4a 	bl	8001664 <HAL_GetTick>
 8005dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd4:	f7fb fc46 	bl	8001664 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e10e      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005de6:	4b39      	ldr	r3, [pc, #228]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df6:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <HAL_RCC_OscConfig+0x774>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e02:	0112      	lsls	r2, r2, #4
 8005e04:	430a      	orrs	r2, r1
 8005e06:	4931      	ldr	r1, [pc, #196]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	3b01      	subs	r3, #1
 8005e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	025b      	lsls	r3, r3, #9
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	3b01      	subs	r3, #1
 8005e28:	041b      	lsls	r3, r3, #16
 8005e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	3b01      	subs	r3, #1
 8005e36:	061b      	lsls	r3, r3, #24
 8005e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e3c:	4923      	ldr	r1, [pc, #140]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e42:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	4a21      	ldr	r2, [pc, #132]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e4e:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e52:	4b21      	ldr	r3, [pc, #132]	; (8005ed8 <HAL_RCC_OscConfig+0x778>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e5a:	00d2      	lsls	r2, r2, #3
 8005e5c:	491b      	ldr	r1, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e62:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	f023 020c 	bic.w	r2, r3, #12
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	4917      	ldr	r1, [pc, #92]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	f023 0202 	bic.w	r2, r3, #2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e80:	4912      	ldr	r1, [pc, #72]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e86:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e92:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a0d      	ldr	r2, [pc, #52]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <HAL_RCC_OscConfig+0x76c>)
 8005ebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec2:	f7fb fbcf 	bl	8001664 <HAL_GetTick>
 8005ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ec8:	e011      	b.n	8005eee <HAL_RCC_OscConfig+0x78e>
 8005eca:	bf00      	nop
 8005ecc:	58024400 	.word	0x58024400
 8005ed0:	58024800 	.word	0x58024800
 8005ed4:	fffffc0c 	.word	0xfffffc0c
 8005ed8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fb fbc2 	bl	8001664 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e08a      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eee:	4b47      	ldr	r3, [pc, #284]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x77c>
 8005efa:	e082      	b.n	8006002 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efc:	4b43      	ldr	r3, [pc, #268]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a42      	ldr	r2, [pc, #264]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fb fbac 	bl	8001664 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fb fba8 	bl	8001664 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e070      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f22:	4b3a      	ldr	r3, [pc, #232]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x7b0>
 8005f2e:	e068      	b.n	8006002 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f30:	4b36      	ldr	r3, [pc, #216]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f36:	4b35      	ldr	r3, [pc, #212]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d031      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f003 0203 	and.w	r2, r3, #3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d12a      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	091b      	lsrs	r3, r3, #4
 8005f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d122      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d11a      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	0a5b      	lsrs	r3, r3, #9
 8005f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d111      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d108      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	0e1b      	lsrs	r3, r3, #24
 8005f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e02b      	b.n	8006004 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fac:	4b17      	ldr	r3, [pc, #92]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb0:	08db      	lsrs	r3, r3, #3
 8005fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d01f      	beq.n	8006002 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	4a11      	ldr	r2, [pc, #68]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fce:	f7fb fb49 	bl	8001664 <HAL_GetTick>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005fd4:	bf00      	nop
 8005fd6:	f7fb fb45 	bl	8001664 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d0f9      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_RCC_OscConfig+0x8b0>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fee:	00d2      	lsls	r2, r2, #3
 8005ff0:	4906      	ldr	r1, [pc, #24]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a04      	ldr	r2, [pc, #16]	; (800600c <HAL_RCC_OscConfig+0x8ac>)
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3730      	adds	r7, #48	; 0x30
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	58024400 	.word	0x58024400
 8006010:	ffff0007 	.word	0xffff0007

08006014 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e19c      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006028:	4b8a      	ldr	r3, [pc, #552]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d910      	bls.n	8006058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006036:	4b87      	ldr	r3, [pc, #540]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f023 020f 	bic.w	r2, r3, #15
 800603e:	4985      	ldr	r1, [pc, #532]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4313      	orrs	r3, r2
 8006044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006046:	4b83      	ldr	r3, [pc, #524]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 030f 	and.w	r3, r3, #15
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e184      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d010      	beq.n	8006086 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	4b7b      	ldr	r3, [pc, #492]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006070:	429a      	cmp	r2, r3
 8006072:	d908      	bls.n	8006086 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006074:	4b78      	ldr	r3, [pc, #480]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	4975      	ldr	r1, [pc, #468]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006082:	4313      	orrs	r3, r2
 8006084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b00      	cmp	r3, #0
 8006090:	d010      	beq.n	80060b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	4b70      	ldr	r3, [pc, #448]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800609e:	429a      	cmp	r2, r3
 80060a0:	d908      	bls.n	80060b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060a2:	4b6d      	ldr	r3, [pc, #436]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	496a      	ldr	r1, [pc, #424]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d010      	beq.n	80060e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	4b64      	ldr	r3, [pc, #400]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d908      	bls.n	80060e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060d0:	4b61      	ldr	r3, [pc, #388]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	495e      	ldr	r1, [pc, #376]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d010      	beq.n	8006110 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	4b59      	ldr	r3, [pc, #356]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d908      	bls.n	8006110 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060fe:	4b56      	ldr	r3, [pc, #344]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	4953      	ldr	r1, [pc, #332]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 800610c:	4313      	orrs	r3, r2
 800610e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d010      	beq.n	800613e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	4b4d      	ldr	r3, [pc, #308]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	429a      	cmp	r2, r3
 800612a:	d908      	bls.n	800613e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800612c:	4b4a      	ldr	r3, [pc, #296]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f023 020f 	bic.w	r2, r3, #15
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4947      	ldr	r1, [pc, #284]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 800613a:	4313      	orrs	r3, r2
 800613c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d055      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800614a:	4b43      	ldr	r3, [pc, #268]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	4940      	ldr	r1, [pc, #256]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006158:	4313      	orrs	r3, r2
 800615a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d107      	bne.n	8006174 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006164:	4b3c      	ldr	r3, [pc, #240]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d121      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e0f6      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d107      	bne.n	800618c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800617c:	4b36      	ldr	r3, [pc, #216]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d115      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e0ea      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d107      	bne.n	80061a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006194:	4b30      	ldr	r3, [pc, #192]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d109      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e0de      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061a4:	4b2c      	ldr	r3, [pc, #176]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0d6      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061b4:	4b28      	ldr	r3, [pc, #160]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f023 0207 	bic.w	r2, r3, #7
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	4925      	ldr	r1, [pc, #148]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c6:	f7fb fa4d 	bl	8001664 <HAL_GetTick>
 80061ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061cc:	e00a      	b.n	80061e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ce:	f7fb fa49 	bl	8001664 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061dc:	4293      	cmp	r3, r2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e0be      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061e4:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d1eb      	bne.n	80061ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f003 030f 	and.w	r3, r3, #15
 800620e:	429a      	cmp	r2, r3
 8006210:	d208      	bcs.n	8006224 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f023 020f 	bic.w	r2, r3, #15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	490e      	ldr	r1, [pc, #56]	; (8006258 <HAL_RCC_ClockConfig+0x244>)
 8006220:	4313      	orrs	r3, r2
 8006222:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006224:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d214      	bcs.n	800625c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006232:	4b08      	ldr	r3, [pc, #32]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f023 020f 	bic.w	r2, r3, #15
 800623a:	4906      	ldr	r1, [pc, #24]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b04      	ldr	r3, [pc, #16]	; (8006254 <HAL_RCC_ClockConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d005      	beq.n	800625c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e086      	b.n	8006362 <HAL_RCC_ClockConfig+0x34e>
 8006254:	52002000 	.word	0x52002000
 8006258:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d010      	beq.n	800628a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	4b3f      	ldr	r3, [pc, #252]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006274:	429a      	cmp	r2, r3
 8006276:	d208      	bcs.n	800628a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006278:	4b3c      	ldr	r3, [pc, #240]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	4939      	ldr	r1, [pc, #228]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 8006286:	4313      	orrs	r3, r2
 8006288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	4b34      	ldr	r3, [pc, #208]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d208      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062a6:	4b31      	ldr	r3, [pc, #196]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	492e      	ldr	r1, [pc, #184]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d010      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699a      	ldr	r2, [r3, #24]
 80062c8:	4b28      	ldr	r3, [pc, #160]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d208      	bcs.n	80062e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062d4:	4b25      	ldr	r3, [pc, #148]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	4922      	ldr	r1, [pc, #136]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d010      	beq.n	8006314 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69da      	ldr	r2, [r3, #28]
 80062f6:	4b1d      	ldr	r3, [pc, #116]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062fe:	429a      	cmp	r2, r3
 8006300:	d208      	bcs.n	8006314 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006302:	4b1a      	ldr	r3, [pc, #104]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	4917      	ldr	r1, [pc, #92]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 8006310:	4313      	orrs	r3, r2
 8006312:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006314:	f000 f834 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 8006318:	4602      	mov	r2, r0
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	f003 030f 	and.w	r3, r3, #15
 8006324:	4912      	ldr	r1, [pc, #72]	; (8006370 <HAL_RCC_ClockConfig+0x35c>)
 8006326:	5ccb      	ldrb	r3, [r1, r3]
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	fa22 f303 	lsr.w	r3, r2, r3
 8006330:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006332:	4b0e      	ldr	r3, [pc, #56]	; (800636c <HAL_RCC_ClockConfig+0x358>)
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f003 030f 	and.w	r3, r3, #15
 800633a:	4a0d      	ldr	r2, [pc, #52]	; (8006370 <HAL_RCC_ClockConfig+0x35c>)
 800633c:	5cd3      	ldrb	r3, [r2, r3]
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	4a0a      	ldr	r2, [pc, #40]	; (8006374 <HAL_RCC_ClockConfig+0x360>)
 800634a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800634c:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <HAL_RCC_ClockConfig+0x364>)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <HAL_RCC_ClockConfig+0x368>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fb f93a 	bl	80015d0 <HAL_InitTick>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006360:	7bfb      	ldrb	r3, [r7, #15]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400
 8006370:	0800b464 	.word	0x0800b464
 8006374:	24000004 	.word	0x24000004
 8006378:	24000000 	.word	0x24000000
 800637c:	24000008 	.word	0x24000008

08006380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006380:	b480      	push	{r7}
 8006382:	b089      	sub	sp, #36	; 0x24
 8006384:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006386:	4bb3      	ldr	r3, [pc, #716]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800638e:	2b18      	cmp	r3, #24
 8006390:	f200 8155 	bhi.w	800663e <HAL_RCC_GetSysClockFreq+0x2be>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	08006401 	.word	0x08006401
 80063a0:	0800663f 	.word	0x0800663f
 80063a4:	0800663f 	.word	0x0800663f
 80063a8:	0800663f 	.word	0x0800663f
 80063ac:	0800663f 	.word	0x0800663f
 80063b0:	0800663f 	.word	0x0800663f
 80063b4:	0800663f 	.word	0x0800663f
 80063b8:	0800663f 	.word	0x0800663f
 80063bc:	08006427 	.word	0x08006427
 80063c0:	0800663f 	.word	0x0800663f
 80063c4:	0800663f 	.word	0x0800663f
 80063c8:	0800663f 	.word	0x0800663f
 80063cc:	0800663f 	.word	0x0800663f
 80063d0:	0800663f 	.word	0x0800663f
 80063d4:	0800663f 	.word	0x0800663f
 80063d8:	0800663f 	.word	0x0800663f
 80063dc:	0800642d 	.word	0x0800642d
 80063e0:	0800663f 	.word	0x0800663f
 80063e4:	0800663f 	.word	0x0800663f
 80063e8:	0800663f 	.word	0x0800663f
 80063ec:	0800663f 	.word	0x0800663f
 80063f0:	0800663f 	.word	0x0800663f
 80063f4:	0800663f 	.word	0x0800663f
 80063f8:	0800663f 	.word	0x0800663f
 80063fc:	08006433 	.word	0x08006433
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006400:	4b94      	ldr	r3, [pc, #592]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b00      	cmp	r3, #0
 800640a:	d009      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800640c:	4b91      	ldr	r3, [pc, #580]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	08db      	lsrs	r3, r3, #3
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	4a90      	ldr	r2, [pc, #576]	; (8006658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006418:	fa22 f303 	lsr.w	r3, r2, r3
 800641c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800641e:	e111      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006420:	4b8d      	ldr	r3, [pc, #564]	; (8006658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006422:	61bb      	str	r3, [r7, #24]
      break;
 8006424:	e10e      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006426:	4b8d      	ldr	r3, [pc, #564]	; (800665c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006428:	61bb      	str	r3, [r7, #24]
      break;
 800642a:	e10b      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800642c:	4b8c      	ldr	r3, [pc, #560]	; (8006660 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800642e:	61bb      	str	r3, [r7, #24]
      break;
 8006430:	e108      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006432:	4b88      	ldr	r3, [pc, #544]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800643c:	4b85      	ldr	r3, [pc, #532]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	091b      	lsrs	r3, r3, #4
 8006442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006446:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006448:	4b82      	ldr	r3, [pc, #520]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006452:	4b80      	ldr	r3, [pc, #512]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	fb02 f303 	mul.w	r3, r2, r3
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80e1 	beq.w	8006638 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b02      	cmp	r3, #2
 800647a:	f000 8083 	beq.w	8006584 <HAL_RCC_GetSysClockFreq+0x204>
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b02      	cmp	r3, #2
 8006482:	f200 80a1 	bhi.w	80065c8 <HAL_RCC_GetSysClockFreq+0x248>
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <HAL_RCC_GetSysClockFreq+0x114>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d056      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006492:	e099      	b.n	80065c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006494:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	d02d      	beq.n	80064fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064a0:	4b6c      	ldr	r3, [pc, #432]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	08db      	lsrs	r3, r3, #3
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	4a6b      	ldr	r2, [pc, #428]	; (8006658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
 80064b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ca:	4b62      	ldr	r3, [pc, #392]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064da:	ed97 6a02 	vldr	s12, [r7, #8]
 80064de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80064fa:	e087      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006506:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006668 <HAL_RCC_GetSysClockFreq+0x2e8>
 800650a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650e:	4b51      	ldr	r3, [pc, #324]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006522:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006664 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800653e:	e065      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	ee07 3a90 	vmov	s15, r3
 8006546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800666c <HAL_RCC_GetSysClockFreq+0x2ec>
 800654e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006552:	4b40      	ldr	r3, [pc, #256]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006562:	ed97 6a02 	vldr	s12, [r7, #8]
 8006566:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800656a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006582:	e043      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006670 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006596:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659e:	ee07 3a90 	vmov	s15, r3
 80065a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065c6:	e021      	b.n	800660c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800666c <HAL_RCC_GetSysClockFreq+0x2ec>
 80065d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065da:	4b1e      	ldr	r3, [pc, #120]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e2:	ee07 3a90 	vmov	s15, r3
 80065e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800660a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800660c:	4b11      	ldr	r3, [pc, #68]	; (8006654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	0a5b      	lsrs	r3, r3, #9
 8006612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006616:	3301      	adds	r3, #1
 8006618:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006624:	edd7 6a07 	vldr	s13, [r7, #28]
 8006628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800662c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006630:	ee17 3a90 	vmov	r3, s15
 8006634:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006636:	e005      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	61bb      	str	r3, [r7, #24]
      break;
 800663c:	e002      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006640:	61bb      	str	r3, [r7, #24]
      break;
 8006642:	bf00      	nop
  }

  return sysclockfreq;
 8006644:	69bb      	ldr	r3, [r7, #24]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3724      	adds	r7, #36	; 0x24
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	58024400 	.word	0x58024400
 8006658:	03d09000 	.word	0x03d09000
 800665c:	003d0900 	.word	0x003d0900
 8006660:	007a1200 	.word	0x007a1200
 8006664:	46000000 	.word	0x46000000
 8006668:	4c742400 	.word	0x4c742400
 800666c:	4a742400 	.word	0x4a742400
 8006670:	4af42400 	.word	0x4af42400

08006674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800667a:	f7ff fe81 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 800667e:	4602      	mov	r2, r0
 8006680:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	490f      	ldr	r1, [pc, #60]	; (80066c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800668c:	5ccb      	ldrb	r3, [r1, r3]
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006698:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80066a2:	5cd3      	ldrb	r3, [r2, r3]
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	fa22 f303 	lsr.w	r3, r2, r3
 80066ae:	4a07      	ldr	r2, [pc, #28]	; (80066cc <HAL_RCC_GetHCLKFreq+0x58>)
 80066b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066b2:	4a07      	ldr	r2, [pc, #28]	; (80066d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066b8:	4b04      	ldr	r3, [pc, #16]	; (80066cc <HAL_RCC_GetHCLKFreq+0x58>)
 80066ba:	681b      	ldr	r3, [r3, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	58024400 	.word	0x58024400
 80066c8:	0800b464 	.word	0x0800b464
 80066cc:	24000004 	.word	0x24000004
 80066d0:	24000000 	.word	0x24000000

080066d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80066d8:	f7ff ffcc 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 80066dc:	4602      	mov	r2, r0
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80066ea:	5ccb      	ldrb	r3, [r1, r3]
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	58024400 	.word	0x58024400
 80066fc:	0800b464 	.word	0x0800b464

08006700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006704:	f7ff ffb6 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 8006708:	4602      	mov	r2, r0
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	4904      	ldr	r1, [pc, #16]	; (8006728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006716:	5ccb      	ldrb	r3, [r1, r3]
 8006718:	f003 031f 	and.w	r3, r3, #31
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd80      	pop	{r7, pc}
 8006724:	58024400 	.word	0x58024400
 8006728:	0800b464 	.word	0x0800b464

0800672c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800672c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006730:	b0ca      	sub	sp, #296	; 0x128
 8006732:	af00      	add	r7, sp, #0
 8006734:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006738:	2300      	movs	r3, #0
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800673e:	2300      	movs	r3, #0
 8006740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006750:	2500      	movs	r5, #0
 8006752:	ea54 0305 	orrs.w	r3, r4, r5
 8006756:	d049      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800675e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006762:	d02f      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006768:	d828      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800676a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676e:	d01a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006774:	d822      	bhi.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800677a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800677e:	d007      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006780:	e01c      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006782:	4bb8      	ldr	r3, [pc, #736]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	4ab7      	ldr	r2, [pc, #732]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800678e:	e01a      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006794:	3308      	adds	r3, #8
 8006796:	2102      	movs	r1, #2
 8006798:	4618      	mov	r0, r3
 800679a:	f002 fb61 	bl	8008e60 <RCCEx_PLL2_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067a4:	e00f      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067aa:	3328      	adds	r3, #40	; 0x28
 80067ac:	2102      	movs	r1, #2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f002 fc08 	bl	8008fc4 <RCCEx_PLL3_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80067c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80067ce:	4ba5      	ldr	r3, [pc, #660]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067dc:	4aa1      	ldr	r2, [pc, #644]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	6513      	str	r3, [r2, #80]	; 0x50
 80067e2:	e003      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80067f8:	f04f 0900 	mov.w	r9, #0
 80067fc:	ea58 0309 	orrs.w	r3, r8, r9
 8006800:	d047      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	2b04      	cmp	r3, #4
 800680a:	d82a      	bhi.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	08006829 	.word	0x08006829
 8006818:	08006837 	.word	0x08006837
 800681c:	0800684d 	.word	0x0800684d
 8006820:	0800686b 	.word	0x0800686b
 8006824:	0800686b 	.word	0x0800686b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006828:	4b8e      	ldr	r3, [pc, #568]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	4a8d      	ldr	r2, [pc, #564]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800682e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006834:	e01a      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800683a:	3308      	adds	r3, #8
 800683c:	2100      	movs	r1, #0
 800683e:	4618      	mov	r0, r3
 8006840:	f002 fb0e 	bl	8008e60 <RCCEx_PLL2_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800684a:	e00f      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006850:	3328      	adds	r3, #40	; 0x28
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f002 fbb5 	bl	8008fc4 <RCCEx_PLL3_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006860:	e004      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006868:	e000      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800686a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006874:	4b7b      	ldr	r3, [pc, #492]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006878:	f023 0107 	bic.w	r1, r3, #7
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006882:	4a78      	ldr	r2, [pc, #480]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006884:	430b      	orrs	r3, r1
 8006886:	6513      	str	r3, [r2, #80]	; 0x50
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800688a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800688e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800689e:	f04f 0b00 	mov.w	fp, #0
 80068a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80068a6:	d04c      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80068a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b2:	d030      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80068b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068b8:	d829      	bhi.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068ba:	2bc0      	cmp	r3, #192	; 0xc0
 80068bc:	d02d      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068be:	2bc0      	cmp	r3, #192	; 0xc0
 80068c0:	d825      	bhi.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d018      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	d821      	bhi.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d007      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80068d2:	e01c      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d4:	4b63      	ldr	r3, [pc, #396]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	4a62      	ldr	r2, [pc, #392]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068e0:	e01c      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e6:	3308      	adds	r3, #8
 80068e8:	2100      	movs	r1, #0
 80068ea:	4618      	mov	r0, r3
 80068ec:	f002 fab8 	bl	8008e60 <RCCEx_PLL2_Config>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068f6:	e011      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fc:	3328      	adds	r3, #40	; 0x28
 80068fe:	2100      	movs	r1, #0
 8006900:	4618      	mov	r0, r3
 8006902:	f002 fb5f 	bl	8008fc4 <RCCEx_PLL3_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800690c:	e006      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006914:	e002      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800691a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006924:	4b4f      	ldr	r3, [pc, #316]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006928:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800692c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006932:	4a4c      	ldr	r2, [pc, #304]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006934:	430b      	orrs	r3, r1
 8006936:	6513      	str	r3, [r2, #80]	; 0x50
 8006938:	e003      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800693e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800694e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006952:	2300      	movs	r3, #0
 8006954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006958:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d053      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800696a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800696e:	d035      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006974:	d82e      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006976:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800697a:	d031      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800697c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006980:	d828      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006986:	d01a      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800698c:	d822      	bhi.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006996:	d007      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006998:	e01c      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800699a:	4b32      	ldr	r3, [pc, #200]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	4a31      	ldr	r2, [pc, #196]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069a6:	e01c      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ac:	3308      	adds	r3, #8
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f002 fa55 	bl	8008e60 <RCCEx_PLL2_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069bc:	e011      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069c2:	3328      	adds	r3, #40	; 0x28
 80069c4:	2100      	movs	r1, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f002 fafc 	bl	8008fc4 <RCCEx_PLL3_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069d2:	e006      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069da:	e002      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069dc:	bf00      	nop
 80069de:	e000      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10b      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069ea:	4b1e      	ldr	r3, [pc, #120]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069fa:	4a1a      	ldr	r2, [pc, #104]	; (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006a00:	e003      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006a16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006a24:	460b      	mov	r3, r1
 8006a26:	4313      	orrs	r3, r2
 8006a28:	d056      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a36:	d038      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a3c:	d831      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a42:	d034      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a48:	d82b      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a4e:	d01d      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a54:	d825      	bhi.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d006      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a5e:	d00a      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a60:	e01f      	b.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a68:	4ba2      	ldr	r3, [pc, #648]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	4aa1      	ldr	r2, [pc, #644]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a74:	e01c      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f002 f9ee 	bl	8008e60 <RCCEx_PLL2_Config>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a8a:	e011      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a90:	3328      	adds	r3, #40	; 0x28
 8006a92:	2100      	movs	r1, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	f002 fa95 	bl	8008fc4 <RCCEx_PLL3_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006aa0:	e006      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10b      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ab8:	4b8e      	ldr	r3, [pc, #568]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006abc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ac8:	4a8a      	ldr	r2, [pc, #552]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aca:	430b      	orrs	r3, r1
 8006acc:	6593      	str	r3, [r2, #88]	; 0x58
 8006ace:	e003      	b.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006aee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006af2:	460b      	mov	r3, r1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	d03a      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	2b30      	cmp	r3, #48	; 0x30
 8006b00:	d01f      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b02:	2b30      	cmp	r3, #48	; 0x30
 8006b04:	d819      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d00c      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d815      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d019      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d111      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b16:	4b77      	ldr	r3, [pc, #476]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	4a76      	ldr	r2, [pc, #472]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b22:	e011      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b28:	3308      	adds	r3, #8
 8006b2a:	2102      	movs	r1, #2
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f002 f997 	bl	8008e60 <RCCEx_PLL2_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b50:	4b68      	ldr	r3, [pc, #416]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5e:	4a65      	ldr	r2, [pc, #404]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b60:	430b      	orrs	r3, r1
 8006b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b64:	e003      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006b7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	d051      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b98:	d035      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b9e:	d82e      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ba0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ba4:	d031      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006baa:	d828      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb0:	d01a      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb6:	d822      	bhi.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc0:	d007      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006bc2:	e01c      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bc4:	4b4b      	ldr	r3, [pc, #300]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	4a4a      	ldr	r2, [pc, #296]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bd0:	e01c      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 f940 	bl	8008e60 <RCCEx_PLL2_Config>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006be6:	e011      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bec:	3328      	adds	r3, #40	; 0x28
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f002 f9e7 	bl	8008fc4 <RCCEx_PLL3_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bfc:	e006      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c04:	e002      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c06:	bf00      	nop
 8006c08:	e000      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c14:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c22:	4a34      	ldr	r2, [pc, #208]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6513      	str	r3, [r2, #80]	; 0x50
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c42:	2300      	movs	r3, #0
 8006c44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	d056      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c5c:	d033      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c62:	d82c      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c68:	d02f      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c6e:	d826      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c74:	d02b      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c7a:	d820      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c80:	d012      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c86:	d81a      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d022      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d115      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c96:	3308      	adds	r3, #8
 8006c98:	2101      	movs	r1, #1
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f002 f8e0 	bl	8008e60 <RCCEx_PLL2_Config>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ca6:	e015      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cac:	3328      	adds	r3, #40	; 0x28
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f002 f987 	bl	8008fc4 <RCCEx_PLL3_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cbc:	e00a      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cc4:	e006      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cc6:	bf00      	nop
 8006cc8:	e004      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cca:	bf00      	nop
 8006ccc:	e002      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10d      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cea:	4a02      	ldr	r2, [pc, #8]	; (8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cec:	430b      	orrs	r3, r1
 8006cee:	6513      	str	r3, [r2, #80]	; 0x50
 8006cf0:	e006      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006cf2:	bf00      	nop
 8006cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d10:	2300      	movs	r3, #0
 8006d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	d055      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d2c:	d033      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d32:	d82c      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d38:	d02f      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3e:	d826      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d44:	d02b      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d4a:	d820      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d50:	d012      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d56:	d81a      	bhi.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d022      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d60:	d115      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d66:	3308      	adds	r3, #8
 8006d68:	2101      	movs	r1, #1
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f002 f878 	bl	8008e60 <RCCEx_PLL2_Config>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d76:	e015      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7c:	3328      	adds	r3, #40	; 0x28
 8006d7e:	2101      	movs	r1, #1
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 f91f 	bl	8008fc4 <RCCEx_PLL3_Config>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d8c:	e00a      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d94:	e006      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d96:	bf00      	nop
 8006d98:	e004      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10b      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006dac:	4ba3      	ldr	r3, [pc, #652]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dbc:	4a9f      	ldr	r2, [pc, #636]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8006dc2:	e003      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006de6:	460b      	mov	r3, r1
 8006de8:	4313      	orrs	r3, r2
 8006dea:	d037      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df6:	d00e      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dfc:	d816      	bhi.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d018      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e06:	d111      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e08:	4b8c      	ldr	r3, [pc, #560]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	4a8b      	ldr	r2, [pc, #556]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e14:	e00f      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f002 f81e 	bl	8008e60 <RCCEx_PLL2_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e32:	e000      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e3e:	4b7f      	ldr	r3, [pc, #508]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	4a7b      	ldr	r2, [pc, #492]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	6513      	str	r3, [r2, #80]	; 0x50
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006e72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d039      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d81c      	bhi.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006ec9 	.word	0x08006ec9
 8006e90:	08006e9d 	.word	0x08006e9d
 8006e94:	08006eab 	.word	0x08006eab
 8006e98:	08006ec9 	.word	0x08006ec9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e9c:	4b67      	ldr	r3, [pc, #412]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a66      	ldr	r2, [pc, #408]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ea8:	e00f      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eae:	3308      	adds	r3, #8
 8006eb0:	2102      	movs	r1, #2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 ffd4 	bl	8008e60 <RCCEx_PLL2_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ebe:	e004      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ec6:	e000      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006ed2:	4b5a      	ldr	r3, [pc, #360]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed6:	f023 0103 	bic.w	r1, r3, #3
 8006eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee0:	4a56      	ldr	r2, [pc, #344]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ee6:	e003      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f000 809f 	beq.w	8007050 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f12:	4b4b      	ldr	r3, [pc, #300]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a4a      	ldr	r2, [pc, #296]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f1e:	f7fa fba1 	bl	8001664 <HAL_GetTick>
 8006f22:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f26:	e00b      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f28:	f7fa fb9c 	bl	8001664 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b64      	cmp	r3, #100	; 0x64
 8006f36:	d903      	bls.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f3e:	e005      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f40:	4b3f      	ldr	r3, [pc, #252]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0ed      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d179      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f54:	4b39      	ldr	r3, [pc, #228]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f60:	4053      	eors	r3, r2
 8006f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d015      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f6a:	4b34      	ldr	r3, [pc, #208]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f76:	4b31      	ldr	r3, [pc, #196]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	4a30      	ldr	r2, [pc, #192]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f82:	4b2e      	ldr	r3, [pc, #184]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f86:	4a2d      	ldr	r2, [pc, #180]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f8e:	4a2b      	ldr	r2, [pc, #172]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006f94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa2:	d118      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa4:	f7fa fb5e 	bl	8001664 <HAL_GetTick>
 8006fa8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fac:	e00d      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fae:	f7fa fb59 	bl	8001664 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fb8:	1ad2      	subs	r2, r2, r3
 8006fba:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d903      	bls.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006fc8:	e005      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fca:	4b1c      	ldr	r3, [pc, #112]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d0eb      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d129      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fee:	d10e      	bne.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006ff0:	4b12      	ldr	r3, [pc, #72]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007000:	091a      	lsrs	r2, r3, #4
 8007002:	4b10      	ldr	r3, [pc, #64]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007004:	4013      	ands	r3, r2
 8007006:	4a0d      	ldr	r2, [pc, #52]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007008:	430b      	orrs	r3, r1
 800700a:	6113      	str	r3, [r2, #16]
 800700c:	e005      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	4a0a      	ldr	r2, [pc, #40]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007014:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007018:	6113      	str	r3, [r2, #16]
 800701a:	4b08      	ldr	r3, [pc, #32]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800701c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800702a:	4a04      	ldr	r2, [pc, #16]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800702c:	430b      	orrs	r3, r1
 800702e:	6713      	str	r3, [r2, #112]	; 0x70
 8007030:	e00e      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007036:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800703a:	e009      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800703c:	58024400 	.word	0x58024400
 8007040:	58024800 	.word	0x58024800
 8007044:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800704c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f002 0301 	and.w	r3, r2, #1
 800705c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007066:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800706a:	460b      	mov	r3, r1
 800706c:	4313      	orrs	r3, r2
 800706e:	f000 8089 	beq.w	8007184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007078:	2b28      	cmp	r3, #40	; 0x28
 800707a:	d86b      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	0800715d 	.word	0x0800715d
 8007088:	08007155 	.word	0x08007155
 800708c:	08007155 	.word	0x08007155
 8007090:	08007155 	.word	0x08007155
 8007094:	08007155 	.word	0x08007155
 8007098:	08007155 	.word	0x08007155
 800709c:	08007155 	.word	0x08007155
 80070a0:	08007155 	.word	0x08007155
 80070a4:	08007129 	.word	0x08007129
 80070a8:	08007155 	.word	0x08007155
 80070ac:	08007155 	.word	0x08007155
 80070b0:	08007155 	.word	0x08007155
 80070b4:	08007155 	.word	0x08007155
 80070b8:	08007155 	.word	0x08007155
 80070bc:	08007155 	.word	0x08007155
 80070c0:	08007155 	.word	0x08007155
 80070c4:	0800713f 	.word	0x0800713f
 80070c8:	08007155 	.word	0x08007155
 80070cc:	08007155 	.word	0x08007155
 80070d0:	08007155 	.word	0x08007155
 80070d4:	08007155 	.word	0x08007155
 80070d8:	08007155 	.word	0x08007155
 80070dc:	08007155 	.word	0x08007155
 80070e0:	08007155 	.word	0x08007155
 80070e4:	0800715d 	.word	0x0800715d
 80070e8:	08007155 	.word	0x08007155
 80070ec:	08007155 	.word	0x08007155
 80070f0:	08007155 	.word	0x08007155
 80070f4:	08007155 	.word	0x08007155
 80070f8:	08007155 	.word	0x08007155
 80070fc:	08007155 	.word	0x08007155
 8007100:	08007155 	.word	0x08007155
 8007104:	0800715d 	.word	0x0800715d
 8007108:	08007155 	.word	0x08007155
 800710c:	08007155 	.word	0x08007155
 8007110:	08007155 	.word	0x08007155
 8007114:	08007155 	.word	0x08007155
 8007118:	08007155 	.word	0x08007155
 800711c:	08007155 	.word	0x08007155
 8007120:	08007155 	.word	0x08007155
 8007124:	0800715d 	.word	0x0800715d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800712c:	3308      	adds	r3, #8
 800712e:	2101      	movs	r1, #1
 8007130:	4618      	mov	r0, r3
 8007132:	f001 fe95 	bl	8008e60 <RCCEx_PLL2_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800713c:	e00f      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007142:	3328      	adds	r3, #40	; 0x28
 8007144:	2101      	movs	r1, #1
 8007146:	4618      	mov	r0, r3
 8007148:	f001 ff3c 	bl	8008fc4 <RCCEx_PLL3_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007152:	e004      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800715a:	e000      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800715c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10a      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007166:	4bbf      	ldr	r3, [pc, #764]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007174:	4abb      	ldr	r2, [pc, #748]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007176:	430b      	orrs	r3, r1
 8007178:	6553      	str	r3, [r2, #84]	; 0x54
 800717a:	e003      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f002 0302 	and.w	r3, r2, #2
 8007190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007194:	2300      	movs	r3, #0
 8007196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800719a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800719e:	460b      	mov	r3, r1
 80071a0:	4313      	orrs	r3, r2
 80071a2:	d041      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071aa:	2b05      	cmp	r3, #5
 80071ac:	d824      	bhi.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	08007201 	.word	0x08007201
 80071b8:	080071cd 	.word	0x080071cd
 80071bc:	080071e3 	.word	0x080071e3
 80071c0:	08007201 	.word	0x08007201
 80071c4:	08007201 	.word	0x08007201
 80071c8:	08007201 	.word	0x08007201
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d0:	3308      	adds	r3, #8
 80071d2:	2101      	movs	r1, #1
 80071d4:	4618      	mov	r0, r3
 80071d6:	f001 fe43 	bl	8008e60 <RCCEx_PLL2_Config>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071e0:	e00f      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e6:	3328      	adds	r3, #40	; 0x28
 80071e8:	2101      	movs	r1, #1
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 feea 	bl	8008fc4 <RCCEx_PLL3_Config>
 80071f0:	4603      	mov	r3, r0
 80071f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071f6:	e004      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071fe:	e000      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800720a:	4b96      	ldr	r3, [pc, #600]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	f023 0107 	bic.w	r1, r3, #7
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007218:	4a92      	ldr	r2, [pc, #584]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800721a:	430b      	orrs	r3, r1
 800721c:	6553      	str	r3, [r2, #84]	; 0x54
 800721e:	e003      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f002 0304 	and.w	r3, r2, #4
 8007234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800723e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007242:	460b      	mov	r3, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	d044      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800724c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007250:	2b05      	cmp	r3, #5
 8007252:	d825      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007254:	a201      	add	r2, pc, #4	; (adr r2, 800725c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725a:	bf00      	nop
 800725c:	080072a9 	.word	0x080072a9
 8007260:	08007275 	.word	0x08007275
 8007264:	0800728b 	.word	0x0800728b
 8007268:	080072a9 	.word	0x080072a9
 800726c:	080072a9 	.word	0x080072a9
 8007270:	080072a9 	.word	0x080072a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007278:	3308      	adds	r3, #8
 800727a:	2101      	movs	r1, #1
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fdef 	bl	8008e60 <RCCEx_PLL2_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007288:	e00f      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728e:	3328      	adds	r3, #40	; 0x28
 8007290:	2101      	movs	r1, #1
 8007292:	4618      	mov	r0, r3
 8007294:	f001 fe96 	bl	8008fc4 <RCCEx_PLL3_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800729e:	e004      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072a6:	e000      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80072a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072b2:	4b6c      	ldr	r3, [pc, #432]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	f023 0107 	bic.w	r1, r3, #7
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c2:	4a68      	ldr	r2, [pc, #416]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6593      	str	r3, [r2, #88]	; 0x58
 80072c8:	e003      	b.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f002 0320 	and.w	r3, r2, #32
 80072de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072e2:	2300      	movs	r3, #0
 80072e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072ec:	460b      	mov	r3, r1
 80072ee:	4313      	orrs	r3, r2
 80072f0:	d055      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072fe:	d033      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007304:	d82c      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800730a:	d02f      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800730c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007310:	d826      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007316:	d02b      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800731c:	d820      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800731e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007322:	d012      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007328:	d81a      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d022      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800732e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007332:	d115      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007338:	3308      	adds	r3, #8
 800733a:	2100      	movs	r1, #0
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fd8f 	bl	8008e60 <RCCEx_PLL2_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007348:	e015      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734e:	3328      	adds	r3, #40	; 0x28
 8007350:	2102      	movs	r1, #2
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fe36 	bl	8008fc4 <RCCEx_PLL3_Config>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800735e:	e00a      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007366:	e006      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007368:	bf00      	nop
 800736a:	e004      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800736c:	bf00      	nop
 800736e:	e002      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007370:	bf00      	nop
 8007372:	e000      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800737e:	4b39      	ldr	r3, [pc, #228]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007382:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738e:	4a35      	ldr	r2, [pc, #212]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007390:	430b      	orrs	r3, r1
 8007392:	6553      	str	r3, [r2, #84]	; 0x54
 8007394:	e003      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800739a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800739e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80073aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073ae:	2300      	movs	r3, #0
 80073b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4313      	orrs	r3, r2
 80073bc:	d058      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80073ca:	d033      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80073cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80073d0:	d82c      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d6:	d02f      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80073d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073dc:	d826      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e2:	d02b      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80073e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e8:	d820      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ee:	d012      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80073f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f4:	d81a      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d022      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fe:	d115      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007404:	3308      	adds	r3, #8
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f001 fd29 	bl	8008e60 <RCCEx_PLL2_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007414:	e015      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741a:	3328      	adds	r3, #40	; 0x28
 800741c:	2102      	movs	r1, #2
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fdd0 	bl	8008fc4 <RCCEx_PLL3_Config>
 8007424:	4603      	mov	r3, r0
 8007426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800742a:	e00a      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007432:	e006      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007434:	bf00      	nop
 8007436:	e004      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007438:	bf00      	nop
 800743a:	e002      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800743c:	bf00      	nop
 800743e:	e000      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10e      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800744a:	4b06      	ldr	r3, [pc, #24]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800744c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800745a:	4a02      	ldr	r2, [pc, #8]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800745c:	430b      	orrs	r3, r1
 800745e:	6593      	str	r3, [r2, #88]	; 0x58
 8007460:	e006      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007462:	bf00      	nop
 8007464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800746c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007478:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800747c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007480:	2300      	movs	r3, #0
 8007482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007486:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800748a:	460b      	mov	r3, r1
 800748c:	4313      	orrs	r3, r2
 800748e:	d055      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007498:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800749c:	d033      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800749e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074a2:	d82c      	bhi.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a8:	d02f      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80074aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ae:	d826      	bhi.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074b4:	d02b      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80074b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074ba:	d820      	bhi.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c0:	d012      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80074c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c6:	d81a      	bhi.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d022      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80074cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d0:	d115      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d6:	3308      	adds	r3, #8
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 fcc0 	bl	8008e60 <RCCEx_PLL2_Config>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074e6:	e015      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ec:	3328      	adds	r3, #40	; 0x28
 80074ee:	2102      	movs	r1, #2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 fd67 	bl	8008fc4 <RCCEx_PLL3_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074fc:	e00a      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007504:	e006      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007506:	bf00      	nop
 8007508:	e004      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800750a:	bf00      	nop
 800750c:	e002      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800750e:	bf00      	nop
 8007510:	e000      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800751c:	4ba1      	ldr	r3, [pc, #644]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800751e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007520:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800752c:	4a9d      	ldr	r2, [pc, #628]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800752e:	430b      	orrs	r3, r1
 8007530:	6593      	str	r3, [r2, #88]	; 0x58
 8007532:	e003      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800753c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f002 0308 	and.w	r3, r2, #8
 8007548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800754c:	2300      	movs	r3, #0
 800754e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007552:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007556:	460b      	mov	r3, r1
 8007558:	4313      	orrs	r3, r2
 800755a:	d01e      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007568:	d10c      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756e:	3328      	adds	r3, #40	; 0x28
 8007570:	2102      	movs	r1, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 fd26 	bl	8008fc4 <RCCEx_PLL3_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d002      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007584:	4b87      	ldr	r3, [pc, #540]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800758c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007594:	4a83      	ldr	r2, [pc, #524]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007596:	430b      	orrs	r3, r1
 8007598:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	f002 0310 	and.w	r3, r2, #16
 80075a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075aa:	2300      	movs	r3, #0
 80075ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80075b4:	460b      	mov	r3, r1
 80075b6:	4313      	orrs	r3, r2
 80075b8:	d01e      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c6:	d10c      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075cc:	3328      	adds	r3, #40	; 0x28
 80075ce:	2102      	movs	r1, #2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 fcf7 	bl	8008fc4 <RCCEx_PLL3_Config>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075e2:	4b70      	ldr	r3, [pc, #448]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80075f2:	4a6c      	ldr	r2, [pc, #432]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007608:	2300      	movs	r3, #0
 800760a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800760e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007612:	460b      	mov	r3, r1
 8007614:	4313      	orrs	r3, r2
 8007616:	d03e      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007624:	d022      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800762a:	d81b      	bhi.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007634:	d00b      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007636:	e015      	b.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763c:	3308      	adds	r3, #8
 800763e:	2100      	movs	r1, #0
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fc0d 	bl	8008e60 <RCCEx_PLL2_Config>
 8007646:	4603      	mov	r3, r0
 8007648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800764c:	e00f      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800764e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007652:	3328      	adds	r3, #40	; 0x28
 8007654:	2102      	movs	r1, #2
 8007656:	4618      	mov	r0, r3
 8007658:	f001 fcb4 	bl	8008fc4 <RCCEx_PLL3_Config>
 800765c:	4603      	mov	r3, r0
 800765e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007662:	e004      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800766a:	e000      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800766c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007676:	4b4b      	ldr	r3, [pc, #300]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007686:	4a47      	ldr	r2, [pc, #284]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007688:	430b      	orrs	r3, r1
 800768a:	6593      	str	r3, [r2, #88]	; 0x58
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80076a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80076a4:	2300      	movs	r3, #0
 80076a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80076ac:	460b      	mov	r3, r1
 80076ae:	4313      	orrs	r3, r2
 80076b0:	d03b      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076be:	d01f      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80076c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076c4:	d818      	bhi.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80076c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ca:	d003      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80076cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076d0:	d007      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80076d2:	e011      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d4:	4b33      	ldr	r3, [pc, #204]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d8:	4a32      	ldr	r2, [pc, #200]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80076e0:	e00f      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e6:	3328      	adds	r3, #40	; 0x28
 80076e8:	2101      	movs	r1, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 fc6a 	bl	8008fc4 <RCCEx_PLL3_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80076f6:	e004      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076fe:	e000      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10b      	bne.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800770a:	4b26      	ldr	r3, [pc, #152]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771a:	4a22      	ldr	r2, [pc, #136]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800771c:	430b      	orrs	r3, r1
 800771e:	6553      	str	r3, [r2, #84]	; 0x54
 8007720:	e003      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800772a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007736:	673b      	str	r3, [r7, #112]	; 0x70
 8007738:	2300      	movs	r3, #0
 800773a:	677b      	str	r3, [r7, #116]	; 0x74
 800773c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007740:	460b      	mov	r3, r1
 8007742:	4313      	orrs	r3, r2
 8007744:	d034      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800774a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007754:	d007      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007756:	e011      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007758:	4b12      	ldr	r3, [pc, #72]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	4a11      	ldr	r2, [pc, #68]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007764:	e00e      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800776a:	3308      	adds	r3, #8
 800776c:	2102      	movs	r1, #2
 800776e:	4618      	mov	r0, r3
 8007770:	f001 fb76 	bl	8008e60 <RCCEx_PLL2_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800777a:	e003      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10d      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800778e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	4a02      	ldr	r2, [pc, #8]	; (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800779c:	430b      	orrs	r3, r1
 800779e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077a0:	e006      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80077a2:	bf00      	nop
 80077a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80077bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80077be:	2300      	movs	r3, #0
 80077c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80077c6:	460b      	mov	r3, r1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	d00c      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d0:	3328      	adds	r3, #40	; 0x28
 80077d2:	2102      	movs	r1, #2
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 fbf5 	bl	8008fc4 <RCCEx_PLL3_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80077f2:	663b      	str	r3, [r7, #96]	; 0x60
 80077f4:	2300      	movs	r3, #0
 80077f6:	667b      	str	r3, [r7, #100]	; 0x64
 80077f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80077fc:	460b      	mov	r3, r1
 80077fe:	4313      	orrs	r3, r2
 8007800:	d038      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800780e:	d018      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007814:	d811      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781a:	d014      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800781c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007820:	d80b      	bhi.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d011      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782a:	d106      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800782c:	4bc3      	ldr	r3, [pc, #780]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	4ac2      	ldr	r2, [pc, #776]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007838:	e008      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007840:	e004      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007842:	bf00      	nop
 8007844:	e002      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800784a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800784c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007854:	4bb9      	ldr	r3, [pc, #740]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007864:	4ab5      	ldr	r2, [pc, #724]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007866:	430b      	orrs	r3, r1
 8007868:	6553      	str	r3, [r2, #84]	; 0x54
 800786a:	e003      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007880:	65bb      	str	r3, [r7, #88]	; 0x58
 8007882:	2300      	movs	r3, #0
 8007884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007886:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800788a:	460b      	mov	r3, r1
 800788c:	4313      	orrs	r3, r2
 800788e:	d009      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007890:	4baa      	ldr	r3, [pc, #680]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007894:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789e:	4aa7      	ldr	r2, [pc, #668]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078a0:	430b      	orrs	r3, r1
 80078a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80078b0:	653b      	str	r3, [r7, #80]	; 0x50
 80078b2:	2300      	movs	r3, #0
 80078b4:	657b      	str	r3, [r7, #84]	; 0x54
 80078b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80078ba:	460b      	mov	r3, r1
 80078bc:	4313      	orrs	r3, r2
 80078be:	d00a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80078c0:	4b9e      	ldr	r3, [pc, #632]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80078d0:	4a9a      	ldr	r2, [pc, #616]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078d2:	430b      	orrs	r3, r1
 80078d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80078e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e4:	2300      	movs	r3, #0
 80078e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80078ec:	460b      	mov	r3, r1
 80078ee:	4313      	orrs	r3, r2
 80078f0:	d009      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078f2:	4b92      	ldr	r3, [pc, #584]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80078fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007900:	4a8e      	ldr	r2, [pc, #568]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007902:	430b      	orrs	r3, r1
 8007904:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007912:	643b      	str	r3, [r7, #64]	; 0x40
 8007914:	2300      	movs	r3, #0
 8007916:	647b      	str	r3, [r7, #68]	; 0x44
 8007918:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800791c:	460b      	mov	r3, r1
 800791e:	4313      	orrs	r3, r2
 8007920:	d00e      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007922:	4b86      	ldr	r3, [pc, #536]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	4a85      	ldr	r2, [pc, #532]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800792c:	6113      	str	r3, [r2, #16]
 800792e:	4b83      	ldr	r3, [pc, #524]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007930:	6919      	ldr	r1, [r3, #16]
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007936:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800793a:	4a80      	ldr	r2, [pc, #512]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800793c:	430b      	orrs	r3, r1
 800793e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007948:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800794c:	63bb      	str	r3, [r7, #56]	; 0x38
 800794e:	2300      	movs	r3, #0
 8007950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007952:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007956:	460b      	mov	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	d009      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800795c:	4b77      	ldr	r3, [pc, #476]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800795e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007960:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	4a74      	ldr	r2, [pc, #464]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800796c:	430b      	orrs	r3, r1
 800796e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007978:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800797c:	633b      	str	r3, [r7, #48]	; 0x30
 800797e:	2300      	movs	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	; 0x34
 8007982:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007986:	460b      	mov	r3, r1
 8007988:	4313      	orrs	r3, r2
 800798a:	d00a      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800798c:	4b6b      	ldr	r3, [pc, #428]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799c:	4a67      	ldr	r2, [pc, #412]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800799e:	430b      	orrs	r3, r1
 80079a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	2100      	movs	r1, #0
 80079ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80079b8:	460b      	mov	r3, r1
 80079ba:	4313      	orrs	r3, r2
 80079bc:	d011      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c2:	3308      	adds	r3, #8
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 fa4a 	bl	8008e60 <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80079d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	2100      	movs	r1, #0
 80079ec:	6239      	str	r1, [r7, #32]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
 80079f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079f8:	460b      	mov	r3, r1
 80079fa:	4313      	orrs	r3, r2
 80079fc:	d011      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a02:	3308      	adds	r3, #8
 8007a04:	2101      	movs	r1, #1
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 fa2a 	bl	8008e60 <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	61b9      	str	r1, [r7, #24]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	d011      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a42:	3308      	adds	r3, #8
 8007a44:	2102      	movs	r1, #2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 fa0a 	bl	8008e60 <RCCEx_PLL2_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	6139      	str	r1, [r7, #16]
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	d011      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a82:	3328      	adds	r3, #40	; 0x28
 8007a84:	2100      	movs	r1, #0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 fa9c 	bl	8008fc4 <RCCEx_PLL3_Config>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	2100      	movs	r1, #0
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	f003 0310 	and.w	r3, r3, #16
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d011      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	3328      	adds	r3, #40	; 0x28
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fa7c 	bl	8008fc4 <RCCEx_PLL3_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	2100      	movs	r1, #0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	f003 0320 	and.w	r3, r3, #32
 8007af2:	607b      	str	r3, [r7, #4]
 8007af4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007af8:	460b      	mov	r3, r1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	d011      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b02:	3328      	adds	r3, #40	; 0x28
 8007b04:	2102      	movs	r1, #2
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 fa5c 	bl	8008fc4 <RCCEx_PLL3_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007b22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e000      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007b36:	46bd      	mov	sp, r7
 8007b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3c:	58024400 	.word	0x58024400

08007b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b090      	sub	sp, #64	; 0x40
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007b52:	430b      	orrs	r3, r1
 8007b54:	f040 8094 	bne.w	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b58:	4b9e      	ldr	r3, [pc, #632]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	f200 8087 	bhi.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007b6a:	a201      	add	r2, pc, #4	; (adr r2, 8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007b85 	.word	0x08007b85
 8007b74:	08007bad 	.word	0x08007bad
 8007b78:	08007bd5 	.word	0x08007bd5
 8007b7c:	08007c71 	.word	0x08007c71
 8007b80:	08007bfd 	.word	0x08007bfd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b84:	4b93      	ldr	r3, [pc, #588]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b90:	d108      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 f810 	bl	8008bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ba0:	f000 bd45 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba8:	f000 bd41 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bac:	4b89      	ldr	r3, [pc, #548]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bb8:	d108      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bba:	f107 0318 	add.w	r3, r7, #24
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fd54 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bc8:	f000 bd31 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bd0:	f000 bd2d 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bd4:	4b7f      	ldr	r3, [pc, #508]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007be0:	d108      	bne.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be2:	f107 030c 	add.w	r3, r7, #12
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fe94 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bf0:	f000 bd1d 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bf8:	f000 bd19 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bfc:	4b75      	ldr	r3, [pc, #468]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c06:	4b73      	ldr	r3, [pc, #460]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d10c      	bne.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c18:	4b6e      	ldr	r3, [pc, #440]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	08db      	lsrs	r3, r3, #3
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	4a6d      	ldr	r2, [pc, #436]	; (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c24:	fa22 f303 	lsr.w	r3, r2, r3
 8007c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c2a:	e01f      	b.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c2c:	4b69      	ldr	r3, [pc, #420]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c38:	d106      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c40:	d102      	bne.n	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c42:	4b66      	ldr	r3, [pc, #408]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c46:	e011      	b.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c48:	4b62      	ldr	r3, [pc, #392]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c54:	d106      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5c:	d102      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c5e:	4b60      	ldr	r3, [pc, #384]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c62:	e003      	b.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c64:	2300      	movs	r3, #0
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c68:	f000 bce1 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c6c:	f000 bcdf 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c70:	4b5c      	ldr	r3, [pc, #368]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c74:	f000 bcdb 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c7c:	f000 bcd7 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c84:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	f040 80ad 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007c8e:	4b51      	ldr	r3, [pc, #324]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007c96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9e:	d056      	beq.n	8007d4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca6:	f200 8090 	bhi.w	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	2bc0      	cmp	r3, #192	; 0xc0
 8007cae:	f000 8088 	beq.w	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	2bc0      	cmp	r3, #192	; 0xc0
 8007cb6:	f200 8088 	bhi.w	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	2b80      	cmp	r3, #128	; 0x80
 8007cbe:	d032      	beq.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	f200 8081 	bhi.w	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	2b40      	cmp	r3, #64	; 0x40
 8007cd2:	d014      	beq.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007cd4:	e079      	b.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd6:	4b3f      	ldr	r3, [pc, #252]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce2:	d108      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 ff67 	bl	8008bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cf2:	f000 bc9c 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cfa:	f000 bc98 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cfe:	4b35      	ldr	r3, [pc, #212]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d0a:	d108      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d0c:	f107 0318 	add.w	r3, r7, #24
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fcab 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d1a:	f000 bc88 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d22:	f000 bc84 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d26:	4b2b      	ldr	r3, [pc, #172]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d32:	d108      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d34:	f107 030c 	add.w	r3, r7, #12
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f000 fdeb 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d42:	f000 bc74 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d4a:	f000 bc70 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d4e:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d58:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d10c      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d6a:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	08db      	lsrs	r3, r3, #3
 8007d70:	f003 0303 	and.w	r3, r3, #3
 8007d74:	4a18      	ldr	r2, [pc, #96]	; (8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d76:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7c:	e01f      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d7e:	4b15      	ldr	r3, [pc, #84]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8a:	d106      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d92:	d102      	bne.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d94:	4b11      	ldr	r3, [pc, #68]	; (8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d98:	e011      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d9a:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da6:	d106      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dae:	d102      	bne.n	8007db6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db4:	e003      	b.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007db6:	2300      	movs	r3, #0
 8007db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dba:	f000 bc38 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dbe:	f000 bc36 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dc6:	f000 bc32 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dce:	f000 bc2e 	b.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	03d09000 	.word	0x03d09000
 8007ddc:	003d0900 	.word	0x003d0900
 8007de0:	007a1200 	.word	0x007a1200
 8007de4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007df0:	430b      	orrs	r3, r1
 8007df2:	f040 809c 	bne.w	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007df6:	4b9e      	ldr	r3, [pc, #632]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007dfe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e06:	d054      	beq.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e0e:	f200 808b 	bhi.w	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e18:	f000 8083 	beq.w	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e22:	f200 8081 	bhi.w	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e2c:	d02f      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e34:	d878      	bhi.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d004      	beq.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e42:	d012      	beq.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e44:	e070      	b.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e46:	4b8a      	ldr	r3, [pc, #552]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e52:	d107      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 feaf 	bl	8008bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e62:	e3e4      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e68:	e3e1      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e6a:	4b81      	ldr	r3, [pc, #516]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e76:	d107      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e78:	f107 0318 	add.w	r3, r7, #24
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f000 fbf5 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e86:	e3d2      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e8c:	e3cf      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e8e:	4b78      	ldr	r3, [pc, #480]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9a:	d107      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fd37 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eaa:	e3c0      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb0:	e3bd      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eb2:	4b6f      	ldr	r3, [pc, #444]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ebc:	4b6c      	ldr	r3, [pc, #432]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0304 	and.w	r3, r3, #4
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d10c      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d109      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ece:	4b68      	ldr	r3, [pc, #416]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	08db      	lsrs	r3, r3, #3
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	4a66      	ldr	r2, [pc, #408]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007eda:	fa22 f303 	lsr.w	r3, r2, r3
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee0:	e01e      	b.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ee2:	4b63      	ldr	r3, [pc, #396]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eee:	d106      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ef6:	d102      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ef8:	4b5f      	ldr	r3, [pc, #380]	; (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007efc:	e010      	b.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007efe:	4b5c      	ldr	r3, [pc, #368]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0a:	d106      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f12:	d102      	bne.n	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f14:	4b59      	ldr	r3, [pc, #356]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f18:	e002      	b.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f1e:	e386      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f20:	e385      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f22:	4b57      	ldr	r3, [pc, #348]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f26:	e382      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f2c:	e37f      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f32:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007f36:	430b      	orrs	r3, r1
 8007f38:	f040 80a7 	bne.w	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f3c:	4b4c      	ldr	r3, [pc, #304]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f4c:	d055      	beq.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f54:	f200 8096 	bhi.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f5e:	f000 8084 	beq.w	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f68:	f200 808c 	bhi.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f72:	d030      	beq.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f7a:	f200 8083 	bhi.w	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f8a:	d012      	beq.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007f8c:	e07a      	b.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f8e:	4b38      	ldr	r3, [pc, #224]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f9a:	d107      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fe0b 	bl	8008bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007faa:	e340      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fb0:	e33d      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fb2:	4b2f      	ldr	r3, [pc, #188]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fbe:	d107      	bne.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fc0:	f107 0318 	add.w	r3, r7, #24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 fb51 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fce:	e32e      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd4:	e32b      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fd6:	4b26      	ldr	r3, [pc, #152]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe4:	f107 030c 	add.w	r3, r7, #12
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fc93 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ff2:	e31c      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff8:	e319      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ffa:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008002:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008004:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b04      	cmp	r3, #4
 800800e:	d10c      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	08db      	lsrs	r3, r3, #3
 800801c:	f003 0303 	and.w	r3, r3, #3
 8008020:	4a14      	ldr	r2, [pc, #80]	; (8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008022:	fa22 f303 	lsr.w	r3, r2, r3
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008028:	e01e      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800802a:	4b11      	ldr	r3, [pc, #68]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008036:	d106      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800803e:	d102      	bne.n	8008046 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008040:	4b0d      	ldr	r3, [pc, #52]	; (8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008044:	e010      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008046:	4b0a      	ldr	r3, [pc, #40]	; (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008052:	d106      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805a:	d102      	bne.n	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800805c:	4b07      	ldr	r3, [pc, #28]	; (800807c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008060:	e002      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008066:	e2e2      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008068:	e2e1      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800806e:	e2de      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008070:	58024400 	.word	0x58024400
 8008074:	03d09000 	.word	0x03d09000
 8008078:	003d0900 	.word	0x003d0900
 800807c:	007a1200 	.word	0x007a1200
 8008080:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008088:	e2d1      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800808a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008092:	430b      	orrs	r3, r1
 8008094:	f040 809c 	bne.w	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008098:	4b93      	ldr	r3, [pc, #588]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080a8:	d054      	beq.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b0:	f200 808b 	bhi.w	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ba:	f000 8083 	beq.w	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080c4:	f200 8081 	bhi.w	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ce:	d02f      	beq.n	8008130 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d6:	d878      	bhi.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e4:	d012      	beq.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80080e6:	e070      	b.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080e8:	4b7f      	ldr	r3, [pc, #508]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f4:	d107      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fd5e 	bl	8008bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008104:	e293      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810a:	e290      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800810c:	4b76      	ldr	r3, [pc, #472]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008118:	d107      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811a:	f107 0318 	add.w	r3, r7, #24
 800811e:	4618      	mov	r0, r3
 8008120:	f000 faa4 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008128:	e281      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800812e:	e27e      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008130:	4b6d      	ldr	r3, [pc, #436]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800813c:	d107      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fbe6 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814c:	e26f      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800814e:	2300      	movs	r3, #0
 8008150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008152:	e26c      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008154:	4b64      	ldr	r3, [pc, #400]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800815c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800815e:	4b62      	ldr	r3, [pc, #392]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b04      	cmp	r3, #4
 8008168:	d10c      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800816a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008170:	4b5d      	ldr	r3, [pc, #372]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	08db      	lsrs	r3, r3, #3
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	4a5c      	ldr	r2, [pc, #368]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800817c:	fa22 f303 	lsr.w	r3, r2, r3
 8008180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008182:	e01e      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008184:	4b58      	ldr	r3, [pc, #352]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008190:	d106      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008198:	d102      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800819a:	4b55      	ldr	r3, [pc, #340]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800819c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800819e:	e010      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081a0:	4b51      	ldr	r3, [pc, #324]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ac:	d106      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80081ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b4:	d102      	bne.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081b6:	4b4f      	ldr	r3, [pc, #316]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ba:	e002      	b.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081c0:	e235      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081c2:	e234      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081c4:	4b4c      	ldr	r3, [pc, #304]	; (80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081c8:	e231      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ce:	e22e      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80081d8:	430b      	orrs	r3, r1
 80081da:	f040 808f 	bne.w	80082fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081de:	4b42      	ldr	r3, [pc, #264]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ee:	d06b      	beq.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081f6:	d874      	bhi.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081fe:	d056      	beq.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008206:	d86c      	bhi.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800820e:	d03b      	beq.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008216:	d864      	bhi.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800821e:	d021      	beq.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008226:	d85c      	bhi.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008234:	d004      	beq.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008236:	e054      	b.n	80082e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008238:	f7fe fa4c 	bl	80066d4 <HAL_RCC_GetPCLK1Freq>
 800823c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800823e:	e1f6      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008240:	4b29      	ldr	r3, [pc, #164]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800824c:	d107      	bne.n	800825e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824e:	f107 0318 	add.w	r3, r7, #24
 8008252:	4618      	mov	r0, r3
 8008254:	f000 fa0a 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800825c:	e1e7      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008262:	e1e4      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008264:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800826c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008270:	d107      	bne.n	8008282 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008272:	f107 030c 	add.w	r3, r7, #12
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fb4c 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008280:	e1d5      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008286:	e1d2      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008288:	4b17      	ldr	r3, [pc, #92]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b04      	cmp	r3, #4
 8008292:	d109      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008294:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	08db      	lsrs	r3, r3, #3
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	4a13      	ldr	r2, [pc, #76]	; (80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082a0:	fa22 f303 	lsr.w	r3, r2, r3
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a6:	e1c2      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ac:	e1bf      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082ae:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ba:	d102      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80082bc:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082c0:	e1b5      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c6:	e1b2      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082d4:	d102      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80082d6:	4b07      	ldr	r3, [pc, #28]	; (80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80082d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082da:	e1a8      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e0:	e1a5      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e6:	e1a2      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80082e8:	58024400 	.word	0x58024400
 80082ec:	03d09000 	.word	0x03d09000
 80082f0:	003d0900 	.word	0x003d0900
 80082f4:	007a1200 	.word	0x007a1200
 80082f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008300:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008304:	430b      	orrs	r3, r1
 8008306:	d173      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008308:	4b9c      	ldr	r3, [pc, #624]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800830a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800830c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008310:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008318:	d02f      	beq.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008320:	d863      	bhi.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	2b00      	cmp	r3, #0
 8008326:	d004      	beq.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800832e:	d012      	beq.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008330:	e05b      	b.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008332:	4b92      	ldr	r3, [pc, #584]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800833a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800833e:	d107      	bne.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008340:	f107 0318 	add.w	r3, r7, #24
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f991 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800834e:	e16e      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008354:	e16b      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008356:	4b89      	ldr	r3, [pc, #548]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800835e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008362:	d107      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fad3 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008372:	e15c      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008378:	e159      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800837a:	4b80      	ldr	r3, [pc, #512]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800837c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008382:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008384:	4b7d      	ldr	r3, [pc, #500]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b04      	cmp	r3, #4
 800838e:	d10c      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008392:	2b00      	cmp	r3, #0
 8008394:	d109      	bne.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008396:	4b79      	ldr	r3, [pc, #484]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	08db      	lsrs	r3, r3, #3
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	4a77      	ldr	r2, [pc, #476]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80083a2:	fa22 f303 	lsr.w	r3, r2, r3
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083a8:	e01e      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083aa:	4b74      	ldr	r3, [pc, #464]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083b6:	d106      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80083b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083be:	d102      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80083c0:	4b70      	ldr	r3, [pc, #448]	; (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083c4:	e010      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083c6:	4b6d      	ldr	r3, [pc, #436]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083d2:	d106      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80083d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083da:	d102      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083dc:	4b6a      	ldr	r3, [pc, #424]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e0:	e002      	b.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80083e6:	e122      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80083e8:	e121      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ee:	e11e      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80083f8:	430b      	orrs	r3, r1
 80083fa:	d133      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083fc:	4b5f      	ldr	r3, [pc, #380]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008404:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008412:	d012      	beq.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008414:	e023      	b.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008416:	4b59      	ldr	r3, [pc, #356]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008422:	d107      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fbc7 	bl	8008bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008432:	e0fc      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008438:	e0f9      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800843a:	4b50      	ldr	r3, [pc, #320]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008446:	d107      	bne.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008448:	f107 0318 	add.w	r3, r7, #24
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f90d 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008456:	e0ea      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800845c:	e0e7      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008462:	e0e4      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008468:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800846c:	430b      	orrs	r3, r1
 800846e:	f040 808d 	bne.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008472:	4b42      	ldr	r3, [pc, #264]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008476:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800847a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008482:	d06b      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800848a:	d874      	bhi.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800848c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d056      	beq.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849a:	d86c      	bhi.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084a2:	d03b      	beq.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084aa:	d864      	bhi.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b2:	d021      	beq.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ba:	d85c      	bhi.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c8:	d004      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80084ca:	e054      	b.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084cc:	f000 f8b8 	bl	8008640 <HAL_RCCEx_GetD3PCLK1Freq>
 80084d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084d2:	e0ac      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084d4:	4b29      	ldr	r3, [pc, #164]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084e0:	d107      	bne.n	80084f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e2:	f107 0318 	add.w	r3, r7, #24
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f8c0 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f0:	e09d      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f6:	e09a      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084f8:	4b20      	ldr	r3, [pc, #128]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008504:	d107      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008506:	f107 030c 	add.w	r3, r7, #12
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fa02 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008514:	e08b      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851a:	e088      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800851c:	4b17      	ldr	r3, [pc, #92]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b04      	cmp	r3, #4
 8008526:	d109      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008528:	4b14      	ldr	r3, [pc, #80]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	08db      	lsrs	r3, r3, #3
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	4a13      	ldr	r2, [pc, #76]	; (8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008534:	fa22 f303 	lsr.w	r3, r2, r3
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800853a:	e078      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008540:	e075      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008542:	4b0e      	ldr	r3, [pc, #56]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800854e:	d102      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008550:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008554:	e06b      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855a:	e068      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800855c:	4b07      	ldr	r3, [pc, #28]	; (800857c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008568:	d102      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800856c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800856e:	e05e      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008574:	e05b      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800857a:	e058      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800857c:	58024400 	.word	0x58024400
 8008580:	03d09000 	.word	0x03d09000
 8008584:	003d0900 	.word	0x003d0900
 8008588:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800858c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008590:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008594:	430b      	orrs	r3, r1
 8008596:	d148      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008598:	4b27      	ldr	r3, [pc, #156]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800859a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085a8:	d02a      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085b0:	d838      	bhi.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d004      	beq.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085be:	d00d      	beq.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80085c0:	e030      	b.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ce:	d102      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80085d0:	4b1a      	ldr	r3, [pc, #104]	; (800863c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80085d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d4:	e02b      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085da:	e028      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085dc:	4b16      	ldr	r3, [pc, #88]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085e8:	d107      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fae4 	bl	8008bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f8:	e019      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085fe:	e016      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008600:	4b0d      	ldr	r3, [pc, #52]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800860c:	d107      	bne.n	800861e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860e:	f107 0318 	add.w	r3, r7, #24
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f82a 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800861c:	e007      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008622:	e004      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008628:	e001      	b.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008630:	4618      	mov	r0, r3
 8008632:	3740      	adds	r7, #64	; 0x40
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	58024400 	.word	0x58024400
 800863c:	007a1200 	.word	0x007a1200

08008640 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008644:	f7fe f816 	bl	8006674 <HAL_RCC_GetHCLKFreq>
 8008648:	4602      	mov	r2, r0
 800864a:	4b06      	ldr	r3, [pc, #24]	; (8008664 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	091b      	lsrs	r3, r3, #4
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	4904      	ldr	r1, [pc, #16]	; (8008668 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008656:	5ccb      	ldrb	r3, [r1, r3]
 8008658:	f003 031f 	and.w	r3, r3, #31
 800865c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008660:	4618      	mov	r0, r3
 8008662:	bd80      	pop	{r7, pc}
 8008664:	58024400 	.word	0x58024400
 8008668:	0800b464 	.word	0x0800b464

0800866c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800866c:	b480      	push	{r7}
 800866e:	b089      	sub	sp, #36	; 0x24
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008674:	4ba1      	ldr	r3, [pc, #644]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800867e:	4b9f      	ldr	r3, [pc, #636]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008682:	0b1b      	lsrs	r3, r3, #12
 8008684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008688:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800868a:	4b9c      	ldr	r3, [pc, #624]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	091b      	lsrs	r3, r3, #4
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008696:	4b99      	ldr	r3, [pc, #612]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	08db      	lsrs	r3, r3, #3
 800869c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	fb02 f303 	mul.w	r3, r2, r3
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8111 	beq.w	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	f000 8083 	beq.w	80087c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	f200 80a1 	bhi.w	800880c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d056      	beq.n	8008784 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086d6:	e099      	b.n	800880c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d8:	4b88      	ldr	r3, [pc, #544]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0320 	and.w	r3, r3, #32
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d02d      	beq.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086e4:	4b85      	ldr	r3, [pc, #532]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	08db      	lsrs	r3, r3, #3
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	4a84      	ldr	r2, [pc, #528]	; (8008900 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086f0:	fa22 f303 	lsr.w	r3, r2, r3
 80086f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870e:	4b7b      	ldr	r3, [pc, #492]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008716:	ee07 3a90 	vmov	s15, r3
 800871a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800871e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008722:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800872e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800873e:	e087      	b.n	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008908 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800874e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008752:	4b6a      	ldr	r3, [pc, #424]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008762:	ed97 6a03 	vldr	s12, [r7, #12]
 8008766:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800876a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008782:	e065      	b.n	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800890c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008796:	4b59      	ldr	r3, [pc, #356]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879e:	ee07 3a90 	vmov	s15, r3
 80087a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087c6:	e043      	b.n	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	ee07 3a90 	vmov	s15, r3
 80087ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087da:	4b48      	ldr	r3, [pc, #288]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800880a:	e021      	b.n	8008850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800890c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800881a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881e:	4b37      	ldr	r3, [pc, #220]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008826:	ee07 3a90 	vmov	s15, r3
 800882a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008832:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800884e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008850:	4b2a      	ldr	r3, [pc, #168]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	0a5b      	lsrs	r3, r3, #9
 8008856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800886a:	edd7 6a07 	vldr	s13, [r7, #28]
 800886e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008876:	ee17 2a90 	vmov	r2, s15
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800887e:	4b1f      	ldr	r3, [pc, #124]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008882:	0c1b      	lsrs	r3, r3, #16
 8008884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008898:	edd7 6a07 	vldr	s13, [r7, #28]
 800889c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a4:	ee17 2a90 	vmov	r2, s15
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088ac:	4b13      	ldr	r3, [pc, #76]	; (80088fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	0e1b      	lsrs	r3, r3, #24
 80088b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d2:	ee17 2a90 	vmov	r2, s15
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088da:	e008      	b.n	80088ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	609a      	str	r2, [r3, #8]
}
 80088ee:	bf00      	nop
 80088f0:	3724      	adds	r7, #36	; 0x24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	58024400 	.word	0x58024400
 8008900:	03d09000 	.word	0x03d09000
 8008904:	46000000 	.word	0x46000000
 8008908:	4c742400 	.word	0x4c742400
 800890c:	4a742400 	.word	0x4a742400
 8008910:	4af42400 	.word	0x4af42400

08008914 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008914:	b480      	push	{r7}
 8008916:	b089      	sub	sp, #36	; 0x24
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800891c:	4ba1      	ldr	r3, [pc, #644]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	f003 0303 	and.w	r3, r3, #3
 8008924:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008926:	4b9f      	ldr	r3, [pc, #636]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892a:	0d1b      	lsrs	r3, r3, #20
 800892c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008930:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008932:	4b9c      	ldr	r3, [pc, #624]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800893e:	4b99      	ldr	r3, [pc, #612]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	08db      	lsrs	r3, r3, #3
 8008944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	ee07 3a90 	vmov	s15, r3
 8008952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 8111 	beq.w	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	2b02      	cmp	r3, #2
 8008966:	f000 8083 	beq.w	8008a70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	2b02      	cmp	r3, #2
 800896e:	f200 80a1 	bhi.w	8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d056      	beq.n	8008a2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800897e:	e099      	b.n	8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008980:	4b88      	ldr	r3, [pc, #544]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0320 	and.w	r3, r3, #32
 8008988:	2b00      	cmp	r3, #0
 800898a:	d02d      	beq.n	80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800898c:	4b85      	ldr	r3, [pc, #532]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	08db      	lsrs	r3, r3, #3
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	4a84      	ldr	r2, [pc, #528]	; (8008ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008998:	fa22 f303 	lsr.w	r3, r2, r3
 800899c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089b6:	4b7b      	ldr	r3, [pc, #492]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089be:	ee07 3a90 	vmov	s15, r3
 80089c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089e6:	e087      	b.n	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fa:	4b6a      	ldr	r3, [pc, #424]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a2a:	e065      	b.n	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	ee07 3a90 	vmov	s15, r3
 8008a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3e:	4b59      	ldr	r3, [pc, #356]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6e:	e043      	b.n	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	ee07 3a90 	vmov	s15, r3
 8008a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a82:	4b48      	ldr	r3, [pc, #288]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8a:	ee07 3a90 	vmov	s15, r3
 8008a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ab2:	e021      	b.n	8008af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac6:	4b37      	ldr	r3, [pc, #220]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ada:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008af6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008af8:	4b2a      	ldr	r3, [pc, #168]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afc:	0a5b      	lsrs	r3, r3, #9
 8008afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b02:	ee07 3a90 	vmov	s15, r3
 8008b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1e:	ee17 2a90 	vmov	r2, s15
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b26:	4b1f      	ldr	r3, [pc, #124]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2a:	0c1b      	lsrs	r3, r3, #16
 8008b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4c:	ee17 2a90 	vmov	r2, s15
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b54:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	0e1b      	lsrs	r3, r3, #24
 8008b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b7a:	ee17 2a90 	vmov	r2, s15
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b82:	e008      	b.n	8008b96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	609a      	str	r2, [r3, #8]
}
 8008b96:	bf00      	nop
 8008b98:	3724      	adds	r7, #36	; 0x24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	58024400 	.word	0x58024400
 8008ba8:	03d09000 	.word	0x03d09000
 8008bac:	46000000 	.word	0x46000000
 8008bb0:	4c742400 	.word	0x4c742400
 8008bb4:	4a742400 	.word	0x4a742400
 8008bb8:	4af42400 	.word	0x4af42400

08008bbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b089      	sub	sp, #36	; 0x24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bc4:	4ba0      	ldr	r3, [pc, #640]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008bce:	4b9e      	ldr	r3, [pc, #632]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	091b      	lsrs	r3, r3, #4
 8008bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bda:	4b9b      	ldr	r3, [pc, #620]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	f003 0301 	and.w	r3, r3, #1
 8008be2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008be4:	4b98      	ldr	r3, [pc, #608]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be8:	08db      	lsrs	r3, r3, #3
 8008bea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	fb02 f303 	mul.w	r3, r2, r3
 8008bf4:	ee07 3a90 	vmov	s15, r3
 8008bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bfc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 8111 	beq.w	8008e2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	f000 8083 	beq.w	8008d16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	f200 80a1 	bhi.w	8008d5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d056      	beq.n	8008cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c24:	e099      	b.n	8008d5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c26:	4b88      	ldr	r3, [pc, #544]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d02d      	beq.n	8008c8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c32:	4b85      	ldr	r3, [pc, #532]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	08db      	lsrs	r3, r3, #3
 8008c38:	f003 0303 	and.w	r3, r3, #3
 8008c3c:	4a83      	ldr	r2, [pc, #524]	; (8008e4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	ee07 3a90 	vmov	s15, r3
 8008c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5c:	4b7a      	ldr	r3, [pc, #488]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c64:	ee07 3a90 	vmov	s15, r3
 8008c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c8c:	e087      	b.n	8008d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	ee07 3a90 	vmov	s15, r3
 8008c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008e54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca0:	4b69      	ldr	r3, [pc, #420]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cd0:	e065      	b.n	8008d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	ee07 3a90 	vmov	s15, r3
 8008cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008e58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce4:	4b58      	ldr	r3, [pc, #352]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cec:	ee07 3a90 	vmov	s15, r3
 8008cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d14:	e043      	b.n	8008d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d28:	4b47      	ldr	r3, [pc, #284]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d58:	e021      	b.n	8008d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6c:	4b36      	ldr	r3, [pc, #216]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d74:	ee07 3a90 	vmov	s15, r3
 8008d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d9e:	4b2a      	ldr	r3, [pc, #168]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	0a5b      	lsrs	r3, r3, #9
 8008da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008db4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dc4:	ee17 2a90 	vmov	r2, s15
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008dcc:	4b1e      	ldr	r3, [pc, #120]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd0:	0c1b      	lsrs	r3, r3, #16
 8008dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df2:	ee17 2a90 	vmov	r2, s15
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008dfa:	4b13      	ldr	r3, [pc, #76]	; (8008e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfe:	0e1b      	lsrs	r3, r3, #24
 8008e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e04:	ee07 3a90 	vmov	s15, r3
 8008e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e20:	ee17 2a90 	vmov	r2, s15
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e28:	e008      	b.n	8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	609a      	str	r2, [r3, #8]
}
 8008e3c:	bf00      	nop
 8008e3e:	3724      	adds	r7, #36	; 0x24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	58024400 	.word	0x58024400
 8008e4c:	03d09000 	.word	0x03d09000
 8008e50:	46000000 	.word	0x46000000
 8008e54:	4c742400 	.word	0x4c742400
 8008e58:	4a742400 	.word	0x4a742400
 8008e5c:	4af42400 	.word	0x4af42400

08008e60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e6e:	4b53      	ldr	r3, [pc, #332]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e72:	f003 0303 	and.w	r3, r3, #3
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d101      	bne.n	8008e7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e099      	b.n	8008fb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e7e:	4b4f      	ldr	r3, [pc, #316]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a4e      	ldr	r2, [pc, #312]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e8a:	f7f8 fbeb 	bl	8001664 <HAL_GetTick>
 8008e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e90:	e008      	b.n	8008ea4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e92:	f7f8 fbe7 	bl	8001664 <HAL_GetTick>
 8008e96:	4602      	mov	r2, r0
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d901      	bls.n	8008ea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e086      	b.n	8008fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ea4:	4b45      	ldr	r3, [pc, #276]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1f0      	bne.n	8008e92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008eb0:	4b42      	ldr	r3, [pc, #264]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	031b      	lsls	r3, r3, #12
 8008ebe:	493f      	ldr	r1, [pc, #252]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	025b      	lsls	r3, r3, #9
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	431a      	orrs	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	041b      	lsls	r3, r3, #16
 8008ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	061b      	lsls	r3, r3, #24
 8008ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ef4:	4931      	ldr	r1, [pc, #196]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008efa:	4b30      	ldr	r3, [pc, #192]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	492d      	ldr	r1, [pc, #180]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f0c:	4b2b      	ldr	r3, [pc, #172]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	f023 0220 	bic.w	r2, r3, #32
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	4928      	ldr	r1, [pc, #160]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f1e:	4b27      	ldr	r3, [pc, #156]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	4a26      	ldr	r2, [pc, #152]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f24:	f023 0310 	bic.w	r3, r3, #16
 8008f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f2a:	4b24      	ldr	r3, [pc, #144]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f2e:	4b24      	ldr	r3, [pc, #144]	; (8008fc0 <RCCEx_PLL2_Config+0x160>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	69d2      	ldr	r2, [r2, #28]
 8008f36:	00d2      	lsls	r2, r2, #3
 8008f38:	4920      	ldr	r1, [pc, #128]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f3e:	4b1f      	ldr	r3, [pc, #124]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	4a1e      	ldr	r2, [pc, #120]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f44:	f043 0310 	orr.w	r3, r3, #16
 8008f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d106      	bne.n	8008f5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f50:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f54:	4a19      	ldr	r2, [pc, #100]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f5c:	e00f      	b.n	8008f7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d106      	bne.n	8008f72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f64:	4b15      	ldr	r3, [pc, #84]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	4a14      	ldr	r2, [pc, #80]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f70:	e005      	b.n	8008f7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f72:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f7e:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a0e      	ldr	r2, [pc, #56]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f8a:	f7f8 fb6b 	bl	8001664 <HAL_GetTick>
 8008f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f90:	e008      	b.n	8008fa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f92:	f7f8 fb67 	bl	8001664 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d901      	bls.n	8008fa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e006      	b.n	8008fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fa4:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <RCCEx_PLL2_Config+0x15c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d0f0      	beq.n	8008f92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	ffff0007 	.word	0xffff0007

08008fc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fd2:	4b53      	ldr	r3, [pc, #332]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d101      	bne.n	8008fe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e099      	b.n	8009116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fe2:	4b4f      	ldr	r3, [pc, #316]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a4e      	ldr	r2, [pc, #312]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8008fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fee:	f7f8 fb39 	bl	8001664 <HAL_GetTick>
 8008ff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ff4:	e008      	b.n	8009008 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ff6:	f7f8 fb35 	bl	8001664 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b02      	cmp	r3, #2
 8009002:	d901      	bls.n	8009008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e086      	b.n	8009116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009008:	4b45      	ldr	r3, [pc, #276]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1f0      	bne.n	8008ff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009014:	4b42      	ldr	r3, [pc, #264]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8009016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	051b      	lsls	r3, r3, #20
 8009022:	493f      	ldr	r1, [pc, #252]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8009024:	4313      	orrs	r3, r2
 8009026:	628b      	str	r3, [r1, #40]	; 0x28
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	3b01      	subs	r3, #1
 800902e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	3b01      	subs	r3, #1
 8009038:	025b      	lsls	r3, r3, #9
 800903a:	b29b      	uxth	r3, r3
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	3b01      	subs	r3, #1
 8009044:	041b      	lsls	r3, r3, #16
 8009046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800904a:	431a      	orrs	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	3b01      	subs	r3, #1
 8009052:	061b      	lsls	r3, r3, #24
 8009054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009058:	4931      	ldr	r1, [pc, #196]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 800905a:	4313      	orrs	r3, r2
 800905c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800905e:	4b30      	ldr	r3, [pc, #192]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8009060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	492d      	ldr	r1, [pc, #180]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 800906c:	4313      	orrs	r3, r2
 800906e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009070:	4b2b      	ldr	r3, [pc, #172]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8009072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	4928      	ldr	r1, [pc, #160]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 800907e:	4313      	orrs	r3, r2
 8009080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009082:	4b27      	ldr	r3, [pc, #156]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8009084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009086:	4a26      	ldr	r2, [pc, #152]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8009088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800908c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800908e:	4b24      	ldr	r3, [pc, #144]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 8009090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009092:	4b24      	ldr	r3, [pc, #144]	; (8009124 <RCCEx_PLL3_Config+0x160>)
 8009094:	4013      	ands	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	69d2      	ldr	r2, [r2, #28]
 800909a:	00d2      	lsls	r2, r2, #3
 800909c:	4920      	ldr	r1, [pc, #128]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090a2:	4b1f      	ldr	r3, [pc, #124]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	4a1e      	ldr	r2, [pc, #120]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d106      	bne.n	80090c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090b4:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	4a19      	ldr	r2, [pc, #100]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090c0:	e00f      	b.n	80090e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d106      	bne.n	80090d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090c8:	4b15      	ldr	r3, [pc, #84]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a14      	ldr	r2, [pc, #80]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090d4:	e005      	b.n	80090e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090d6:	4b12      	ldr	r3, [pc, #72]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	4a11      	ldr	r2, [pc, #68]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090e2:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a0e      	ldr	r2, [pc, #56]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ee:	f7f8 fab9 	bl	8001664 <HAL_GetTick>
 80090f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090f4:	e008      	b.n	8009108 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090f6:	f7f8 fab5 	bl	8001664 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d901      	bls.n	8009108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e006      	b.n	8009116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009108:	4b05      	ldr	r3, [pc, #20]	; (8009120 <RCCEx_PLL3_Config+0x15c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0f0      	beq.n	80090f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009114:	7bfb      	ldrb	r3, [r7, #15]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	58024400 	.word	0x58024400
 8009124:	ffff0007 	.word	0xffff0007

08009128 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d071      	beq.n	800921e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7f8 f84a 	bl	80011e8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0310 	and.w	r3, r3, #16
 8009166:	2b10      	cmp	r3, #16
 8009168:	d050      	beq.n	800920c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	22ca      	movs	r2, #202	; 0xca
 8009170:	625a      	str	r2, [r3, #36]	; 0x24
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2253      	movs	r2, #83	; 0x53
 8009178:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa4a 	bl	8009614 <RTC_EnterInitMode>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d124      	bne.n	80091d4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6899      	ldr	r1, [r3, #8]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	4b24      	ldr	r3, [pc, #144]	; (8009228 <HAL_RTC_Init+0x100>)
 8009196:	400b      	ands	r3, r1
 8009198:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6899      	ldr	r1, [r3, #8]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	0419      	lsls	r1, r3, #16
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68da      	ldr	r2, [r3, #12]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa56 	bl	800967c <RTC_ExitInitMode>
 80091d0:	4603      	mov	r3, r0
 80091d2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d113      	bne.n	8009202 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0203 	bic.w	r2, r2, #3
 80091e8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	22ff      	movs	r2, #255	; 0xff
 8009208:	625a      	str	r2, [r3, #36]	; 0x24
 800920a:	e001      	b.n	8009210 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d103      	bne.n	800921e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	ff8fffbf 	.word	0xff8fffbf

0800922c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800922c:	b590      	push	{r4, r7, lr}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_RTC_SetTime+0x1a>
 8009242:	2302      	movs	r3, #2
 8009244:	e089      	b.n	800935a <HAL_RTC_SetTime+0x12e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	22ca      	movs	r2, #202	; 0xca
 800925c:	625a      	str	r2, [r3, #36]	; 0x24
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2253      	movs	r2, #83	; 0x53
 8009264:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f9d4 	bl	8009614 <RTC_EnterInitMode>
 800926c:	4603      	mov	r3, r0
 800926e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009270:	7cfb      	ldrb	r3, [r7, #19]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d161      	bne.n	800933a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d126      	bne.n	80092ca <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d102      	bne.n	8009290 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2200      	movs	r2, #0
 800928e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fa2f 	bl	80096f8 <RTC_ByteToBcd2>
 800929a:	4603      	mov	r3, r0
 800929c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f000 fa28 	bl	80096f8 <RTC_ByteToBcd2>
 80092a8:	4603      	mov	r3, r0
 80092aa:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092ac:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	789b      	ldrb	r3, [r3, #2]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 fa20 	bl	80096f8 <RTC_ByteToBcd2>
 80092b8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092ba:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	78db      	ldrb	r3, [r3, #3]
 80092c2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092c4:	4313      	orrs	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	e018      	b.n	80092fc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2200      	movs	r2, #0
 80092dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092ea:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092f0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	78db      	ldrb	r3, [r3, #3]
 80092f6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	6979      	ldr	r1, [r7, #20]
 8009302:	4b18      	ldr	r3, [pc, #96]	; (8009364 <HAL_RTC_SetTime+0x138>)
 8009304:	400b      	ands	r3, r1
 8009306:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689a      	ldr	r2, [r3, #8]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009316:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6899      	ldr	r1, [r3, #8]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	431a      	orrs	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 f9a3 	bl	800967c <RTC_ExitInitMode>
 8009336:	4603      	mov	r3, r0
 8009338:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	22ff      	movs	r2, #255	; 0xff
 8009340:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009342:	7cfb      	ldrb	r3, [r7, #19]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d103      	bne.n	8009350 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009358:	7cfb      	ldrb	r3, [r7, #19]
}
 800935a:	4618      	mov	r0, r3
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	bd90      	pop	{r4, r7, pc}
 8009362:	bf00      	nop
 8009364:	007f7f7f 	.word	0x007f7f7f

08009368 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b22      	ldr	r3, [pc, #136]	; (800941c <HAL_RTC_GetTime+0xb4>)
 8009394:	4013      	ands	r3, r2
 8009396:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	0c1b      	lsrs	r3, r3, #16
 800939c:	b2db      	uxtb	r3, r3
 800939e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	0d9b      	lsrs	r3, r3, #22
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d11a      	bne.n	8009412 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f9a9 	bl	8009738 <RTC_Bcd2ToByte>
 80093e6:	4603      	mov	r3, r0
 80093e8:	461a      	mov	r2, r3
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	785b      	ldrb	r3, [r3, #1]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 f9a0 	bl	8009738 <RTC_Bcd2ToByte>
 80093f8:	4603      	mov	r3, r0
 80093fa:	461a      	mov	r2, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	789b      	ldrb	r3, [r3, #2]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 f997 	bl	8009738 <RTC_Bcd2ToByte>
 800940a:	4603      	mov	r3, r0
 800940c:	461a      	mov	r2, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	007f7f7f 	.word	0x007f7f7f

08009420 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009420:	b590      	push	{r4, r7, lr}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d101      	bne.n	800943a <HAL_RTC_SetDate+0x1a>
 8009436:	2302      	movs	r3, #2
 8009438:	e073      	b.n	8009522 <HAL_RTC_SetDate+0x102>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2202      	movs	r2, #2
 8009446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10e      	bne.n	800946e <HAL_RTC_SetDate+0x4e>
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	f003 0310 	and.w	r3, r3, #16
 8009458:	2b00      	cmp	r3, #0
 800945a:	d008      	beq.n	800946e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	785b      	ldrb	r3, [r3, #1]
 8009460:	f023 0310 	bic.w	r3, r3, #16
 8009464:	b2db      	uxtb	r3, r3
 8009466:	330a      	adds	r3, #10
 8009468:	b2da      	uxtb	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d11c      	bne.n	80094ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	78db      	ldrb	r3, [r3, #3]
 8009478:	4618      	mov	r0, r3
 800947a:	f000 f93d 	bl	80096f8 <RTC_ByteToBcd2>
 800947e:	4603      	mov	r3, r0
 8009480:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	785b      	ldrb	r3, [r3, #1]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f936 	bl	80096f8 <RTC_ByteToBcd2>
 800948c:	4603      	mov	r3, r0
 800948e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009490:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	789b      	ldrb	r3, [r3, #2]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f92e 	bl	80096f8 <RTC_ByteToBcd2>
 800949c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800949e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094a8:	4313      	orrs	r3, r2
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	e00e      	b.n	80094cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	78db      	ldrb	r3, [r3, #3]
 80094b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094ba:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80094c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	22ca      	movs	r2, #202	; 0xca
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2253      	movs	r2, #83	; 0x53
 80094da:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f000 f899 	bl	8009614 <RTC_EnterInitMode>
 80094e2:	4603      	mov	r3, r0
 80094e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80094e6:	7cfb      	ldrb	r3, [r7, #19]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	6979      	ldr	r1, [r7, #20]
 80094f2:	4b0e      	ldr	r3, [pc, #56]	; (800952c <HAL_RTC_SetDate+0x10c>)
 80094f4:	400b      	ands	r3, r1
 80094f6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 f8bf 	bl	800967c <RTC_ExitInitMode>
 80094fe:	4603      	mov	r3, r0
 8009500:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	22ff      	movs	r2, #255	; 0xff
 8009508:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800950a:	7cfb      	ldrb	r3, [r7, #19]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009520:	7cfb      	ldrb	r3, [r7, #19]


}
 8009522:	4618      	mov	r0, r3
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	bd90      	pop	{r4, r7, pc}
 800952a:	bf00      	nop
 800952c:	00ffff3f 	.word	0x00ffff3f

08009530 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	4b21      	ldr	r3, [pc, #132]	; (80095c8 <HAL_RTC_GetDate+0x98>)
 8009544:	4013      	ands	r3, r2
 8009546:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	0c1b      	lsrs	r3, r3, #16
 800954c:	b2da      	uxtb	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f003 031f 	and.w	r3, r3, #31
 800955c:	b2da      	uxtb	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800956a:	b2da      	uxtb	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	0b5b      	lsrs	r3, r3, #13
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	b2da      	uxtb	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d11a      	bne.n	80095bc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	78db      	ldrb	r3, [r3, #3]
 800958a:	4618      	mov	r0, r3
 800958c:	f000 f8d4 	bl	8009738 <RTC_Bcd2ToByte>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	4618      	mov	r0, r3
 800959e:	f000 f8cb 	bl	8009738 <RTC_Bcd2ToByte>
 80095a2:	4603      	mov	r3, r0
 80095a4:	461a      	mov	r2, r3
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	789b      	ldrb	r3, [r3, #2]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 f8c2 	bl	8009738 <RTC_Bcd2ToByte>
 80095b4:	4603      	mov	r3, r0
 80095b6:	461a      	mov	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	00ffff3f 	.word	0x00ffff3f

080095cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a0d      	ldr	r2, [pc, #52]	; (8009610 <HAL_RTC_WaitForSynchro+0x44>)
 80095da:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 80095dc:	f7f8 f842 	bl	8001664 <HAL_GetTick>
 80095e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095e2:	e009      	b.n	80095f8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095e4:	f7f8 f83e 	bl	8001664 <HAL_GetTick>
 80095e8:	4602      	mov	r2, r0
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095f2:	d901      	bls.n	80095f8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e007      	b.n	8009608 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f003 0320 	and.w	r3, r3, #32
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0ee      	beq.n	80095e4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	0003ff5f 	.word	0x0003ff5f

08009614 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962a:	2b00      	cmp	r3, #0
 800962c:	d120      	bne.n	8009670 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009638:	f7f8 f814 	bl	8001664 <HAL_GetTick>
 800963c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800963e:	e00d      	b.n	800965c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009640:	f7f8 f810 	bl	8001664 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800964e:	d905      	bls.n	800965c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2203      	movs	r2, #3
 8009658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <RTC_EnterInitMode+0x5c>
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	2b03      	cmp	r3, #3
 800966e:	d1e7      	bne.n	8009640 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009670:	7bfb      	ldrb	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009688:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <RTC_ExitInitMode+0x78>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	4a19      	ldr	r2, [pc, #100]	; (80096f4 <RTC_ExitInitMode+0x78>)
 800968e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009692:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009694:	4b17      	ldr	r3, [pc, #92]	; (80096f4 <RTC_ExitInitMode+0x78>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f003 0320 	and.w	r3, r3, #32
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10c      	bne.n	80096ba <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff ff93 	bl	80095cc <HAL_RTC_WaitForSynchro>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01e      	beq.n	80096ea <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2203      	movs	r2, #3
 80096b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	73fb      	strb	r3, [r7, #15]
 80096b8:	e017      	b.n	80096ea <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096ba:	4b0e      	ldr	r3, [pc, #56]	; (80096f4 <RTC_ExitInitMode+0x78>)
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	4a0d      	ldr	r2, [pc, #52]	; (80096f4 <RTC_ExitInitMode+0x78>)
 80096c0:	f023 0320 	bic.w	r3, r3, #32
 80096c4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff ff80 	bl	80095cc <HAL_RTC_WaitForSynchro>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d005      	beq.n	80096de <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2203      	movs	r2, #3
 80096d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <RTC_ExitInitMode+0x78>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	4a04      	ldr	r2, [pc, #16]	; (80096f4 <RTC_ExitInitMode+0x78>)
 80096e4:	f043 0320 	orr.w	r3, r3, #32
 80096e8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	58004000 	.word	0x58004000

080096f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	4603      	mov	r3, r0
 8009700:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800970a:	e005      	b.n	8009718 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8009712:	7afb      	ldrb	r3, [r7, #11]
 8009714:	3b0a      	subs	r3, #10
 8009716:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009718:	7afb      	ldrb	r3, [r7, #11]
 800971a:	2b09      	cmp	r3, #9
 800971c:	d8f6      	bhi.n	800970c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	b2da      	uxtb	r2, r3
 8009726:	7afb      	ldrb	r3, [r7, #11]
 8009728:	4313      	orrs	r3, r2
 800972a:	b2db      	uxtb	r3, r3
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	091b      	lsrs	r3, r3, #4
 8009746:	b2db      	uxtb	r3, r3
 8009748:	461a      	mov	r2, r3
 800974a:	0092      	lsls	r2, r2, #2
 800974c:	4413      	add	r3, r2
 800974e:	005b      	lsls	r3, r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	f003 030f 	and.w	r3, r3, #15
 8009758:	b2da      	uxtb	r2, r3
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	4413      	add	r3, r2
 800975e:	b2db      	uxtb	r3, r3
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d101      	bne.n	8009784 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8009780:	2302      	movs	r3, #2
 8009782:	e034      	b.n	80097ee <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	22ca      	movs	r2, #202	; 0xca
 800979a:	625a      	str	r2, [r3, #36]	; 0x24
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2253      	movs	r2, #83	; 0x53
 80097a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80097b2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6899      	ldr	r1, [r3, #8]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80097d2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	22ff      	movs	r2, #255	; 0xff
 80097da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e042      	b.n	8009892 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7f7 fd42 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2224      	movs	r2, #36	; 0x24
 8009828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0201 	bic.w	r2, r2, #1
 800983a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f8bb 	bl	80099b8 <UART_SetConfig>
 8009842:	4603      	mov	r3, r0
 8009844:	2b01      	cmp	r3, #1
 8009846:	d101      	bne.n	800984c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e022      	b.n	8009892 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fe17 	bl	800a488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009878:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fe9e 	bl	800a5cc <UART_CheckIdleState>
 8009890:	4603      	mov	r3, r0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b08a      	sub	sp, #40	; 0x28
 800989e:	af02      	add	r7, sp, #8
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	603b      	str	r3, [r7, #0]
 80098a6:	4613      	mov	r3, r2
 80098a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d17b      	bne.n	80099ac <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <HAL_UART_Transmit+0x26>
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e074      	b.n	80099ae <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2221      	movs	r2, #33	; 0x21
 80098d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098d4:	f7f7 fec6 	bl	8001664 <HAL_GetTick>
 80098d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	88fa      	ldrh	r2, [r7, #6]
 80098de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	88fa      	ldrh	r2, [r7, #6]
 80098e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f2:	d108      	bne.n	8009906 <HAL_UART_Transmit+0x6c>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80098fc:	2300      	movs	r3, #0
 80098fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	61bb      	str	r3, [r7, #24]
 8009904:	e003      	b.n	800990e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800990a:	2300      	movs	r3, #0
 800990c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800990e:	e030      	b.n	8009972 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2200      	movs	r2, #0
 8009918:	2180      	movs	r1, #128	; 0x80
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 ff00 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2220      	movs	r2, #32
 800992a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e03d      	b.n	80099ae <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10b      	bne.n	8009950 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009946:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	3302      	adds	r3, #2
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	e007      	b.n	8009960 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	781a      	ldrb	r2, [r3, #0]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	3301      	adds	r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009966:	b29b      	uxth	r3, r3
 8009968:	3b01      	subs	r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1c8      	bne.n	8009910 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2200      	movs	r2, #0
 8009986:	2140      	movs	r1, #64	; 0x40
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fec9 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d005      	beq.n	80099a0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e006      	b.n	80099ae <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e000      	b.n	80099ae <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
  }
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099bc:	b092      	sub	sp, #72	; 0x48
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	431a      	orrs	r2, r3
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	4313      	orrs	r3, r2
 80099de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	4bbe      	ldr	r3, [pc, #760]	; (8009ce0 <UART_SetConfig+0x328>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	6812      	ldr	r2, [r2, #0]
 80099ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099f0:	430b      	orrs	r3, r1
 80099f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4ab3      	ldr	r2, [pc, #716]	; (8009ce4 <UART_SetConfig+0x32c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d004      	beq.n	8009a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a20:	4313      	orrs	r3, r2
 8009a22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689a      	ldr	r2, [r3, #8]
 8009a2a:	4baf      	ldr	r3, [pc, #700]	; (8009ce8 <UART_SetConfig+0x330>)
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	6812      	ldr	r2, [r2, #0]
 8009a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a34:	430b      	orrs	r3, r1
 8009a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3e:	f023 010f 	bic.w	r1, r3, #15
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4aa6      	ldr	r2, [pc, #664]	; (8009cec <UART_SetConfig+0x334>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d177      	bne.n	8009b48 <UART_SetConfig+0x190>
 8009a58:	4ba5      	ldr	r3, [pc, #660]	; (8009cf0 <UART_SetConfig+0x338>)
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a60:	2b28      	cmp	r3, #40	; 0x28
 8009a62:	d86d      	bhi.n	8009b40 <UART_SetConfig+0x188>
 8009a64:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <UART_SetConfig+0xb4>)
 8009a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6a:	bf00      	nop
 8009a6c:	08009b11 	.word	0x08009b11
 8009a70:	08009b41 	.word	0x08009b41
 8009a74:	08009b41 	.word	0x08009b41
 8009a78:	08009b41 	.word	0x08009b41
 8009a7c:	08009b41 	.word	0x08009b41
 8009a80:	08009b41 	.word	0x08009b41
 8009a84:	08009b41 	.word	0x08009b41
 8009a88:	08009b41 	.word	0x08009b41
 8009a8c:	08009b19 	.word	0x08009b19
 8009a90:	08009b41 	.word	0x08009b41
 8009a94:	08009b41 	.word	0x08009b41
 8009a98:	08009b41 	.word	0x08009b41
 8009a9c:	08009b41 	.word	0x08009b41
 8009aa0:	08009b41 	.word	0x08009b41
 8009aa4:	08009b41 	.word	0x08009b41
 8009aa8:	08009b41 	.word	0x08009b41
 8009aac:	08009b21 	.word	0x08009b21
 8009ab0:	08009b41 	.word	0x08009b41
 8009ab4:	08009b41 	.word	0x08009b41
 8009ab8:	08009b41 	.word	0x08009b41
 8009abc:	08009b41 	.word	0x08009b41
 8009ac0:	08009b41 	.word	0x08009b41
 8009ac4:	08009b41 	.word	0x08009b41
 8009ac8:	08009b41 	.word	0x08009b41
 8009acc:	08009b29 	.word	0x08009b29
 8009ad0:	08009b41 	.word	0x08009b41
 8009ad4:	08009b41 	.word	0x08009b41
 8009ad8:	08009b41 	.word	0x08009b41
 8009adc:	08009b41 	.word	0x08009b41
 8009ae0:	08009b41 	.word	0x08009b41
 8009ae4:	08009b41 	.word	0x08009b41
 8009ae8:	08009b41 	.word	0x08009b41
 8009aec:	08009b31 	.word	0x08009b31
 8009af0:	08009b41 	.word	0x08009b41
 8009af4:	08009b41 	.word	0x08009b41
 8009af8:	08009b41 	.word	0x08009b41
 8009afc:	08009b41 	.word	0x08009b41
 8009b00:	08009b41 	.word	0x08009b41
 8009b04:	08009b41 	.word	0x08009b41
 8009b08:	08009b41 	.word	0x08009b41
 8009b0c:	08009b39 	.word	0x08009b39
 8009b10:	2301      	movs	r3, #1
 8009b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b16:	e222      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b18:	2304      	movs	r3, #4
 8009b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1e:	e21e      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b20:	2308      	movs	r3, #8
 8009b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b26:	e21a      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b28:	2310      	movs	r3, #16
 8009b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2e:	e216      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b30:	2320      	movs	r3, #32
 8009b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b36:	e212      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b38:	2340      	movs	r3, #64	; 0x40
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3e:	e20e      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b40:	2380      	movs	r3, #128	; 0x80
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b46:	e20a      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a69      	ldr	r2, [pc, #420]	; (8009cf4 <UART_SetConfig+0x33c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d130      	bne.n	8009bb4 <UART_SetConfig+0x1fc>
 8009b52:	4b67      	ldr	r3, [pc, #412]	; (8009cf0 <UART_SetConfig+0x338>)
 8009b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b56:	f003 0307 	and.w	r3, r3, #7
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d826      	bhi.n	8009bac <UART_SetConfig+0x1f4>
 8009b5e:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <UART_SetConfig+0x1ac>)
 8009b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b64:	08009b7d 	.word	0x08009b7d
 8009b68:	08009b85 	.word	0x08009b85
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b95 	.word	0x08009b95
 8009b74:	08009b9d 	.word	0x08009b9d
 8009b78:	08009ba5 	.word	0x08009ba5
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b82:	e1ec      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b84:	2304      	movs	r3, #4
 8009b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8a:	e1e8      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b8c:	2308      	movs	r3, #8
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e1e4      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b94:	2310      	movs	r3, #16
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e1e0      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba2:	e1dc      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009ba4:	2340      	movs	r3, #64	; 0x40
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009baa:	e1d8      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009bac:	2380      	movs	r3, #128	; 0x80
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb2:	e1d4      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a4f      	ldr	r2, [pc, #316]	; (8009cf8 <UART_SetConfig+0x340>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d130      	bne.n	8009c20 <UART_SetConfig+0x268>
 8009bbe:	4b4c      	ldr	r3, [pc, #304]	; (8009cf0 <UART_SetConfig+0x338>)
 8009bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc2:	f003 0307 	and.w	r3, r3, #7
 8009bc6:	2b05      	cmp	r3, #5
 8009bc8:	d826      	bhi.n	8009c18 <UART_SetConfig+0x260>
 8009bca:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <UART_SetConfig+0x218>)
 8009bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd0:	08009be9 	.word	0x08009be9
 8009bd4:	08009bf1 	.word	0x08009bf1
 8009bd8:	08009bf9 	.word	0x08009bf9
 8009bdc:	08009c01 	.word	0x08009c01
 8009be0:	08009c09 	.word	0x08009c09
 8009be4:	08009c11 	.word	0x08009c11
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bee:	e1b6      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e1b2      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e1ae      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c00:	2310      	movs	r3, #16
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e1aa      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c08:	2320      	movs	r3, #32
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0e:	e1a6      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c10:	2340      	movs	r3, #64	; 0x40
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c16:	e1a2      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c18:	2380      	movs	r3, #128	; 0x80
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1e:	e19e      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a35      	ldr	r2, [pc, #212]	; (8009cfc <UART_SetConfig+0x344>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d130      	bne.n	8009c8c <UART_SetConfig+0x2d4>
 8009c2a:	4b31      	ldr	r3, [pc, #196]	; (8009cf0 <UART_SetConfig+0x338>)
 8009c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	2b05      	cmp	r3, #5
 8009c34:	d826      	bhi.n	8009c84 <UART_SetConfig+0x2cc>
 8009c36:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <UART_SetConfig+0x284>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c55 	.word	0x08009c55
 8009c40:	08009c5d 	.word	0x08009c5d
 8009c44:	08009c65 	.word	0x08009c65
 8009c48:	08009c6d 	.word	0x08009c6d
 8009c4c:	08009c75 	.word	0x08009c75
 8009c50:	08009c7d 	.word	0x08009c7d
 8009c54:	2300      	movs	r3, #0
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e180      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e17c      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c64:	2308      	movs	r3, #8
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e178      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e174      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c74:	2320      	movs	r3, #32
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e170      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e16c      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c84:	2380      	movs	r3, #128	; 0x80
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e168      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a1b      	ldr	r2, [pc, #108]	; (8009d00 <UART_SetConfig+0x348>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d142      	bne.n	8009d1c <UART_SetConfig+0x364>
 8009c96:	4b16      	ldr	r3, [pc, #88]	; (8009cf0 <UART_SetConfig+0x338>)
 8009c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	2b05      	cmp	r3, #5
 8009ca0:	d838      	bhi.n	8009d14 <UART_SetConfig+0x35c>
 8009ca2:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <UART_SetConfig+0x2f0>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009cc1 	.word	0x08009cc1
 8009cac:	08009cc9 	.word	0x08009cc9
 8009cb0:	08009cd1 	.word	0x08009cd1
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009d05 	.word	0x08009d05
 8009cbc:	08009d0d 	.word	0x08009d0d
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc6:	e14a      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009cc8:	2304      	movs	r3, #4
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e146      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e142      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e13e      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009ce0:	cfff69f3 	.word	0xcfff69f3
 8009ce4:	58000c00 	.word	0x58000c00
 8009ce8:	11fff4ff 	.word	0x11fff4ff
 8009cec:	40011000 	.word	0x40011000
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	40004400 	.word	0x40004400
 8009cf8:	40004800 	.word	0x40004800
 8009cfc:	40004c00 	.word	0x40004c00
 8009d00:	40005000 	.word	0x40005000
 8009d04:	2320      	movs	r3, #32
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0a:	e128      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d12:	e124      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009d14:	2380      	movs	r3, #128	; 0x80
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1a:	e120      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4acb      	ldr	r2, [pc, #812]	; (800a050 <UART_SetConfig+0x698>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d176      	bne.n	8009e14 <UART_SetConfig+0x45c>
 8009d26:	4bcb      	ldr	r3, [pc, #812]	; (800a054 <UART_SetConfig+0x69c>)
 8009d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d2e:	2b28      	cmp	r3, #40	; 0x28
 8009d30:	d86c      	bhi.n	8009e0c <UART_SetConfig+0x454>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <UART_SetConfig+0x380>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009ddd 	.word	0x08009ddd
 8009d3c:	08009e0d 	.word	0x08009e0d
 8009d40:	08009e0d 	.word	0x08009e0d
 8009d44:	08009e0d 	.word	0x08009e0d
 8009d48:	08009e0d 	.word	0x08009e0d
 8009d4c:	08009e0d 	.word	0x08009e0d
 8009d50:	08009e0d 	.word	0x08009e0d
 8009d54:	08009e0d 	.word	0x08009e0d
 8009d58:	08009de5 	.word	0x08009de5
 8009d5c:	08009e0d 	.word	0x08009e0d
 8009d60:	08009e0d 	.word	0x08009e0d
 8009d64:	08009e0d 	.word	0x08009e0d
 8009d68:	08009e0d 	.word	0x08009e0d
 8009d6c:	08009e0d 	.word	0x08009e0d
 8009d70:	08009e0d 	.word	0x08009e0d
 8009d74:	08009e0d 	.word	0x08009e0d
 8009d78:	08009ded 	.word	0x08009ded
 8009d7c:	08009e0d 	.word	0x08009e0d
 8009d80:	08009e0d 	.word	0x08009e0d
 8009d84:	08009e0d 	.word	0x08009e0d
 8009d88:	08009e0d 	.word	0x08009e0d
 8009d8c:	08009e0d 	.word	0x08009e0d
 8009d90:	08009e0d 	.word	0x08009e0d
 8009d94:	08009e0d 	.word	0x08009e0d
 8009d98:	08009df5 	.word	0x08009df5
 8009d9c:	08009e0d 	.word	0x08009e0d
 8009da0:	08009e0d 	.word	0x08009e0d
 8009da4:	08009e0d 	.word	0x08009e0d
 8009da8:	08009e0d 	.word	0x08009e0d
 8009dac:	08009e0d 	.word	0x08009e0d
 8009db0:	08009e0d 	.word	0x08009e0d
 8009db4:	08009e0d 	.word	0x08009e0d
 8009db8:	08009dfd 	.word	0x08009dfd
 8009dbc:	08009e0d 	.word	0x08009e0d
 8009dc0:	08009e0d 	.word	0x08009e0d
 8009dc4:	08009e0d 	.word	0x08009e0d
 8009dc8:	08009e0d 	.word	0x08009e0d
 8009dcc:	08009e0d 	.word	0x08009e0d
 8009dd0:	08009e0d 	.word	0x08009e0d
 8009dd4:	08009e0d 	.word	0x08009e0d
 8009dd8:	08009e05 	.word	0x08009e05
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e0bc      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009de4:	2304      	movs	r3, #4
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e0b8      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009dec:	2308      	movs	r3, #8
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df2:	e0b4      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009df4:	2310      	movs	r3, #16
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfa:	e0b0      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009dfc:	2320      	movs	r3, #32
 8009dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e02:	e0ac      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e04:	2340      	movs	r3, #64	; 0x40
 8009e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e0a:	e0a8      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e0c:	2380      	movs	r3, #128	; 0x80
 8009e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e12:	e0a4      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a8f      	ldr	r2, [pc, #572]	; (800a058 <UART_SetConfig+0x6a0>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d130      	bne.n	8009e80 <UART_SetConfig+0x4c8>
 8009e1e:	4b8d      	ldr	r3, [pc, #564]	; (800a054 <UART_SetConfig+0x69c>)
 8009e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b05      	cmp	r3, #5
 8009e28:	d826      	bhi.n	8009e78 <UART_SetConfig+0x4c0>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <UART_SetConfig+0x478>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009e49 	.word	0x08009e49
 8009e34:	08009e51 	.word	0x08009e51
 8009e38:	08009e59 	.word	0x08009e59
 8009e3c:	08009e61 	.word	0x08009e61
 8009e40:	08009e69 	.word	0x08009e69
 8009e44:	08009e71 	.word	0x08009e71
 8009e48:	2300      	movs	r3, #0
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e086      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e50:	2304      	movs	r3, #4
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e082      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e58:	2308      	movs	r3, #8
 8009e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5e:	e07e      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e60:	2310      	movs	r3, #16
 8009e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e66:	e07a      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e68:	2320      	movs	r3, #32
 8009e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e6e:	e076      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e70:	2340      	movs	r3, #64	; 0x40
 8009e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e76:	e072      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e78:	2380      	movs	r3, #128	; 0x80
 8009e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7e:	e06e      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a75      	ldr	r2, [pc, #468]	; (800a05c <UART_SetConfig+0x6a4>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d130      	bne.n	8009eec <UART_SetConfig+0x534>
 8009e8a:	4b72      	ldr	r3, [pc, #456]	; (800a054 <UART_SetConfig+0x69c>)
 8009e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d826      	bhi.n	8009ee4 <UART_SetConfig+0x52c>
 8009e96:	a201      	add	r2, pc, #4	; (adr r2, 8009e9c <UART_SetConfig+0x4e4>)
 8009e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e9c:	08009eb5 	.word	0x08009eb5
 8009ea0:	08009ebd 	.word	0x08009ebd
 8009ea4:	08009ec5 	.word	0x08009ec5
 8009ea8:	08009ecd 	.word	0x08009ecd
 8009eac:	08009ed5 	.word	0x08009ed5
 8009eb0:	08009edd 	.word	0x08009edd
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e050      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009ebc:	2304      	movs	r3, #4
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e04c      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009ec4:	2308      	movs	r3, #8
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e048      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009ecc:	2310      	movs	r3, #16
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e044      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009ed4:	2320      	movs	r3, #32
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e040      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009edc:	2340      	movs	r3, #64	; 0x40
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e03c      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009ee4:	2380      	movs	r3, #128	; 0x80
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e038      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a5b      	ldr	r2, [pc, #364]	; (800a060 <UART_SetConfig+0x6a8>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d130      	bne.n	8009f58 <UART_SetConfig+0x5a0>
 8009ef6:	4b57      	ldr	r3, [pc, #348]	; (800a054 <UART_SetConfig+0x69c>)
 8009ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d826      	bhi.n	8009f50 <UART_SetConfig+0x598>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <UART_SetConfig+0x550>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f21 	.word	0x08009f21
 8009f0c:	08009f29 	.word	0x08009f29
 8009f10:	08009f31 	.word	0x08009f31
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f41 	.word	0x08009f41
 8009f1c:	08009f49 	.word	0x08009f49
 8009f20:	2302      	movs	r3, #2
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e01a      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e016      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009f30:	2308      	movs	r3, #8
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e012      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e00e      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009f40:	2320      	movs	r3, #32
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e00a      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009f48:	2340      	movs	r3, #64	; 0x40
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e006      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009f50:	2380      	movs	r3, #128	; 0x80
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e002      	b.n	8009f5e <UART_SetConfig+0x5a6>
 8009f58:	2380      	movs	r3, #128	; 0x80
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a3f      	ldr	r2, [pc, #252]	; (800a060 <UART_SetConfig+0x6a8>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	f040 80f8 	bne.w	800a15a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	dc46      	bgt.n	800a000 <UART_SetConfig+0x648>
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	f2c0 8082 	blt.w	800a07c <UART_SetConfig+0x6c4>
 8009f78:	3b02      	subs	r3, #2
 8009f7a:	2b1e      	cmp	r3, #30
 8009f7c:	d87e      	bhi.n	800a07c <UART_SetConfig+0x6c4>
 8009f7e:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <UART_SetConfig+0x5cc>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	0800a007 	.word	0x0800a007
 8009f88:	0800a07d 	.word	0x0800a07d
 8009f8c:	0800a00f 	.word	0x0800a00f
 8009f90:	0800a07d 	.word	0x0800a07d
 8009f94:	0800a07d 	.word	0x0800a07d
 8009f98:	0800a07d 	.word	0x0800a07d
 8009f9c:	0800a01f 	.word	0x0800a01f
 8009fa0:	0800a07d 	.word	0x0800a07d
 8009fa4:	0800a07d 	.word	0x0800a07d
 8009fa8:	0800a07d 	.word	0x0800a07d
 8009fac:	0800a07d 	.word	0x0800a07d
 8009fb0:	0800a07d 	.word	0x0800a07d
 8009fb4:	0800a07d 	.word	0x0800a07d
 8009fb8:	0800a07d 	.word	0x0800a07d
 8009fbc:	0800a02f 	.word	0x0800a02f
 8009fc0:	0800a07d 	.word	0x0800a07d
 8009fc4:	0800a07d 	.word	0x0800a07d
 8009fc8:	0800a07d 	.word	0x0800a07d
 8009fcc:	0800a07d 	.word	0x0800a07d
 8009fd0:	0800a07d 	.word	0x0800a07d
 8009fd4:	0800a07d 	.word	0x0800a07d
 8009fd8:	0800a07d 	.word	0x0800a07d
 8009fdc:	0800a07d 	.word	0x0800a07d
 8009fe0:	0800a07d 	.word	0x0800a07d
 8009fe4:	0800a07d 	.word	0x0800a07d
 8009fe8:	0800a07d 	.word	0x0800a07d
 8009fec:	0800a07d 	.word	0x0800a07d
 8009ff0:	0800a07d 	.word	0x0800a07d
 8009ff4:	0800a07d 	.word	0x0800a07d
 8009ff8:	0800a07d 	.word	0x0800a07d
 8009ffc:	0800a06f 	.word	0x0800a06f
 800a000:	2b40      	cmp	r3, #64	; 0x40
 800a002:	d037      	beq.n	800a074 <UART_SetConfig+0x6bc>
 800a004:	e03a      	b.n	800a07c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a006:	f7fe fb1b 	bl	8008640 <HAL_RCCEx_GetD3PCLK1Freq>
 800a00a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a00c:	e03c      	b.n	800a088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a012:	4618      	mov	r0, r3
 800a014:	f7fe fb2a 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a01c:	e034      	b.n	800a088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a01e:	f107 0318 	add.w	r3, r7, #24
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fc76 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a02c:	e02c      	b.n	800a088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <UART_SetConfig+0x69c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0320 	and.w	r3, r3, #32
 800a036:	2b00      	cmp	r3, #0
 800a038:	d016      	beq.n	800a068 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a03a:	4b06      	ldr	r3, [pc, #24]	; (800a054 <UART_SetConfig+0x69c>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	08db      	lsrs	r3, r3, #3
 800a040:	f003 0303 	and.w	r3, r3, #3
 800a044:	4a07      	ldr	r2, [pc, #28]	; (800a064 <UART_SetConfig+0x6ac>)
 800a046:	fa22 f303 	lsr.w	r3, r2, r3
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a04c:	e01c      	b.n	800a088 <UART_SetConfig+0x6d0>
 800a04e:	bf00      	nop
 800a050:	40011400 	.word	0x40011400
 800a054:	58024400 	.word	0x58024400
 800a058:	40007800 	.word	0x40007800
 800a05c:	40007c00 	.word	0x40007c00
 800a060:	58000c00 	.word	0x58000c00
 800a064:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a068:	4b9d      	ldr	r3, [pc, #628]	; (800a2e0 <UART_SetConfig+0x928>)
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a06c:	e00c      	b.n	800a088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a06e:	4b9d      	ldr	r3, [pc, #628]	; (800a2e4 <UART_SetConfig+0x92c>)
 800a070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a072:	e009      	b.n	800a088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a07a:	e005      	b.n	800a088 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 81de 	beq.w	800a44c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	4a94      	ldr	r2, [pc, #592]	; (800a2e8 <UART_SetConfig+0x930>)
 800a096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a09a:	461a      	mov	r2, r3
 800a09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	005b      	lsls	r3, r3, #1
 800a0ac:	4413      	add	r3, r2
 800a0ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d305      	bcc.n	800a0c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d903      	bls.n	800a0c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a0c6:	e1c1      	b.n	800a44c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
 800a0ce:	60fa      	str	r2, [r7, #12]
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	4a84      	ldr	r2, [pc, #528]	; (800a2e8 <UART_SetConfig+0x930>)
 800a0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	2200      	movs	r2, #0
 800a0de:	603b      	str	r3, [r7, #0]
 800a0e0:	607a      	str	r2, [r7, #4]
 800a0e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0ea:	f7f6 f951 	bl	8000390 <__aeabi_uldivmod>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	f04f 0200 	mov.w	r2, #0
 800a0fa:	f04f 0300 	mov.w	r3, #0
 800a0fe:	020b      	lsls	r3, r1, #8
 800a100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a104:	0202      	lsls	r2, r0, #8
 800a106:	6979      	ldr	r1, [r7, #20]
 800a108:	6849      	ldr	r1, [r1, #4]
 800a10a:	0849      	lsrs	r1, r1, #1
 800a10c:	2000      	movs	r0, #0
 800a10e:	460c      	mov	r4, r1
 800a110:	4605      	mov	r5, r0
 800a112:	eb12 0804 	adds.w	r8, r2, r4
 800a116:	eb43 0905 	adc.w	r9, r3, r5
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	469a      	mov	sl, r3
 800a122:	4693      	mov	fp, r2
 800a124:	4652      	mov	r2, sl
 800a126:	465b      	mov	r3, fp
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	f7f6 f930 	bl	8000390 <__aeabi_uldivmod>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	4613      	mov	r3, r2
 800a136:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a13e:	d308      	bcc.n	800a152 <UART_SetConfig+0x79a>
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a146:	d204      	bcs.n	800a152 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a14e:	60da      	str	r2, [r3, #12]
 800a150:	e17c      	b.n	800a44c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a158:	e178      	b.n	800a44c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a162:	f040 80c5 	bne.w	800a2f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a166:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	dc48      	bgt.n	800a200 <UART_SetConfig+0x848>
 800a16e:	2b00      	cmp	r3, #0
 800a170:	db7b      	blt.n	800a26a <UART_SetConfig+0x8b2>
 800a172:	2b20      	cmp	r3, #32
 800a174:	d879      	bhi.n	800a26a <UART_SetConfig+0x8b2>
 800a176:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <UART_SetConfig+0x7c4>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a207 	.word	0x0800a207
 800a180:	0800a20f 	.word	0x0800a20f
 800a184:	0800a26b 	.word	0x0800a26b
 800a188:	0800a26b 	.word	0x0800a26b
 800a18c:	0800a217 	.word	0x0800a217
 800a190:	0800a26b 	.word	0x0800a26b
 800a194:	0800a26b 	.word	0x0800a26b
 800a198:	0800a26b 	.word	0x0800a26b
 800a19c:	0800a227 	.word	0x0800a227
 800a1a0:	0800a26b 	.word	0x0800a26b
 800a1a4:	0800a26b 	.word	0x0800a26b
 800a1a8:	0800a26b 	.word	0x0800a26b
 800a1ac:	0800a26b 	.word	0x0800a26b
 800a1b0:	0800a26b 	.word	0x0800a26b
 800a1b4:	0800a26b 	.word	0x0800a26b
 800a1b8:	0800a26b 	.word	0x0800a26b
 800a1bc:	0800a237 	.word	0x0800a237
 800a1c0:	0800a26b 	.word	0x0800a26b
 800a1c4:	0800a26b 	.word	0x0800a26b
 800a1c8:	0800a26b 	.word	0x0800a26b
 800a1cc:	0800a26b 	.word	0x0800a26b
 800a1d0:	0800a26b 	.word	0x0800a26b
 800a1d4:	0800a26b 	.word	0x0800a26b
 800a1d8:	0800a26b 	.word	0x0800a26b
 800a1dc:	0800a26b 	.word	0x0800a26b
 800a1e0:	0800a26b 	.word	0x0800a26b
 800a1e4:	0800a26b 	.word	0x0800a26b
 800a1e8:	0800a26b 	.word	0x0800a26b
 800a1ec:	0800a26b 	.word	0x0800a26b
 800a1f0:	0800a26b 	.word	0x0800a26b
 800a1f4:	0800a26b 	.word	0x0800a26b
 800a1f8:	0800a26b 	.word	0x0800a26b
 800a1fc:	0800a25d 	.word	0x0800a25d
 800a200:	2b40      	cmp	r3, #64	; 0x40
 800a202:	d02e      	beq.n	800a262 <UART_SetConfig+0x8aa>
 800a204:	e031      	b.n	800a26a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a206:	f7fc fa65 	bl	80066d4 <HAL_RCC_GetPCLK1Freq>
 800a20a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a20c:	e033      	b.n	800a276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a20e:	f7fc fa77 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
 800a212:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a214:	e02f      	b.n	800a276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fa26 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a224:	e027      	b.n	800a276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a226:	f107 0318 	add.w	r3, r7, #24
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7fe fb72 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a234:	e01f      	b.n	800a276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a236:	4b2d      	ldr	r3, [pc, #180]	; (800a2ec <UART_SetConfig+0x934>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0320 	and.w	r3, r3, #32
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d009      	beq.n	800a256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a242:	4b2a      	ldr	r3, [pc, #168]	; (800a2ec <UART_SetConfig+0x934>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	08db      	lsrs	r3, r3, #3
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	4a24      	ldr	r2, [pc, #144]	; (800a2e0 <UART_SetConfig+0x928>)
 800a24e:	fa22 f303 	lsr.w	r3, r2, r3
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a254:	e00f      	b.n	800a276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a256:	4b22      	ldr	r3, [pc, #136]	; (800a2e0 <UART_SetConfig+0x928>)
 800a258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a25a:	e00c      	b.n	800a276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a25c:	4b21      	ldr	r3, [pc, #132]	; (800a2e4 <UART_SetConfig+0x92c>)
 800a25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a260:	e009      	b.n	800a276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a268:	e005      	b.n	800a276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 80e7 	beq.w	800a44c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a282:	4a19      	ldr	r2, [pc, #100]	; (800a2e8 <UART_SetConfig+0x930>)
 800a284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a288:	461a      	mov	r2, r3
 800a28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a290:	005a      	lsls	r2, r3, #1
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	441a      	add	r2, r3
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	2b0f      	cmp	r3, #15
 800a2a8:	d916      	bls.n	800a2d8 <UART_SetConfig+0x920>
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b0:	d212      	bcs.n	800a2d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f023 030f 	bic.w	r3, r3, #15
 800a2ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	085b      	lsrs	r3, r3, #1
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	f003 0307 	and.w	r3, r3, #7
 800a2c6:	b29a      	uxth	r2, r3
 800a2c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2d4:	60da      	str	r2, [r3, #12]
 800a2d6:	e0b9      	b.n	800a44c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2de:	e0b5      	b.n	800a44c <UART_SetConfig+0xa94>
 800a2e0:	03d09000 	.word	0x03d09000
 800a2e4:	003d0900 	.word	0x003d0900
 800a2e8:	0800b47c 	.word	0x0800b47c
 800a2ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2f4:	2b20      	cmp	r3, #32
 800a2f6:	dc49      	bgt.n	800a38c <UART_SetConfig+0x9d4>
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	db7c      	blt.n	800a3f6 <UART_SetConfig+0xa3e>
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	d87a      	bhi.n	800a3f6 <UART_SetConfig+0xa3e>
 800a300:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <UART_SetConfig+0x950>)
 800a302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a306:	bf00      	nop
 800a308:	0800a393 	.word	0x0800a393
 800a30c:	0800a39b 	.word	0x0800a39b
 800a310:	0800a3f7 	.word	0x0800a3f7
 800a314:	0800a3f7 	.word	0x0800a3f7
 800a318:	0800a3a3 	.word	0x0800a3a3
 800a31c:	0800a3f7 	.word	0x0800a3f7
 800a320:	0800a3f7 	.word	0x0800a3f7
 800a324:	0800a3f7 	.word	0x0800a3f7
 800a328:	0800a3b3 	.word	0x0800a3b3
 800a32c:	0800a3f7 	.word	0x0800a3f7
 800a330:	0800a3f7 	.word	0x0800a3f7
 800a334:	0800a3f7 	.word	0x0800a3f7
 800a338:	0800a3f7 	.word	0x0800a3f7
 800a33c:	0800a3f7 	.word	0x0800a3f7
 800a340:	0800a3f7 	.word	0x0800a3f7
 800a344:	0800a3f7 	.word	0x0800a3f7
 800a348:	0800a3c3 	.word	0x0800a3c3
 800a34c:	0800a3f7 	.word	0x0800a3f7
 800a350:	0800a3f7 	.word	0x0800a3f7
 800a354:	0800a3f7 	.word	0x0800a3f7
 800a358:	0800a3f7 	.word	0x0800a3f7
 800a35c:	0800a3f7 	.word	0x0800a3f7
 800a360:	0800a3f7 	.word	0x0800a3f7
 800a364:	0800a3f7 	.word	0x0800a3f7
 800a368:	0800a3f7 	.word	0x0800a3f7
 800a36c:	0800a3f7 	.word	0x0800a3f7
 800a370:	0800a3f7 	.word	0x0800a3f7
 800a374:	0800a3f7 	.word	0x0800a3f7
 800a378:	0800a3f7 	.word	0x0800a3f7
 800a37c:	0800a3f7 	.word	0x0800a3f7
 800a380:	0800a3f7 	.word	0x0800a3f7
 800a384:	0800a3f7 	.word	0x0800a3f7
 800a388:	0800a3e9 	.word	0x0800a3e9
 800a38c:	2b40      	cmp	r3, #64	; 0x40
 800a38e:	d02e      	beq.n	800a3ee <UART_SetConfig+0xa36>
 800a390:	e031      	b.n	800a3f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a392:	f7fc f99f 	bl	80066d4 <HAL_RCC_GetPCLK1Freq>
 800a396:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a398:	e033      	b.n	800a402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a39a:	f7fc f9b1 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
 800a39e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3a0:	e02f      	b.n	800a402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fe f960 	bl	800866c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b0:	e027      	b.n	800a402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3b2:	f107 0318 	add.w	r3, r7, #24
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe faac 	bl	8008914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c0:	e01f      	b.n	800a402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3c2:	4b2d      	ldr	r3, [pc, #180]	; (800a478 <UART_SetConfig+0xac0>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 0320 	and.w	r3, r3, #32
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d009      	beq.n	800a3e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3ce:	4b2a      	ldr	r3, [pc, #168]	; (800a478 <UART_SetConfig+0xac0>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	08db      	lsrs	r3, r3, #3
 800a3d4:	f003 0303 	and.w	r3, r3, #3
 800a3d8:	4a28      	ldr	r2, [pc, #160]	; (800a47c <UART_SetConfig+0xac4>)
 800a3da:	fa22 f303 	lsr.w	r3, r2, r3
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3e0:	e00f      	b.n	800a402 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a3e2:	4b26      	ldr	r3, [pc, #152]	; (800a47c <UART_SetConfig+0xac4>)
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e6:	e00c      	b.n	800a402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3e8:	4b25      	ldr	r3, [pc, #148]	; (800a480 <UART_SetConfig+0xac8>)
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ec:	e009      	b.n	800a402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3f4:	e005      	b.n	800a402 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a400:	bf00      	nop
    }

    if (pclk != 0U)
 800a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a404:	2b00      	cmp	r3, #0
 800a406:	d021      	beq.n	800a44c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <UART_SetConfig+0xacc>)
 800a40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a412:	461a      	mov	r2, r3
 800a414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a416:	fbb3 f2f2 	udiv	r2, r3, r2
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	085b      	lsrs	r3, r3, #1
 800a420:	441a      	add	r2, r3
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	2b0f      	cmp	r3, #15
 800a430:	d909      	bls.n	800a446 <UART_SetConfig+0xa8e>
 800a432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a438:	d205      	bcs.n	800a446 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60da      	str	r2, [r3, #12]
 800a444:	e002      	b.n	800a44c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2201      	movs	r2, #1
 800a450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2201      	movs	r2, #1
 800a458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2200      	movs	r2, #0
 800a460:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2200      	movs	r2, #0
 800a466:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a468:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3748      	adds	r7, #72	; 0x48
 800a470:	46bd      	mov	sp, r7
 800a472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a476:	bf00      	nop
 800a478:	58024400 	.word	0x58024400
 800a47c:	03d09000 	.word	0x03d09000
 800a480:	003d0900 	.word	0x003d0900
 800a484:	0800b47c 	.word	0x0800b47c

0800a488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00a      	beq.n	800a4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00a      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fa:	f003 0308 	and.w	r3, r3, #8
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51c:	f003 0310 	and.w	r3, r3, #16
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01a      	beq.n	800a59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a586:	d10a      	bne.n	800a59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b098      	sub	sp, #96	; 0x60
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5dc:	f7f7 f842 	bl	8001664 <HAL_GetTick>
 800a5e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	d12f      	bne.n	800a650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f88e 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d022      	beq.n	800a650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a612:	e853 3f00 	ldrex	r3, [r3]
 800a616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a61e:	653b      	str	r3, [r7, #80]	; 0x50
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	461a      	mov	r2, r3
 800a626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a628:	647b      	str	r3, [r7, #68]	; 0x44
 800a62a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a62e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a630:	e841 2300 	strex	r3, r2, [r1]
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1e6      	bne.n	800a60a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2220      	movs	r2, #32
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e063      	b.n	800a718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0304 	and.w	r3, r3, #4
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d149      	bne.n	800a6f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a65e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a666:	2200      	movs	r2, #0
 800a668:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f857 	bl	800a720 <UART_WaitOnFlagUntilTimeout>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d03c      	beq.n	800a6f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	e853 3f00 	ldrex	r3, [r3]
 800a684:	623b      	str	r3, [r7, #32]
   return(result);
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a68c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a696:	633b      	str	r3, [r7, #48]	; 0x30
 800a698:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e6      	bne.n	800a678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	e853 3f00 	ldrex	r3, [r3]
 800a6b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f023 0301 	bic.w	r3, r3, #1
 800a6c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	3308      	adds	r3, #8
 800a6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ca:	61fa      	str	r2, [r7, #28]
 800a6cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ce:	69b9      	ldr	r1, [r7, #24]
 800a6d0:	69fa      	ldr	r2, [r7, #28]
 800a6d2:	e841 2300 	strex	r3, r2, [r1]
 800a6d6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d1e5      	bne.n	800a6aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e012      	b.n	800a718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3758      	adds	r7, #88	; 0x58
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	4613      	mov	r3, r2
 800a72e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a730:	e049      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d045      	beq.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a73a:	f7f6 ff93 	bl	8001664 <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	429a      	cmp	r2, r3
 800a748:	d302      	bcc.n	800a750 <UART_WaitOnFlagUntilTimeout+0x30>
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e048      	b.n	800a7e6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d031      	beq.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	f003 0308 	and.w	r3, r3, #8
 800a76c:	2b08      	cmp	r3, #8
 800a76e:	d110      	bne.n	800a792 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2208      	movs	r2, #8
 800a776:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 f839 	bl	800a7f0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2208      	movs	r2, #8
 800a782:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e029      	b.n	800a7e6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69db      	ldr	r3, [r3, #28]
 800a798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a79c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7a0:	d111      	bne.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 f81f 	bl	800a7f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e00f      	b.n	800a7e6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69da      	ldr	r2, [r3, #28]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	bf0c      	ite	eq
 800a7d6:	2301      	moveq	r3, #1
 800a7d8:	2300      	movne	r3, #0
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	461a      	mov	r2, r3
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d0a6      	beq.n	800a732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
	...

0800a7f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b095      	sub	sp, #84	; 0x54
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a800:	e853 3f00 	ldrex	r3, [r3]
 800a804:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a80c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a816:	643b      	str	r3, [r7, #64]	; 0x40
 800a818:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a81a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a81c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a81e:	e841 2300 	strex	r3, r2, [r1]
 800a822:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1e6      	bne.n	800a7f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	e853 3f00 	ldrex	r3, [r3]
 800a838:	61fb      	str	r3, [r7, #28]
   return(result);
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	4b1e      	ldr	r3, [pc, #120]	; (800a8b8 <UART_EndRxTransfer+0xc8>)
 800a83e:	4013      	ands	r3, r2
 800a840:	64bb      	str	r3, [r7, #72]	; 0x48
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3308      	adds	r3, #8
 800a848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a84a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a84c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a852:	e841 2300 	strex	r3, r2, [r1]
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1e5      	bne.n	800a82a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d118      	bne.n	800a898 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	e853 3f00 	ldrex	r3, [r3]
 800a872:	60bb      	str	r3, [r7, #8]
   return(result);
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f023 0310 	bic.w	r3, r3, #16
 800a87a:	647b      	str	r3, [r7, #68]	; 0x44
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a884:	61bb      	str	r3, [r7, #24]
 800a886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a888:	6979      	ldr	r1, [r7, #20]
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	e841 2300 	strex	r3, r2, [r1]
 800a890:	613b      	str	r3, [r7, #16]
   return(result);
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1e6      	bne.n	800a866 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a8ac:	bf00      	nop
 800a8ae:	3754      	adds	r7, #84	; 0x54
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	effffffe 	.word	0xeffffffe

0800a8bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d101      	bne.n	800a8d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e027      	b.n	800a922 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2224      	movs	r2, #36	; 0x24
 800a8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0201 	bic.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a900:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2220      	movs	r2, #32
 800a914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a920:	2300      	movs	r3, #0
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d101      	bne.n	800a946 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a942:	2302      	movs	r3, #2
 800a944:	e02d      	b.n	800a9a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2224      	movs	r2, #36	; 0x24
 800a952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f022 0201 	bic.w	r2, r2, #1
 800a96c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	430a      	orrs	r2, r1
 800a980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f850 	bl	800aa28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2220      	movs	r2, #32
 800a994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d101      	bne.n	800a9c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9be:	2302      	movs	r3, #2
 800a9c0:	e02d      	b.n	800aa1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2224      	movs	r2, #36	; 0x24
 800a9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f022 0201 	bic.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	683a      	ldr	r2, [r7, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f812 	bl	800aa28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d108      	bne.n	800aa4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa48:	e031      	b.n	800aaae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa4a:	2310      	movs	r3, #16
 800aa4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa4e:	2310      	movs	r3, #16
 800aa50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	0e5b      	lsrs	r3, r3, #25
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	f003 0307 	and.w	r3, r3, #7
 800aa60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	0f5b      	lsrs	r3, r3, #29
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 0307 	and.w	r3, r3, #7
 800aa70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	7b3a      	ldrb	r2, [r7, #12]
 800aa76:	4911      	ldr	r1, [pc, #68]	; (800aabc <UARTEx_SetNbDataToProcess+0x94>)
 800aa78:	5c8a      	ldrb	r2, [r1, r2]
 800aa7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa7e:	7b3a      	ldrb	r2, [r7, #12]
 800aa80:	490f      	ldr	r1, [pc, #60]	; (800aac0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa84:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
 800aa92:	7b7a      	ldrb	r2, [r7, #13]
 800aa94:	4909      	ldr	r1, [pc, #36]	; (800aabc <UARTEx_SetNbDataToProcess+0x94>)
 800aa96:	5c8a      	ldrb	r2, [r1, r2]
 800aa98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa9c:	7b7a      	ldrb	r2, [r7, #13]
 800aa9e:	4908      	ldr	r1, [pc, #32]	; (800aac0 <UARTEx_SetNbDataToProcess+0x98>)
 800aaa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaa2:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aaae:	bf00      	nop
 800aab0:	3714      	adds	r7, #20
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	0800b494 	.word	0x0800b494
 800aac0:	0800b49c 	.word	0x0800b49c

0800aac4 <_vsniprintf_r>:
 800aac4:	b530      	push	{r4, r5, lr}
 800aac6:	4614      	mov	r4, r2
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	b09b      	sub	sp, #108	; 0x6c
 800aacc:	4605      	mov	r5, r0
 800aace:	461a      	mov	r2, r3
 800aad0:	da05      	bge.n	800aade <_vsniprintf_r+0x1a>
 800aad2:	238b      	movs	r3, #139	; 0x8b
 800aad4:	6003      	str	r3, [r0, #0]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	b01b      	add	sp, #108	; 0x6c
 800aadc:	bd30      	pop	{r4, r5, pc}
 800aade:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aae2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aae6:	bf14      	ite	ne
 800aae8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aaec:	4623      	moveq	r3, r4
 800aaee:	9302      	str	r3, [sp, #8]
 800aaf0:	9305      	str	r3, [sp, #20]
 800aaf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aaf6:	9100      	str	r1, [sp, #0]
 800aaf8:	9104      	str	r1, [sp, #16]
 800aafa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aafe:	4669      	mov	r1, sp
 800ab00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab02:	f000 f99f 	bl	800ae44 <_svfiprintf_r>
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	bfbc      	itt	lt
 800ab0a:	238b      	movlt	r3, #139	; 0x8b
 800ab0c:	602b      	strlt	r3, [r5, #0]
 800ab0e:	2c00      	cmp	r4, #0
 800ab10:	d0e3      	beq.n	800aada <_vsniprintf_r+0x16>
 800ab12:	9b00      	ldr	r3, [sp, #0]
 800ab14:	2200      	movs	r2, #0
 800ab16:	701a      	strb	r2, [r3, #0]
 800ab18:	e7df      	b.n	800aada <_vsniprintf_r+0x16>
	...

0800ab1c <vsniprintf>:
 800ab1c:	b507      	push	{r0, r1, r2, lr}
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4613      	mov	r3, r2
 800ab22:	460a      	mov	r2, r1
 800ab24:	4601      	mov	r1, r0
 800ab26:	4803      	ldr	r0, [pc, #12]	; (800ab34 <vsniprintf+0x18>)
 800ab28:	6800      	ldr	r0, [r0, #0]
 800ab2a:	f7ff ffcb 	bl	800aac4 <_vsniprintf_r>
 800ab2e:	b003      	add	sp, #12
 800ab30:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab34:	2400005c 	.word	0x2400005c

0800ab38 <memset>:
 800ab38:	4402      	add	r2, r0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d100      	bne.n	800ab42 <memset+0xa>
 800ab40:	4770      	bx	lr
 800ab42:	f803 1b01 	strb.w	r1, [r3], #1
 800ab46:	e7f9      	b.n	800ab3c <memset+0x4>

0800ab48 <__errno>:
 800ab48:	4b01      	ldr	r3, [pc, #4]	; (800ab50 <__errno+0x8>)
 800ab4a:	6818      	ldr	r0, [r3, #0]
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	2400005c 	.word	0x2400005c

0800ab54 <__libc_init_array>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4d0d      	ldr	r5, [pc, #52]	; (800ab8c <__libc_init_array+0x38>)
 800ab58:	4c0d      	ldr	r4, [pc, #52]	; (800ab90 <__libc_init_array+0x3c>)
 800ab5a:	1b64      	subs	r4, r4, r5
 800ab5c:	10a4      	asrs	r4, r4, #2
 800ab5e:	2600      	movs	r6, #0
 800ab60:	42a6      	cmp	r6, r4
 800ab62:	d109      	bne.n	800ab78 <__libc_init_array+0x24>
 800ab64:	4d0b      	ldr	r5, [pc, #44]	; (800ab94 <__libc_init_array+0x40>)
 800ab66:	4c0c      	ldr	r4, [pc, #48]	; (800ab98 <__libc_init_array+0x44>)
 800ab68:	f000 fc6a 	bl	800b440 <_init>
 800ab6c:	1b64      	subs	r4, r4, r5
 800ab6e:	10a4      	asrs	r4, r4, #2
 800ab70:	2600      	movs	r6, #0
 800ab72:	42a6      	cmp	r6, r4
 800ab74:	d105      	bne.n	800ab82 <__libc_init_array+0x2e>
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab7c:	4798      	blx	r3
 800ab7e:	3601      	adds	r6, #1
 800ab80:	e7ee      	b.n	800ab60 <__libc_init_array+0xc>
 800ab82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab86:	4798      	blx	r3
 800ab88:	3601      	adds	r6, #1
 800ab8a:	e7f2      	b.n	800ab72 <__libc_init_array+0x1e>
 800ab8c:	0800b4e0 	.word	0x0800b4e0
 800ab90:	0800b4e0 	.word	0x0800b4e0
 800ab94:	0800b4e0 	.word	0x0800b4e0
 800ab98:	0800b4e4 	.word	0x0800b4e4

0800ab9c <__retarget_lock_acquire_recursive>:
 800ab9c:	4770      	bx	lr

0800ab9e <__retarget_lock_release_recursive>:
 800ab9e:	4770      	bx	lr

0800aba0 <_free_r>:
 800aba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aba2:	2900      	cmp	r1, #0
 800aba4:	d044      	beq.n	800ac30 <_free_r+0x90>
 800aba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abaa:	9001      	str	r0, [sp, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f1a1 0404 	sub.w	r4, r1, #4
 800abb2:	bfb8      	it	lt
 800abb4:	18e4      	addlt	r4, r4, r3
 800abb6:	f000 f8df 	bl	800ad78 <__malloc_lock>
 800abba:	4a1e      	ldr	r2, [pc, #120]	; (800ac34 <_free_r+0x94>)
 800abbc:	9801      	ldr	r0, [sp, #4]
 800abbe:	6813      	ldr	r3, [r2, #0]
 800abc0:	b933      	cbnz	r3, 800abd0 <_free_r+0x30>
 800abc2:	6063      	str	r3, [r4, #4]
 800abc4:	6014      	str	r4, [r2, #0]
 800abc6:	b003      	add	sp, #12
 800abc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abcc:	f000 b8da 	b.w	800ad84 <__malloc_unlock>
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d908      	bls.n	800abe6 <_free_r+0x46>
 800abd4:	6825      	ldr	r5, [r4, #0]
 800abd6:	1961      	adds	r1, r4, r5
 800abd8:	428b      	cmp	r3, r1
 800abda:	bf01      	itttt	eq
 800abdc:	6819      	ldreq	r1, [r3, #0]
 800abde:	685b      	ldreq	r3, [r3, #4]
 800abe0:	1949      	addeq	r1, r1, r5
 800abe2:	6021      	streq	r1, [r4, #0]
 800abe4:	e7ed      	b.n	800abc2 <_free_r+0x22>
 800abe6:	461a      	mov	r2, r3
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	b10b      	cbz	r3, 800abf0 <_free_r+0x50>
 800abec:	42a3      	cmp	r3, r4
 800abee:	d9fa      	bls.n	800abe6 <_free_r+0x46>
 800abf0:	6811      	ldr	r1, [r2, #0]
 800abf2:	1855      	adds	r5, r2, r1
 800abf4:	42a5      	cmp	r5, r4
 800abf6:	d10b      	bne.n	800ac10 <_free_r+0x70>
 800abf8:	6824      	ldr	r4, [r4, #0]
 800abfa:	4421      	add	r1, r4
 800abfc:	1854      	adds	r4, r2, r1
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	6011      	str	r1, [r2, #0]
 800ac02:	d1e0      	bne.n	800abc6 <_free_r+0x26>
 800ac04:	681c      	ldr	r4, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	6053      	str	r3, [r2, #4]
 800ac0a:	440c      	add	r4, r1
 800ac0c:	6014      	str	r4, [r2, #0]
 800ac0e:	e7da      	b.n	800abc6 <_free_r+0x26>
 800ac10:	d902      	bls.n	800ac18 <_free_r+0x78>
 800ac12:	230c      	movs	r3, #12
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	e7d6      	b.n	800abc6 <_free_r+0x26>
 800ac18:	6825      	ldr	r5, [r4, #0]
 800ac1a:	1961      	adds	r1, r4, r5
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	bf04      	itt	eq
 800ac20:	6819      	ldreq	r1, [r3, #0]
 800ac22:	685b      	ldreq	r3, [r3, #4]
 800ac24:	6063      	str	r3, [r4, #4]
 800ac26:	bf04      	itt	eq
 800ac28:	1949      	addeq	r1, r1, r5
 800ac2a:	6021      	streq	r1, [r4, #0]
 800ac2c:	6054      	str	r4, [r2, #4]
 800ac2e:	e7ca      	b.n	800abc6 <_free_r+0x26>
 800ac30:	b003      	add	sp, #12
 800ac32:	bd30      	pop	{r4, r5, pc}
 800ac34:	24018b50 	.word	0x24018b50

0800ac38 <sbrk_aligned>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4e0e      	ldr	r6, [pc, #56]	; (800ac74 <sbrk_aligned+0x3c>)
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	6831      	ldr	r1, [r6, #0]
 800ac40:	4605      	mov	r5, r0
 800ac42:	b911      	cbnz	r1, 800ac4a <sbrk_aligned+0x12>
 800ac44:	f000 fba6 	bl	800b394 <_sbrk_r>
 800ac48:	6030      	str	r0, [r6, #0]
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f000 fba1 	bl	800b394 <_sbrk_r>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	d00a      	beq.n	800ac6c <sbrk_aligned+0x34>
 800ac56:	1cc4      	adds	r4, r0, #3
 800ac58:	f024 0403 	bic.w	r4, r4, #3
 800ac5c:	42a0      	cmp	r0, r4
 800ac5e:	d007      	beq.n	800ac70 <sbrk_aligned+0x38>
 800ac60:	1a21      	subs	r1, r4, r0
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 fb96 	bl	800b394 <_sbrk_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d101      	bne.n	800ac70 <sbrk_aligned+0x38>
 800ac6c:	f04f 34ff 	mov.w	r4, #4294967295
 800ac70:	4620      	mov	r0, r4
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	24018b54 	.word	0x24018b54

0800ac78 <_malloc_r>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	1ccd      	adds	r5, r1, #3
 800ac7e:	f025 0503 	bic.w	r5, r5, #3
 800ac82:	3508      	adds	r5, #8
 800ac84:	2d0c      	cmp	r5, #12
 800ac86:	bf38      	it	cc
 800ac88:	250c      	movcc	r5, #12
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	db01      	blt.n	800ac94 <_malloc_r+0x1c>
 800ac90:	42a9      	cmp	r1, r5
 800ac92:	d905      	bls.n	800aca0 <_malloc_r+0x28>
 800ac94:	230c      	movs	r3, #12
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	2600      	movs	r6, #0
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad74 <_malloc_r+0xfc>
 800aca4:	f000 f868 	bl	800ad78 <__malloc_lock>
 800aca8:	f8d8 3000 	ldr.w	r3, [r8]
 800acac:	461c      	mov	r4, r3
 800acae:	bb5c      	cbnz	r4, 800ad08 <_malloc_r+0x90>
 800acb0:	4629      	mov	r1, r5
 800acb2:	4638      	mov	r0, r7
 800acb4:	f7ff ffc0 	bl	800ac38 <sbrk_aligned>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	4604      	mov	r4, r0
 800acbc:	d155      	bne.n	800ad6a <_malloc_r+0xf2>
 800acbe:	f8d8 4000 	ldr.w	r4, [r8]
 800acc2:	4626      	mov	r6, r4
 800acc4:	2e00      	cmp	r6, #0
 800acc6:	d145      	bne.n	800ad54 <_malloc_r+0xdc>
 800acc8:	2c00      	cmp	r4, #0
 800acca:	d048      	beq.n	800ad5e <_malloc_r+0xe6>
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	4631      	mov	r1, r6
 800acd0:	4638      	mov	r0, r7
 800acd2:	eb04 0903 	add.w	r9, r4, r3
 800acd6:	f000 fb5d 	bl	800b394 <_sbrk_r>
 800acda:	4581      	cmp	r9, r0
 800acdc:	d13f      	bne.n	800ad5e <_malloc_r+0xe6>
 800acde:	6821      	ldr	r1, [r4, #0]
 800ace0:	1a6d      	subs	r5, r5, r1
 800ace2:	4629      	mov	r1, r5
 800ace4:	4638      	mov	r0, r7
 800ace6:	f7ff ffa7 	bl	800ac38 <sbrk_aligned>
 800acea:	3001      	adds	r0, #1
 800acec:	d037      	beq.n	800ad5e <_malloc_r+0xe6>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	442b      	add	r3, r5
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	f8d8 3000 	ldr.w	r3, [r8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d038      	beq.n	800ad6e <_malloc_r+0xf6>
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	42a2      	cmp	r2, r4
 800ad00:	d12b      	bne.n	800ad5a <_malloc_r+0xe2>
 800ad02:	2200      	movs	r2, #0
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	e00f      	b.n	800ad28 <_malloc_r+0xb0>
 800ad08:	6822      	ldr	r2, [r4, #0]
 800ad0a:	1b52      	subs	r2, r2, r5
 800ad0c:	d41f      	bmi.n	800ad4e <_malloc_r+0xd6>
 800ad0e:	2a0b      	cmp	r2, #11
 800ad10:	d917      	bls.n	800ad42 <_malloc_r+0xca>
 800ad12:	1961      	adds	r1, r4, r5
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	6025      	str	r5, [r4, #0]
 800ad18:	bf18      	it	ne
 800ad1a:	6059      	strne	r1, [r3, #4]
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	bf08      	it	eq
 800ad20:	f8c8 1000 	streq.w	r1, [r8]
 800ad24:	5162      	str	r2, [r4, r5]
 800ad26:	604b      	str	r3, [r1, #4]
 800ad28:	4638      	mov	r0, r7
 800ad2a:	f104 060b 	add.w	r6, r4, #11
 800ad2e:	f000 f829 	bl	800ad84 <__malloc_unlock>
 800ad32:	f026 0607 	bic.w	r6, r6, #7
 800ad36:	1d23      	adds	r3, r4, #4
 800ad38:	1af2      	subs	r2, r6, r3
 800ad3a:	d0ae      	beq.n	800ac9a <_malloc_r+0x22>
 800ad3c:	1b9b      	subs	r3, r3, r6
 800ad3e:	50a3      	str	r3, [r4, r2]
 800ad40:	e7ab      	b.n	800ac9a <_malloc_r+0x22>
 800ad42:	42a3      	cmp	r3, r4
 800ad44:	6862      	ldr	r2, [r4, #4]
 800ad46:	d1dd      	bne.n	800ad04 <_malloc_r+0x8c>
 800ad48:	f8c8 2000 	str.w	r2, [r8]
 800ad4c:	e7ec      	b.n	800ad28 <_malloc_r+0xb0>
 800ad4e:	4623      	mov	r3, r4
 800ad50:	6864      	ldr	r4, [r4, #4]
 800ad52:	e7ac      	b.n	800acae <_malloc_r+0x36>
 800ad54:	4634      	mov	r4, r6
 800ad56:	6876      	ldr	r6, [r6, #4]
 800ad58:	e7b4      	b.n	800acc4 <_malloc_r+0x4c>
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	e7cc      	b.n	800acf8 <_malloc_r+0x80>
 800ad5e:	230c      	movs	r3, #12
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	4638      	mov	r0, r7
 800ad64:	f000 f80e 	bl	800ad84 <__malloc_unlock>
 800ad68:	e797      	b.n	800ac9a <_malloc_r+0x22>
 800ad6a:	6025      	str	r5, [r4, #0]
 800ad6c:	e7dc      	b.n	800ad28 <_malloc_r+0xb0>
 800ad6e:	605b      	str	r3, [r3, #4]
 800ad70:	deff      	udf	#255	; 0xff
 800ad72:	bf00      	nop
 800ad74:	24018b50 	.word	0x24018b50

0800ad78 <__malloc_lock>:
 800ad78:	4801      	ldr	r0, [pc, #4]	; (800ad80 <__malloc_lock+0x8>)
 800ad7a:	f7ff bf0f 	b.w	800ab9c <__retarget_lock_acquire_recursive>
 800ad7e:	bf00      	nop
 800ad80:	24018b4c 	.word	0x24018b4c

0800ad84 <__malloc_unlock>:
 800ad84:	4801      	ldr	r0, [pc, #4]	; (800ad8c <__malloc_unlock+0x8>)
 800ad86:	f7ff bf0a 	b.w	800ab9e <__retarget_lock_release_recursive>
 800ad8a:	bf00      	nop
 800ad8c:	24018b4c 	.word	0x24018b4c

0800ad90 <__ssputs_r>:
 800ad90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	688e      	ldr	r6, [r1, #8]
 800ad96:	461f      	mov	r7, r3
 800ad98:	42be      	cmp	r6, r7
 800ad9a:	680b      	ldr	r3, [r1, #0]
 800ad9c:	4682      	mov	sl, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	4690      	mov	r8, r2
 800ada2:	d82c      	bhi.n	800adfe <__ssputs_r+0x6e>
 800ada4:	898a      	ldrh	r2, [r1, #12]
 800ada6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adaa:	d026      	beq.n	800adfa <__ssputs_r+0x6a>
 800adac:	6965      	ldr	r5, [r4, #20]
 800adae:	6909      	ldr	r1, [r1, #16]
 800adb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adb4:	eba3 0901 	sub.w	r9, r3, r1
 800adb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adbc:	1c7b      	adds	r3, r7, #1
 800adbe:	444b      	add	r3, r9
 800adc0:	106d      	asrs	r5, r5, #1
 800adc2:	429d      	cmp	r5, r3
 800adc4:	bf38      	it	cc
 800adc6:	461d      	movcc	r5, r3
 800adc8:	0553      	lsls	r3, r2, #21
 800adca:	d527      	bpl.n	800ae1c <__ssputs_r+0x8c>
 800adcc:	4629      	mov	r1, r5
 800adce:	f7ff ff53 	bl	800ac78 <_malloc_r>
 800add2:	4606      	mov	r6, r0
 800add4:	b360      	cbz	r0, 800ae30 <__ssputs_r+0xa0>
 800add6:	6921      	ldr	r1, [r4, #16]
 800add8:	464a      	mov	r2, r9
 800adda:	f000 faeb 	bl	800b3b4 <memcpy>
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ade4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade8:	81a3      	strh	r3, [r4, #12]
 800adea:	6126      	str	r6, [r4, #16]
 800adec:	6165      	str	r5, [r4, #20]
 800adee:	444e      	add	r6, r9
 800adf0:	eba5 0509 	sub.w	r5, r5, r9
 800adf4:	6026      	str	r6, [r4, #0]
 800adf6:	60a5      	str	r5, [r4, #8]
 800adf8:	463e      	mov	r6, r7
 800adfa:	42be      	cmp	r6, r7
 800adfc:	d900      	bls.n	800ae00 <__ssputs_r+0x70>
 800adfe:	463e      	mov	r6, r7
 800ae00:	6820      	ldr	r0, [r4, #0]
 800ae02:	4632      	mov	r2, r6
 800ae04:	4641      	mov	r1, r8
 800ae06:	f000 faab 	bl	800b360 <memmove>
 800ae0a:	68a3      	ldr	r3, [r4, #8]
 800ae0c:	1b9b      	subs	r3, r3, r6
 800ae0e:	60a3      	str	r3, [r4, #8]
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	4433      	add	r3, r6
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	2000      	movs	r0, #0
 800ae18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	f000 fad7 	bl	800b3d0 <_realloc_r>
 800ae22:	4606      	mov	r6, r0
 800ae24:	2800      	cmp	r0, #0
 800ae26:	d1e0      	bne.n	800adea <__ssputs_r+0x5a>
 800ae28:	6921      	ldr	r1, [r4, #16]
 800ae2a:	4650      	mov	r0, sl
 800ae2c:	f7ff feb8 	bl	800aba0 <_free_r>
 800ae30:	230c      	movs	r3, #12
 800ae32:	f8ca 3000 	str.w	r3, [sl]
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae42:	e7e9      	b.n	800ae18 <__ssputs_r+0x88>

0800ae44 <_svfiprintf_r>:
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	4698      	mov	r8, r3
 800ae4a:	898b      	ldrh	r3, [r1, #12]
 800ae4c:	061b      	lsls	r3, r3, #24
 800ae4e:	b09d      	sub	sp, #116	; 0x74
 800ae50:	4607      	mov	r7, r0
 800ae52:	460d      	mov	r5, r1
 800ae54:	4614      	mov	r4, r2
 800ae56:	d50e      	bpl.n	800ae76 <_svfiprintf_r+0x32>
 800ae58:	690b      	ldr	r3, [r1, #16]
 800ae5a:	b963      	cbnz	r3, 800ae76 <_svfiprintf_r+0x32>
 800ae5c:	2140      	movs	r1, #64	; 0x40
 800ae5e:	f7ff ff0b 	bl	800ac78 <_malloc_r>
 800ae62:	6028      	str	r0, [r5, #0]
 800ae64:	6128      	str	r0, [r5, #16]
 800ae66:	b920      	cbnz	r0, 800ae72 <_svfiprintf_r+0x2e>
 800ae68:	230c      	movs	r3, #12
 800ae6a:	603b      	str	r3, [r7, #0]
 800ae6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae70:	e0d0      	b.n	800b014 <_svfiprintf_r+0x1d0>
 800ae72:	2340      	movs	r3, #64	; 0x40
 800ae74:	616b      	str	r3, [r5, #20]
 800ae76:	2300      	movs	r3, #0
 800ae78:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7a:	2320      	movs	r3, #32
 800ae7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae84:	2330      	movs	r3, #48	; 0x30
 800ae86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b02c <_svfiprintf_r+0x1e8>
 800ae8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae8e:	f04f 0901 	mov.w	r9, #1
 800ae92:	4623      	mov	r3, r4
 800ae94:	469a      	mov	sl, r3
 800ae96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae9a:	b10a      	cbz	r2, 800aea0 <_svfiprintf_r+0x5c>
 800ae9c:	2a25      	cmp	r2, #37	; 0x25
 800ae9e:	d1f9      	bne.n	800ae94 <_svfiprintf_r+0x50>
 800aea0:	ebba 0b04 	subs.w	fp, sl, r4
 800aea4:	d00b      	beq.n	800aebe <_svfiprintf_r+0x7a>
 800aea6:	465b      	mov	r3, fp
 800aea8:	4622      	mov	r2, r4
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4638      	mov	r0, r7
 800aeae:	f7ff ff6f 	bl	800ad90 <__ssputs_r>
 800aeb2:	3001      	adds	r0, #1
 800aeb4:	f000 80a9 	beq.w	800b00a <_svfiprintf_r+0x1c6>
 800aeb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeba:	445a      	add	r2, fp
 800aebc:	9209      	str	r2, [sp, #36]	; 0x24
 800aebe:	f89a 3000 	ldrb.w	r3, [sl]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 80a1 	beq.w	800b00a <_svfiprintf_r+0x1c6>
 800aec8:	2300      	movs	r3, #0
 800aeca:	f04f 32ff 	mov.w	r2, #4294967295
 800aece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed2:	f10a 0a01 	add.w	sl, sl, #1
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	9307      	str	r3, [sp, #28]
 800aeda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aede:	931a      	str	r3, [sp, #104]	; 0x68
 800aee0:	4654      	mov	r4, sl
 800aee2:	2205      	movs	r2, #5
 800aee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee8:	4850      	ldr	r0, [pc, #320]	; (800b02c <_svfiprintf_r+0x1e8>)
 800aeea:	f7f5 fa01 	bl	80002f0 <memchr>
 800aeee:	9a04      	ldr	r2, [sp, #16]
 800aef0:	b9d8      	cbnz	r0, 800af2a <_svfiprintf_r+0xe6>
 800aef2:	06d0      	lsls	r0, r2, #27
 800aef4:	bf44      	itt	mi
 800aef6:	2320      	movmi	r3, #32
 800aef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aefc:	0711      	lsls	r1, r2, #28
 800aefe:	bf44      	itt	mi
 800af00:	232b      	movmi	r3, #43	; 0x2b
 800af02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af06:	f89a 3000 	ldrb.w	r3, [sl]
 800af0a:	2b2a      	cmp	r3, #42	; 0x2a
 800af0c:	d015      	beq.n	800af3a <_svfiprintf_r+0xf6>
 800af0e:	9a07      	ldr	r2, [sp, #28]
 800af10:	4654      	mov	r4, sl
 800af12:	2000      	movs	r0, #0
 800af14:	f04f 0c0a 	mov.w	ip, #10
 800af18:	4621      	mov	r1, r4
 800af1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af1e:	3b30      	subs	r3, #48	; 0x30
 800af20:	2b09      	cmp	r3, #9
 800af22:	d94d      	bls.n	800afc0 <_svfiprintf_r+0x17c>
 800af24:	b1b0      	cbz	r0, 800af54 <_svfiprintf_r+0x110>
 800af26:	9207      	str	r2, [sp, #28]
 800af28:	e014      	b.n	800af54 <_svfiprintf_r+0x110>
 800af2a:	eba0 0308 	sub.w	r3, r0, r8
 800af2e:	fa09 f303 	lsl.w	r3, r9, r3
 800af32:	4313      	orrs	r3, r2
 800af34:	9304      	str	r3, [sp, #16]
 800af36:	46a2      	mov	sl, r4
 800af38:	e7d2      	b.n	800aee0 <_svfiprintf_r+0x9c>
 800af3a:	9b03      	ldr	r3, [sp, #12]
 800af3c:	1d19      	adds	r1, r3, #4
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	9103      	str	r1, [sp, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	bfbb      	ittet	lt
 800af46:	425b      	neglt	r3, r3
 800af48:	f042 0202 	orrlt.w	r2, r2, #2
 800af4c:	9307      	strge	r3, [sp, #28]
 800af4e:	9307      	strlt	r3, [sp, #28]
 800af50:	bfb8      	it	lt
 800af52:	9204      	strlt	r2, [sp, #16]
 800af54:	7823      	ldrb	r3, [r4, #0]
 800af56:	2b2e      	cmp	r3, #46	; 0x2e
 800af58:	d10c      	bne.n	800af74 <_svfiprintf_r+0x130>
 800af5a:	7863      	ldrb	r3, [r4, #1]
 800af5c:	2b2a      	cmp	r3, #42	; 0x2a
 800af5e:	d134      	bne.n	800afca <_svfiprintf_r+0x186>
 800af60:	9b03      	ldr	r3, [sp, #12]
 800af62:	1d1a      	adds	r2, r3, #4
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	9203      	str	r2, [sp, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	bfb8      	it	lt
 800af6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af70:	3402      	adds	r4, #2
 800af72:	9305      	str	r3, [sp, #20]
 800af74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b03c <_svfiprintf_r+0x1f8>
 800af78:	7821      	ldrb	r1, [r4, #0]
 800af7a:	2203      	movs	r2, #3
 800af7c:	4650      	mov	r0, sl
 800af7e:	f7f5 f9b7 	bl	80002f0 <memchr>
 800af82:	b138      	cbz	r0, 800af94 <_svfiprintf_r+0x150>
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	eba0 000a 	sub.w	r0, r0, sl
 800af8a:	2240      	movs	r2, #64	; 0x40
 800af8c:	4082      	lsls	r2, r0
 800af8e:	4313      	orrs	r3, r2
 800af90:	3401      	adds	r4, #1
 800af92:	9304      	str	r3, [sp, #16]
 800af94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af98:	4825      	ldr	r0, [pc, #148]	; (800b030 <_svfiprintf_r+0x1ec>)
 800af9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af9e:	2206      	movs	r2, #6
 800afa0:	f7f5 f9a6 	bl	80002f0 <memchr>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d038      	beq.n	800b01a <_svfiprintf_r+0x1d6>
 800afa8:	4b22      	ldr	r3, [pc, #136]	; (800b034 <_svfiprintf_r+0x1f0>)
 800afaa:	bb1b      	cbnz	r3, 800aff4 <_svfiprintf_r+0x1b0>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	3307      	adds	r3, #7
 800afb0:	f023 0307 	bic.w	r3, r3, #7
 800afb4:	3308      	adds	r3, #8
 800afb6:	9303      	str	r3, [sp, #12]
 800afb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afba:	4433      	add	r3, r6
 800afbc:	9309      	str	r3, [sp, #36]	; 0x24
 800afbe:	e768      	b.n	800ae92 <_svfiprintf_r+0x4e>
 800afc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800afc4:	460c      	mov	r4, r1
 800afc6:	2001      	movs	r0, #1
 800afc8:	e7a6      	b.n	800af18 <_svfiprintf_r+0xd4>
 800afca:	2300      	movs	r3, #0
 800afcc:	3401      	adds	r4, #1
 800afce:	9305      	str	r3, [sp, #20]
 800afd0:	4619      	mov	r1, r3
 800afd2:	f04f 0c0a 	mov.w	ip, #10
 800afd6:	4620      	mov	r0, r4
 800afd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afdc:	3a30      	subs	r2, #48	; 0x30
 800afde:	2a09      	cmp	r2, #9
 800afe0:	d903      	bls.n	800afea <_svfiprintf_r+0x1a6>
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0c6      	beq.n	800af74 <_svfiprintf_r+0x130>
 800afe6:	9105      	str	r1, [sp, #20]
 800afe8:	e7c4      	b.n	800af74 <_svfiprintf_r+0x130>
 800afea:	fb0c 2101 	mla	r1, ip, r1, r2
 800afee:	4604      	mov	r4, r0
 800aff0:	2301      	movs	r3, #1
 800aff2:	e7f0      	b.n	800afd6 <_svfiprintf_r+0x192>
 800aff4:	ab03      	add	r3, sp, #12
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	462a      	mov	r2, r5
 800affa:	4b0f      	ldr	r3, [pc, #60]	; (800b038 <_svfiprintf_r+0x1f4>)
 800affc:	a904      	add	r1, sp, #16
 800affe:	4638      	mov	r0, r7
 800b000:	f3af 8000 	nop.w
 800b004:	1c42      	adds	r2, r0, #1
 800b006:	4606      	mov	r6, r0
 800b008:	d1d6      	bne.n	800afb8 <_svfiprintf_r+0x174>
 800b00a:	89ab      	ldrh	r3, [r5, #12]
 800b00c:	065b      	lsls	r3, r3, #25
 800b00e:	f53f af2d 	bmi.w	800ae6c <_svfiprintf_r+0x28>
 800b012:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b014:	b01d      	add	sp, #116	; 0x74
 800b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01a:	ab03      	add	r3, sp, #12
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	462a      	mov	r2, r5
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <_svfiprintf_r+0x1f4>)
 800b022:	a904      	add	r1, sp, #16
 800b024:	4638      	mov	r0, r7
 800b026:	f000 f879 	bl	800b11c <_printf_i>
 800b02a:	e7eb      	b.n	800b004 <_svfiprintf_r+0x1c0>
 800b02c:	0800b4a4 	.word	0x0800b4a4
 800b030:	0800b4ae 	.word	0x0800b4ae
 800b034:	00000000 	.word	0x00000000
 800b038:	0800ad91 	.word	0x0800ad91
 800b03c:	0800b4aa 	.word	0x0800b4aa

0800b040 <_printf_common>:
 800b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b044:	4616      	mov	r6, r2
 800b046:	4699      	mov	r9, r3
 800b048:	688a      	ldr	r2, [r1, #8]
 800b04a:	690b      	ldr	r3, [r1, #16]
 800b04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b050:	4293      	cmp	r3, r2
 800b052:	bfb8      	it	lt
 800b054:	4613      	movlt	r3, r2
 800b056:	6033      	str	r3, [r6, #0]
 800b058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b05c:	4607      	mov	r7, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	b10a      	cbz	r2, 800b066 <_printf_common+0x26>
 800b062:	3301      	adds	r3, #1
 800b064:	6033      	str	r3, [r6, #0]
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	0699      	lsls	r1, r3, #26
 800b06a:	bf42      	ittt	mi
 800b06c:	6833      	ldrmi	r3, [r6, #0]
 800b06e:	3302      	addmi	r3, #2
 800b070:	6033      	strmi	r3, [r6, #0]
 800b072:	6825      	ldr	r5, [r4, #0]
 800b074:	f015 0506 	ands.w	r5, r5, #6
 800b078:	d106      	bne.n	800b088 <_printf_common+0x48>
 800b07a:	f104 0a19 	add.w	sl, r4, #25
 800b07e:	68e3      	ldr	r3, [r4, #12]
 800b080:	6832      	ldr	r2, [r6, #0]
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	42ab      	cmp	r3, r5
 800b086:	dc26      	bgt.n	800b0d6 <_printf_common+0x96>
 800b088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b08c:	1e13      	subs	r3, r2, #0
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	bf18      	it	ne
 800b092:	2301      	movne	r3, #1
 800b094:	0692      	lsls	r2, r2, #26
 800b096:	d42b      	bmi.n	800b0f0 <_printf_common+0xb0>
 800b098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b09c:	4649      	mov	r1, r9
 800b09e:	4638      	mov	r0, r7
 800b0a0:	47c0      	blx	r8
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d01e      	beq.n	800b0e4 <_printf_common+0xa4>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	6922      	ldr	r2, [r4, #16]
 800b0aa:	f003 0306 	and.w	r3, r3, #6
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	bf02      	ittt	eq
 800b0b2:	68e5      	ldreq	r5, [r4, #12]
 800b0b4:	6833      	ldreq	r3, [r6, #0]
 800b0b6:	1aed      	subeq	r5, r5, r3
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	bf0c      	ite	eq
 800b0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0c0:	2500      	movne	r5, #0
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	bfc4      	itt	gt
 800b0c6:	1a9b      	subgt	r3, r3, r2
 800b0c8:	18ed      	addgt	r5, r5, r3
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	341a      	adds	r4, #26
 800b0ce:	42b5      	cmp	r5, r6
 800b0d0:	d11a      	bne.n	800b108 <_printf_common+0xc8>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e008      	b.n	800b0e8 <_printf_common+0xa8>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4652      	mov	r2, sl
 800b0da:	4649      	mov	r1, r9
 800b0dc:	4638      	mov	r0, r7
 800b0de:	47c0      	blx	r8
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d103      	bne.n	800b0ec <_printf_common+0xac>
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	e7c6      	b.n	800b07e <_printf_common+0x3e>
 800b0f0:	18e1      	adds	r1, r4, r3
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	2030      	movs	r0, #48	; 0x30
 800b0f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0fa:	4422      	add	r2, r4
 800b0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b104:	3302      	adds	r3, #2
 800b106:	e7c7      	b.n	800b098 <_printf_common+0x58>
 800b108:	2301      	movs	r3, #1
 800b10a:	4622      	mov	r2, r4
 800b10c:	4649      	mov	r1, r9
 800b10e:	4638      	mov	r0, r7
 800b110:	47c0      	blx	r8
 800b112:	3001      	adds	r0, #1
 800b114:	d0e6      	beq.n	800b0e4 <_printf_common+0xa4>
 800b116:	3601      	adds	r6, #1
 800b118:	e7d9      	b.n	800b0ce <_printf_common+0x8e>
	...

0800b11c <_printf_i>:
 800b11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	7e0f      	ldrb	r7, [r1, #24]
 800b122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b124:	2f78      	cmp	r7, #120	; 0x78
 800b126:	4691      	mov	r9, r2
 800b128:	4680      	mov	r8, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	469a      	mov	sl, r3
 800b12e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b132:	d807      	bhi.n	800b144 <_printf_i+0x28>
 800b134:	2f62      	cmp	r7, #98	; 0x62
 800b136:	d80a      	bhi.n	800b14e <_printf_i+0x32>
 800b138:	2f00      	cmp	r7, #0
 800b13a:	f000 80d4 	beq.w	800b2e6 <_printf_i+0x1ca>
 800b13e:	2f58      	cmp	r7, #88	; 0x58
 800b140:	f000 80c0 	beq.w	800b2c4 <_printf_i+0x1a8>
 800b144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b14c:	e03a      	b.n	800b1c4 <_printf_i+0xa8>
 800b14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b152:	2b15      	cmp	r3, #21
 800b154:	d8f6      	bhi.n	800b144 <_printf_i+0x28>
 800b156:	a101      	add	r1, pc, #4	; (adr r1, 800b15c <_printf_i+0x40>)
 800b158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1c9 	.word	0x0800b1c9
 800b164:	0800b145 	.word	0x0800b145
 800b168:	0800b145 	.word	0x0800b145
 800b16c:	0800b145 	.word	0x0800b145
 800b170:	0800b145 	.word	0x0800b145
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b145 	.word	0x0800b145
 800b17c:	0800b145 	.word	0x0800b145
 800b180:	0800b145 	.word	0x0800b145
 800b184:	0800b145 	.word	0x0800b145
 800b188:	0800b2cd 	.word	0x0800b2cd
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b287 	.word	0x0800b287
 800b194:	0800b145 	.word	0x0800b145
 800b198:	0800b145 	.word	0x0800b145
 800b19c:	0800b2ef 	.word	0x0800b2ef
 800b1a0:	0800b145 	.word	0x0800b145
 800b1a4:	0800b1f5 	.word	0x0800b1f5
 800b1a8:	0800b145 	.word	0x0800b145
 800b1ac:	0800b145 	.word	0x0800b145
 800b1b0:	0800b28f 	.word	0x0800b28f
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	1d1a      	adds	r2, r3, #4
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e09f      	b.n	800b308 <_printf_i+0x1ec>
 800b1c8:	6820      	ldr	r0, [r4, #0]
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	0607      	lsls	r7, r0, #24
 800b1ce:	f103 0104 	add.w	r1, r3, #4
 800b1d2:	6029      	str	r1, [r5, #0]
 800b1d4:	d501      	bpl.n	800b1da <_printf_i+0xbe>
 800b1d6:	681e      	ldr	r6, [r3, #0]
 800b1d8:	e003      	b.n	800b1e2 <_printf_i+0xc6>
 800b1da:	0646      	lsls	r6, r0, #25
 800b1dc:	d5fb      	bpl.n	800b1d6 <_printf_i+0xba>
 800b1de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b1e2:	2e00      	cmp	r6, #0
 800b1e4:	da03      	bge.n	800b1ee <_printf_i+0xd2>
 800b1e6:	232d      	movs	r3, #45	; 0x2d
 800b1e8:	4276      	negs	r6, r6
 800b1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ee:	485a      	ldr	r0, [pc, #360]	; (800b358 <_printf_i+0x23c>)
 800b1f0:	230a      	movs	r3, #10
 800b1f2:	e012      	b.n	800b21a <_printf_i+0xfe>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	6820      	ldr	r0, [r4, #0]
 800b1f8:	1d19      	adds	r1, r3, #4
 800b1fa:	6029      	str	r1, [r5, #0]
 800b1fc:	0605      	lsls	r5, r0, #24
 800b1fe:	d501      	bpl.n	800b204 <_printf_i+0xe8>
 800b200:	681e      	ldr	r6, [r3, #0]
 800b202:	e002      	b.n	800b20a <_printf_i+0xee>
 800b204:	0641      	lsls	r1, r0, #25
 800b206:	d5fb      	bpl.n	800b200 <_printf_i+0xe4>
 800b208:	881e      	ldrh	r6, [r3, #0]
 800b20a:	4853      	ldr	r0, [pc, #332]	; (800b358 <_printf_i+0x23c>)
 800b20c:	2f6f      	cmp	r7, #111	; 0x6f
 800b20e:	bf0c      	ite	eq
 800b210:	2308      	moveq	r3, #8
 800b212:	230a      	movne	r3, #10
 800b214:	2100      	movs	r1, #0
 800b216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b21a:	6865      	ldr	r5, [r4, #4]
 800b21c:	60a5      	str	r5, [r4, #8]
 800b21e:	2d00      	cmp	r5, #0
 800b220:	bfa2      	ittt	ge
 800b222:	6821      	ldrge	r1, [r4, #0]
 800b224:	f021 0104 	bicge.w	r1, r1, #4
 800b228:	6021      	strge	r1, [r4, #0]
 800b22a:	b90e      	cbnz	r6, 800b230 <_printf_i+0x114>
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	d04b      	beq.n	800b2c8 <_printf_i+0x1ac>
 800b230:	4615      	mov	r5, r2
 800b232:	fbb6 f1f3 	udiv	r1, r6, r3
 800b236:	fb03 6711 	mls	r7, r3, r1, r6
 800b23a:	5dc7      	ldrb	r7, [r0, r7]
 800b23c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b240:	4637      	mov	r7, r6
 800b242:	42bb      	cmp	r3, r7
 800b244:	460e      	mov	r6, r1
 800b246:	d9f4      	bls.n	800b232 <_printf_i+0x116>
 800b248:	2b08      	cmp	r3, #8
 800b24a:	d10b      	bne.n	800b264 <_printf_i+0x148>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	07de      	lsls	r6, r3, #31
 800b250:	d508      	bpl.n	800b264 <_printf_i+0x148>
 800b252:	6923      	ldr	r3, [r4, #16]
 800b254:	6861      	ldr	r1, [r4, #4]
 800b256:	4299      	cmp	r1, r3
 800b258:	bfde      	ittt	le
 800b25a:	2330      	movle	r3, #48	; 0x30
 800b25c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b260:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b264:	1b52      	subs	r2, r2, r5
 800b266:	6122      	str	r2, [r4, #16]
 800b268:	f8cd a000 	str.w	sl, [sp]
 800b26c:	464b      	mov	r3, r9
 800b26e:	aa03      	add	r2, sp, #12
 800b270:	4621      	mov	r1, r4
 800b272:	4640      	mov	r0, r8
 800b274:	f7ff fee4 	bl	800b040 <_printf_common>
 800b278:	3001      	adds	r0, #1
 800b27a:	d14a      	bne.n	800b312 <_printf_i+0x1f6>
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	b004      	add	sp, #16
 800b282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	f043 0320 	orr.w	r3, r3, #32
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	4833      	ldr	r0, [pc, #204]	; (800b35c <_printf_i+0x240>)
 800b290:	2778      	movs	r7, #120	; 0x78
 800b292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	6829      	ldr	r1, [r5, #0]
 800b29a:	061f      	lsls	r7, r3, #24
 800b29c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2a0:	d402      	bmi.n	800b2a8 <_printf_i+0x18c>
 800b2a2:	065f      	lsls	r7, r3, #25
 800b2a4:	bf48      	it	mi
 800b2a6:	b2b6      	uxthmi	r6, r6
 800b2a8:	07df      	lsls	r7, r3, #31
 800b2aa:	bf48      	it	mi
 800b2ac:	f043 0320 	orrmi.w	r3, r3, #32
 800b2b0:	6029      	str	r1, [r5, #0]
 800b2b2:	bf48      	it	mi
 800b2b4:	6023      	strmi	r3, [r4, #0]
 800b2b6:	b91e      	cbnz	r6, 800b2c0 <_printf_i+0x1a4>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	f023 0320 	bic.w	r3, r3, #32
 800b2be:	6023      	str	r3, [r4, #0]
 800b2c0:	2310      	movs	r3, #16
 800b2c2:	e7a7      	b.n	800b214 <_printf_i+0xf8>
 800b2c4:	4824      	ldr	r0, [pc, #144]	; (800b358 <_printf_i+0x23c>)
 800b2c6:	e7e4      	b.n	800b292 <_printf_i+0x176>
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	e7bd      	b.n	800b248 <_printf_i+0x12c>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	6826      	ldr	r6, [r4, #0]
 800b2d0:	6961      	ldr	r1, [r4, #20]
 800b2d2:	1d18      	adds	r0, r3, #4
 800b2d4:	6028      	str	r0, [r5, #0]
 800b2d6:	0635      	lsls	r5, r6, #24
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	d501      	bpl.n	800b2e0 <_printf_i+0x1c4>
 800b2dc:	6019      	str	r1, [r3, #0]
 800b2de:	e002      	b.n	800b2e6 <_printf_i+0x1ca>
 800b2e0:	0670      	lsls	r0, r6, #25
 800b2e2:	d5fb      	bpl.n	800b2dc <_printf_i+0x1c0>
 800b2e4:	8019      	strh	r1, [r3, #0]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6123      	str	r3, [r4, #16]
 800b2ea:	4615      	mov	r5, r2
 800b2ec:	e7bc      	b.n	800b268 <_printf_i+0x14c>
 800b2ee:	682b      	ldr	r3, [r5, #0]
 800b2f0:	1d1a      	adds	r2, r3, #4
 800b2f2:	602a      	str	r2, [r5, #0]
 800b2f4:	681d      	ldr	r5, [r3, #0]
 800b2f6:	6862      	ldr	r2, [r4, #4]
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	f7f4 fff8 	bl	80002f0 <memchr>
 800b300:	b108      	cbz	r0, 800b306 <_printf_i+0x1ea>
 800b302:	1b40      	subs	r0, r0, r5
 800b304:	6060      	str	r0, [r4, #4]
 800b306:	6863      	ldr	r3, [r4, #4]
 800b308:	6123      	str	r3, [r4, #16]
 800b30a:	2300      	movs	r3, #0
 800b30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b310:	e7aa      	b.n	800b268 <_printf_i+0x14c>
 800b312:	6923      	ldr	r3, [r4, #16]
 800b314:	462a      	mov	r2, r5
 800b316:	4649      	mov	r1, r9
 800b318:	4640      	mov	r0, r8
 800b31a:	47d0      	blx	sl
 800b31c:	3001      	adds	r0, #1
 800b31e:	d0ad      	beq.n	800b27c <_printf_i+0x160>
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	079b      	lsls	r3, r3, #30
 800b324:	d413      	bmi.n	800b34e <_printf_i+0x232>
 800b326:	68e0      	ldr	r0, [r4, #12]
 800b328:	9b03      	ldr	r3, [sp, #12]
 800b32a:	4298      	cmp	r0, r3
 800b32c:	bfb8      	it	lt
 800b32e:	4618      	movlt	r0, r3
 800b330:	e7a6      	b.n	800b280 <_printf_i+0x164>
 800b332:	2301      	movs	r3, #1
 800b334:	4632      	mov	r2, r6
 800b336:	4649      	mov	r1, r9
 800b338:	4640      	mov	r0, r8
 800b33a:	47d0      	blx	sl
 800b33c:	3001      	adds	r0, #1
 800b33e:	d09d      	beq.n	800b27c <_printf_i+0x160>
 800b340:	3501      	adds	r5, #1
 800b342:	68e3      	ldr	r3, [r4, #12]
 800b344:	9903      	ldr	r1, [sp, #12]
 800b346:	1a5b      	subs	r3, r3, r1
 800b348:	42ab      	cmp	r3, r5
 800b34a:	dcf2      	bgt.n	800b332 <_printf_i+0x216>
 800b34c:	e7eb      	b.n	800b326 <_printf_i+0x20a>
 800b34e:	2500      	movs	r5, #0
 800b350:	f104 0619 	add.w	r6, r4, #25
 800b354:	e7f5      	b.n	800b342 <_printf_i+0x226>
 800b356:	bf00      	nop
 800b358:	0800b4b5 	.word	0x0800b4b5
 800b35c:	0800b4c6 	.word	0x0800b4c6

0800b360 <memmove>:
 800b360:	4288      	cmp	r0, r1
 800b362:	b510      	push	{r4, lr}
 800b364:	eb01 0402 	add.w	r4, r1, r2
 800b368:	d902      	bls.n	800b370 <memmove+0x10>
 800b36a:	4284      	cmp	r4, r0
 800b36c:	4623      	mov	r3, r4
 800b36e:	d807      	bhi.n	800b380 <memmove+0x20>
 800b370:	1e43      	subs	r3, r0, #1
 800b372:	42a1      	cmp	r1, r4
 800b374:	d008      	beq.n	800b388 <memmove+0x28>
 800b376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b37a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b37e:	e7f8      	b.n	800b372 <memmove+0x12>
 800b380:	4402      	add	r2, r0
 800b382:	4601      	mov	r1, r0
 800b384:	428a      	cmp	r2, r1
 800b386:	d100      	bne.n	800b38a <memmove+0x2a>
 800b388:	bd10      	pop	{r4, pc}
 800b38a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b38e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b392:	e7f7      	b.n	800b384 <memmove+0x24>

0800b394 <_sbrk_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d06      	ldr	r5, [pc, #24]	; (800b3b0 <_sbrk_r+0x1c>)
 800b398:	2300      	movs	r3, #0
 800b39a:	4604      	mov	r4, r0
 800b39c:	4608      	mov	r0, r1
 800b39e:	602b      	str	r3, [r5, #0]
 800b3a0:	f7f6 f87a 	bl	8001498 <_sbrk>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_sbrk_r+0x1a>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_sbrk_r+0x1a>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	24018b48 	.word	0x24018b48

0800b3b4 <memcpy>:
 800b3b4:	440a      	add	r2, r1
 800b3b6:	4291      	cmp	r1, r2
 800b3b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3bc:	d100      	bne.n	800b3c0 <memcpy+0xc>
 800b3be:	4770      	bx	lr
 800b3c0:	b510      	push	{r4, lr}
 800b3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3ca:	4291      	cmp	r1, r2
 800b3cc:	d1f9      	bne.n	800b3c2 <memcpy+0xe>
 800b3ce:	bd10      	pop	{r4, pc}

0800b3d0 <_realloc_r>:
 800b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d4:	4680      	mov	r8, r0
 800b3d6:	4614      	mov	r4, r2
 800b3d8:	460e      	mov	r6, r1
 800b3da:	b921      	cbnz	r1, 800b3e6 <_realloc_r+0x16>
 800b3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	f7ff bc49 	b.w	800ac78 <_malloc_r>
 800b3e6:	b92a      	cbnz	r2, 800b3f4 <_realloc_r+0x24>
 800b3e8:	f7ff fbda 	bl	800aba0 <_free_r>
 800b3ec:	4625      	mov	r5, r4
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f4:	f000 f81b 	bl	800b42e <_malloc_usable_size_r>
 800b3f8:	4284      	cmp	r4, r0
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	d802      	bhi.n	800b404 <_realloc_r+0x34>
 800b3fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b402:	d812      	bhi.n	800b42a <_realloc_r+0x5a>
 800b404:	4621      	mov	r1, r4
 800b406:	4640      	mov	r0, r8
 800b408:	f7ff fc36 	bl	800ac78 <_malloc_r>
 800b40c:	4605      	mov	r5, r0
 800b40e:	2800      	cmp	r0, #0
 800b410:	d0ed      	beq.n	800b3ee <_realloc_r+0x1e>
 800b412:	42bc      	cmp	r4, r7
 800b414:	4622      	mov	r2, r4
 800b416:	4631      	mov	r1, r6
 800b418:	bf28      	it	cs
 800b41a:	463a      	movcs	r2, r7
 800b41c:	f7ff ffca 	bl	800b3b4 <memcpy>
 800b420:	4631      	mov	r1, r6
 800b422:	4640      	mov	r0, r8
 800b424:	f7ff fbbc 	bl	800aba0 <_free_r>
 800b428:	e7e1      	b.n	800b3ee <_realloc_r+0x1e>
 800b42a:	4635      	mov	r5, r6
 800b42c:	e7df      	b.n	800b3ee <_realloc_r+0x1e>

0800b42e <_malloc_usable_size_r>:
 800b42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b432:	1f18      	subs	r0, r3, #4
 800b434:	2b00      	cmp	r3, #0
 800b436:	bfbc      	itt	lt
 800b438:	580b      	ldrlt	r3, [r1, r0]
 800b43a:	18c0      	addlt	r0, r0, r3
 800b43c:	4770      	bx	lr
	...

0800b440 <_init>:
 800b440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b442:	bf00      	nop
 800b444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b446:	bc08      	pop	{r3}
 800b448:	469e      	mov	lr, r3
 800b44a:	4770      	bx	lr

0800b44c <_fini>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	bf00      	nop
 800b450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b452:	bc08      	pop	{r3}
 800b454:	469e      	mov	lr, r3
 800b456:	4770      	bx	lr
