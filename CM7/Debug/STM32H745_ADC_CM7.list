
STM32H745_ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b358  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b680  0800b680  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b680  0800b680  0001b680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b688  0800b688  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b688  0800b688  0001b688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b68c  0800b68c  0001b68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800b690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018b8c  24000060  0800b6f0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24018bec  0800b6f0  00028bec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c0a1  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003092  00000000  00000000  0003c172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0003f208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec0  00000000  00000000  00040528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e2e6  00000000  00000000  000413e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab4a  00000000  00000000  0007f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019d002  00000000  00000000  0009a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056cc  00000000  00000000  0023721c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0023c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b5e0 	.word	0x0800b5e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b5e0 	.word	0x0800b5e0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d013      	beq.n	80007f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00b      	beq.n	80007f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007e0:	e000      	b.n	80007e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80007e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d0f9      	beq.n	80007e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SWD_Init>:
//__IO uint16_t ADC2Val[2] = {0};
uint8_t adc_complete = 0;
uint32_t ctr = 0;

void SWD_Init(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  *(__IO uint32_t*)(0x5C001004) |= 0x00700000; // DBGMCU_CR D3DBGCKEN D1DBGCKEN TRACECLKEN
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <SWD_Init+0x80>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <SWD_Init+0x80>)
 8000812:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8000816:	6013      	str	r3, [r2, #0]

  //UNLOCK FUNNEL
  *(__IO uint32_t*)(0x5C004FB0) = 0xC5ACCE55; // SWTF_LAR
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <SWD_Init+0x84>)
 800081a:	4a1d      	ldr	r2, [pc, #116]	; (8000890 <SWD_Init+0x88>)
 800081c:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(0x5C003FB0) = 0xC5ACCE55; // SWO_LAR
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <SWD_Init+0x8c>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <SWD_Init+0x88>)
 8000822:	601a      	str	r2, [r3, #0]

  //SWO current output divisor register
  //This divisor value (0x000000C7) corresponds to 400Mhz
  //To change it, you can use the following rule
  // value = (CPU Freq/sw speed )-1
   *(__IO uint32_t*)(0x5C003010) = ((SystemCoreClock / 2000000) - 1); // SWO_CODR
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <SWD_Init+0x90>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1c      	ldr	r2, [pc, #112]	; (800089c <SWD_Init+0x94>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	0cdb      	lsrs	r3, r3, #19
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <SWD_Init+0x98>)
 8000832:	3b01      	subs	r3, #1
 8000834:	6013      	str	r3, [r2, #0]

  //SWO selected pin protocol register
   *(__IO uint32_t*)(0x5C0030F0) = 0x00000002; // SWO_SPPR
 8000836:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <SWD_Init+0x9c>)
 8000838:	2202      	movs	r2, #2
 800083a:	601a      	str	r2, [r3, #0]

  //Enable ITM input of SWO trace funnel
   *(__IO uint32_t*)(0x5C004000) |= 0x00000001; // SWFT_CTRL
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <SWD_Init+0xa0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <SWD_Init+0xa0>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6013      	str	r3, [r2, #0]

  //RCC_AHB4ENR enable GPIOB clock
   *(__IO uint32_t*)(0x580244E0) |= 0x00000002;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <SWD_Init+0xa4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <SWD_Init+0xa4>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	6013      	str	r3, [r2, #0]

  // Configure GPIOB pin 3 as AF
   *(__IO uint32_t*)(0x58020400) = (*(__IO uint32_t*)(0x58020400) & 0xffffff3f) | 0x00000080;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <SWD_Init+0xa8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800085c:	4a14      	ldr	r2, [pc, #80]	; (80008b0 <SWD_Init+0xa8>)
 800085e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000862:	6013      	str	r3, [r2, #0]

  // Configure GPIOB pin 3 Speed
   *(__IO uint32_t*)(0x58020408) |= 0x00000080;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <SWD_Init+0xac>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <SWD_Init+0xac>)
 800086a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086e:	6013      	str	r3, [r2, #0]

  // Force AF0 for GPIOB pin 3
   *(__IO uint32_t*)(0x58020420) &= 0xFFFF0FFF;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <SWD_Init+0xb0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <SWD_Init+0xb0>)
 8000876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	5c001004 	.word	0x5c001004
 800088c:	5c004fb0 	.word	0x5c004fb0
 8000890:	c5acce55 	.word	0xc5acce55
 8000894:	5c003fb0 	.word	0x5c003fb0
 8000898:	24000000 	.word	0x24000000
 800089c:	431bde83 	.word	0x431bde83
 80008a0:	5c003010 	.word	0x5c003010
 80008a4:	5c0030f0 	.word	0x5c0030f0
 80008a8:	5c004000 	.word	0x5c004000
 80008ac:	580244e0 	.word	0x580244e0
 80008b0:	58020400 	.word	0x58020400
 80008b4:	58020408 	.word	0x58020408
 80008b8:	58020420 	.word	0x58020420

080008bc <__io_putchar>:

int __io_putchar(int ch){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
   ITM_SendChar(ch);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff76 	bl	80007b8 <ITM_SendChar>
}
 80008cc:	bf00      	nop
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <myprintf2>:
  _write(0, (char*)buffer,len);
  //HAL_USART_Transmit(&husart2, (uint8_t*)buffer, len, -1);

}

void myprintf2(const char *fmt, ...) {
 80008d8:	b40f      	push	{r0, r1, r2, r3}
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	2164      	movs	r1, #100	; 0x64
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <myprintf2+0x44>)
 80008ee:	f00a f9c9 	bl	800ac84 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80008f2:	480a      	ldr	r0, [pc, #40]	; (800091c <myprintf2+0x44>)
 80008f4:	f7ff fcf4 	bl	80002e0 <strlen>
 80008f8:	4603      	mov	r3, r0
 80008fa:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	4905      	ldr	r1, [pc, #20]	; (800091c <myprintf2+0x44>)
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <myprintf2+0x48>)
 8000908:	f009 f87b 	bl	8009a02 <HAL_UART_Transmit>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000916:	b004      	add	sp, #16
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	24018a34 	.word	0x24018a34
 8000920:	24000234 	.word	0x24000234

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef _time;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800092a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800092e:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000930:	bf00      	nop
 8000932:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <main+0x10c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <main+0x24>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	61fa      	str	r2, [r7, #28]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dcf4      	bgt.n	8000932 <main+0xe>
  if ( timeout < 0 )
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	2b00      	cmp	r3, #0
 800094c:	da01      	bge.n	8000952 <main+0x2e>
  {
  Error_Handler();
 800094e:	f000 fbf5 	bl	800113c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000952:	f000 feb5 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000956:	f000 f879 	bl	8000a4c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800095a:	f000 f8f1 	bl	8000b40 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800095e:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <main+0x10c>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <main+0x10c>)
 8000966:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <main+0x10c>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097c:	2000      	movs	r0, #0
 800097e:	f004 ff1b 	bl	80057b8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000982:	2100      	movs	r1, #0
 8000984:	2000      	movs	r0, #0
 8000986:	f004 ff31 	bl	80057ec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <main+0x10c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <main+0x84>
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	61fa      	str	r2, [r7, #28]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dcf4      	bgt.n	8000992 <main+0x6e>
if ( timeout < 0 )
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da01      	bge.n	80009b2 <main+0x8e>
{
Error_Handler();
 80009ae:	f000 fbc5 	bl	800113c <Error_Handler>
}
/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
  SWD_Init();
 80009b2:	f7ff ff29 	bl	8000808 <SWD_Init>
  write(0,"Hello",5);
 80009b6:	2205      	movs	r2, #5
 80009b8:	491e      	ldr	r1, [pc, #120]	; (8000a34 <main+0x110>)
 80009ba:	2000      	movs	r0, #0
 80009bc:	f00a f9b6 	bl	800ad2c <write>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f000 fa6a 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c4:	f000 fa48 	bl	8000e58 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80009c8:	f000 fb6c 	bl	80010a4 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80009cc:	f000 f94e 	bl	8000c6c <MX_ADC1_Init>
  MX_ADC2_Init();
 80009d0:	f000 f9d6 	bl	8000d80 <MX_ADC2_Init>
  MX_RTC_Init();
 80009d4:	f000 f8e4 	bl	8000ba0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BCD);
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2201      	movs	r2, #1
 80009dc:	4619      	mov	r1, r3
 80009de:	4816      	ldr	r0, [pc, #88]	; (8000a38 <main+0x114>)
 80009e0:	f008 fd76 	bl	80094d0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BCD);
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <main+0x114>)
 80009ee:	f008 fe53 	bl	8009698 <HAL_RTC_GetDate>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t *)ADC_DualModeVal,4);
 80009f2:	2204      	movs	r2, #4
 80009f4:	4911      	ldr	r1, [pc, #68]	; (8000a3c <main+0x118>)
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <main+0x11c>)
 80009f8:	f002 f96c 	bl	8002cd4 <HAL_ADCEx_MultiModeStart_DMA>

  while (1)
  {

	  if(ctr==BUFFER_SIZE){
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <main+0x120>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d10b      	bne.n	8000a20 <main+0xfc>
    //  MovingAvg();
#if USE_FOR_LORA
			PeakDetectnEdge();
#endif
			//TransferDataADC();
			myprintf2("ADC0 : \n");
 8000a08:	480f      	ldr	r0, [pc, #60]	; (8000a48 <main+0x124>)
 8000a0a:	f7ff ff65 	bl	80008d8 <myprintf2>
			HAL_Delay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f000 fee7 	bl	80017e4 <HAL_Delay>
		  ctr=0;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <main+0x120>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
		  MX_DMA_Init();
 8000a1c:	f000 fa1c 	bl	8000e58 <MX_DMA_Init>
	  }

	  HAL_Delay(1000);
 8000a20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a24:	f000 fede 	bl	80017e4 <HAL_Delay>
	  myprintf2("ADC0 : \n");
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <main+0x124>)
 8000a2a:	f7ff ff55 	bl	80008d8 <myprintf2>
	  if(ctr==BUFFER_SIZE){
 8000a2e:	e7e5      	b.n	80009fc <main+0xd8>
 8000a30:	58024400 	.word	0x58024400
 8000a34:	0800b5f8 	.word	0x0800b5f8
 8000a38:	240002c8 	.word	0x240002c8
 8000a3c:	24018a20 	.word	0x24018a20
 8000a40:	2400007c 	.word	0x2400007c
 8000a44:	24018a30 	.word	0x24018a30
 8000a48:	0800b600 	.word	0x0800b600

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	; 0x70
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	224c      	movs	r2, #76	; 0x4c
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00a f920 	bl	800aca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2220      	movs	r2, #32
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00a f91a 	bl	800aca0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a6c:	2004      	movs	r0, #4
 8000a6e:	f004 fed1 	bl	8005814 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <SystemClock_Config+0xec>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <SystemClock_Config+0xec>)
 8000a7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <SystemClock_Config+0xec>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <SystemClock_Config+0xf0>)
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	4a2a      	ldr	r2, [pc, #168]	; (8000b3c <SystemClock_Config+0xf0>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <SystemClock_Config+0xf0>)
 8000a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa4:	bf00      	nop
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <SystemClock_Config+0xec>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab2:	d1f8      	bne.n	8000aa6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aca:	2378      	movs	r3, #120	; 0x78
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ada:	230c      	movs	r3, #12
 8000adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f004 feec 	bl	80058c8 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000af6:	f000 fb21 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	233f      	movs	r3, #63	; 0x3f
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b06:	2308      	movs	r3, #8
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2104      	movs	r1, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f005 fb2b 	bl	800617c <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b2c:	f000 fb06 	bl	800113c <Error_Handler>
  }

   //HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_8);

}
 8000b30:	bf00      	nop
 8000b32:	3770      	adds	r7, #112	; 0x70
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024800 	.word	0x58024800
 8000b3c:	58000400 	.word	0x58000400

08000b40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0b0      	sub	sp, #192	; 0xc0
 8000b44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	22c0      	movs	r2, #192	; 0xc0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f00a f8a7 	bl	800aca0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b56:	f04f 0300 	mov.w	r3, #0
 8000b5a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000b62:	2314      	movs	r3, #20
 8000b64:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000b66:	2304      	movs	r3, #4
 8000b68:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b72:	23c0      	movs	r3, #192	; 0xc0
 8000b74:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b76:	2320      	movs	r3, #32
 8000b78:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4618      	mov	r0, r3
 8000b88:	f005 fe84 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000b92:	f000 fad3 	bl	800113c <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	37c0      	adds	r7, #192	; 0xc0
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bba:	4a2b      	ldr	r2, [pc, #172]	; (8000c68 <MX_RTC_Init+0xc8>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bc6:	227f      	movs	r2, #127	; 0x7f
 8000bc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bcc:	22ff      	movs	r2, #255	; 0xff
 8000bce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bd6:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be8:	481e      	ldr	r0, [pc, #120]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000bea:	f008 fb51 	bl	8009290 <HAL_RTC_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000bf4:	f000 faa2 	bl	800113c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = HOURS;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MINUTES;
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	4814      	ldr	r0, [pc, #80]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000c14:	f008 fbbe 	bl	8009394 <HAL_RTC_SetTime>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000c1e:	f000 fa8d 	bl	800113c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000c22:	2307      	movs	r3, #7
 8000c24:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8000c26:	2310      	movs	r3, #16
 8000c28:	707b      	strb	r3, [r7, #1]
  sDate.Date = DATE;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8000c2e:	2323      	movs	r3, #35	; 0x23
 8000c30:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	2201      	movs	r2, #1
 8000c36:	4619      	mov	r1, r3
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000c3a:	f008 fca5 	bl	8009588 <HAL_RTC_SetDate>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000c44:	f000 fa7a 	bl	800113c <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000c48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_RTC_Init+0xc4>)
 8000c4e:	f008 fe41 	bl	80098d4 <HAL_RTCEx_SetCalibrationOutPut>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000c58:	f000 fa70 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	240002c8 	.word	0x240002c8
 8000c68:	58004000 	.word	0x58004000

08000c6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c90:	4b38      	ldr	r3, [pc, #224]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000c92:	4a39      	ldr	r2, [pc, #228]	; (8000d78 <MX_ADC1_Init+0x10c>)
 8000c94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c96:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca8:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cba:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc6:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd8:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cde:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ce4:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cec:	4821      	ldr	r0, [pc, #132]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000cee:	f000 ff8f 	bl	8001c10 <HAL_ADC_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf8:	f000 fa20 	bl	800113c <Error_Handler>



  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_ADC1_Init+0x110>)
 8000cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d00:	2306      	movs	r3, #6
 8000d02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4815      	ldr	r0, [pc, #84]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000d20:	f001 f92c 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000d2a:	f000 fa07 	bl	800113c <Error_Handler>
  }

/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000d2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000d36:	480f      	ldr	r0, [pc, #60]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000d38:	f001 ff68 	bl	8002c0c <HAL_ADCEx_Calibration_Start>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0xda>
  {
    /* Calibration Error */
    Error_Handler();
 8000d42:	f000 f9fb 	bl	800113c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000d46:	2307      	movs	r3, #7
 8000d48:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d4e:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_ADC1_Init+0x108>)
 8000d5c:	f002 f86a 	bl	8002e34 <HAL_ADCEx_MultiModeConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d66:	f000 f9e9 	bl	800113c <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2400007c 	.word	0x2400007c
 8000d78:	40022000 	.word	0x40022000
 8000d7c:	0c900008 	.word	0x0c900008

08000d80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d98:	4b2c      	ldr	r3, [pc, #176]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <MX_ADC2_Init+0xd0>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc8:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dce:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000de8:	4818      	ldr	r0, [pc, #96]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000dea:	f000 ff11 	bl	8001c10 <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000df4:	f000 f9a2 	bl	800113c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_ADC2_Init+0xd4>)
 8000dfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e04:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e08:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000e1c:	f001 f8ae 	bl	8001f7c <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000e26:	f000 f989 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000e2a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_ADC2_Init+0xcc>)
 8000e34:	f001 feea 	bl	8002c0c <HAL_ADCEx_Calibration_Start>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC2_Init+0xc2>
  {
    /* Calibration Error */
    Error_Handler();
 8000e3e:	f000 f97d 	bl	800113c <Error_Handler>
  }
  /* USER CODE END ADC2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3720      	adds	r7, #32
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	240000e0 	.word	0x240000e0
 8000e50:	40022100 	.word	0x40022100
 8000e54:	0c900008 	.word	0x0c900008

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	200b      	movs	r0, #11
 8000e82:	f002 f9b4 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e86:	200b      	movs	r0, #11
 8000e88:	f002 f9cb 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);

}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58024400 	.word	0x58024400

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	4a43      	ldr	r2, [pc, #268]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eae:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a3c      	ldr	r2, [pc, #240]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a2d      	ldr	r2, [pc, #180]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f1e:	f043 0308 	orr.w	r3, r3, #8
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]


 GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_GPIO_Init+0x11c>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]

  /* Configure PC.13 pin as the EXTI input event line in interrupt mode for both CPU1 and CPU2*/
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;    /* current CPU (CM7) config in IT rising */
 8000f70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5;
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  //HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;    /* current CPU (CM7) config in IT rising */
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_9;
 8000f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000f9c:	f004 fa42 	bl	8005424 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_GPIO_Init+0x120>)
 8000fa8:	f004 fbec 	bl	8005784 <HAL_GPIO_WritePin>
  /* Configure the second CPU (CM4) EXTI line for IT*/
 // HAL_EXTI_D1_EventInputConfig(EXTI_LINE5 , EXTI_MODE_IT,  ENABLE);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fac:	bf00      	nop
 8000fae:	3730      	adds	r7, #48	; 0x30
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020800 	.word	0x58020800

08000fbc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    if(ctr < BUFFER_SIZE){
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d85c      	bhi.n	800108a <HAL_ADC_ConvCpltCallback+0xce>
        PA6_Data[ctr++] = ADC_DualModeVal[0] & 0XFFFF;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	492f      	ldr	r1, [pc, #188]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fdc:	600a      	str	r2, [r1, #0]
 8000fde:	b281      	uxth	r1, r0
 8000fe0:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000fe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        PA6_Data[ctr++] = (ADC_DualModeVal[0] >> 16) & 0XFFFF ;
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0c18      	lsrs	r0, r3, #16
 8000fec:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	4929      	ldr	r1, [pc, #164]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000ff4:	600a      	str	r2, [r1, #0]
 8000ff6:	b281      	uxth	r1, r0
 8000ff8:	4a29      	ldr	r2, [pc, #164]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000ffa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        PA6_Data[ctr++] = ADC_DualModeVal[1] & 0XFFFF ;
 8000ffe:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 8001000:	6858      	ldr	r0, [r3, #4]
 8001002:	4b25      	ldr	r3, [pc, #148]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	4923      	ldr	r1, [pc, #140]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 800100a:	600a      	str	r2, [r1, #0]
 800100c:	b281      	uxth	r1, r0
 800100e:	4a24      	ldr	r2, [pc, #144]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001010:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        PA6_Data[ctr++] = (ADC_DualModeVal[1] >> 16) & 0XFFFF ;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	0c18      	lsrs	r0, r3, #16
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	491d      	ldr	r1, [pc, #116]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001022:	600a      	str	r2, [r1, #0]
 8001024:	b281      	uxth	r1, r0
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001028:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = ADC_DualModeVal[2] & 0XFFFF ;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 800102e:	6898      	ldr	r0, [r3, #8]
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	4918      	ldr	r1, [pc, #96]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001038:	600a      	str	r2, [r1, #0]
 800103a:	b281      	uxth	r1, r0
 800103c:	4a18      	ldr	r2, [pc, #96]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800103e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = (ADC_DualModeVal[2] >> 16) & 0XFFFF ;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	0c18      	lsrs	r0, r3, #16
 8001048:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	4912      	ldr	r1, [pc, #72]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001050:	600a      	str	r2, [r1, #0]
 8001052:	b281      	uxth	r1, r0
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001056:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = ADC_DualModeVal[3] & 0XFFFF ;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 800105c:	68d8      	ldr	r0, [r3, #12]
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001066:	600a      	str	r2, [r1, #0]
 8001068:	b281      	uxth	r1, r0
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 800106c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		PA6_Data[ctr++] = (ADC_DualModeVal[3] >> 16) & 0XFFFF ;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_ADC_ConvCpltCallback+0xe0>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0c18      	lsrs	r0, r3, #16
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <HAL_ADC_ConvCpltCallback+0xdc>)
 800107e:	600a      	str	r2, [r1, #0]
 8001080:	b281      	uxth	r1, r0
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001084:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		//HAL_ADC_Stop(&hadc2);
   //   HAL_ADCEx_MultiModeStop_DMA(&hdma_adc1);

    }

}
 8001088:	e002      	b.n	8001090 <HAL_ADC_ConvCpltCallback+0xd4>
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 800108a:	200b      	movs	r0, #11
 800108c:	f002 f8d7 	bl	800323e <HAL_NVIC_DisableIRQ>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	24018a30 	.word	0x24018a30
 800109c:	24018a20 	.word	0x24018a20
 80010a0:	24000380 	.word	0x24000380

080010a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <MX_LPUART1_UART_Init+0x94>)
 80010ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80010ec:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 80010ee:	f008 fc38 	bl	8009962 <HAL_UART_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80010f8:	f000 f820 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	480d      	ldr	r0, [pc, #52]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 8001100:	f009 fcc9 	bl	800aa96 <HAL_UARTEx_SetTxFifoThreshold>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800110a:	f000 f817 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4808      	ldr	r0, [pc, #32]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 8001112:	f009 fcfe 	bl	800ab12 <HAL_UARTEx_SetRxFifoThreshold>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800111c:	f000 f80e 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_LPUART1_UART_Init+0x90>)
 8001122:	f009 fc7f 	bl	800aa24 <HAL_UARTEx_DisableFifoMode>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 f806 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	240002ec 	.word	0x240002ec
 8001138:	58000c00 	.word	0x58000c00

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_MspInit+0x30>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001154:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_MspInit+0x30>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_MspInit+0x30>)
 8001160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	58024400 	.word	0x58024400

0800117c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	; 0x30
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_ADC_MspInit+0x180>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d17d      	bne.n	800129a <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011a4:	4a56      	ldr	r2, [pc, #344]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ae:	4b54      	ldr	r3, [pc, #336]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011bc:	4b51      	ldr	r3, [pc, #324]	; (8001304 <HAL_ADC_MspInit+0x188>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a50      	ldr	r2, [pc, #320]	; (8001304 <HAL_ADC_MspInit+0x188>)
 80011c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011c6:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <HAL_ADC_MspInit+0x188>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10e      	bne.n	80011ec <HAL_ADC_MspInit+0x70>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d4:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011de:	4b48      	ldr	r3, [pc, #288]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b44      	ldr	r3, [pc, #272]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	4a43      	ldr	r2, [pc, #268]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fc:	4b40      	ldr	r3, [pc, #256]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	483a      	ldr	r0, [pc, #232]	; (8001308 <HAL_ADC_MspInit+0x18c>)
 800121e:	f004 f901 	bl	8005424 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001224:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <HAL_ADC_MspInit+0x194>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001228:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_ADC_MspInit+0x190>)
 800122a:	2209      	movs	r2, #9
 800122c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122e:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001234:	4b35      	ldr	r3, [pc, #212]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800123a:	4b34      	ldr	r3, [pc, #208]	; (800130c <HAL_ADC_MspInit+0x190>)
 800123c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001240:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001244:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001248:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <HAL_ADC_MspInit+0x190>)
 800124c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001250:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001252:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_ADC_MspInit+0x190>)
 800125c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001260:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001264:	2204      	movs	r2, #4
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_ADC_MspInit+0x190>)
 800126a:	2203      	movs	r2, #3
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001270:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001278:	2200      	movs	r2, #0
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <HAL_ADC_MspInit+0x190>)
 800127e:	f001 fff9 	bl	8003274 <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8001288:	f7ff ff58 	bl	800113c <Error_Handler>
    }

   __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a1f      	ldr	r2, [pc, #124]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001290:	64da      	str	r2, [r3, #76]	; 0x4c
 8001292:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_ADC_MspInit+0x190>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6393      	str	r3, [r2, #56]	; 0x38
    // HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
    // HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001298:	e02b      	b.n	80012f2 <HAL_ADC_MspInit+0x176>
  else if(hadc->Instance==ADC2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_ADC_MspInit+0x198>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d126      	bne.n	80012f2 <HAL_ADC_MspInit+0x176>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_ADC_MspInit+0x188>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	4a16      	ldr	r2, [pc, #88]	; (8001304 <HAL_ADC_MspInit+0x188>)
 80012ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_ADC_MspInit+0x188>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10e      	bne.n	80012d4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80012b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012bc:	4a10      	ldr	r2, [pc, #64]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80012c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_ADC_MspInit+0x184>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
}
 80012f2:	bf00      	nop
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40022000 	.word	0x40022000
 8001300:	58024400 	.word	0x58024400
 8001304:	24018a98 	.word	0x24018a98
 8001308:	58020000 	.word	0x58020000
 800130c:	24000144 	.word	0x24000144
 8001310:	40020010 	.word	0x40020010
 8001314:	40022100 	.word	0x40022100

08001318 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ba      	sub	sp, #232	; 0xe8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	22c0      	movs	r2, #192	; 0xc0
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f009 fcb1 	bl	800aca0 <memset>
  if(hrtc->Instance==RTC)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_RTC_MspInit+0xb4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d13d      	bne.n	80013c4 <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001348:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	4618      	mov	r0, r3
 8001362:	f005 fa97 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 800136c:	f7ff fee6 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_RTC_MspInit+0xb8>)
 8001372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001374:	4a16      	ldr	r2, [pc, #88]	; (80013d0 <HAL_RTC_MspInit+0xb8>)
 8001376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137a:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_RTC_MspInit+0xb8>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_RTC_MspInit+0xb8>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RTC_MspInit+0xb8>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800139a:	2304      	movs	r3, #4
 800139c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013bc:	4619      	mov	r1, r3
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_RTC_MspInit+0xbc>)
 80013c0:	f004 f830 	bl	8005424 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013c4:	bf00      	nop
 80013c6:	37e8      	adds	r7, #232	; 0xe8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	58004000 	.word	0x58004000
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020400 	.word	0x58020400

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b0bc      	sub	sp, #240	; 0xf0
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f107 0318 	add.w	r3, r7, #24
 80013f4:	22c0      	movs	r2, #192	; 0xc0
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f009 fc51 	bl	800aca0 <memset>

  if(huart->Instance==LPUART1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a4d      	ldr	r2, [pc, #308]	; (8001538 <HAL_UART_MspInit+0x160>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d146      	bne.n	8001496 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001408:	f04f 0204 	mov.w	r2, #4
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fa38 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800142a:	f7ff fe87 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_UART_MspInit+0x164>)
 8001430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001434:	4a41      	ldr	r2, [pc, #260]	; (800153c <HAL_UART_MspInit+0x164>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_UART_MspInit+0x164>)
 8001440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144c:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_UART_MspInit+0x164>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	4a3a      	ldr	r2, [pc, #232]	; (800153c <HAL_UART_MspInit+0x164>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800145c:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_UART_MspInit+0x164>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8001482:	2308      	movs	r3, #8
 8001484:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800148c:	4619      	mov	r1, r3
 800148e:	482c      	ldr	r0, [pc, #176]	; (8001540 <HAL_UART_MspInit+0x168>)
 8001490:	f003 ffc8 	bl	8005424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001494:	e04b      	b.n	800152e <HAL_UART_MspInit+0x156>
  if(huart->Instance==USART3)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <HAL_UART_MspInit+0x16c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d146      	bne.n	800152e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014a0:	f04f 0202 	mov.w	r2, #2
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b2:	f107 0318 	add.w	r3, r7, #24
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 f9ec 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80014c2:	f7ff fe3b 	bl	800113c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_UART_MspInit+0x164>)
 80014c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_UART_MspInit+0x164>)
 80014ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_UART_MspInit+0x164>)
 80014d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_UART_MspInit+0x164>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	4a14      	ldr	r2, [pc, #80]	; (800153c <HAL_UART_MspInit+0x164>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_UART_MspInit+0x164>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800151c:	2307      	movs	r3, #7
 800151e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001522:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	; (8001548 <HAL_UART_MspInit+0x170>)
 800152a:	f003 ff7b 	bl	8005424 <HAL_GPIO_Init>
}
 800152e:	bf00      	nop
 8001530:	37f0      	adds	r7, #240	; 0xf0
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	58000c00 	.word	0x58000c00
 800153c:	58024400 	.word	0x58024400
 8001540:	58020400 	.word	0x58020400
 8001544:	40004800 	.word	0x40004800
 8001548:	58020c00 	.word	0x58020c00

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001598:	f000 f904 	bl	80017a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a4:	4802      	ldr	r0, [pc, #8]	; (80015b0 <DMA1_Stream0_IRQHandler+0x10>)
 80015a6:	f002 fc2b 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000144 	.word	0x24000144

080015b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015b8:	4802      	ldr	r0, [pc, #8]	; (80015c4 <DMA1_Stream1_IRQHandler+0x10>)
 80015ba:	f002 fc21 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	240001bc 	.word	0x240001bc

080015c8 <_write>:

  return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	e009      	b.n	80015ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	60ba      	str	r2, [r7, #8]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f96a 	bl	80008bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dbf1      	blt.n	80015da <_write+0x12>
  }
  return len;
 80015f6:	687b      	ldr	r3, [r7, #4]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f009 fb50 	bl	800acd4 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	24080000 	.word	0x24080000
 8001660:	00000400 	.word	0x00000400
 8001664:	24018a9c 	.word	0x24018a9c
 8001668:	24018bf0 	.word	0x24018bf0

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001670:	f7ff f80c 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f009 fb21 	bl	800ace0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff f941 	bl	8000924 <main>
  bx  lr
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016ac:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80016b0:	0800b690 	.word	0x0800b690
  ldr r2, =_sbss
 80016b4:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80016b8:	24018bec 	.word	0x24018bec

080016bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC3_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c6:	2003      	movs	r0, #3
 80016c8:	f001 fd86 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016cc:	f004 ff0c 	bl	80064e8 <HAL_RCC_GetSysClockFreq>
 80016d0:	4602      	mov	r2, r0
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_Init+0x68>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	4913      	ldr	r1, [pc, #76]	; (800172c <HAL_Init+0x6c>)
 80016de:	5ccb      	ldrb	r3, [r1, r3]
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_Init+0x68>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_Init+0x6c>)
 80016f4:	5cd3      	ldrb	r3, [r2, r3]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_Init+0x70>)
 8001702:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_Init+0x74>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f814 	bl	8001738 <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e002      	b.n	8001720 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800171a:	f7ff fd15 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	58024400 	.word	0x58024400
 800172c:	0800b60c 	.word	0x0800b60c
 8001730:	24000004 	.word	0x24000004
 8001734:	24000000 	.word	0x24000000

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_InitTick+0x60>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e021      	b.n	8001790 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_InitTick+0x64>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_InitTick+0x60>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fd79 	bl	800325a <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e00e      	b.n	8001790 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d80a      	bhi.n	800178e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001778:	2200      	movs	r2, #0
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f001 fd35 	bl	80031ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_InitTick+0x68>)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e000      	b.n	8001790 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2400000c 	.word	0x2400000c
 800179c:	24000000 	.word	0x24000000
 80017a0:	24000008 	.word	0x24000008

080017a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_IncTick+0x20>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x24>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_IncTick+0x24>)
 80017b6:	6013      	str	r3, [r2, #0]
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	2400000c 	.word	0x2400000c
 80017c8:	24018aa0 	.word	0x24018aa0

080017cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <HAL_GetTick+0x14>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	24018aa0 	.word	0x24018aa0

080017e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ec:	f7ff ffee 	bl	80017cc <HAL_GetTick>
 80017f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d005      	beq.n	800180a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_Delay+0x44>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180a:	bf00      	nop
 800180c:	f7ff ffde 	bl	80017cc <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d8f7      	bhi.n	800180c <HAL_Delay+0x28>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2400000c 	.word	0x2400000c

0800182c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetREVID+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1b      	lsrs	r3, r3, #16
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	5c001000 	.word	0x5c001000

08001844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	609a      	str	r2, [r3, #8]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	431a      	orrs	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	611a      	str	r2, [r3, #16]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800191e:	b480      	push	{r7}
 8001920:	b087      	sub	sp, #28
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3360      	adds	r3, #96	; 0x60
 800192e:	461a      	mov	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	431a      	orrs	r2, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	601a      	str	r2, [r3, #0]
  }
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800197a:	b480      	push	{r7}
 800197c:	b087      	sub	sp, #28
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3330      	adds	r3, #48	; 0x30
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	211f      	movs	r1, #31
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 011f 	and.w	r1, r3, #31
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3314      	adds	r3, #20
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	0e5b      	lsrs	r3, r3, #25
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0d1b      	lsrs	r3, r3, #20
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2107      	movs	r1, #7
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0318 	and.w	r3, r3, #24
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	400b      	ands	r3, r1
 8001a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a56:	431a      	orrs	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	000fffff 	.word	0x000fffff

08001a70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6093      	str	r3, [r2, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	5fffffc0 	.word	0x5fffffc0

08001ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac4:	d101      	bne.n	8001aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <LL_ADC_EnableInternalRegulator+0x24>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	6fffffc0 	.word	0x6fffffc0

08001b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <LL_ADC_Enable+0x24>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	7fffffc0 	.word	0x7fffffc0

08001b50 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <LL_ADC_Disable+0x24>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	f043 0202 	orr.w	r2, r3, #2
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	7fffffc0 	.word	0x7fffffc0

08001b78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <LL_ADC_IsEnabled+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_ADC_IsEnabled+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d101      	bne.n	8001bb6 <LL_ADC_IsDisableOngoing+0x18>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_ADC_IsDisableOngoing+0x1a>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d101      	bne.n	8001bdc <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d101      	bne.n	8001c02 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c10:	b590      	push	{r4, r7, lr}
 8001c12:	b089      	sub	sp, #36	; 0x24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e18f      	b.n	8001f4a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff fa9f 	bl	800117c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff2d 	bl	8001ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff13 	bl	8001a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff48 	bl	8001b00 <LL_ADC_IsInternalRegulatorEnabled>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d114      	bne.n	8001ca0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff2c 	bl	8001ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c80:	4b87      	ldr	r3, [pc, #540]	; (8001ea0 <HAL_ADC_Init+0x290>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	4a87      	ldr	r2, [pc, #540]	; (8001ea4 <HAL_ADC_Init+0x294>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c92:	e002      	b.n	8001c9a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f9      	bne.n	8001c94 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff2b 	bl	8001b00 <LL_ADC_IsInternalRegulatorEnabled>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10d      	bne.n	8001ccc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f043 0210 	orr.w	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff77 	bl	8001bc4 <LL_ADC_REG_IsConversionOngoing>
 8001cd6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f040 8129 	bne.w	8001f38 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 8125 	bne.w	8001f38 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff38 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d136      	bne.n	8001d7c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <HAL_ADC_Init+0x298>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Init+0x112>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a63      	ldr	r2, [pc, #396]	; (8001eac <HAL_ADC_Init+0x29c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10e      	bne.n	8001d40 <HAL_ADC_Init+0x130>
 8001d22:	4861      	ldr	r0, [pc, #388]	; (8001ea8 <HAL_ADC_Init+0x298>)
 8001d24:	f7ff ff28 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d28:	4604      	mov	r4, r0
 8001d2a:	4860      	ldr	r0, [pc, #384]	; (8001eac <HAL_ADC_Init+0x29c>)
 8001d2c:	f7ff ff24 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4323      	orrs	r3, r4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	e008      	b.n	8001d52 <HAL_ADC_Init+0x142>
 8001d40:	485b      	ldr	r0, [pc, #364]	; (8001eb0 <HAL_ADC_Init+0x2a0>)
 8001d42:	f7ff ff19 	bl	8001b78 <LL_ADC_IsEnabled>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a53      	ldr	r2, [pc, #332]	; (8001ea8 <HAL_ADC_Init+0x298>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_ADC_Init+0x15a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a51      	ldr	r2, [pc, #324]	; (8001eac <HAL_ADC_Init+0x29c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_Init+0x15e>
 8001d6a:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_ADC_Init+0x2a4>)
 8001d6c:	e000      	b.n	8001d70 <HAL_ADC_Init+0x160>
 8001d6e:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_ADC_Init+0x2a8>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f7ff fd64 	bl	8001844 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d7c:	f7ff fd56 	bl	800182c <HAL_GetREVID>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d914      	bls.n	8001db4 <HAL_ADC_Init+0x1a4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d110      	bne.n	8001db4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7d5b      	ldrb	r3, [r3, #21]
 8001d96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d9c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001da2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7f1b      	ldrb	r3, [r3, #28]
 8001da8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001daa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dac:	f043 030c 	orr.w	r3, r3, #12
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	e00d      	b.n	8001dd0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7d5b      	ldrb	r3, [r3, #21]
 8001db8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dbe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001dc4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7f1b      	ldrb	r3, [r3, #28]
 8001dca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7f1b      	ldrb	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d106      	bne.n	8001de6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	045b      	lsls	r3, r3, #17
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <HAL_ADC_Init+0x2ac>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	69b9      	ldr	r1, [r7, #24]
 8001e12:	430b      	orrs	r3, r1
 8001e14:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fed2 	bl	8001bc4 <LL_ADC_REG_IsConversionOngoing>
 8001e20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fedf 	bl	8001bea <LL_ADC_INJ_IsConversionOngoing>
 8001e2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d15f      	bne.n	8001ef4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d15c      	bne.n	8001ef4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7d1b      	ldrb	r3, [r3, #20]
 8001e3e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_ADC_Init+0x2b0>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d130      	bne.n	8001ec8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_ADC_Init+0x2b4>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	0411      	lsls	r1, r2, #16
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e82:	4311      	orrs	r1, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	e01c      	b.n	8001ed8 <HAL_ADC_Init+0x2c8>
 8001e9e:	bf00      	nop
 8001ea0:	24000000 	.word	0x24000000
 8001ea4:	053e2d63 	.word	0x053e2d63
 8001ea8:	40022000 	.word	0x40022000
 8001eac:	40022100 	.word	0x40022100
 8001eb0:	58026000 	.word	0x58026000
 8001eb4:	40022300 	.word	0x40022300
 8001eb8:	58026300 	.word	0x58026300
 8001ebc:	fff0c003 	.word	0xfff0c003
 8001ec0:	ffffbffc 	.word	0xffffbffc
 8001ec4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 fd12 	bl	8002918 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10c      	bne.n	8001f16 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f023 010f 	bic.w	r1, r3, #15
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	1e5a      	subs	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
 8001f14:	e007      	b.n	8001f26 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 020f 	bic.w	r2, r2, #15
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	655a      	str	r2, [r3, #84]	; 0x54
 8001f36:	e007      	b.n	8001f48 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop

08001f54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b0a1      	sub	sp, #132	; 0x84
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a9d      	ldr	r2, [pc, #628]	; (800220c <HAL_ADC_ConfigChannel+0x290>)
 8001f96:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x2a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e321      	b.n	80025ea <HAL_ADC_ConfigChannel+0x66e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fe06 	bl	8001bc4 <LL_ADC_REG_IsConversionOngoing>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 8306 	bne.w	80025cc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d108      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x62>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	e016      	b.n	800200c <HAL_ADC_ConfigChannel+0x90>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e003      	b.n	8002002 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2201      	movs	r2, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	69d1      	ldr	r1, [r2, #28]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	430b      	orrs	r3, r1
 8002018:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f7ff fca7 	bl	800197a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fdc7 	bl	8001bc4 <LL_ADC_REG_IsConversionOngoing>
 8002036:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fdd4 	bl	8001bea <LL_ADC_INJ_IsConversionOngoing>
 8002042:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80b3 	bne.w	80021b2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800204c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80af 	bne.w	80021b2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6819      	ldr	r1, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	461a      	mov	r2, r3
 8002062:	f7ff fcb6 	bl	80019d2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_ADC_ConfigChannel+0x294>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800206e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002072:	d10b      	bne.n	800208c <HAL_ADC_ConfigChannel+0x110>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	e01d      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x14c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x136>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	e00a      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x14c>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d027      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6919      	ldr	r1, [r3, #16]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e0:	f7ff fbe4 	bl	80018ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6919      	ldr	r1, [r3, #16]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	7e5b      	ldrb	r3, [r3, #25]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x17e>
 80020f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020f8:	e000      	b.n	80020fc <HAL_ADC_ConfigChannel+0x180>
 80020fa:	2300      	movs	r3, #0
 80020fc:	461a      	mov	r2, r3
 80020fe:	f7ff fc0e 	bl	800191e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7e1b      	ldrb	r3, [r3, #24]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d102      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x19c>
 8002112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002116:	e000      	b.n	800211a <HAL_ADC_ConfigChannel+0x19e>
 8002118:	2300      	movs	r3, #0
 800211a:	461a      	mov	r2, r3
 800211c:	f7ff fbe6 	bl	80018ec <LL_ADC_SetDataRightShift>
 8002120:	e047      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002128:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	069b      	lsls	r3, r3, #26
 8002132:	429a      	cmp	r2, r3
 8002134:	d107      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002144:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	069b      	lsls	r3, r3, #26
 8002156:	429a      	cmp	r2, r3
 8002158:	d107      	bne.n	800216a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002168:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002170:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	069b      	lsls	r3, r3, #26
 800217a:	429a      	cmp	r2, r3
 800217c:	d107      	bne.n	800218e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800218c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	069b      	lsls	r3, r3, #26
 800219e:	429a      	cmp	r2, r3
 80021a0:	d107      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021b0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fcde 	bl	8001b78 <LL_ADC_IsEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 820d 	bne.w	80025de <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f7ff fc29 	bl	8001a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	4a0c      	ldr	r2, [pc, #48]	; (800220c <HAL_ADC_ConfigChannel+0x290>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	f040 8133 	bne.w	8002448 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d110      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x298>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0e9b      	lsrs	r3, r3, #26
 80021f8:	3301      	adds	r3, #1
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2b09      	cmp	r3, #9
 8002200:	bf94      	ite	ls
 8002202:	2301      	movls	r3, #1
 8002204:	2300      	movhi	r3, #0
 8002206:	b2db      	uxtb	r3, r3
 8002208:	e01e      	b.n	8002248 <HAL_ADC_ConfigChannel+0x2cc>
 800220a:	bf00      	nop
 800220c:	47ff0000 	.word	0x47ff0000
 8002210:	5c001000 	.word	0x5c001000
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002224:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e003      	b.n	8002238 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	2b09      	cmp	r3, #9
 8002240:	bf94      	ite	ls
 8002242:	2301      	movls	r3, #1
 8002244:	2300      	movhi	r3, #0
 8002246:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002248:	2b00      	cmp	r3, #0
 800224a:	d079      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x2ec>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	3301      	adds	r3, #1
 8002260:	069b      	lsls	r3, r3, #26
 8002262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002266:	e015      	b.n	8002294 <HAL_ADC_ConfigChannel+0x318>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002278:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800227a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e003      	b.n	800228c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3301      	adds	r3, #1
 800228e:	069b      	lsls	r3, r3, #26
 8002290:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x338>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	2101      	movs	r1, #1
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	e017      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x368>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e003      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80022d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2101      	movs	r1, #1
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	ea42 0103 	orr.w	r1, r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <HAL_ADC_ConfigChannel+0x38e>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	051b      	lsls	r3, r3, #20
 8002308:	e018      	b.n	800233c <HAL_ADC_ConfigChannel+0x3c0>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e003      	b.n	800232e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800233c:	430b      	orrs	r3, r1
 800233e:	e07e      	b.n	800243e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002348:	2b00      	cmp	r3, #0
 800234a:	d107      	bne.n	800235c <HAL_ADC_ConfigChannel+0x3e0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	3301      	adds	r3, #1
 8002354:	069b      	lsls	r3, r3, #26
 8002356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235a:	e015      	b.n	8002388 <HAL_ADC_ConfigChannel+0x40c>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002374:	2320      	movs	r3, #32
 8002376:	e003      	b.n	8002380 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3301      	adds	r3, #1
 8002382:	069b      	lsls	r3, r3, #26
 8002384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x42c>
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0e9b      	lsrs	r3, r3, #26
 800239a:	3301      	adds	r3, #1
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	e017      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x45c>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	61bb      	str	r3, [r7, #24]
  return result;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80023c0:	2320      	movs	r3, #32
 80023c2:	e003      	b.n	80023cc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2101      	movs	r1, #1
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	ea42 0103 	orr.w	r1, r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10d      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x488>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	3301      	adds	r3, #1
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	3b1e      	subs	r3, #30
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002402:	e01b      	b.n	800243c <HAL_ADC_ConfigChannel+0x4c0>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	fa93 f3a3 	rbit	r3, r3
 8002410:	60fb      	str	r3, [r7, #12]
  return result;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800241c:	2320      	movs	r3, #32
 800241e:	e003      	b.n	8002428 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	f003 021f 	and.w	r2, r3, #31
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	3b1e      	subs	r3, #30
 8002436:	051b      	lsls	r3, r3, #20
 8002438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243c:	430b      	orrs	r3, r1
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	6892      	ldr	r2, [r2, #8]
 8002442:	4619      	mov	r1, r3
 8002444:	f7ff fac5 	bl	80019d2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	f280 80c6 	bge.w	80025de <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a67      	ldr	r2, [pc, #412]	; (80025f4 <HAL_ADC_ConfigChannel+0x678>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d004      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x4ea>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x4ee>
 8002466:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_ADC_ConfigChannel+0x680>)
 8002468:	e000      	b.n	800246c <HAL_ADC_ConfigChannel+0x4f0>
 800246a:	4b65      	ldr	r3, [pc, #404]	; (8002600 <HAL_ADC_ConfigChannel+0x684>)
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fa0f 	bl	8001890 <LL_ADC_GetCommonPathInternalCh>
 8002472:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <HAL_ADC_ConfigChannel+0x678>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d004      	beq.n	8002488 <HAL_ADC_ConfigChannel+0x50c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10e      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x52a>
 8002488:	485a      	ldr	r0, [pc, #360]	; (80025f4 <HAL_ADC_ConfigChannel+0x678>)
 800248a:	f7ff fb75 	bl	8001b78 <LL_ADC_IsEnabled>
 800248e:	4604      	mov	r4, r0
 8002490:	4859      	ldr	r0, [pc, #356]	; (80025f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002492:	f7ff fb71 	bl	8001b78 <LL_ADC_IsEnabled>
 8002496:	4603      	mov	r3, r0
 8002498:	4323      	orrs	r3, r4
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	e008      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x53c>
 80024a6:	4857      	ldr	r0, [pc, #348]	; (8002604 <HAL_ADC_ConfigChannel+0x688>)
 80024a8:	f7ff fb66 	bl	8001b78 <LL_ADC_IsEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d07d      	beq.n	80025b8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a51      	ldr	r2, [pc, #324]	; (8002608 <HAL_ADC_ConfigChannel+0x68c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d130      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x5ac>
 80024c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d12b      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a4b      	ldr	r2, [pc, #300]	; (8002604 <HAL_ADC_ConfigChannel+0x688>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	f040 8081 	bne.w	80025de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a44      	ldr	r2, [pc, #272]	; (80025f4 <HAL_ADC_ConfigChannel+0x678>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x574>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <HAL_ADC_ConfigChannel+0x67c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x578>
 80024f0:	4a42      	ldr	r2, [pc, #264]	; (80025fc <HAL_ADC_ConfigChannel+0x680>)
 80024f2:	e000      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x57a>
 80024f4:	4a42      	ldr	r2, [pc, #264]	; (8002600 <HAL_ADC_ConfigChannel+0x684>)
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f7ff f9b3 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002504:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_ADC_ConfigChannel+0x690>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	4a41      	ldr	r2, [pc, #260]	; (8002610 <HAL_ADC_ConfigChannel+0x694>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002526:	e05a      	b.n	80025de <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a39      	ldr	r2, [pc, #228]	; (8002614 <HAL_ADC_ConfigChannel+0x698>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d11e      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x5f4>
 8002532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d119      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a30      	ldr	r2, [pc, #192]	; (8002604 <HAL_ADC_ConfigChannel+0x688>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d14b      	bne.n	80025de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_ADC_ConfigChannel+0x678>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <HAL_ADC_ConfigChannel+0x5de>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a28      	ldr	r2, [pc, #160]	; (80025f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_ADC_ConfigChannel+0x5e2>
 800255a:	4a28      	ldr	r2, [pc, #160]	; (80025fc <HAL_ADC_ConfigChannel+0x680>)
 800255c:	e000      	b.n	8002560 <HAL_ADC_ConfigChannel+0x5e4>
 800255e:	4a28      	ldr	r2, [pc, #160]	; (8002600 <HAL_ADC_ConfigChannel+0x684>)
 8002560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002562:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002566:	4619      	mov	r1, r3
 8002568:	4610      	mov	r0, r2
 800256a:	f7ff f97e 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800256e:	e036      	b.n	80025de <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a28      	ldr	r2, [pc, #160]	; (8002618 <HAL_ADC_ConfigChannel+0x69c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d131      	bne.n	80025de <HAL_ADC_ConfigChannel+0x662>
 800257a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d12c      	bne.n	80025de <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <HAL_ADC_ConfigChannel+0x688>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d127      	bne.n	80025de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_ADC_ConfigChannel+0x678>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0x626>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_ADC_ConfigChannel+0x67c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x62a>
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <HAL_ADC_ConfigChannel+0x680>)
 80025a4:	e000      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x62c>
 80025a6:	4a16      	ldr	r2, [pc, #88]	; (8002600 <HAL_ADC_ConfigChannel+0x684>)
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7ff f95a 	bl	800186a <LL_ADC_SetCommonPathInternalCh>
 80025b6:	e012      	b.n	80025de <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025ca:	e008      	b.n	80025de <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3784      	adds	r7, #132	; 0x84
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40022100 	.word	0x40022100
 80025fc:	40022300 	.word	0x40022300
 8002600:	58026300 	.word	0x58026300
 8002604:	58026000 	.word	0x58026000
 8002608:	cb840000 	.word	0xcb840000
 800260c:	24000000 	.word	0x24000000
 8002610:	053e2d63 	.word	0x053e2d63
 8002614:	c7520000 	.word	0xc7520000
 8002618:	cfb80000 	.word	0xcfb80000

0800261c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff faa5 	bl	8001b78 <LL_ADC_IsEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d16e      	bne.n	8002712 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <ADC_Enable+0x100>)
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f043 0210 	orr.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e05a      	b.n	8002714 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fa60 	bl	8001b28 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002668:	f7ff f8b0 	bl	80017cc <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <ADC_Enable+0x104>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <ADC_Enable+0x66>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a29      	ldr	r2, [pc, #164]	; (8002724 <ADC_Enable+0x108>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <ADC_Enable+0x6a>
 8002682:	4b29      	ldr	r3, [pc, #164]	; (8002728 <ADC_Enable+0x10c>)
 8002684:	e000      	b.n	8002688 <ADC_Enable+0x6c>
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <ADC_Enable+0x110>)
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff f9f1 	bl	8001a70 <LL_ADC_GetMultimode>
 800268e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a23      	ldr	r2, [pc, #140]	; (8002724 <ADC_Enable+0x108>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d002      	beq.n	80026a0 <ADC_Enable+0x84>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e000      	b.n	80026a2 <ADC_Enable+0x86>
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <ADC_Enable+0x104>)
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02c      	beq.n	8002704 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d130      	bne.n	8002712 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b0:	e028      	b.n	8002704 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fa5e 	bl	8001b78 <LL_ADC_IsEnabled>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d104      	bne.n	80026cc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fa2e 	bl	8001b28 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026cc:	f7ff f87e 	bl	80017cc <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d914      	bls.n	8002704 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d00d      	beq.n	8002704 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f043 0210 	orr.w	r2, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e007      	b.n	8002714 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d1cf      	bne.n	80026b2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	8000003f 	.word	0x8000003f
 8002720:	40022000 	.word	0x40022000
 8002724:	40022100 	.word	0x40022100
 8002728:	40022300 	.word	0x40022300
 800272c:	58026300 	.word	0x58026300

08002730 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fa2e 	bl	8001b9e <LL_ADC_IsDisableOngoing>
 8002742:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fa15 	bl	8001b78 <LL_ADC_IsEnabled>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d047      	beq.n	80027e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d144      	bne.n	80027e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 030d 	and.w	r3, r3, #13
 8002764:	2b01      	cmp	r3, #1
 8002766:	d10c      	bne.n	8002782 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f9ef 	bl	8001b50 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2203      	movs	r2, #3
 8002778:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277a:	f7ff f827 	bl	80017cc <HAL_GetTick>
 800277e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002780:	e029      	b.n	80027d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0210 	orr.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e023      	b.n	80027e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800279e:	f7ff f815 	bl	80017cc <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d914      	bls.n	80027d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e007      	b.n	80027e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1dc      	bne.n	800279e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002804:	2b00      	cmp	r3, #0
 8002806:	d14b      	bne.n	80028a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d021      	beq.n	8002866 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f894 	bl	8001954 <LL_ADC_REG_IsTriggerSourceSWStart>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d032      	beq.n	8002898 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d12b      	bne.n	8002898 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11f      	bne.n	8002898 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0201 	orr.w	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
 8002864:	e018      	b.n	8002898 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d111      	bne.n	8002898 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7fe fb8f 	bl	8000fbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800289e:	e00e      	b.n	80028be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff fb5b 	bl	8001f68 <HAL_ADC_ErrorCallback>
}
 80028b2:	e004      	b.n	80028be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff fb3d 	bl	8001f54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff fb2d 	bl	8001f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a7a      	ldr	r2, [pc, #488]	; (8002b10 <ADC_ConfigureBoostMode+0x1f8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <ADC_ConfigureBoostMode+0x1c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a79      	ldr	r2, [pc, #484]	; (8002b14 <ADC_ConfigureBoostMode+0x1fc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d109      	bne.n	8002948 <ADC_ConfigureBoostMode+0x30>
 8002934:	4b78      	ldr	r3, [pc, #480]	; (8002b18 <ADC_ConfigureBoostMode+0x200>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e008      	b.n	800295a <ADC_ConfigureBoostMode+0x42>
 8002948:	4b74      	ldr	r3, [pc, #464]	; (8002b1c <ADC_ConfigureBoostMode+0x204>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01c      	beq.n	8002998 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800295e:	f003 ff3d 	bl	80067dc <HAL_RCC_GetHCLKFreq>
 8002962:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800296c:	d010      	beq.n	8002990 <ADC_ConfigureBoostMode+0x78>
 800296e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002972:	d873      	bhi.n	8002a5c <ADC_ConfigureBoostMode+0x144>
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d002      	beq.n	8002980 <ADC_ConfigureBoostMode+0x68>
 800297a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800297e:	d16d      	bne.n	8002a5c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	60fb      	str	r3, [r7, #12]
        break;
 800298e:	e068      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	60fb      	str	r3, [r7, #12]
        break;
 8002996:	e064      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002998:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	f005 f982 	bl	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq>
 80029a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029ae:	d051      	beq.n	8002a54 <ADC_ConfigureBoostMode+0x13c>
 80029b0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029b4:	d854      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 80029b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029ba:	d047      	beq.n	8002a4c <ADC_ConfigureBoostMode+0x134>
 80029bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029c0:	d84e      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 80029c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029c6:	d03d      	beq.n	8002a44 <ADC_ConfigureBoostMode+0x12c>
 80029c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029cc:	d848      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 80029ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d2:	d033      	beq.n	8002a3c <ADC_ConfigureBoostMode+0x124>
 80029d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d8:	d842      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 80029da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029de:	d029      	beq.n	8002a34 <ADC_ConfigureBoostMode+0x11c>
 80029e0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029e4:	d83c      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 80029e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029ea:	d01a      	beq.n	8002a22 <ADC_ConfigureBoostMode+0x10a>
 80029ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029f0:	d836      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 80029f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029f6:	d014      	beq.n	8002a22 <ADC_ConfigureBoostMode+0x10a>
 80029f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029fc:	d830      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a02:	d00e      	beq.n	8002a22 <ADC_ConfigureBoostMode+0x10a>
 8002a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a08:	d82a      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 8002a0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a0e:	d008      	beq.n	8002a22 <ADC_ConfigureBoostMode+0x10a>
 8002a10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a14:	d824      	bhi.n	8002a60 <ADC_ConfigureBoostMode+0x148>
 8002a16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a1a:	d002      	beq.n	8002a22 <ADC_ConfigureBoostMode+0x10a>
 8002a1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a20:	d11e      	bne.n	8002a60 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	0c9b      	lsrs	r3, r3, #18
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	60fb      	str	r3, [r7, #12]
        break;
 8002a32:	e016      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	60fb      	str	r3, [r7, #12]
        break;
 8002a3a:	e012      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	60fb      	str	r3, [r7, #12]
        break;
 8002a42:	e00e      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	60fb      	str	r3, [r7, #12]
        break;
 8002a4a:	e00a      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	09db      	lsrs	r3, r3, #7
 8002a50:	60fb      	str	r3, [r7, #12]
        break;
 8002a52:	e006      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	0a1b      	lsrs	r3, r3, #8
 8002a58:	60fb      	str	r3, [r7, #12]
        break;
 8002a5a:	e002      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a60:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a62:	f7fe fee3 	bl	800182c <HAL_GetREVID>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d815      	bhi.n	8002a9c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <ADC_ConfigureBoostMode+0x208>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d908      	bls.n	8002a8a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a86:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a88:	e03e      	b.n	8002b08 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a98:	609a      	str	r2, [r3, #8]
}
 8002a9a:	e035      	b.n	8002b08 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4a1f      	ldr	r2, [pc, #124]	; (8002b24 <ADC_ConfigureBoostMode+0x20c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d808      	bhi.n	8002abc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	e025      	b.n	8002b08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a1a      	ldr	r2, [pc, #104]	; (8002b28 <ADC_ConfigureBoostMode+0x210>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d80a      	bhi.n	8002ada <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	e016      	b.n	8002b08 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <ADC_ConfigureBoostMode+0x214>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d80a      	bhi.n	8002af8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	609a      	str	r2, [r3, #8]
}
 8002af6:	e007      	b.n	8002b08 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40022000 	.word	0x40022000
 8002b14:	40022100 	.word	0x40022100
 8002b18:	40022300 	.word	0x40022300
 8002b1c:	58026300 	.word	0x58026300
 8002b20:	01312d00 	.word	0x01312d00
 8002b24:	005f5e10 	.word	0x005f5e10
 8002b28:	00bebc20 	.word	0x00bebc20
 8002b2c:	017d7840 	.word	0x017d7840

08002b30 <LL_ADC_IsEnabled>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <LL_ADC_IsEnabled+0x18>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <LL_ADC_IsEnabled+0x1a>
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <LL_ADC_StartCalibration>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <LL_ADC_StartCalibration+0x38>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	3ffeffc0 	.word	0x3ffeffc0

08002b94 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ba8:	d101      	bne.n	8002bae <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_ADC_REG_StartConversion>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <LL_ADC_REG_StartConversion+0x24>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	7fffffc0 	.word	0x7fffffc0

08002be4 <LL_ADC_REG_IsConversionOngoing>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_ADCEx_Calibration_Start+0x1e>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e04c      	b.n	8002cc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff fd7c 	bl	8002730 <ADC_Disable>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d135      	bne.n	8002cae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_ADCEx_Calibration_Start+0xc0>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	f043 0202 	orr.w	r2, r3, #2
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff7c 	bl	8002b58 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c60:	e014      	b.n	8002c8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	3301      	adds	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d30d      	bcc.n	8002c8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f023 0312 	bic.w	r3, r3, #18
 8002c78:	f043 0210 	orr.w	r2, r3, #16
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e01b      	b.n	8002cc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff7f 	bl	8002b94 <LL_ADC_IsCalibrationOnGoing>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1e2      	bne.n	8002c62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f023 0303 	bic.w	r3, r3, #3
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
 8002cac:	e005      	b.n	8002cba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	ffffeefd 	.word	0xffffeefd
 8002cd0:	25c3f800 	.word	0x25c3f800

08002cd4 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b0a0      	sub	sp, #128	; 0x80
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff7d 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e08a      	b.n	8002e0a <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e083      	b.n	8002e0a <HAL_ADCEx_MultiModeStart_DMA+0x136>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a3f      	ldr	r2, [pc, #252]	; (8002e14 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d102      	bne.n	8002d22 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e001      	b.n	8002d26 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f043 0220 	orr.w	r2, r3, #32
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e062      	b.n	8002e0a <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fc69 	bl	800261c <ADC_Enable>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002d50:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fc5d 	bl	800261c <ADC_Enable>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002d68:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d146      	bne.n	8002dfe <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8002d8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	4a23      	ldr	r2, [pc, #140]	; (8002e28 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8002d9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1c      	ldr	r2, [pc, #112]	; (8002e14 <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d004      	beq.n	8002db2 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002db4:	e000      	b.n	8002db8 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002db8:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	221c      	movs	r2, #28
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0210 	orr.w	r2, r2, #16
 8002dd8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de0:	330c      	adds	r3, #12
 8002de2:	4619      	mov	r1, r3
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f000 fda0 	bl	800392c <HAL_DMA_Start_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fee0 	bl	8002bbc <LL_ADC_REG_StartConversion>
 8002dfc:	e003      	b.n	8002e06 <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002e06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3780      	adds	r7, #128	; 0x80
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40022000 	.word	0x40022000
 8002e18:	40022100 	.word	0x40022100
 8002e1c:	fffff0fe 	.word	0xfffff0fe
 8002e20:	080027ef 	.word	0x080027ef
 8002e24:	080028c7 	.word	0x080028c7
 8002e28:	080028e3 	.word	0x080028e3
 8002e2c:	40022300 	.word	0x40022300
 8002e30:	58026300 	.word	0x58026300

08002e34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b09f      	sub	sp, #124	; 0x7c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0be      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a5c      	ldr	r2, [pc, #368]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d102      	bne.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e6c:	4b5b      	ldr	r3, [pc, #364]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	e001      	b.n	8002e76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e09d      	b.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fea4 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fe9e 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d17f      	bne.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d17c      	bne.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a46      	ldr	r2, [pc, #280]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002ec8:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002eca:	e000      	b.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ecc:	4b45      	ldr	r3, [pc, #276]	; (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ece:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d039      	beq.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a3a      	ldr	r2, [pc, #232]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d004      	beq.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d10e      	bne.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002efe:	4836      	ldr	r0, [pc, #216]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f00:	f7ff fe16 	bl	8002b30 <LL_ADC_IsEnabled>
 8002f04:	4604      	mov	r4, r0
 8002f06:	4835      	ldr	r0, [pc, #212]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f08:	f7ff fe12 	bl	8002b30 <LL_ADC_IsEnabled>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4323      	orrs	r3, r4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e008      	b.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002f1c:	4832      	ldr	r0, [pc, #200]	; (8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f1e:	f7ff fe07 	bl	8002b30 <LL_ADC_IsEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d047      	beq.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	431a      	orrs	r2, r3
 8002f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f48:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4a:	e03a      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f56:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1d      	ldr	r2, [pc, #116]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10e      	bne.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002f6c:	481a      	ldr	r0, [pc, #104]	; (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f6e:	f7ff fddf 	bl	8002b30 <LL_ADC_IsEnabled>
 8002f72:	4604      	mov	r4, r0
 8002f74:	4819      	ldr	r0, [pc, #100]	; (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f76:	f7ff fddb 	bl	8002b30 <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4323      	orrs	r3, r4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e008      	b.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f8a:	4817      	ldr	r0, [pc, #92]	; (8002fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f8c:	f7ff fdd0 	bl	8002b30 <LL_ADC_IsEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf0c      	ite	eq
 8002f96:	2301      	moveq	r3, #1
 8002f98:	2300      	movne	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002faa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fac:	e009      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fcc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	377c      	adds	r7, #124	; 0x7c
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40022100 	.word	0x40022100
 8002fe0:	40022300 	.word	0x40022300
 8002fe4:	58026300 	.word	0x58026300
 8002fe8:	58026000 	.word	0x58026000
 8002fec:	fffff0e0 	.word	0xfffff0e0

08002ff0 <__NVIC_SetPriorityGrouping>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 800301a:	4313      	orrs	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00
 8003034:	05fa0000 	.word	0x05fa0000

08003038 <__NVIC_GetPriorityGrouping>:
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_DisableIRQ>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db12      	blt.n	80030c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	490a      	ldr	r1, [pc, #40]	; (80030d4 <__NVIC_DisableIRQ+0x44>)
 80030aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	3320      	adds	r3, #32
 80030b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030bc:	f3bf 8f4f 	dsb	sy
}
 80030c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030c2:	f3bf 8f6f 	isb	sy
}
 80030c6:	bf00      	nop
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff05 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff1c 	bl	8003038 <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff90 	bl	800312c <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5f 	bl	80030d8 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff0f 	bl	8003054 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff1f 	bl	8003090 <__NVIC_DisableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff96 	bl	8003194 <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800327c:	f7fe faa6 	bl	80017cc <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e316      	b.n	80038ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a66      	ldr	r2, [pc, #408]	; (800342c <HAL_DMA_Init+0x1b8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04a      	beq.n	800332c <HAL_DMA_Init+0xb8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a65      	ldr	r2, [pc, #404]	; (8003430 <HAL_DMA_Init+0x1bc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d045      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a63      	ldr	r2, [pc, #396]	; (8003434 <HAL_DMA_Init+0x1c0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d040      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a62      	ldr	r2, [pc, #392]	; (8003438 <HAL_DMA_Init+0x1c4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d03b      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a60      	ldr	r2, [pc, #384]	; (800343c <HAL_DMA_Init+0x1c8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d036      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5f      	ldr	r2, [pc, #380]	; (8003440 <HAL_DMA_Init+0x1cc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d031      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5d      	ldr	r2, [pc, #372]	; (8003444 <HAL_DMA_Init+0x1d0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02c      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5c      	ldr	r2, [pc, #368]	; (8003448 <HAL_DMA_Init+0x1d4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d027      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5a      	ldr	r2, [pc, #360]	; (800344c <HAL_DMA_Init+0x1d8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a59      	ldr	r2, [pc, #356]	; (8003450 <HAL_DMA_Init+0x1dc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a57      	ldr	r2, [pc, #348]	; (8003454 <HAL_DMA_Init+0x1e0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_DMA_Init+0xb8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a56      	ldr	r2, [pc, #344]	; (8003458 <HAL_DMA_Init+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_DMA_Init+0xb8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a54      	ldr	r2, [pc, #336]	; (800345c <HAL_DMA_Init+0x1e8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_DMA_Init+0xb8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a53      	ldr	r2, [pc, #332]	; (8003460 <HAL_DMA_Init+0x1ec>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_DMA_Init+0xb8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_DMA_Init+0x1f0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_DMA_Init+0xb8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_DMA_Init+0x1f4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d101      	bne.n	8003330 <HAL_DMA_Init+0xbc>
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_DMA_Init+0xbe>
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 813b 	beq.w	80035ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a37      	ldr	r2, [pc, #220]	; (800342c <HAL_DMA_Init+0x1b8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d04a      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a36      	ldr	r2, [pc, #216]	; (8003430 <HAL_DMA_Init+0x1bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d045      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a34      	ldr	r2, [pc, #208]	; (8003434 <HAL_DMA_Init+0x1c0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d040      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a33      	ldr	r2, [pc, #204]	; (8003438 <HAL_DMA_Init+0x1c4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d03b      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a31      	ldr	r2, [pc, #196]	; (800343c <HAL_DMA_Init+0x1c8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d036      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a30      	ldr	r2, [pc, #192]	; (8003440 <HAL_DMA_Init+0x1cc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d031      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a2e      	ldr	r2, [pc, #184]	; (8003444 <HAL_DMA_Init+0x1d0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02c      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_DMA_Init+0x1d4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d027      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a2b      	ldr	r2, [pc, #172]	; (800344c <HAL_DMA_Init+0x1d8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d022      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <HAL_DMA_Init+0x1dc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d01d      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a28      	ldr	r2, [pc, #160]	; (8003454 <HAL_DMA_Init+0x1e0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d018      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a27      	ldr	r2, [pc, #156]	; (8003458 <HAL_DMA_Init+0x1e4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d013      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a25      	ldr	r2, [pc, #148]	; (800345c <HAL_DMA_Init+0x1e8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00e      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a24      	ldr	r2, [pc, #144]	; (8003460 <HAL_DMA_Init+0x1ec>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d009      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a22      	ldr	r2, [pc, #136]	; (8003464 <HAL_DMA_Init+0x1f0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d004      	beq.n	80033e8 <HAL_DMA_Init+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a21      	ldr	r2, [pc, #132]	; (8003468 <HAL_DMA_Init+0x1f4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d108      	bne.n	80033fa <HAL_DMA_Init+0x186>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e007      	b.n	800340a <HAL_DMA_Init+0x196>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800340a:	e02f      	b.n	800346c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800340c:	f7fe f9de 	bl	80017cc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b05      	cmp	r3, #5
 8003418:	d928      	bls.n	800346c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2203      	movs	r2, #3
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e246      	b.n	80038ba <HAL_DMA_Init+0x646>
 800342c:	40020010 	.word	0x40020010
 8003430:	40020028 	.word	0x40020028
 8003434:	40020040 	.word	0x40020040
 8003438:	40020058 	.word	0x40020058
 800343c:	40020070 	.word	0x40020070
 8003440:	40020088 	.word	0x40020088
 8003444:	400200a0 	.word	0x400200a0
 8003448:	400200b8 	.word	0x400200b8
 800344c:	40020410 	.word	0x40020410
 8003450:	40020428 	.word	0x40020428
 8003454:	40020440 	.word	0x40020440
 8003458:	40020458 	.word	0x40020458
 800345c:	40020470 	.word	0x40020470
 8003460:	40020488 	.word	0x40020488
 8003464:	400204a0 	.word	0x400204a0
 8003468:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1c8      	bne.n	800340c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4b83      	ldr	r3, [pc, #524]	; (8003694 <HAL_DMA_Init+0x420>)
 8003486:	4013      	ands	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003492:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d107      	bne.n	80034d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4313      	orrs	r3, r2
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034d0:	4b71      	ldr	r3, [pc, #452]	; (8003698 <HAL_DMA_Init+0x424>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b71      	ldr	r3, [pc, #452]	; (800369c <HAL_DMA_Init+0x428>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034dc:	d328      	bcc.n	8003530 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b28      	cmp	r3, #40	; 0x28
 80034e4:	d903      	bls.n	80034ee <HAL_DMA_Init+0x27a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b2e      	cmp	r3, #46	; 0x2e
 80034ec:	d917      	bls.n	800351e <HAL_DMA_Init+0x2aa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b3e      	cmp	r3, #62	; 0x3e
 80034f4:	d903      	bls.n	80034fe <HAL_DMA_Init+0x28a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b42      	cmp	r3, #66	; 0x42
 80034fc:	d90f      	bls.n	800351e <HAL_DMA_Init+0x2aa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b46      	cmp	r3, #70	; 0x46
 8003504:	d903      	bls.n	800350e <HAL_DMA_Init+0x29a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b48      	cmp	r3, #72	; 0x48
 800350c:	d907      	bls.n	800351e <HAL_DMA_Init+0x2aa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b4e      	cmp	r3, #78	; 0x4e
 8003514:	d905      	bls.n	8003522 <HAL_DMA_Init+0x2ae>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b52      	cmp	r3, #82	; 0x52
 800351c:	d801      	bhi.n	8003522 <HAL_DMA_Init+0x2ae>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_DMA_Init+0x2b0>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800352e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0307 	bic.w	r3, r3, #7
 8003546:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b04      	cmp	r3, #4
 8003558:	d117      	bne.n	800358a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f001 fdcf 	bl	8005110 <DMA_CheckFifoParam>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e197      	b.n	80038ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f001 fd0a 	bl	8004fac <DMA_CalcBaseAndBitshift>
 8003598:	4603      	mov	r3, r0
 800359a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	223f      	movs	r2, #63	; 0x3f
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	e0cd      	b.n	800374a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a3b      	ldr	r2, [pc, #236]	; (80036a0 <HAL_DMA_Init+0x42c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d022      	beq.n	80035fe <HAL_DMA_Init+0x38a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <HAL_DMA_Init+0x430>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01d      	beq.n	80035fe <HAL_DMA_Init+0x38a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a38      	ldr	r2, [pc, #224]	; (80036a8 <HAL_DMA_Init+0x434>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d018      	beq.n	80035fe <HAL_DMA_Init+0x38a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a36      	ldr	r2, [pc, #216]	; (80036ac <HAL_DMA_Init+0x438>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_DMA_Init+0x38a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a35      	ldr	r2, [pc, #212]	; (80036b0 <HAL_DMA_Init+0x43c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <HAL_DMA_Init+0x38a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a33      	ldr	r2, [pc, #204]	; (80036b4 <HAL_DMA_Init+0x440>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_DMA_Init+0x38a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a32      	ldr	r2, [pc, #200]	; (80036b8 <HAL_DMA_Init+0x444>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_Init+0x38a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a30      	ldr	r2, [pc, #192]	; (80036bc <HAL_DMA_Init+0x448>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_DMA_Init+0x38e>
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_DMA_Init+0x390>
 8003602:	2300      	movs	r3, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8097 	beq.w	8003738 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <HAL_DMA_Init+0x42c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d021      	beq.n	8003658 <HAL_DMA_Init+0x3e4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <HAL_DMA_Init+0x430>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01c      	beq.n	8003658 <HAL_DMA_Init+0x3e4>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <HAL_DMA_Init+0x434>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d017      	beq.n	8003658 <HAL_DMA_Init+0x3e4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <HAL_DMA_Init+0x438>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d012      	beq.n	8003658 <HAL_DMA_Init+0x3e4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_DMA_Init+0x43c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00d      	beq.n	8003658 <HAL_DMA_Init+0x3e4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_DMA_Init+0x440>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d008      	beq.n	8003658 <HAL_DMA_Init+0x3e4>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_DMA_Init+0x444>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <HAL_DMA_Init+0x3e4>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_DMA_Init+0x448>)
 8003656:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_DMA_Init+0x44c>)
 8003674:	4013      	ands	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d021      	beq.n	80036c4 <HAL_DMA_Init+0x450>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b80      	cmp	r3, #128	; 0x80
 8003686:	d102      	bne.n	800368e <HAL_DMA_Init+0x41a>
 8003688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800368c:	e01b      	b.n	80036c6 <HAL_DMA_Init+0x452>
 800368e:	2300      	movs	r3, #0
 8003690:	e019      	b.n	80036c6 <HAL_DMA_Init+0x452>
 8003692:	bf00      	nop
 8003694:	fe10803f 	.word	0xfe10803f
 8003698:	5c001000 	.word	0x5c001000
 800369c:	ffff0000 	.word	0xffff0000
 80036a0:	58025408 	.word	0x58025408
 80036a4:	5802541c 	.word	0x5802541c
 80036a8:	58025430 	.word	0x58025430
 80036ac:	58025444 	.word	0x58025444
 80036b0:	58025458 	.word	0x58025458
 80036b4:	5802546c 	.word	0x5802546c
 80036b8:	58025480 	.word	0x58025480
 80036bc:	58025494 	.word	0x58025494
 80036c0:	fffe000f 	.word	0xfffe000f
 80036c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	4b6e      	ldr	r3, [pc, #440]	; (80038c4 <HAL_DMA_Init+0x650>)
 800370c:	4413      	add	r3, r2
 800370e:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_DMA_Init+0x654>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	009a      	lsls	r2, r3, #2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 fc45 	bl	8004fac <DMA_CalcBaseAndBitshift>
 8003722:	4603      	mov	r3, r0
 8003724:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2201      	movs	r2, #1
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	e008      	b.n	800374a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2240      	movs	r2, #64	; 0x40
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0b7      	b.n	80038ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5f      	ldr	r2, [pc, #380]	; (80038cc <HAL_DMA_Init+0x658>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d072      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_DMA_Init+0x65c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d06d      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5c      	ldr	r2, [pc, #368]	; (80038d4 <HAL_DMA_Init+0x660>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d068      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5a      	ldr	r2, [pc, #360]	; (80038d8 <HAL_DMA_Init+0x664>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d063      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a59      	ldr	r2, [pc, #356]	; (80038dc <HAL_DMA_Init+0x668>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d05e      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <HAL_DMA_Init+0x66c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d059      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_DMA_Init+0x670>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d054      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a54      	ldr	r2, [pc, #336]	; (80038e8 <HAL_DMA_Init+0x674>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d04f      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a53      	ldr	r2, [pc, #332]	; (80038ec <HAL_DMA_Init+0x678>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d04a      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a51      	ldr	r2, [pc, #324]	; (80038f0 <HAL_DMA_Init+0x67c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d045      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a50      	ldr	r2, [pc, #320]	; (80038f4 <HAL_DMA_Init+0x680>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d040      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4e      	ldr	r2, [pc, #312]	; (80038f8 <HAL_DMA_Init+0x684>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d03b      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a4d      	ldr	r2, [pc, #308]	; (80038fc <HAL_DMA_Init+0x688>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d036      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a4b      	ldr	r2, [pc, #300]	; (8003900 <HAL_DMA_Init+0x68c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d031      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <HAL_DMA_Init+0x690>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d02c      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a48      	ldr	r2, [pc, #288]	; (8003908 <HAL_DMA_Init+0x694>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d027      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a47      	ldr	r2, [pc, #284]	; (800390c <HAL_DMA_Init+0x698>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d022      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a45      	ldr	r2, [pc, #276]	; (8003910 <HAL_DMA_Init+0x69c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d01d      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a44      	ldr	r2, [pc, #272]	; (8003914 <HAL_DMA_Init+0x6a0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d018      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a42      	ldr	r2, [pc, #264]	; (8003918 <HAL_DMA_Init+0x6a4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a41      	ldr	r2, [pc, #260]	; (800391c <HAL_DMA_Init+0x6a8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00e      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3f      	ldr	r2, [pc, #252]	; (8003920 <HAL_DMA_Init+0x6ac>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3e      	ldr	r2, [pc, #248]	; (8003924 <HAL_DMA_Init+0x6b0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d004      	beq.n	800383a <HAL_DMA_Init+0x5c6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a3c      	ldr	r2, [pc, #240]	; (8003928 <HAL_DMA_Init+0x6b4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_DMA_Init+0x5ca>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_DMA_Init+0x5cc>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d032      	beq.n	80038aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f001 fcdf 	bl	8005208 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d102      	bne.n	8003858 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800386c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <HAL_DMA_Init+0x624>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b08      	cmp	r3, #8
 800387c:	d80c      	bhi.n	8003898 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f001 fd5c 	bl	800533c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e008      	b.n	80038aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	a7fdabf8 	.word	0xa7fdabf8
 80038c8:	cccccccd 	.word	0xcccccccd
 80038cc:	40020010 	.word	0x40020010
 80038d0:	40020028 	.word	0x40020028
 80038d4:	40020040 	.word	0x40020040
 80038d8:	40020058 	.word	0x40020058
 80038dc:	40020070 	.word	0x40020070
 80038e0:	40020088 	.word	0x40020088
 80038e4:	400200a0 	.word	0x400200a0
 80038e8:	400200b8 	.word	0x400200b8
 80038ec:	40020410 	.word	0x40020410
 80038f0:	40020428 	.word	0x40020428
 80038f4:	40020440 	.word	0x40020440
 80038f8:	40020458 	.word	0x40020458
 80038fc:	40020470 	.word	0x40020470
 8003900:	40020488 	.word	0x40020488
 8003904:	400204a0 	.word	0x400204a0
 8003908:	400204b8 	.word	0x400204b8
 800390c:	58025408 	.word	0x58025408
 8003910:	5802541c 	.word	0x5802541c
 8003914:	58025430 	.word	0x58025430
 8003918:	58025444 	.word	0x58025444
 800391c:	58025458 	.word	0x58025458
 8003920:	5802546c 	.word	0x5802546c
 8003924:	58025480 	.word	0x58025480
 8003928:	58025494 	.word	0x58025494

0800392c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e226      	b.n	8003d96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_DMA_Start_IT+0x2a>
 8003952:	2302      	movs	r3, #2
 8003954:	e21f      	b.n	8003d96 <HAL_DMA_Start_IT+0x46a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	f040 820a 	bne.w	8003d80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a68      	ldr	r2, [pc, #416]	; (8003b20 <HAL_DMA_Start_IT+0x1f4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d04a      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a66      	ldr	r2, [pc, #408]	; (8003b24 <HAL_DMA_Start_IT+0x1f8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d045      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a65      	ldr	r2, [pc, #404]	; (8003b28 <HAL_DMA_Start_IT+0x1fc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d040      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a63      	ldr	r2, [pc, #396]	; (8003b2c <HAL_DMA_Start_IT+0x200>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d03b      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a62      	ldr	r2, [pc, #392]	; (8003b30 <HAL_DMA_Start_IT+0x204>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d036      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a60      	ldr	r2, [pc, #384]	; (8003b34 <HAL_DMA_Start_IT+0x208>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d031      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5f      	ldr	r2, [pc, #380]	; (8003b38 <HAL_DMA_Start_IT+0x20c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d02c      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a5d      	ldr	r2, [pc, #372]	; (8003b3c <HAL_DMA_Start_IT+0x210>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d027      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5c      	ldr	r2, [pc, #368]	; (8003b40 <HAL_DMA_Start_IT+0x214>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d022      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a5a      	ldr	r2, [pc, #360]	; (8003b44 <HAL_DMA_Start_IT+0x218>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01d      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a59      	ldr	r2, [pc, #356]	; (8003b48 <HAL_DMA_Start_IT+0x21c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d018      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a57      	ldr	r2, [pc, #348]	; (8003b4c <HAL_DMA_Start_IT+0x220>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_DMA_Start_IT+0x224>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a54      	ldr	r2, [pc, #336]	; (8003b54 <HAL_DMA_Start_IT+0x228>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a53      	ldr	r2, [pc, #332]	; (8003b58 <HAL_DMA_Start_IT+0x22c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_DMA_Start_IT+0xee>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a51      	ldr	r2, [pc, #324]	; (8003b5c <HAL_DMA_Start_IT+0x230>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d108      	bne.n	8003a2c <HAL_DMA_Start_IT+0x100>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e007      	b.n	8003a3c <HAL_DMA_Start_IT+0x110>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f001 f906 	bl	8004c54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a34      	ldr	r2, [pc, #208]	; (8003b20 <HAL_DMA_Start_IT+0x1f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d04a      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a33      	ldr	r2, [pc, #204]	; (8003b24 <HAL_DMA_Start_IT+0x1f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d045      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_DMA_Start_IT+0x1fc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d040      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a30      	ldr	r2, [pc, #192]	; (8003b2c <HAL_DMA_Start_IT+0x200>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d03b      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2e      	ldr	r2, [pc, #184]	; (8003b30 <HAL_DMA_Start_IT+0x204>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d036      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	; (8003b34 <HAL_DMA_Start_IT+0x208>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d031      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2b      	ldr	r2, [pc, #172]	; (8003b38 <HAL_DMA_Start_IT+0x20c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d02c      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <HAL_DMA_Start_IT+0x210>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d027      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	; (8003b40 <HAL_DMA_Start_IT+0x214>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_DMA_Start_IT+0x218>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d01d      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a25      	ldr	r2, [pc, #148]	; (8003b48 <HAL_DMA_Start_IT+0x21c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <HAL_DMA_Start_IT+0x220>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <HAL_DMA_Start_IT+0x224>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <HAL_DMA_Start_IT+0x228>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	; (8003b58 <HAL_DMA_Start_IT+0x22c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x1bc>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	; (8003b5c <HAL_DMA_Start_IT+0x230>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA_Start_IT+0x1c0>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_DMA_Start_IT+0x1c2>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d036      	beq.n	8003b60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 021e 	bic.w	r2, r3, #30
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0216 	orr.w	r2, r2, #22
 8003b04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d03e      	beq.n	8003b8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0208 	orr.w	r2, r2, #8
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e035      	b.n	8003b8c <HAL_DMA_Start_IT+0x260>
 8003b20:	40020010 	.word	0x40020010
 8003b24:	40020028 	.word	0x40020028
 8003b28:	40020040 	.word	0x40020040
 8003b2c:	40020058 	.word	0x40020058
 8003b30:	40020070 	.word	0x40020070
 8003b34:	40020088 	.word	0x40020088
 8003b38:	400200a0 	.word	0x400200a0
 8003b3c:	400200b8 	.word	0x400200b8
 8003b40:	40020410 	.word	0x40020410
 8003b44:	40020428 	.word	0x40020428
 8003b48:	40020440 	.word	0x40020440
 8003b4c:	40020458 	.word	0x40020458
 8003b50:	40020470 	.word	0x40020470
 8003b54:	40020488 	.word	0x40020488
 8003b58:	400204a0 	.word	0x400204a0
 8003b5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 020e 	bic.w	r2, r3, #14
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 020a 	orr.w	r2, r2, #10
 8003b72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0204 	orr.w	r2, r2, #4
 8003b8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a83      	ldr	r2, [pc, #524]	; (8003da0 <HAL_DMA_Start_IT+0x474>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d072      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a82      	ldr	r2, [pc, #520]	; (8003da4 <HAL_DMA_Start_IT+0x478>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d06d      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <HAL_DMA_Start_IT+0x47c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d068      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7f      	ldr	r2, [pc, #508]	; (8003dac <HAL_DMA_Start_IT+0x480>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d063      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7d      	ldr	r2, [pc, #500]	; (8003db0 <HAL_DMA_Start_IT+0x484>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d05e      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7c      	ldr	r2, [pc, #496]	; (8003db4 <HAL_DMA_Start_IT+0x488>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d059      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7a      	ldr	r2, [pc, #488]	; (8003db8 <HAL_DMA_Start_IT+0x48c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d054      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a79      	ldr	r2, [pc, #484]	; (8003dbc <HAL_DMA_Start_IT+0x490>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d04f      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a77      	ldr	r2, [pc, #476]	; (8003dc0 <HAL_DMA_Start_IT+0x494>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d04a      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a76      	ldr	r2, [pc, #472]	; (8003dc4 <HAL_DMA_Start_IT+0x498>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d045      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a74      	ldr	r2, [pc, #464]	; (8003dc8 <HAL_DMA_Start_IT+0x49c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d040      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a73      	ldr	r2, [pc, #460]	; (8003dcc <HAL_DMA_Start_IT+0x4a0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d03b      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a71      	ldr	r2, [pc, #452]	; (8003dd0 <HAL_DMA_Start_IT+0x4a4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d036      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a70      	ldr	r2, [pc, #448]	; (8003dd4 <HAL_DMA_Start_IT+0x4a8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d031      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6e      	ldr	r2, [pc, #440]	; (8003dd8 <HAL_DMA_Start_IT+0x4ac>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d02c      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a6d      	ldr	r2, [pc, #436]	; (8003ddc <HAL_DMA_Start_IT+0x4b0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d027      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6b      	ldr	r2, [pc, #428]	; (8003de0 <HAL_DMA_Start_IT+0x4b4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d022      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6a      	ldr	r2, [pc, #424]	; (8003de4 <HAL_DMA_Start_IT+0x4b8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d01d      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a68      	ldr	r2, [pc, #416]	; (8003de8 <HAL_DMA_Start_IT+0x4bc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a67      	ldr	r2, [pc, #412]	; (8003dec <HAL_DMA_Start_IT+0x4c0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a65      	ldr	r2, [pc, #404]	; (8003df0 <HAL_DMA_Start_IT+0x4c4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a64      	ldr	r2, [pc, #400]	; (8003df4 <HAL_DMA_Start_IT+0x4c8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a62      	ldr	r2, [pc, #392]	; (8003df8 <HAL_DMA_Start_IT+0x4cc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_DMA_Start_IT+0x350>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a61      	ldr	r2, [pc, #388]	; (8003dfc <HAL_DMA_Start_IT+0x4d0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Start_IT+0x354>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_DMA_Start_IT+0x356>
 8003c80:	2300      	movs	r3, #0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01a      	beq.n	8003cbc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a37      	ldr	r2, [pc, #220]	; (8003da0 <HAL_DMA_Start_IT+0x474>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d04a      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a36      	ldr	r2, [pc, #216]	; (8003da4 <HAL_DMA_Start_IT+0x478>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d045      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <HAL_DMA_Start_IT+0x47c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d040      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a33      	ldr	r2, [pc, #204]	; (8003dac <HAL_DMA_Start_IT+0x480>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d03b      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a31      	ldr	r2, [pc, #196]	; (8003db0 <HAL_DMA_Start_IT+0x484>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d036      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a30      	ldr	r2, [pc, #192]	; (8003db4 <HAL_DMA_Start_IT+0x488>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d031      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2e      	ldr	r2, [pc, #184]	; (8003db8 <HAL_DMA_Start_IT+0x48c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d02c      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2d      	ldr	r2, [pc, #180]	; (8003dbc <HAL_DMA_Start_IT+0x490>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d027      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <HAL_DMA_Start_IT+0x494>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d022      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	; (8003dc4 <HAL_DMA_Start_IT+0x498>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d01d      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a28      	ldr	r2, [pc, #160]	; (8003dc8 <HAL_DMA_Start_IT+0x49c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d018      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <HAL_DMA_Start_IT+0x4a0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a25      	ldr	r2, [pc, #148]	; (8003dd0 <HAL_DMA_Start_IT+0x4a4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00e      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <HAL_DMA_Start_IT+0x4a8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d009      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <HAL_DMA_Start_IT+0x4ac>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_DMA_Start_IT+0x430>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <HAL_DMA_Start_IT+0x4b0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <HAL_DMA_Start_IT+0x442>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e012      	b.n	8003d94 <HAL_DMA_Start_IT+0x468>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0201 	orr.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e009      	b.n	8003d94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40020010 	.word	0x40020010
 8003da4:	40020028 	.word	0x40020028
 8003da8:	40020040 	.word	0x40020040
 8003dac:	40020058 	.word	0x40020058
 8003db0:	40020070 	.word	0x40020070
 8003db4:	40020088 	.word	0x40020088
 8003db8:	400200a0 	.word	0x400200a0
 8003dbc:	400200b8 	.word	0x400200b8
 8003dc0:	40020410 	.word	0x40020410
 8003dc4:	40020428 	.word	0x40020428
 8003dc8:	40020440 	.word	0x40020440
 8003dcc:	40020458 	.word	0x40020458
 8003dd0:	40020470 	.word	0x40020470
 8003dd4:	40020488 	.word	0x40020488
 8003dd8:	400204a0 	.word	0x400204a0
 8003ddc:	400204b8 	.word	0x400204b8
 8003de0:	58025408 	.word	0x58025408
 8003de4:	5802541c 	.word	0x5802541c
 8003de8:	58025430 	.word	0x58025430
 8003dec:	58025444 	.word	0x58025444
 8003df0:	58025458 	.word	0x58025458
 8003df4:	5802546c 	.word	0x5802546c
 8003df8:	58025480 	.word	0x58025480
 8003dfc:	58025494 	.word	0x58025494

08003e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e0c:	4b67      	ldr	r3, [pc, #412]	; (8003fac <HAL_DMA_IRQHandler+0x1ac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <HAL_DMA_IRQHandler+0x1b0>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5f      	ldr	r2, [pc, #380]	; (8003fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d04a      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5d      	ldr	r2, [pc, #372]	; (8003fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d045      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5c      	ldr	r2, [pc, #368]	; (8003fbc <HAL_DMA_IRQHandler+0x1bc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d040      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a5a      	ldr	r2, [pc, #360]	; (8003fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d03b      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a59      	ldr	r2, [pc, #356]	; (8003fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d036      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a57      	ldr	r2, [pc, #348]	; (8003fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d031      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a56      	ldr	r2, [pc, #344]	; (8003fcc <HAL_DMA_IRQHandler+0x1cc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d02c      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a54      	ldr	r2, [pc, #336]	; (8003fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d027      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a53      	ldr	r2, [pc, #332]	; (8003fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d022      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a51      	ldr	r2, [pc, #324]	; (8003fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d01d      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a50      	ldr	r2, [pc, #320]	; (8003fdc <HAL_DMA_IRQHandler+0x1dc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d018      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a4e      	ldr	r2, [pc, #312]	; (8003fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a4d      	ldr	r2, [pc, #308]	; (8003fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a4b      	ldr	r2, [pc, #300]	; (8003fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d009      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <HAL_DMA_IRQHandler+0x1ec>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0xd2>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a48      	ldr	r2, [pc, #288]	; (8003ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0xd6>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_DMA_IRQHandler+0xd8>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 842b 	beq.w	8004734 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80a2 	beq.w	8004038 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d045      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <HAL_DMA_IRQHandler+0x1bc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2a      	ldr	r2, [pc, #168]	; (8003fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d03b      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d036      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a27      	ldr	r2, [pc, #156]	; (8003fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d031      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <HAL_DMA_IRQHandler+0x1cc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a24      	ldr	r2, [pc, #144]	; (8003fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a22      	ldr	r2, [pc, #136]	; (8003fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_DMA_IRQHandler+0x1dc>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a19      	ldr	r2, [pc, #100]	; (8003fec <HAL_DMA_IRQHandler+0x1ec>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_DMA_IRQHandler+0x194>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d12f      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x1f4>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bf14      	ite	ne
 8003fa2:	2301      	movne	r3, #1
 8003fa4:	2300      	moveq	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	e02e      	b.n	8004008 <HAL_DMA_IRQHandler+0x208>
 8003faa:	bf00      	nop
 8003fac:	24000000 	.word	0x24000000
 8003fb0:	1b4e81b5 	.word	0x1b4e81b5
 8003fb4:	40020010 	.word	0x40020010
 8003fb8:	40020028 	.word	0x40020028
 8003fbc:	40020040 	.word	0x40020040
 8003fc0:	40020058 	.word	0x40020058
 8003fc4:	40020070 	.word	0x40020070
 8003fc8:	40020088 	.word	0x40020088
 8003fcc:	400200a0 	.word	0x400200a0
 8003fd0:	400200b8 	.word	0x400200b8
 8003fd4:	40020410 	.word	0x40020410
 8003fd8:	40020428 	.word	0x40020428
 8003fdc:	40020440 	.word	0x40020440
 8003fe0:	40020458 	.word	0x40020458
 8003fe4:	40020470 	.word	0x40020470
 8003fe8:	40020488 	.word	0x40020488
 8003fec:	400204a0 	.word	0x400204a0
 8003ff0:	400204b8 	.word	0x400204b8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d015      	beq.n	8004038 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0204 	bic.w	r2, r2, #4
 800401a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	2208      	movs	r2, #8
 8004026:	409a      	lsls	r2, r3
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004030:	f043 0201 	orr.w	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	fa22 f303 	lsr.w	r3, r2, r3
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d06e      	beq.n	800412c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a69      	ldr	r2, [pc, #420]	; (80041f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d04a      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a67      	ldr	r2, [pc, #412]	; (80041fc <HAL_DMA_IRQHandler+0x3fc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d045      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a66      	ldr	r2, [pc, #408]	; (8004200 <HAL_DMA_IRQHandler+0x400>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d040      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a64      	ldr	r2, [pc, #400]	; (8004204 <HAL_DMA_IRQHandler+0x404>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d03b      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a63      	ldr	r2, [pc, #396]	; (8004208 <HAL_DMA_IRQHandler+0x408>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d036      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a61      	ldr	r2, [pc, #388]	; (800420c <HAL_DMA_IRQHandler+0x40c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d031      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a60      	ldr	r2, [pc, #384]	; (8004210 <HAL_DMA_IRQHandler+0x410>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d02c      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a5e      	ldr	r2, [pc, #376]	; (8004214 <HAL_DMA_IRQHandler+0x414>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d027      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a5d      	ldr	r2, [pc, #372]	; (8004218 <HAL_DMA_IRQHandler+0x418>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a5b      	ldr	r2, [pc, #364]	; (800421c <HAL_DMA_IRQHandler+0x41c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01d      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a5a      	ldr	r2, [pc, #360]	; (8004220 <HAL_DMA_IRQHandler+0x420>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_DMA_IRQHandler+0x424>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a57      	ldr	r2, [pc, #348]	; (8004228 <HAL_DMA_IRQHandler+0x428>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a55      	ldr	r2, [pc, #340]	; (800422c <HAL_DMA_IRQHandler+0x42c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a54      	ldr	r2, [pc, #336]	; (8004230 <HAL_DMA_IRQHandler+0x430>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_DMA_IRQHandler+0x2ee>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a52      	ldr	r2, [pc, #328]	; (8004234 <HAL_DMA_IRQHandler+0x434>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10a      	bne.n	8004104 <HAL_DMA_IRQHandler+0x304>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e003      	b.n	800410c <HAL_DMA_IRQHandler+0x30c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00d      	beq.n	800412c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f043 0202 	orr.w	r2, r3, #2
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	2204      	movs	r2, #4
 8004136:	409a      	lsls	r2, r3
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 808f 	beq.w	8004260 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d04a      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <HAL_DMA_IRQHandler+0x3fc>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d045      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a29      	ldr	r2, [pc, #164]	; (8004200 <HAL_DMA_IRQHandler+0x400>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d040      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a27      	ldr	r2, [pc, #156]	; (8004204 <HAL_DMA_IRQHandler+0x404>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d03b      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_DMA_IRQHandler+0x408>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d036      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a24      	ldr	r2, [pc, #144]	; (800420c <HAL_DMA_IRQHandler+0x40c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d031      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a23      	ldr	r2, [pc, #140]	; (8004210 <HAL_DMA_IRQHandler+0x410>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d02c      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <HAL_DMA_IRQHandler+0x414>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d027      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a20      	ldr	r2, [pc, #128]	; (8004218 <HAL_DMA_IRQHandler+0x418>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d022      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <HAL_DMA_IRQHandler+0x41c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01d      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_DMA_IRQHandler+0x420>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <HAL_DMA_IRQHandler+0x424>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d013      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <HAL_DMA_IRQHandler+0x428>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_DMA_IRQHandler+0x42c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_DMA_IRQHandler+0x430>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x3e2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <HAL_DMA_IRQHandler+0x434>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d12a      	bne.n	8004238 <HAL_DMA_IRQHandler+0x438>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf14      	ite	ne
 80041f0:	2301      	movne	r3, #1
 80041f2:	2300      	moveq	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	e023      	b.n	8004240 <HAL_DMA_IRQHandler+0x440>
 80041f8:	40020010 	.word	0x40020010
 80041fc:	40020028 	.word	0x40020028
 8004200:	40020040 	.word	0x40020040
 8004204:	40020058 	.word	0x40020058
 8004208:	40020070 	.word	0x40020070
 800420c:	40020088 	.word	0x40020088
 8004210:	400200a0 	.word	0x400200a0
 8004214:	400200b8 	.word	0x400200b8
 8004218:	40020410 	.word	0x40020410
 800421c:	40020428 	.word	0x40020428
 8004220:	40020440 	.word	0x40020440
 8004224:	40020458 	.word	0x40020458
 8004228:	40020470 	.word	0x40020470
 800422c:	40020488 	.word	0x40020488
 8004230:	400204a0 	.word	0x400204a0
 8004234:	400204b8 	.word	0x400204b8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2204      	movs	r2, #4
 800424e:	409a      	lsls	r2, r3
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	f043 0204 	orr.w	r2, r3, #4
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2210      	movs	r2, #16
 800426a:	409a      	lsls	r2, r3
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	4013      	ands	r3, r2
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80a6 	beq.w	80043c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a85      	ldr	r2, [pc, #532]	; (8004490 <HAL_DMA_IRQHandler+0x690>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d04a      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a83      	ldr	r2, [pc, #524]	; (8004494 <HAL_DMA_IRQHandler+0x694>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d045      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a82      	ldr	r2, [pc, #520]	; (8004498 <HAL_DMA_IRQHandler+0x698>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d040      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a80      	ldr	r2, [pc, #512]	; (800449c <HAL_DMA_IRQHandler+0x69c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d03b      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a7f      	ldr	r2, [pc, #508]	; (80044a0 <HAL_DMA_IRQHandler+0x6a0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d036      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a7d      	ldr	r2, [pc, #500]	; (80044a4 <HAL_DMA_IRQHandler+0x6a4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d031      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a7c      	ldr	r2, [pc, #496]	; (80044a8 <HAL_DMA_IRQHandler+0x6a8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d02c      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a7a      	ldr	r2, [pc, #488]	; (80044ac <HAL_DMA_IRQHandler+0x6ac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d027      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a79      	ldr	r2, [pc, #484]	; (80044b0 <HAL_DMA_IRQHandler+0x6b0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d022      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a77      	ldr	r2, [pc, #476]	; (80044b4 <HAL_DMA_IRQHandler+0x6b4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01d      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a76      	ldr	r2, [pc, #472]	; (80044b8 <HAL_DMA_IRQHandler+0x6b8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d018      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a74      	ldr	r2, [pc, #464]	; (80044bc <HAL_DMA_IRQHandler+0x6bc>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a73      	ldr	r2, [pc, #460]	; (80044c0 <HAL_DMA_IRQHandler+0x6c0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00e      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a71      	ldr	r2, [pc, #452]	; (80044c4 <HAL_DMA_IRQHandler+0x6c4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a70      	ldr	r2, [pc, #448]	; (80044c8 <HAL_DMA_IRQHandler+0x6c8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_DMA_IRQHandler+0x516>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6e      	ldr	r2, [pc, #440]	; (80044cc <HAL_DMA_IRQHandler+0x6cc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10a      	bne.n	800432c <HAL_DMA_IRQHandler+0x52c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e009      	b.n	8004340 <HAL_DMA_IRQHandler+0x540>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03e      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2210      	movs	r2, #16
 800434e:	409a      	lsls	r2, r3
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d018      	beq.n	8004394 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d108      	bne.n	8004382 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d024      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
 8004380:	e01f      	b.n	80043c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01b      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
 8004392:	e016      	b.n	80043c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d107      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0208 	bic.w	r2, r2, #8
 80043b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	2220      	movs	r2, #32
 80043cc:	409a      	lsls	r2, r3
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 8110 	beq.w	80045f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2c      	ldr	r2, [pc, #176]	; (8004490 <HAL_DMA_IRQHandler+0x690>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d04a      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2b      	ldr	r2, [pc, #172]	; (8004494 <HAL_DMA_IRQHandler+0x694>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d045      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a29      	ldr	r2, [pc, #164]	; (8004498 <HAL_DMA_IRQHandler+0x698>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d040      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a28      	ldr	r2, [pc, #160]	; (800449c <HAL_DMA_IRQHandler+0x69c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d03b      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <HAL_DMA_IRQHandler+0x6a0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d036      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a25      	ldr	r2, [pc, #148]	; (80044a4 <HAL_DMA_IRQHandler+0x6a4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d031      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_DMA_IRQHandler+0x6a8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d02c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a22      	ldr	r2, [pc, #136]	; (80044ac <HAL_DMA_IRQHandler+0x6ac>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d027      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a20      	ldr	r2, [pc, #128]	; (80044b0 <HAL_DMA_IRQHandler+0x6b0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d022      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1f      	ldr	r2, [pc, #124]	; (80044b4 <HAL_DMA_IRQHandler+0x6b4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_DMA_IRQHandler+0x6b8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d018      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <HAL_DMA_IRQHandler+0x6bc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d013      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1a      	ldr	r2, [pc, #104]	; (80044c0 <HAL_DMA_IRQHandler+0x6c0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00e      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <HAL_DMA_IRQHandler+0x6c4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a17      	ldr	r2, [pc, #92]	; (80044c8 <HAL_DMA_IRQHandler+0x6c8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d004      	beq.n	8004478 <HAL_DMA_IRQHandler+0x678>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_DMA_IRQHandler+0x6cc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d12b      	bne.n	80044d0 <HAL_DMA_IRQHandler+0x6d0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e02a      	b.n	80044e4 <HAL_DMA_IRQHandler+0x6e4>
 800448e:	bf00      	nop
 8004490:	40020010 	.word	0x40020010
 8004494:	40020028 	.word	0x40020028
 8004498:	40020040 	.word	0x40020040
 800449c:	40020058 	.word	0x40020058
 80044a0:	40020070 	.word	0x40020070
 80044a4:	40020088 	.word	0x40020088
 80044a8:	400200a0 	.word	0x400200a0
 80044ac:	400200b8 	.word	0x400200b8
 80044b0:	40020410 	.word	0x40020410
 80044b4:	40020428 	.word	0x40020428
 80044b8:	40020440 	.word	0x40020440
 80044bc:	40020458 	.word	0x40020458
 80044c0:	40020470 	.word	0x40020470
 80044c4:	40020488 	.word	0x40020488
 80044c8:	400204a0 	.word	0x400204a0
 80044cc:	400204b8 	.word	0x400204b8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8087 	beq.w	80045f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	2220      	movs	r2, #32
 80044f4:	409a      	lsls	r2, r3
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b04      	cmp	r3, #4
 8004504:	d139      	bne.n	800457a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0216 	bic.w	r2, r2, #22
 8004514:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004524:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <HAL_DMA_IRQHandler+0x736>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0208 	bic.w	r2, r2, #8
 8004544:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	223f      	movs	r2, #63	; 0x3f
 8004550:	409a      	lsls	r2, r3
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 834a 	beq.w	8004c04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
          }
          return;
 8004578:	e344      	b.n	8004c04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d018      	beq.n	80045ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	2b00      	cmp	r3, #0
 800459c:	d02c      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
 80045a6:	e027      	b.n	80045f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d023      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
 80045b8:	e01e      	b.n	80045f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10f      	bne.n	80045e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0210 	bic.w	r2, r2, #16
 80045d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8306 	beq.w	8004c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8088 	beq.w	8004720 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2204      	movs	r2, #4
 8004614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a7a      	ldr	r2, [pc, #488]	; (8004808 <HAL_DMA_IRQHandler+0xa08>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04a      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a79      	ldr	r2, [pc, #484]	; (800480c <HAL_DMA_IRQHandler+0xa0c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d045      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a77      	ldr	r2, [pc, #476]	; (8004810 <HAL_DMA_IRQHandler+0xa10>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d040      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a76      	ldr	r2, [pc, #472]	; (8004814 <HAL_DMA_IRQHandler+0xa14>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d03b      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a74      	ldr	r2, [pc, #464]	; (8004818 <HAL_DMA_IRQHandler+0xa18>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d036      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a73      	ldr	r2, [pc, #460]	; (800481c <HAL_DMA_IRQHandler+0xa1c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d031      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a71      	ldr	r2, [pc, #452]	; (8004820 <HAL_DMA_IRQHandler+0xa20>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d02c      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a70      	ldr	r2, [pc, #448]	; (8004824 <HAL_DMA_IRQHandler+0xa24>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d027      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6e      	ldr	r2, [pc, #440]	; (8004828 <HAL_DMA_IRQHandler+0xa28>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d022      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a6d      	ldr	r2, [pc, #436]	; (800482c <HAL_DMA_IRQHandler+0xa2c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d01d      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a6b      	ldr	r2, [pc, #428]	; (8004830 <HAL_DMA_IRQHandler+0xa30>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d018      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6a      	ldr	r2, [pc, #424]	; (8004834 <HAL_DMA_IRQHandler+0xa34>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a68      	ldr	r2, [pc, #416]	; (8004838 <HAL_DMA_IRQHandler+0xa38>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00e      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a67      	ldr	r2, [pc, #412]	; (800483c <HAL_DMA_IRQHandler+0xa3c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a65      	ldr	r2, [pc, #404]	; (8004840 <HAL_DMA_IRQHandler+0xa40>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x8b8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a64      	ldr	r2, [pc, #400]	; (8004844 <HAL_DMA_IRQHandler+0xa44>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d108      	bne.n	80046ca <HAL_DMA_IRQHandler+0x8ca>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e007      	b.n	80046da <HAL_DMA_IRQHandler+0x8da>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d307      	bcc.n	80046f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f2      	bne.n	80046da <HAL_DMA_IRQHandler+0x8da>
 80046f4:	e000      	b.n	80046f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2203      	movs	r2, #3
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800470e:	e003      	b.n	8004718 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8272 	beq.w	8004c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	4798      	blx	r3
 8004732:	e26c      	b.n	8004c0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a43      	ldr	r2, [pc, #268]	; (8004848 <HAL_DMA_IRQHandler+0xa48>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d022      	beq.n	8004784 <HAL_DMA_IRQHandler+0x984>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a42      	ldr	r2, [pc, #264]	; (800484c <HAL_DMA_IRQHandler+0xa4c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d01d      	beq.n	8004784 <HAL_DMA_IRQHandler+0x984>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a40      	ldr	r2, [pc, #256]	; (8004850 <HAL_DMA_IRQHandler+0xa50>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <HAL_DMA_IRQHandler+0x984>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3f      	ldr	r2, [pc, #252]	; (8004854 <HAL_DMA_IRQHandler+0xa54>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_DMA_IRQHandler+0x984>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <HAL_DMA_IRQHandler+0xa58>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <HAL_DMA_IRQHandler+0x984>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a3c      	ldr	r2, [pc, #240]	; (800485c <HAL_DMA_IRQHandler+0xa5c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_DMA_IRQHandler+0x984>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <HAL_DMA_IRQHandler+0xa60>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_DMA_IRQHandler+0x984>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a39      	ldr	r2, [pc, #228]	; (8004864 <HAL_DMA_IRQHandler+0xa64>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d101      	bne.n	8004788 <HAL_DMA_IRQHandler+0x988>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_DMA_IRQHandler+0x98a>
 8004788:	2300      	movs	r3, #0
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 823f 	beq.w	8004c0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	2204      	movs	r2, #4
 80047a2:	409a      	lsls	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80cd 	beq.w	8004948 <HAL_DMA_IRQHandler+0xb48>
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80c7 	beq.w	8004948 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2204      	movs	r2, #4
 80047c4:	409a      	lsls	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d049      	beq.n	8004868 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 8210 	beq.w	8004c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047f0:	e20a      	b.n	8004c08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 8206 	beq.w	8004c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004804:	e200      	b.n	8004c08 <HAL_DMA_IRQHandler+0xe08>
 8004806:	bf00      	nop
 8004808:	40020010 	.word	0x40020010
 800480c:	40020028 	.word	0x40020028
 8004810:	40020040 	.word	0x40020040
 8004814:	40020058 	.word	0x40020058
 8004818:	40020070 	.word	0x40020070
 800481c:	40020088 	.word	0x40020088
 8004820:	400200a0 	.word	0x400200a0
 8004824:	400200b8 	.word	0x400200b8
 8004828:	40020410 	.word	0x40020410
 800482c:	40020428 	.word	0x40020428
 8004830:	40020440 	.word	0x40020440
 8004834:	40020458 	.word	0x40020458
 8004838:	40020470 	.word	0x40020470
 800483c:	40020488 	.word	0x40020488
 8004840:	400204a0 	.word	0x400204a0
 8004844:	400204b8 	.word	0x400204b8
 8004848:	58025408 	.word	0x58025408
 800484c:	5802541c 	.word	0x5802541c
 8004850:	58025430 	.word	0x58025430
 8004854:	58025444 	.word	0x58025444
 8004858:	58025458 	.word	0x58025458
 800485c:	5802546c 	.word	0x5802546c
 8004860:	58025480 	.word	0x58025480
 8004864:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d160      	bne.n	8004934 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7f      	ldr	r2, [pc, #508]	; (8004a74 <HAL_DMA_IRQHandler+0xc74>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d04a      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7d      	ldr	r2, [pc, #500]	; (8004a78 <HAL_DMA_IRQHandler+0xc78>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d045      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7c      	ldr	r2, [pc, #496]	; (8004a7c <HAL_DMA_IRQHandler+0xc7c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d040      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a7a      	ldr	r2, [pc, #488]	; (8004a80 <HAL_DMA_IRQHandler+0xc80>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d03b      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a79      	ldr	r2, [pc, #484]	; (8004a84 <HAL_DMA_IRQHandler+0xc84>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d036      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a77      	ldr	r2, [pc, #476]	; (8004a88 <HAL_DMA_IRQHandler+0xc88>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d031      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a76      	ldr	r2, [pc, #472]	; (8004a8c <HAL_DMA_IRQHandler+0xc8c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d02c      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a74      	ldr	r2, [pc, #464]	; (8004a90 <HAL_DMA_IRQHandler+0xc90>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d027      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a73      	ldr	r2, [pc, #460]	; (8004a94 <HAL_DMA_IRQHandler+0xc94>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d022      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a71      	ldr	r2, [pc, #452]	; (8004a98 <HAL_DMA_IRQHandler+0xc98>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01d      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a70      	ldr	r2, [pc, #448]	; (8004a9c <HAL_DMA_IRQHandler+0xc9c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d018      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a6e      	ldr	r2, [pc, #440]	; (8004aa0 <HAL_DMA_IRQHandler+0xca0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6d      	ldr	r2, [pc, #436]	; (8004aa4 <HAL_DMA_IRQHandler+0xca4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d00e      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a6b      	ldr	r2, [pc, #428]	; (8004aa8 <HAL_DMA_IRQHandler+0xca8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d009      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a6a      	ldr	r2, [pc, #424]	; (8004aac <HAL_DMA_IRQHandler+0xcac>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d004      	beq.n	8004912 <HAL_DMA_IRQHandler+0xb12>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a68      	ldr	r2, [pc, #416]	; (8004ab0 <HAL_DMA_IRQHandler+0xcb0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d108      	bne.n	8004924 <HAL_DMA_IRQHandler+0xb24>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 0208 	bic.w	r2, r2, #8
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e007      	b.n	8004934 <HAL_DMA_IRQHandler+0xb34>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0204 	bic.w	r2, r2, #4
 8004932:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8165 	beq.w	8004c08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004946:	e15f      	b.n	8004c08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2202      	movs	r2, #2
 8004952:	409a      	lsls	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80c5 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0xce8>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80bf 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2202      	movs	r2, #2
 8004974:	409a      	lsls	r2, r3
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 813a 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a0:	e134      	b.n	8004c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8130 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b4:	e12a      	b.n	8004c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 8089 	bne.w	8004ad4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <HAL_DMA_IRQHandler+0xc74>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d04a      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <HAL_DMA_IRQHandler+0xc78>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d045      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a28      	ldr	r2, [pc, #160]	; (8004a7c <HAL_DMA_IRQHandler+0xc7c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d040      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <HAL_DMA_IRQHandler+0xc80>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d03b      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a25      	ldr	r2, [pc, #148]	; (8004a84 <HAL_DMA_IRQHandler+0xc84>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d036      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a23      	ldr	r2, [pc, #140]	; (8004a88 <HAL_DMA_IRQHandler+0xc88>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d031      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a22      	ldr	r2, [pc, #136]	; (8004a8c <HAL_DMA_IRQHandler+0xc8c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d02c      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a20      	ldr	r2, [pc, #128]	; (8004a90 <HAL_DMA_IRQHandler+0xc90>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d027      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1f      	ldr	r2, [pc, #124]	; (8004a94 <HAL_DMA_IRQHandler+0xc94>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d022      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_DMA_IRQHandler+0xc98>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d01d      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <HAL_DMA_IRQHandler+0xc9c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d018      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <HAL_DMA_IRQHandler+0xca0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d013      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <HAL_DMA_IRQHandler+0xca4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00e      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <HAL_DMA_IRQHandler+0xca8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d009      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a16      	ldr	r2, [pc, #88]	; (8004aac <HAL_DMA_IRQHandler+0xcac>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d004      	beq.n	8004a62 <HAL_DMA_IRQHandler+0xc62>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <HAL_DMA_IRQHandler+0xcb0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d128      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0xcb4>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0214 	bic.w	r2, r2, #20
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e027      	b.n	8004ac4 <HAL_DMA_IRQHandler+0xcc4>
 8004a74:	40020010 	.word	0x40020010
 8004a78:	40020028 	.word	0x40020028
 8004a7c:	40020040 	.word	0x40020040
 8004a80:	40020058 	.word	0x40020058
 8004a84:	40020070 	.word	0x40020070
 8004a88:	40020088 	.word	0x40020088
 8004a8c:	400200a0 	.word	0x400200a0
 8004a90:	400200b8 	.word	0x400200b8
 8004a94:	40020410 	.word	0x40020410
 8004a98:	40020428 	.word	0x40020428
 8004a9c:	40020440 	.word	0x40020440
 8004aa0:	40020458 	.word	0x40020458
 8004aa4:	40020470 	.word	0x40020470
 8004aa8:	40020488 	.word	0x40020488
 8004aac:	400204a0 	.word	0x400204a0
 8004ab0:	400204b8 	.word	0x400204b8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 020a 	bic.w	r2, r2, #10
 8004ac2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8097 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ae6:	e091      	b.n	8004c0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2208      	movs	r2, #8
 8004af2:	409a      	lsls	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	4013      	ands	r3, r2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8088 	beq.w	8004c0e <HAL_DMA_IRQHandler+0xe0e>
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8082 	beq.w	8004c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a41      	ldr	r2, [pc, #260]	; (8004c14 <HAL_DMA_IRQHandler+0xe14>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d04a      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <HAL_DMA_IRQHandler+0xe18>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d045      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3e      	ldr	r2, [pc, #248]	; (8004c1c <HAL_DMA_IRQHandler+0xe1c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d040      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <HAL_DMA_IRQHandler+0xe20>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d03b      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <HAL_DMA_IRQHandler+0xe24>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d036      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <HAL_DMA_IRQHandler+0xe28>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d031      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a38      	ldr	r2, [pc, #224]	; (8004c2c <HAL_DMA_IRQHandler+0xe2c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d02c      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <HAL_DMA_IRQHandler+0xe30>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d027      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a35      	ldr	r2, [pc, #212]	; (8004c34 <HAL_DMA_IRQHandler+0xe34>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d022      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <HAL_DMA_IRQHandler+0xe38>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01d      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a32      	ldr	r2, [pc, #200]	; (8004c3c <HAL_DMA_IRQHandler+0xe3c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d018      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a30      	ldr	r2, [pc, #192]	; (8004c40 <HAL_DMA_IRQHandler+0xe40>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d013      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <HAL_DMA_IRQHandler+0xe44>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00e      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2d      	ldr	r2, [pc, #180]	; (8004c48 <HAL_DMA_IRQHandler+0xe48>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d009      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <HAL_DMA_IRQHandler+0xe4c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_DMA_IRQHandler+0xdaa>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a2a      	ldr	r2, [pc, #168]	; (8004c50 <HAL_DMA_IRQHandler+0xe50>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d108      	bne.n	8004bbc <HAL_DMA_IRQHandler+0xdbc>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 021c 	bic.w	r2, r2, #28
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e007      	b.n	8004bcc <HAL_DMA_IRQHandler+0xdcc>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 020e 	bic.w	r2, r2, #14
 8004bca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	f003 031f 	and.w	r3, r3, #31
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
 8004c02:	e004      	b.n	8004c0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c04:	bf00      	nop
 8004c06:	e002      	b.n	8004c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c08:	bf00      	nop
 8004c0a:	e000      	b.n	8004c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c0e:	3728      	adds	r7, #40	; 0x28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40020010 	.word	0x40020010
 8004c18:	40020028 	.word	0x40020028
 8004c1c:	40020040 	.word	0x40020040
 8004c20:	40020058 	.word	0x40020058
 8004c24:	40020070 	.word	0x40020070
 8004c28:	40020088 	.word	0x40020088
 8004c2c:	400200a0 	.word	0x400200a0
 8004c30:	400200b8 	.word	0x400200b8
 8004c34:	40020410 	.word	0x40020410
 8004c38:	40020428 	.word	0x40020428
 8004c3c:	40020440 	.word	0x40020440
 8004c40:	40020458 	.word	0x40020458
 8004c44:	40020470 	.word	0x40020470
 8004c48:	40020488 	.word	0x40020488
 8004c4c:	400204a0 	.word	0x400204a0
 8004c50:	400204b8 	.word	0x400204b8

08004c54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a7f      	ldr	r2, [pc, #508]	; (8004e70 <DMA_SetConfig+0x21c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d072      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a7d      	ldr	r2, [pc, #500]	; (8004e74 <DMA_SetConfig+0x220>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d06d      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a7c      	ldr	r2, [pc, #496]	; (8004e78 <DMA_SetConfig+0x224>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d068      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a7a      	ldr	r2, [pc, #488]	; (8004e7c <DMA_SetConfig+0x228>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d063      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a79      	ldr	r2, [pc, #484]	; (8004e80 <DMA_SetConfig+0x22c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d05e      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a77      	ldr	r2, [pc, #476]	; (8004e84 <DMA_SetConfig+0x230>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d059      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a76      	ldr	r2, [pc, #472]	; (8004e88 <DMA_SetConfig+0x234>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d054      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a74      	ldr	r2, [pc, #464]	; (8004e8c <DMA_SetConfig+0x238>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d04f      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a73      	ldr	r2, [pc, #460]	; (8004e90 <DMA_SetConfig+0x23c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d04a      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a71      	ldr	r2, [pc, #452]	; (8004e94 <DMA_SetConfig+0x240>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d045      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a70      	ldr	r2, [pc, #448]	; (8004e98 <DMA_SetConfig+0x244>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d040      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6e      	ldr	r2, [pc, #440]	; (8004e9c <DMA_SetConfig+0x248>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d03b      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6d      	ldr	r2, [pc, #436]	; (8004ea0 <DMA_SetConfig+0x24c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d036      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a6b      	ldr	r2, [pc, #428]	; (8004ea4 <DMA_SetConfig+0x250>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d031      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a6a      	ldr	r2, [pc, #424]	; (8004ea8 <DMA_SetConfig+0x254>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d02c      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a68      	ldr	r2, [pc, #416]	; (8004eac <DMA_SetConfig+0x258>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d027      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a67      	ldr	r2, [pc, #412]	; (8004eb0 <DMA_SetConfig+0x25c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a65      	ldr	r2, [pc, #404]	; (8004eb4 <DMA_SetConfig+0x260>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01d      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a64      	ldr	r2, [pc, #400]	; (8004eb8 <DMA_SetConfig+0x264>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a62      	ldr	r2, [pc, #392]	; (8004ebc <DMA_SetConfig+0x268>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a61      	ldr	r2, [pc, #388]	; (8004ec0 <DMA_SetConfig+0x26c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5f      	ldr	r2, [pc, #380]	; (8004ec4 <DMA_SetConfig+0x270>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a5e      	ldr	r2, [pc, #376]	; (8004ec8 <DMA_SetConfig+0x274>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <DMA_SetConfig+0x10a>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a5c      	ldr	r2, [pc, #368]	; (8004ecc <DMA_SetConfig+0x278>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d101      	bne.n	8004d62 <DMA_SetConfig+0x10e>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <DMA_SetConfig+0x110>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d004      	beq.n	8004d84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a39      	ldr	r2, [pc, #228]	; (8004e70 <DMA_SetConfig+0x21c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d04a      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a38      	ldr	r2, [pc, #224]	; (8004e74 <DMA_SetConfig+0x220>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d045      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a36      	ldr	r2, [pc, #216]	; (8004e78 <DMA_SetConfig+0x224>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d040      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a35      	ldr	r2, [pc, #212]	; (8004e7c <DMA_SetConfig+0x228>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d03b      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a33      	ldr	r2, [pc, #204]	; (8004e80 <DMA_SetConfig+0x22c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d036      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a32      	ldr	r2, [pc, #200]	; (8004e84 <DMA_SetConfig+0x230>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d031      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a30      	ldr	r2, [pc, #192]	; (8004e88 <DMA_SetConfig+0x234>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d02c      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <DMA_SetConfig+0x238>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d027      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2d      	ldr	r2, [pc, #180]	; (8004e90 <DMA_SetConfig+0x23c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d022      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2c      	ldr	r2, [pc, #176]	; (8004e94 <DMA_SetConfig+0x240>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01d      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <DMA_SetConfig+0x244>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a29      	ldr	r2, [pc, #164]	; (8004e9c <DMA_SetConfig+0x248>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a27      	ldr	r2, [pc, #156]	; (8004ea0 <DMA_SetConfig+0x24c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a26      	ldr	r2, [pc, #152]	; (8004ea4 <DMA_SetConfig+0x250>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a24      	ldr	r2, [pc, #144]	; (8004ea8 <DMA_SetConfig+0x254>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <DMA_SetConfig+0x1d0>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a23      	ldr	r2, [pc, #140]	; (8004eac <DMA_SetConfig+0x258>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d101      	bne.n	8004e28 <DMA_SetConfig+0x1d4>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <DMA_SetConfig+0x1d6>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d059      	beq.n	8004ee2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	223f      	movs	r2, #63	; 0x3f
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d138      	bne.n	8004ed0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e6e:	e086      	b.n	8004f7e <DMA_SetConfig+0x32a>
 8004e70:	40020010 	.word	0x40020010
 8004e74:	40020028 	.word	0x40020028
 8004e78:	40020040 	.word	0x40020040
 8004e7c:	40020058 	.word	0x40020058
 8004e80:	40020070 	.word	0x40020070
 8004e84:	40020088 	.word	0x40020088
 8004e88:	400200a0 	.word	0x400200a0
 8004e8c:	400200b8 	.word	0x400200b8
 8004e90:	40020410 	.word	0x40020410
 8004e94:	40020428 	.word	0x40020428
 8004e98:	40020440 	.word	0x40020440
 8004e9c:	40020458 	.word	0x40020458
 8004ea0:	40020470 	.word	0x40020470
 8004ea4:	40020488 	.word	0x40020488
 8004ea8:	400204a0 	.word	0x400204a0
 8004eac:	400204b8 	.word	0x400204b8
 8004eb0:	58025408 	.word	0x58025408
 8004eb4:	5802541c 	.word	0x5802541c
 8004eb8:	58025430 	.word	0x58025430
 8004ebc:	58025444 	.word	0x58025444
 8004ec0:	58025458 	.word	0x58025458
 8004ec4:	5802546c 	.word	0x5802546c
 8004ec8:	58025480 	.word	0x58025480
 8004ecc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	60da      	str	r2, [r3, #12]
}
 8004ee0:	e04d      	b.n	8004f7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a29      	ldr	r2, [pc, #164]	; (8004f8c <DMA_SetConfig+0x338>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d022      	beq.n	8004f32 <DMA_SetConfig+0x2de>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a27      	ldr	r2, [pc, #156]	; (8004f90 <DMA_SetConfig+0x33c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01d      	beq.n	8004f32 <DMA_SetConfig+0x2de>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a26      	ldr	r2, [pc, #152]	; (8004f94 <DMA_SetConfig+0x340>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d018      	beq.n	8004f32 <DMA_SetConfig+0x2de>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a24      	ldr	r2, [pc, #144]	; (8004f98 <DMA_SetConfig+0x344>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <DMA_SetConfig+0x2de>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <DMA_SetConfig+0x348>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00e      	beq.n	8004f32 <DMA_SetConfig+0x2de>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <DMA_SetConfig+0x34c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d009      	beq.n	8004f32 <DMA_SetConfig+0x2de>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <DMA_SetConfig+0x350>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <DMA_SetConfig+0x2de>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <DMA_SetConfig+0x354>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <DMA_SetConfig+0x2e2>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <DMA_SetConfig+0x2e4>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2201      	movs	r2, #1
 8004f46:	409a      	lsls	r2, r3
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d108      	bne.n	8004f6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	60da      	str	r2, [r3, #12]
}
 8004f6c:	e007      	b.n	8004f7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	58025408 	.word	0x58025408
 8004f90:	5802541c 	.word	0x5802541c
 8004f94:	58025430 	.word	0x58025430
 8004f98:	58025444 	.word	0x58025444
 8004f9c:	58025458 	.word	0x58025458
 8004fa0:	5802546c 	.word	0x5802546c
 8004fa4:	58025480 	.word	0x58025480
 8004fa8:	58025494 	.word	0x58025494

08004fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a42      	ldr	r2, [pc, #264]	; (80050c4 <DMA_CalcBaseAndBitshift+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d04a      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a41      	ldr	r2, [pc, #260]	; (80050c8 <DMA_CalcBaseAndBitshift+0x11c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d045      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3f      	ldr	r2, [pc, #252]	; (80050cc <DMA_CalcBaseAndBitshift+0x120>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d040      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3e      	ldr	r2, [pc, #248]	; (80050d0 <DMA_CalcBaseAndBitshift+0x124>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d03b      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <DMA_CalcBaseAndBitshift+0x128>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d036      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <DMA_CalcBaseAndBitshift+0x12c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d031      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a39      	ldr	r2, [pc, #228]	; (80050dc <DMA_CalcBaseAndBitshift+0x130>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d02c      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <DMA_CalcBaseAndBitshift+0x134>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d027      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a36      	ldr	r2, [pc, #216]	; (80050e4 <DMA_CalcBaseAndBitshift+0x138>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a35      	ldr	r2, [pc, #212]	; (80050e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d01d      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a33      	ldr	r2, [pc, #204]	; (80050ec <DMA_CalcBaseAndBitshift+0x140>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a32      	ldr	r2, [pc, #200]	; (80050f0 <DMA_CalcBaseAndBitshift+0x144>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a30      	ldr	r2, [pc, #192]	; (80050f4 <DMA_CalcBaseAndBitshift+0x148>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a2f      	ldr	r2, [pc, #188]	; (80050f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2d      	ldr	r2, [pc, #180]	; (80050fc <DMA_CalcBaseAndBitshift+0x150>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <DMA_CalcBaseAndBitshift+0xa8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2c      	ldr	r2, [pc, #176]	; (8005100 <DMA_CalcBaseAndBitshift+0x154>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <DMA_CalcBaseAndBitshift+0xac>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <DMA_CalcBaseAndBitshift+0xae>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d024      	beq.n	80050a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	3b10      	subs	r3, #16
 8005066:	4a27      	ldr	r2, [pc, #156]	; (8005104 <DMA_CalcBaseAndBitshift+0x158>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	4a24      	ldr	r2, [pc, #144]	; (8005108 <DMA_CalcBaseAndBitshift+0x15c>)
 8005078:	5cd3      	ldrb	r3, [r2, r3]
 800507a:	461a      	mov	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d908      	bls.n	8005098 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	4b1f      	ldr	r3, [pc, #124]	; (800510c <DMA_CalcBaseAndBitshift+0x160>)
 800508e:	4013      	ands	r3, r2
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	659a      	str	r2, [r3, #88]	; 0x58
 8005096:	e00d      	b.n	80050b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	4b1b      	ldr	r3, [pc, #108]	; (800510c <DMA_CalcBaseAndBitshift+0x160>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6593      	str	r3, [r2, #88]	; 0x58
 80050a6:	e005      	b.n	80050b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40020010 	.word	0x40020010
 80050c8:	40020028 	.word	0x40020028
 80050cc:	40020040 	.word	0x40020040
 80050d0:	40020058 	.word	0x40020058
 80050d4:	40020070 	.word	0x40020070
 80050d8:	40020088 	.word	0x40020088
 80050dc:	400200a0 	.word	0x400200a0
 80050e0:	400200b8 	.word	0x400200b8
 80050e4:	40020410 	.word	0x40020410
 80050e8:	40020428 	.word	0x40020428
 80050ec:	40020440 	.word	0x40020440
 80050f0:	40020458 	.word	0x40020458
 80050f4:	40020470 	.word	0x40020470
 80050f8:	40020488 	.word	0x40020488
 80050fc:	400204a0 	.word	0x400204a0
 8005100:	400204b8 	.word	0x400204b8
 8005104:	aaaaaaab 	.word	0xaaaaaaab
 8005108:	0800b61c 	.word	0x0800b61c
 800510c:	fffffc00 	.word	0xfffffc00

08005110 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d120      	bne.n	8005166 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	2b03      	cmp	r3, #3
 800512a:	d858      	bhi.n	80051de <DMA_CheckFifoParam+0xce>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <DMA_CheckFifoParam+0x24>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005145 	.word	0x08005145
 8005138:	08005157 	.word	0x08005157
 800513c:	08005145 	.word	0x08005145
 8005140:	080051df 	.word	0x080051df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d048      	beq.n	80051e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005154:	e045      	b.n	80051e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800515e:	d142      	bne.n	80051e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005164:	e03f      	b.n	80051e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516e:	d123      	bne.n	80051b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005174:	2b03      	cmp	r3, #3
 8005176:	d838      	bhi.n	80051ea <DMA_CheckFifoParam+0xda>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <DMA_CheckFifoParam+0x70>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	08005191 	.word	0x08005191
 8005184:	08005197 	.word	0x08005197
 8005188:	08005191 	.word	0x08005191
 800518c:	080051a9 	.word	0x080051a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
        break;
 8005194:	e030      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d025      	beq.n	80051ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051a6:	e022      	b.n	80051ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051b0:	d11f      	bne.n	80051f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051b6:	e01c      	b.n	80051f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d902      	bls.n	80051c6 <DMA_CheckFifoParam+0xb6>
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d003      	beq.n	80051cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80051c4:	e018      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
        break;
 80051ca:	e015      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
    break;
 80051dc:	e00b      	b.n	80051f6 <DMA_CheckFifoParam+0xe6>
        break;
 80051de:	bf00      	nop
 80051e0:	e00a      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
        break;
 80051e2:	bf00      	nop
 80051e4:	e008      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
        break;
 80051e6:	bf00      	nop
 80051e8:	e006      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
        break;
 80051ea:	bf00      	nop
 80051ec:	e004      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
        break;
 80051ee:	bf00      	nop
 80051f0:	e002      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
        break;
 80051f2:	bf00      	nop
 80051f4:	e000      	b.n	80051f8 <DMA_CheckFifoParam+0xe8>
    break;
 80051f6:	bf00      	nop
    }
  }

  return status;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop

08005208 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a38      	ldr	r2, [pc, #224]	; (80052fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d022      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a36      	ldr	r2, [pc, #216]	; (8005300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01d      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a35      	ldr	r2, [pc, #212]	; (8005304 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d018      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a33      	ldr	r2, [pc, #204]	; (8005308 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a32      	ldr	r2, [pc, #200]	; (800530c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a30      	ldr	r2, [pc, #192]	; (8005310 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2f      	ldr	r2, [pc, #188]	; (8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2d      	ldr	r2, [pc, #180]	; (8005318 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01a      	beq.n	80052a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	3b08      	subs	r3, #8
 8005278:	4a28      	ldr	r2, [pc, #160]	; (800531c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4b26      	ldr	r3, [pc, #152]	; (8005320 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	461a      	mov	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a24      	ldr	r2, [pc, #144]	; (8005324 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005294:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	2201      	movs	r2, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80052a4:	e024      	b.n	80052f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	3b10      	subs	r3, #16
 80052ae:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80052b0:	fba2 2303 	umull	r2, r3, r2, r3
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4a1c      	ldr	r2, [pc, #112]	; (800532c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d806      	bhi.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d902      	bls.n	80052ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3308      	adds	r3, #8
 80052cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	461a      	mov	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a16      	ldr	r2, [pc, #88]	; (8005338 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80052e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	2201      	movs	r2, #1
 80052ea:	409a      	lsls	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	58025408 	.word	0x58025408
 8005300:	5802541c 	.word	0x5802541c
 8005304:	58025430 	.word	0x58025430
 8005308:	58025444 	.word	0x58025444
 800530c:	58025458 	.word	0x58025458
 8005310:	5802546c 	.word	0x5802546c
 8005314:	58025480 	.word	0x58025480
 8005318:	58025494 	.word	0x58025494
 800531c:	cccccccd 	.word	0xcccccccd
 8005320:	16009600 	.word	0x16009600
 8005324:	58025880 	.word	0x58025880
 8005328:	aaaaaaab 	.word	0xaaaaaaab
 800532c:	400204b8 	.word	0x400204b8
 8005330:	4002040f 	.word	0x4002040f
 8005334:	10008200 	.word	0x10008200
 8005338:	40020880 	.word	0x40020880

0800533c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d04a      	beq.n	80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d847      	bhi.n	80053e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a25      	ldr	r2, [pc, #148]	; (80053f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a24      	ldr	r2, [pc, #144]	; (80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d01d      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1c      	ldr	r2, [pc, #112]	; (800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d101      	bne.n	80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4b17      	ldr	r3, [pc, #92]	; (8005414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	461a      	mov	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80053c4:	671a      	str	r2, [r3, #112]	; 0x70
 80053c6:	e009      	b.n	80053dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4b14      	ldr	r3, [pc, #80]	; (800541c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80053cc:	4413      	add	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a11      	ldr	r2, [pc, #68]	; (8005420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80053da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3b01      	subs	r3, #1
 80053e0:	2201      	movs	r2, #1
 80053e2:	409a      	lsls	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494
 8005414:	1600963f 	.word	0x1600963f
 8005418:	58025940 	.word	0x58025940
 800541c:	1000823f 	.word	0x1000823f
 8005420:	40020940 	.word	0x40020940

08005424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	; 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800542e:	2300      	movs	r3, #0
 8005430:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005432:	4b89      	ldr	r3, [pc, #548]	; (8005658 <HAL_GPIO_Init+0x234>)
 8005434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005436:	e194      	b.n	8005762 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	fa01 f303 	lsl.w	r3, r1, r3
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8186 	beq.w	800575c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d005      	beq.n	8005468 <HAL_GPIO_Init+0x44>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d130      	bne.n	80054ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4313      	orrs	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800549e:	2201      	movs	r2, #1
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	4013      	ands	r3, r2
 80054ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	f003 0201 	and.w	r2, r3, #1
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d017      	beq.n	8005506 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d123      	bne.n	800555a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	08da      	lsrs	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3208      	adds	r2, #8
 800551a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800551e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	220f      	movs	r2, #15
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	43db      	mvns	r3, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4013      	ands	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691a      	ldr	r2, [r3, #16]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	69b9      	ldr	r1, [r7, #24]
 8005556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 0203 	and.w	r2, r3, #3
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80e0 	beq.w	800575c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800559c:	4b2f      	ldr	r3, [pc, #188]	; (800565c <HAL_GPIO_Init+0x238>)
 800559e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055a2:	4a2e      	ldr	r2, [pc, #184]	; (800565c <HAL_GPIO_Init+0x238>)
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80055ac:	4b2b      	ldr	r3, [pc, #172]	; (800565c <HAL_GPIO_Init+0x238>)
 80055ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ba:	4a29      	ldr	r2, [pc, #164]	; (8005660 <HAL_GPIO_Init+0x23c>)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	3302      	adds	r3, #2
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	220f      	movs	r2, #15
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a20      	ldr	r2, [pc, #128]	; (8005664 <HAL_GPIO_Init+0x240>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d052      	beq.n	800568c <HAL_GPIO_Init+0x268>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <HAL_GPIO_Init+0x244>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d031      	beq.n	8005652 <HAL_GPIO_Init+0x22e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1e      	ldr	r2, [pc, #120]	; (800566c <HAL_GPIO_Init+0x248>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d02b      	beq.n	800564e <HAL_GPIO_Init+0x22a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <HAL_GPIO_Init+0x24c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d025      	beq.n	800564a <HAL_GPIO_Init+0x226>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <HAL_GPIO_Init+0x250>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <HAL_GPIO_Init+0x222>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <HAL_GPIO_Init+0x254>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d019      	beq.n	8005642 <HAL_GPIO_Init+0x21e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1a      	ldr	r2, [pc, #104]	; (800567c <HAL_GPIO_Init+0x258>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_GPIO_Init+0x21a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a19      	ldr	r2, [pc, #100]	; (8005680 <HAL_GPIO_Init+0x25c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00d      	beq.n	800563a <HAL_GPIO_Init+0x216>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a18      	ldr	r2, [pc, #96]	; (8005684 <HAL_GPIO_Init+0x260>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <HAL_GPIO_Init+0x212>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a17      	ldr	r2, [pc, #92]	; (8005688 <HAL_GPIO_Init+0x264>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <HAL_GPIO_Init+0x20e>
 800562e:	2309      	movs	r3, #9
 8005630:	e02d      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005632:	230a      	movs	r3, #10
 8005634:	e02b      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005636:	2308      	movs	r3, #8
 8005638:	e029      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800563a:	2307      	movs	r3, #7
 800563c:	e027      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800563e:	2306      	movs	r3, #6
 8005640:	e025      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005642:	2305      	movs	r3, #5
 8005644:	e023      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005646:	2304      	movs	r3, #4
 8005648:	e021      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800564a:	2303      	movs	r3, #3
 800564c:	e01f      	b.n	800568e <HAL_GPIO_Init+0x26a>
 800564e:	2302      	movs	r3, #2
 8005650:	e01d      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005652:	2301      	movs	r3, #1
 8005654:	e01b      	b.n	800568e <HAL_GPIO_Init+0x26a>
 8005656:	bf00      	nop
 8005658:	58000080 	.word	0x58000080
 800565c:	58024400 	.word	0x58024400
 8005660:	58000400 	.word	0x58000400
 8005664:	58020000 	.word	0x58020000
 8005668:	58020400 	.word	0x58020400
 800566c:	58020800 	.word	0x58020800
 8005670:	58020c00 	.word	0x58020c00
 8005674:	58021000 	.word	0x58021000
 8005678:	58021400 	.word	0x58021400
 800567c:	58021800 	.word	0x58021800
 8005680:	58021c00 	.word	0x58021c00
 8005684:	58022000 	.word	0x58022000
 8005688:	58022400 	.word	0x58022400
 800568c:	2300      	movs	r3, #0
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	f002 0203 	and.w	r2, r2, #3
 8005694:	0092      	lsls	r2, r2, #2
 8005696:	4093      	lsls	r3, r2
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800569e:	4938      	ldr	r1, [pc, #224]	; (8005780 <HAL_GPIO_Init+0x35c>)
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	089b      	lsrs	r3, r3, #2
 80056a4:	3302      	adds	r3, #2
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4013      	ands	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80056d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80056da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	43db      	mvns	r3, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4013      	ands	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005700:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	43db      	mvns	r3, r3
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4013      	ands	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	43db      	mvns	r3, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	3301      	adds	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	f47f ae63 	bne.w	8005438 <HAL_GPIO_Init+0x14>
  }
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	3724      	adds	r7, #36	; 0x24
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	58000400 	.word	0x58000400

08005784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
 8005790:	4613      	mov	r3, r2
 8005792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005794:	787b      	ldrb	r3, [r7, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80057a0:	e003      	b.n	80057aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	041a      	lsls	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	619a      	str	r2, [r3, #24]
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80057c0:	4a08      	ldr	r2, [pc, #32]	; (80057e4 <HAL_HSEM_FastTake+0x2c>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3320      	adds	r3, #32
 80057c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ca:	4a07      	ldr	r2, [pc, #28]	; (80057e8 <HAL_HSEM_FastTake+0x30>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d101      	bne.n	80057d4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	58026400 	.word	0x58026400
 80057e8:	80000300 	.word	0x80000300

080057ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80057f6:	4906      	ldr	r1, [pc, #24]	; (8005810 <HAL_HSEM_Release+0x24>)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	58026400 	.word	0x58026400

08005814 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800581c:	4b29      	ldr	r3, [pc, #164]	; (80058c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	2b06      	cmp	r3, #6
 8005826:	d00a      	beq.n	800583e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005828:	4b26      	ldr	r3, [pc, #152]	; (80058c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d001      	beq.n	800583a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e040      	b.n	80058bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	e03e      	b.n	80058bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800583e:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005846:	491f      	ldr	r1, [pc, #124]	; (80058c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4313      	orrs	r3, r2
 800584c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800584e:	f7fb ffbd 	bl	80017cc <HAL_GetTick>
 8005852:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005854:	e009      	b.n	800586a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005856:	f7fb ffb9 	bl	80017cc <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005864:	d901      	bls.n	800586a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e028      	b.n	80058bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800586a:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	d1ee      	bne.n	8005856 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b1e      	cmp	r3, #30
 800587c:	d008      	beq.n	8005890 <HAL_PWREx_ConfigSupply+0x7c>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b2e      	cmp	r3, #46	; 0x2e
 8005882:	d005      	beq.n	8005890 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b1d      	cmp	r3, #29
 8005888:	d002      	beq.n	8005890 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b2d      	cmp	r3, #45	; 0x2d
 800588e:	d114      	bne.n	80058ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005890:	f7fb ff9c 	bl	80017cc <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005896:	e009      	b.n	80058ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005898:	f7fb ff98 	bl	80017cc <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a6:	d901      	bls.n	80058ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e007      	b.n	80058bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80058ac:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d1ee      	bne.n	8005898 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	58024800 	.word	0x58024800

080058c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08c      	sub	sp, #48	; 0x30
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f000 bc48 	b.w	800616c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8088 	beq.w	80059fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ea:	4b99      	ldr	r3, [pc, #612]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058f4:	4b96      	ldr	r3, [pc, #600]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	2b10      	cmp	r3, #16
 80058fe:	d007      	beq.n	8005910 <HAL_RCC_OscConfig+0x48>
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	2b18      	cmp	r3, #24
 8005904:	d111      	bne.n	800592a <HAL_RCC_OscConfig+0x62>
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d10c      	bne.n	800592a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005910:	4b8f      	ldr	r3, [pc, #572]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d06d      	beq.n	80059f8 <HAL_RCC_OscConfig+0x130>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d169      	bne.n	80059f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f000 bc21 	b.w	800616c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005932:	d106      	bne.n	8005942 <HAL_RCC_OscConfig+0x7a>
 8005934:	4b86      	ldr	r3, [pc, #536]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a85      	ldr	r2, [pc, #532]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 800593a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e02e      	b.n	80059a0 <HAL_RCC_OscConfig+0xd8>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10c      	bne.n	8005964 <HAL_RCC_OscConfig+0x9c>
 800594a:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a80      	ldr	r2, [pc, #512]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	4b7e      	ldr	r3, [pc, #504]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a7d      	ldr	r2, [pc, #500]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 800595c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	e01d      	b.n	80059a0 <HAL_RCC_OscConfig+0xd8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800596c:	d10c      	bne.n	8005988 <HAL_RCC_OscConfig+0xc0>
 800596e:	4b78      	ldr	r3, [pc, #480]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a77      	ldr	r2, [pc, #476]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	4b75      	ldr	r3, [pc, #468]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a74      	ldr	r2, [pc, #464]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e00b      	b.n	80059a0 <HAL_RCC_OscConfig+0xd8>
 8005988:	4b71      	ldr	r3, [pc, #452]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a70      	ldr	r2, [pc, #448]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 800598e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	4b6e      	ldr	r3, [pc, #440]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a6d      	ldr	r2, [pc, #436]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 800599a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d013      	beq.n	80059d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a8:	f7fb ff10 	bl	80017cc <HAL_GetTick>
 80059ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059b0:	f7fb ff0c 	bl	80017cc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b64      	cmp	r3, #100	; 0x64
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e3d4      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059c2:	4b63      	ldr	r3, [pc, #396]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0xe8>
 80059ce:	e014      	b.n	80059fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d0:	f7fb fefc 	bl	80017cc <HAL_GetTick>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059d6:	e008      	b.n	80059ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d8:	f7fb fef8 	bl	80017cc <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b64      	cmp	r3, #100	; 0x64
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e3c0      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80059ea:	4b59      	ldr	r3, [pc, #356]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1f0      	bne.n	80059d8 <HAL_RCC_OscConfig+0x110>
 80059f6:	e000      	b.n	80059fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80ca 	beq.w	8005b9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a08:	4b51      	ldr	r3, [pc, #324]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a12:	4b4f      	ldr	r3, [pc, #316]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_RCC_OscConfig+0x166>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b18      	cmp	r3, #24
 8005a22:	d156      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x20a>
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d151      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a2e:	4b48      	ldr	r3, [pc, #288]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_RCC_OscConfig+0x17e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e392      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a46:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 0219 	bic.w	r2, r3, #25
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	493f      	ldr	r1, [pc, #252]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a58:	f7fb feb8 	bl	80017cc <HAL_GetTick>
 8005a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a60:	f7fb feb4 	bl	80017cc <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e37c      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a72:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7e:	f7fb fed5 	bl	800182c <HAL_GetREVID>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d817      	bhi.n	8005abc <HAL_RCC_OscConfig+0x1f4>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	d108      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x1de>
 8005a94:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a9c:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aa4:	e07a      	b.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	031b      	lsls	r3, r3, #12
 8005ab4:	4926      	ldr	r1, [pc, #152]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005aba:	e06f      	b.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abc:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	4921      	ldr	r1, [pc, #132]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ad0:	e064      	b.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d047      	beq.n	8005b6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ada:	4b1d      	ldr	r3, [pc, #116]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 0219 	bic.w	r2, r3, #25
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	491a      	ldr	r1, [pc, #104]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aec:	f7fb fe6e 	bl	80017cc <HAL_GetTick>
 8005af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005af2:	e008      	b.n	8005b06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af4:	f7fb fe6a 	bl	80017cc <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e332      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b06:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b12:	f7fb fe8b 	bl	800182c <HAL_GetREVID>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d819      	bhi.n	8005b54 <HAL_RCC_OscConfig+0x28c>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d108      	bne.n	8005b3a <HAL_RCC_OscConfig+0x272>
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b30:	4a07      	ldr	r2, [pc, #28]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b36:	6053      	str	r3, [r2, #4]
 8005b38:	e030      	b.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	031b      	lsls	r3, r3, #12
 8005b48:	4901      	ldr	r1, [pc, #4]	; (8005b50 <HAL_RCC_OscConfig+0x288>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	604b      	str	r3, [r1, #4]
 8005b4e:	e025      	b.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
 8005b50:	58024400 	.word	0x58024400
 8005b54:	4b9a      	ldr	r3, [pc, #616]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	4997      	ldr	r1, [pc, #604]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	604b      	str	r3, [r1, #4]
 8005b68:	e018      	b.n	8005b9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b6a:	4b95      	ldr	r3, [pc, #596]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a94      	ldr	r2, [pc, #592]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005b70:	f023 0301 	bic.w	r3, r3, #1
 8005b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7fb fe29 	bl	80017cc <HAL_GetTick>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7e:	f7fb fe25 	bl	80017cc <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e2ed      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b90:	4b8b      	ldr	r3, [pc, #556]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f0      	bne.n	8005b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0310 	and.w	r3, r3, #16
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80a9 	beq.w	8005cfc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005baa:	4b85      	ldr	r3, [pc, #532]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bb4:	4b82      	ldr	r3, [pc, #520]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d007      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x308>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	2b18      	cmp	r3, #24
 8005bc4:	d13a      	bne.n	8005c3c <HAL_RCC_OscConfig+0x374>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d135      	bne.n	8005c3c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bd0:	4b7b      	ldr	r3, [pc, #492]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_OscConfig+0x320>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	2b80      	cmp	r3, #128	; 0x80
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e2c1      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005be8:	f7fb fe20 	bl	800182c <HAL_GetREVID>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d817      	bhi.n	8005c26 <HAL_RCC_OscConfig+0x35e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d108      	bne.n	8005c10 <HAL_RCC_OscConfig+0x348>
 8005bfe:	4b70      	ldr	r3, [pc, #448]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c06:	4a6e      	ldr	r2, [pc, #440]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c0c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c0e:	e075      	b.n	8005cfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c10:	4b6b      	ldr	r3, [pc, #428]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	069b      	lsls	r3, r3, #26
 8005c1e:	4968      	ldr	r1, [pc, #416]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c24:	e06a      	b.n	8005cfc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c26:	4b66      	ldr	r3, [pc, #408]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	061b      	lsls	r3, r3, #24
 8005c34:	4962      	ldr	r1, [pc, #392]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c3a:	e05f      	b.n	8005cfc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d042      	beq.n	8005cca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c44:	4b5e      	ldr	r3, [pc, #376]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a5d      	ldr	r2, [pc, #372]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fb fdbc 	bl	80017cc <HAL_GetTick>
 8005c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c58:	f7fb fdb8 	bl	80017cc <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e280      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c6a:	4b55      	ldr	r3, [pc, #340]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c76:	f7fb fdd9 	bl	800182c <HAL_GetREVID>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d817      	bhi.n	8005cb4 <HAL_RCC_OscConfig+0x3ec>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d108      	bne.n	8005c9e <HAL_RCC_OscConfig+0x3d6>
 8005c8c:	4b4c      	ldr	r3, [pc, #304]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005c94:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c9a:	6053      	str	r3, [r2, #4]
 8005c9c:	e02e      	b.n	8005cfc <HAL_RCC_OscConfig+0x434>
 8005c9e:	4b48      	ldr	r3, [pc, #288]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	069b      	lsls	r3, r3, #26
 8005cac:	4944      	ldr	r1, [pc, #272]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	604b      	str	r3, [r1, #4]
 8005cb2:	e023      	b.n	8005cfc <HAL_RCC_OscConfig+0x434>
 8005cb4:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	061b      	lsls	r3, r3, #24
 8005cc2:	493f      	ldr	r1, [pc, #252]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60cb      	str	r3, [r1, #12]
 8005cc8:	e018      	b.n	8005cfc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005cca:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a3c      	ldr	r2, [pc, #240]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd6:	f7fb fd79 	bl	80017cc <HAL_GetTick>
 8005cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cde:	f7fb fd75 	bl	80017cc <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e23d      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cf0:	4b33      	ldr	r3, [pc, #204]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f0      	bne.n	8005cde <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0308 	and.w	r3, r3, #8
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d036      	beq.n	8005d76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d019      	beq.n	8005d44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1c:	f7fb fd56 	bl	80017cc <HAL_GetTick>
 8005d20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d24:	f7fb fd52 	bl	80017cc <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e21a      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d36:	4b22      	ldr	r3, [pc, #136]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x45c>
 8005d42:	e018      	b.n	8005d76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d48:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d50:	f7fb fd3c 	bl	80017cc <HAL_GetTick>
 8005d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d58:	f7fb fd38 	bl	80017cc <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e200      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d6a:	4b15      	ldr	r3, [pc, #84]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f0      	bne.n	8005d58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d039      	beq.n	8005df6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01c      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a0c      	ldr	r2, [pc, #48]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d96:	f7fb fd19 	bl	80017cc <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d9e:	f7fb fd15 	bl	80017cc <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e1dd      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <HAL_RCC_OscConfig+0x4f8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x4d6>
 8005dbc:	e01b      	b.n	8005df6 <HAL_RCC_OscConfig+0x52e>
 8005dbe:	bf00      	nop
 8005dc0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005dc4:	4b9b      	ldr	r3, [pc, #620]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a9a      	ldr	r2, [pc, #616]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dd0:	f7fb fcfc 	bl	80017cc <HAL_GetTick>
 8005dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005dd8:	f7fb fcf8 	bl	80017cc <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e1c0      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005dea:	4b92      	ldr	r3, [pc, #584]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1f0      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 8081 	beq.w	8005f06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e04:	4b8c      	ldr	r3, [pc, #560]	; (8006038 <HAL_RCC_OscConfig+0x770>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a8b      	ldr	r2, [pc, #556]	; (8006038 <HAL_RCC_OscConfig+0x770>)
 8005e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e10:	f7fb fcdc 	bl	80017cc <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e18:	f7fb fcd8 	bl	80017cc <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b64      	cmp	r3, #100	; 0x64
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1a0      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e2a:	4b83      	ldr	r3, [pc, #524]	; (8006038 <HAL_RCC_OscConfig+0x770>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d106      	bne.n	8005e4c <HAL_RCC_OscConfig+0x584>
 8005e3e:	4b7d      	ldr	r3, [pc, #500]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a7c      	ldr	r2, [pc, #496]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e44:	f043 0301 	orr.w	r3, r3, #1
 8005e48:	6713      	str	r3, [r2, #112]	; 0x70
 8005e4a:	e02d      	b.n	8005ea8 <HAL_RCC_OscConfig+0x5e0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10c      	bne.n	8005e6e <HAL_RCC_OscConfig+0x5a6>
 8005e54:	4b77      	ldr	r3, [pc, #476]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a76      	ldr	r2, [pc, #472]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e5a:	f023 0301 	bic.w	r3, r3, #1
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e60:	4b74      	ldr	r3, [pc, #464]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e64:	4a73      	ldr	r2, [pc, #460]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e66:	f023 0304 	bic.w	r3, r3, #4
 8005e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6c:	e01c      	b.n	8005ea8 <HAL_RCC_OscConfig+0x5e0>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b05      	cmp	r3, #5
 8005e74:	d10c      	bne.n	8005e90 <HAL_RCC_OscConfig+0x5c8>
 8005e76:	4b6f      	ldr	r3, [pc, #444]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	4a6e      	ldr	r2, [pc, #440]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	f043 0304 	orr.w	r3, r3, #4
 8005e80:	6713      	str	r3, [r2, #112]	; 0x70
 8005e82:	4b6c      	ldr	r3, [pc, #432]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	4a6b      	ldr	r2, [pc, #428]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e88:	f043 0301 	orr.w	r3, r3, #1
 8005e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8e:	e00b      	b.n	8005ea8 <HAL_RCC_OscConfig+0x5e0>
 8005e90:	4b68      	ldr	r3, [pc, #416]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e94:	4a67      	ldr	r2, [pc, #412]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e96:	f023 0301 	bic.w	r3, r3, #1
 8005e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e9c:	4b65      	ldr	r3, [pc, #404]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea0:	4a64      	ldr	r2, [pc, #400]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005ea2:	f023 0304 	bic.w	r3, r3, #4
 8005ea6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb0:	f7fb fc8c 	bl	80017cc <HAL_GetTick>
 8005eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb8:	f7fb fc88 	bl	80017cc <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e14e      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ece:	4b59      	ldr	r3, [pc, #356]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0ee      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x5f0>
 8005eda:	e014      	b.n	8005f06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005edc:	f7fb fc76 	bl	80017cc <HAL_GetTick>
 8005ee0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ee2:	e00a      	b.n	8005efa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee4:	f7fb fc72 	bl	80017cc <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e138      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005efa:	4b4e      	ldr	r3, [pc, #312]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1ee      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 812d 	beq.w	800616a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f10:	4b48      	ldr	r3, [pc, #288]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f18:	2b18      	cmp	r3, #24
 8005f1a:	f000 80bd 	beq.w	8006098 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	f040 809e 	bne.w	8006064 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f28:	4b42      	ldr	r3, [pc, #264]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a41      	ldr	r2, [pc, #260]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fb fc4a 	bl	80017cc <HAL_GetTick>
 8005f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f3c:	f7fb fc46 	bl	80017cc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e10e      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f5a:	4b36      	ldr	r3, [pc, #216]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f5e:	4b37      	ldr	r3, [pc, #220]	; (800603c <HAL_RCC_OscConfig+0x774>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f6a:	0112      	lsls	r2, r2, #4
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	4931      	ldr	r1, [pc, #196]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	628b      	str	r3, [r1, #40]	; 0x28
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	3b01      	subs	r3, #1
 8005f84:	025b      	lsls	r3, r3, #9
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	041b      	lsls	r3, r3, #16
 8005f92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fa4:	4923      	ldr	r1, [pc, #140]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005faa:	4b22      	ldr	r3, [pc, #136]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	4a21      	ldr	r2, [pc, #132]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005fb6:	4b1f      	ldr	r3, [pc, #124]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fba:	4b21      	ldr	r3, [pc, #132]	; (8006040 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005fc2:	00d2      	lsls	r2, r2, #3
 8005fc4:	491b      	ldr	r1, [pc, #108]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005fca:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fce:	f023 020c 	bic.w	r2, r3, #12
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	4917      	ldr	r1, [pc, #92]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fdc:	4b15      	ldr	r3, [pc, #84]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f023 0202 	bic.w	r2, r3, #2
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	4912      	ldr	r1, [pc, #72]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fee:	4b11      	ldr	r3, [pc, #68]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	4a10      	ldr	r2, [pc, #64]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	4a0d      	ldr	r2, [pc, #52]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8006000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006006:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 800600c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	4a07      	ldr	r2, [pc, #28]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a04      	ldr	r2, [pc, #16]	; (8006034 <HAL_RCC_OscConfig+0x76c>)
 8006024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602a:	f7fb fbcf 	bl	80017cc <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006030:	e011      	b.n	8006056 <HAL_RCC_OscConfig+0x78e>
 8006032:	bf00      	nop
 8006034:	58024400 	.word	0x58024400
 8006038:	58024800 	.word	0x58024800
 800603c:	fffffc0c 	.word	0xfffffc0c
 8006040:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006044:	f7fb fbc2 	bl	80017cc <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e08a      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006056:	4b47      	ldr	r3, [pc, #284]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x77c>
 8006062:	e082      	b.n	800616a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006064:	4b43      	ldr	r3, [pc, #268]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a42      	ldr	r2, [pc, #264]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 800606a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800606e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fb fbac 	bl	80017cc <HAL_GetTick>
 8006074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006078:	f7fb fba8 	bl	80017cc <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e070      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800608a:	4b3a      	ldr	r3, [pc, #232]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x7b0>
 8006096:	e068      	b.n	800616a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800609e:	4b35      	ldr	r3, [pc, #212]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d031      	beq.n	8006110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f003 0203 	and.w	r2, r3, #3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d12a      	bne.n	8006110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	091b      	lsrs	r3, r3, #4
 80060be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d122      	bne.n	8006110 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d11a      	bne.n	8006110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	0a5b      	lsrs	r3, r3, #9
 80060de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d111      	bne.n	8006110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	0c1b      	lsrs	r3, r3, #16
 80060f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d108      	bne.n	8006110 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	0e1b      	lsrs	r3, r3, #24
 8006102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800610c:	429a      	cmp	r2, r3
 800610e:	d001      	beq.n	8006114 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e02b      	b.n	800616c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006114:	4b17      	ldr	r3, [pc, #92]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	08db      	lsrs	r3, r3, #3
 800611a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800611e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	429a      	cmp	r2, r3
 8006128:	d01f      	beq.n	800616a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800612a:	4b12      	ldr	r3, [pc, #72]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a11      	ldr	r2, [pc, #68]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006136:	f7fb fb49 	bl	80017cc <HAL_GetTick>
 800613a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800613c:	bf00      	nop
 800613e:	f7fb fb45 	bl	80017cc <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	4293      	cmp	r3, r2
 8006148:	d0f9      	beq.n	800613e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 800614c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800614e:	4b0a      	ldr	r3, [pc, #40]	; (8006178 <HAL_RCC_OscConfig+0x8b0>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006156:	00d2      	lsls	r2, r2, #3
 8006158:	4906      	ldr	r1, [pc, #24]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 800615a:	4313      	orrs	r3, r2
 800615c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	4a04      	ldr	r2, [pc, #16]	; (8006174 <HAL_RCC_OscConfig+0x8ac>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3730      	adds	r7, #48	; 0x30
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	58024400 	.word	0x58024400
 8006178:	ffff0007 	.word	0xffff0007

0800617c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e19c      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006190:	4b8a      	ldr	r3, [pc, #552]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d910      	bls.n	80061c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619e:	4b87      	ldr	r3, [pc, #540]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 020f 	bic.w	r2, r3, #15
 80061a6:	4985      	ldr	r1, [pc, #532]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ae:	4b83      	ldr	r3, [pc, #524]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e184      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d010      	beq.n	80061ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	4b7b      	ldr	r3, [pc, #492]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061d8:	429a      	cmp	r2, r3
 80061da:	d908      	bls.n	80061ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061dc:	4b78      	ldr	r3, [pc, #480]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	4975      	ldr	r1, [pc, #468]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d010      	beq.n	800621c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	4b70      	ldr	r3, [pc, #448]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006206:	429a      	cmp	r2, r3
 8006208:	d908      	bls.n	800621c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800620a:	4b6d      	ldr	r3, [pc, #436]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	496a      	ldr	r1, [pc, #424]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006218:	4313      	orrs	r3, r2
 800621a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	4b64      	ldr	r3, [pc, #400]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006234:	429a      	cmp	r2, r3
 8006236:	d908      	bls.n	800624a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006238:	4b61      	ldr	r3, [pc, #388]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	495e      	ldr	r1, [pc, #376]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006246:	4313      	orrs	r3, r2
 8006248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0320 	and.w	r3, r3, #32
 8006252:	2b00      	cmp	r3, #0
 8006254:	d010      	beq.n	8006278 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69da      	ldr	r2, [r3, #28]
 800625a:	4b59      	ldr	r3, [pc, #356]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006262:	429a      	cmp	r2, r3
 8006264:	d908      	bls.n	8006278 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006266:	4b56      	ldr	r3, [pc, #344]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4953      	ldr	r1, [pc, #332]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006274:	4313      	orrs	r3, r2
 8006276:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	4b4d      	ldr	r3, [pc, #308]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	429a      	cmp	r2, r3
 8006292:	d908      	bls.n	80062a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006294:	4b4a      	ldr	r3, [pc, #296]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	f023 020f 	bic.w	r2, r3, #15
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4947      	ldr	r1, [pc, #284]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d055      	beq.n	800635e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80062b2:	4b43      	ldr	r3, [pc, #268]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	4940      	ldr	r1, [pc, #256]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d107      	bne.n	80062dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062cc:	4b3c      	ldr	r3, [pc, #240]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d121      	bne.n	800631c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0f6      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d107      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062e4:	4b36      	ldr	r3, [pc, #216]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d115      	bne.n	800631c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e0ea      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d107      	bne.n	800630c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062fc:	4b30      	ldr	r3, [pc, #192]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0de      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800630c:	4b2c      	ldr	r3, [pc, #176]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e0d6      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800631c:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f023 0207 	bic.w	r2, r3, #7
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	4925      	ldr	r1, [pc, #148]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800632a:	4313      	orrs	r3, r2
 800632c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632e:	f7fb fa4d 	bl	80017cc <HAL_GetTick>
 8006332:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006334:	e00a      	b.n	800634c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006336:	f7fb fa49 	bl	80017cc <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f241 3288 	movw	r2, #5000	; 0x1388
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e0be      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634c:	4b1c      	ldr	r3, [pc, #112]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	00db      	lsls	r3, r3, #3
 800635a:	429a      	cmp	r2, r3
 800635c:	d1eb      	bne.n	8006336 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d010      	beq.n	800638c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f003 030f 	and.w	r3, r3, #15
 8006376:	429a      	cmp	r2, r3
 8006378:	d208      	bcs.n	800638c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800637a:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	f023 020f 	bic.w	r2, r3, #15
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	490e      	ldr	r1, [pc, #56]	; (80063c0 <HAL_RCC_ClockConfig+0x244>)
 8006388:	4313      	orrs	r3, r2
 800638a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d214      	bcs.n	80063c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639a:	4b08      	ldr	r3, [pc, #32]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f023 020f 	bic.w	r2, r3, #15
 80063a2:	4906      	ldr	r1, [pc, #24]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b04      	ldr	r3, [pc, #16]	; (80063bc <HAL_RCC_ClockConfig+0x240>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e086      	b.n	80064ca <HAL_RCC_ClockConfig+0x34e>
 80063bc:	52002000 	.word	0x52002000
 80063c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d010      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	4b3f      	ldr	r3, [pc, #252]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063dc:	429a      	cmp	r2, r3
 80063de:	d208      	bcs.n	80063f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063e0:	4b3c      	ldr	r3, [pc, #240]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	4939      	ldr	r1, [pc, #228]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0308 	and.w	r3, r3, #8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d010      	beq.n	8006420 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	4b34      	ldr	r3, [pc, #208]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800640a:	429a      	cmp	r2, r3
 800640c:	d208      	bcs.n	8006420 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800640e:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	492e      	ldr	r1, [pc, #184]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 800641c:	4313      	orrs	r3, r2
 800641e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	4b28      	ldr	r3, [pc, #160]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006438:	429a      	cmp	r2, r3
 800643a:	d208      	bcs.n	800644e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800643c:	4b25      	ldr	r3, [pc, #148]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	4922      	ldr	r1, [pc, #136]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 800644a:	4313      	orrs	r3, r2
 800644c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d010      	beq.n	800647c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69da      	ldr	r2, [r3, #28]
 800645e:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006466:	429a      	cmp	r2, r3
 8006468:	d208      	bcs.n	800647c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800646a:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4917      	ldr	r1, [pc, #92]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 8006478:	4313      	orrs	r3, r2
 800647a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800647c:	f000 f834 	bl	80064e8 <HAL_RCC_GetSysClockFreq>
 8006480:	4602      	mov	r2, r0
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	4912      	ldr	r1, [pc, #72]	; (80064d8 <HAL_RCC_ClockConfig+0x35c>)
 800648e:	5ccb      	ldrb	r3, [r1, r3]
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800649a:	4b0e      	ldr	r3, [pc, #56]	; (80064d4 <HAL_RCC_ClockConfig+0x358>)
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	4a0d      	ldr	r2, [pc, #52]	; (80064d8 <HAL_RCC_ClockConfig+0x35c>)
 80064a4:	5cd3      	ldrb	r3, [r2, r3]
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	fa22 f303 	lsr.w	r3, r2, r3
 80064b0:	4a0a      	ldr	r2, [pc, #40]	; (80064dc <HAL_RCC_ClockConfig+0x360>)
 80064b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064b4:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <HAL_RCC_ClockConfig+0x364>)
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80064ba:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <HAL_RCC_ClockConfig+0x368>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fb f93a 	bl	8001738 <HAL_InitTick>
 80064c4:	4603      	mov	r3, r0
 80064c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	58024400 	.word	0x58024400
 80064d8:	0800b60c 	.word	0x0800b60c
 80064dc:	24000004 	.word	0x24000004
 80064e0:	24000000 	.word	0x24000000
 80064e4:	24000008 	.word	0x24000008

080064e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b089      	sub	sp, #36	; 0x24
 80064ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ee:	4bb3      	ldr	r3, [pc, #716]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064f6:	2b18      	cmp	r3, #24
 80064f8:	f200 8155 	bhi.w	80067a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <HAL_RCC_GetSysClockFreq+0x1c>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006569 	.word	0x08006569
 8006508:	080067a7 	.word	0x080067a7
 800650c:	080067a7 	.word	0x080067a7
 8006510:	080067a7 	.word	0x080067a7
 8006514:	080067a7 	.word	0x080067a7
 8006518:	080067a7 	.word	0x080067a7
 800651c:	080067a7 	.word	0x080067a7
 8006520:	080067a7 	.word	0x080067a7
 8006524:	0800658f 	.word	0x0800658f
 8006528:	080067a7 	.word	0x080067a7
 800652c:	080067a7 	.word	0x080067a7
 8006530:	080067a7 	.word	0x080067a7
 8006534:	080067a7 	.word	0x080067a7
 8006538:	080067a7 	.word	0x080067a7
 800653c:	080067a7 	.word	0x080067a7
 8006540:	080067a7 	.word	0x080067a7
 8006544:	08006595 	.word	0x08006595
 8006548:	080067a7 	.word	0x080067a7
 800654c:	080067a7 	.word	0x080067a7
 8006550:	080067a7 	.word	0x080067a7
 8006554:	080067a7 	.word	0x080067a7
 8006558:	080067a7 	.word	0x080067a7
 800655c:	080067a7 	.word	0x080067a7
 8006560:	080067a7 	.word	0x080067a7
 8006564:	0800659b 	.word	0x0800659b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006568:	4b94      	ldr	r3, [pc, #592]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006574:	4b91      	ldr	r3, [pc, #580]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	08db      	lsrs	r3, r3, #3
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	4a90      	ldr	r2, [pc, #576]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
 8006584:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006586:	e111      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006588:	4b8d      	ldr	r3, [pc, #564]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800658a:	61bb      	str	r3, [r7, #24]
      break;
 800658c:	e10e      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800658e:	4b8d      	ldr	r3, [pc, #564]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006590:	61bb      	str	r3, [r7, #24]
      break;
 8006592:	e10b      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006594:	4b8c      	ldr	r3, [pc, #560]	; (80067c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006596:	61bb      	str	r3, [r7, #24]
      break;
 8006598:	e108      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800659a:	4b88      	ldr	r3, [pc, #544]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80065a4:	4b85      	ldr	r3, [pc, #532]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a8:	091b      	lsrs	r3, r3, #4
 80065aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80065b0:	4b82      	ldr	r3, [pc, #520]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80065ba:	4b80      	ldr	r3, [pc, #512]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065be:	08db      	lsrs	r3, r3, #3
 80065c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 80e1 	beq.w	80067a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	f000 8083 	beq.w	80066ec <HAL_RCC_GetSysClockFreq+0x204>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	f200 80a1 	bhi.w	8006730 <HAL_RCC_GetSysClockFreq+0x248>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <HAL_RCC_GetSysClockFreq+0x114>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d056      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80065fa:	e099      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065fc:	4b6f      	ldr	r3, [pc, #444]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0320 	and.w	r3, r3, #32
 8006604:	2b00      	cmp	r3, #0
 8006606:	d02d      	beq.n	8006664 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006608:	4b6c      	ldr	r3, [pc, #432]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	08db      	lsrs	r3, r3, #3
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	4a6b      	ldr	r2, [pc, #428]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006614:	fa22 f303 	lsr.w	r3, r2, r3
 8006618:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	ee07 3a90 	vmov	s15, r3
 800662a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006632:	4b62      	ldr	r3, [pc, #392]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663a:	ee07 3a90 	vmov	s15, r3
 800663e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006642:	ed97 6a02 	vldr	s12, [r7, #8]
 8006646:	eddf 5a61 	vldr	s11, [pc, #388]	; 80067cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800664a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800664e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800665a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006662:	e087      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80067d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006676:	4b51      	ldr	r3, [pc, #324]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667e:	ee07 3a90 	vmov	s15, r3
 8006682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006686:	ed97 6a02 	vldr	s12, [r7, #8]
 800668a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80067cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800668e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800669a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066a6:	e065      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80067d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80066b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ba:	4b40      	ldr	r3, [pc, #256]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80067cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80066d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066ea:	e043      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80067d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80066fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fe:	4b2f      	ldr	r3, [pc, #188]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006712:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80067cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800672e:	e021      	b.n	8006774 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80067d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800673e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006742:	4b1e      	ldr	r3, [pc, #120]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006752:	ed97 6a02 	vldr	s12, [r7, #8]
 8006756:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80067cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800675a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006772:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006774:	4b11      	ldr	r3, [pc, #68]	; (80067bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	0a5b      	lsrs	r3, r3, #9
 800677a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800677e:	3301      	adds	r3, #1
 8006780:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800678c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006798:	ee17 3a90 	vmov	r3, s15
 800679c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800679e:	e005      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
      break;
 80067a4:	e002      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80067a6:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80067a8:	61bb      	str	r3, [r7, #24]
      break;
 80067aa:	bf00      	nop
  }

  return sysclockfreq;
 80067ac:	69bb      	ldr	r3, [r7, #24]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3724      	adds	r7, #36	; 0x24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	58024400 	.word	0x58024400
 80067c0:	03d09000 	.word	0x03d09000
 80067c4:	003d0900 	.word	0x003d0900
 80067c8:	007a1200 	.word	0x007a1200
 80067cc:	46000000 	.word	0x46000000
 80067d0:	4c742400 	.word	0x4c742400
 80067d4:	4a742400 	.word	0x4a742400
 80067d8:	4af42400 	.word	0x4af42400

080067dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80067e2:	f7ff fe81 	bl	80064e8 <HAL_RCC_GetSysClockFreq>
 80067e6:	4602      	mov	r2, r0
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <HAL_RCC_GetHCLKFreq+0x50>)
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	0a1b      	lsrs	r3, r3, #8
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	490f      	ldr	r1, [pc, #60]	; (8006830 <HAL_RCC_GetHCLKFreq+0x54>)
 80067f4:	5ccb      	ldrb	r3, [r1, r3]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	fa22 f303 	lsr.w	r3, r2, r3
 80067fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <HAL_RCC_GetHCLKFreq+0x50>)
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f003 030f 	and.w	r3, r3, #15
 8006808:	4a09      	ldr	r2, [pc, #36]	; (8006830 <HAL_RCC_GetHCLKFreq+0x54>)
 800680a:	5cd3      	ldrb	r3, [r2, r3]
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	fa22 f303 	lsr.w	r3, r2, r3
 8006816:	4a07      	ldr	r2, [pc, #28]	; (8006834 <HAL_RCC_GetHCLKFreq+0x58>)
 8006818:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800681a:	4a07      	ldr	r2, [pc, #28]	; (8006838 <HAL_RCC_GetHCLKFreq+0x5c>)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <HAL_RCC_GetHCLKFreq+0x58>)
 8006822:	681b      	ldr	r3, [r3, #0]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	58024400 	.word	0x58024400
 8006830:	0800b60c 	.word	0x0800b60c
 8006834:	24000004 	.word	0x24000004
 8006838:	24000000 	.word	0x24000000

0800683c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006840:	f7ff ffcc 	bl	80067dc <HAL_RCC_GetHCLKFreq>
 8006844:	4602      	mov	r2, r0
 8006846:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	091b      	lsrs	r3, r3, #4
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	4904      	ldr	r1, [pc, #16]	; (8006864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006852:	5ccb      	ldrb	r3, [r1, r3]
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800685c:	4618      	mov	r0, r3
 800685e:	bd80      	pop	{r7, pc}
 8006860:	58024400 	.word	0x58024400
 8006864:	0800b60c 	.word	0x0800b60c

08006868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800686c:	f7ff ffb6 	bl	80067dc <HAL_RCC_GetHCLKFreq>
 8006870:	4602      	mov	r2, r0
 8006872:	4b06      	ldr	r3, [pc, #24]	; (800688c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800687e:	5ccb      	ldrb	r3, [r1, r3]
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	58024400 	.word	0x58024400
 8006890:	0800b60c 	.word	0x0800b60c

08006894 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006898:	b0ca      	sub	sp, #296	; 0x128
 800689a:	af00      	add	r7, sp, #0
 800689c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068a6:	2300      	movs	r3, #0
 80068a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80068b8:	2500      	movs	r5, #0
 80068ba:	ea54 0305 	orrs.w	r3, r4, r5
 80068be:	d049      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80068c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068ca:	d02f      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80068cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068d0:	d828      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068d6:	d01a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80068d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068dc:	d822      	bhi.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e6:	d007      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068e8:	e01c      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ea:	4bb8      	ldr	r3, [pc, #736]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	4ab7      	ldr	r2, [pc, #732]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068f6:	e01a      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fc:	3308      	adds	r3, #8
 80068fe:	2102      	movs	r1, #2
 8006900:	4618      	mov	r0, r3
 8006902:	f002 fb61 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800690c:	e00f      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006912:	3328      	adds	r3, #40	; 0x28
 8006914:	2102      	movs	r1, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f002 fc08 	bl	800912c <RCCEx_PLL3_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006922:	e004      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800692a:	e000      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800692c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006936:	4ba5      	ldr	r3, [pc, #660]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800693e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006944:	4aa1      	ldr	r2, [pc, #644]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006946:	430b      	orrs	r3, r1
 8006948:	6513      	str	r3, [r2, #80]	; 0x50
 800694a:	e003      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006950:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006960:	f04f 0900 	mov.w	r9, #0
 8006964:	ea58 0309 	orrs.w	r3, r8, r9
 8006968:	d047      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006970:	2b04      	cmp	r3, #4
 8006972:	d82a      	bhi.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	08006991 	.word	0x08006991
 8006980:	0800699f 	.word	0x0800699f
 8006984:	080069b5 	.word	0x080069b5
 8006988:	080069d3 	.word	0x080069d3
 800698c:	080069d3 	.word	0x080069d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006990:	4b8e      	ldr	r3, [pc, #568]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	4a8d      	ldr	r2, [pc, #564]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800699a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800699c:	e01a      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a2:	3308      	adds	r3, #8
 80069a4:	2100      	movs	r1, #0
 80069a6:	4618      	mov	r0, r3
 80069a8:	f002 fb0e 	bl	8008fc8 <RCCEx_PLL2_Config>
 80069ac:	4603      	mov	r3, r0
 80069ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069b2:	e00f      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b8:	3328      	adds	r3, #40	; 0x28
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f002 fbb5 	bl	800912c <RCCEx_PLL3_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069c8:	e004      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069d0:	e000      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80069d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069dc:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e0:	f023 0107 	bic.w	r1, r3, #7
 80069e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	4a78      	ldr	r2, [pc, #480]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6513      	str	r3, [r2, #80]	; 0x50
 80069f0:	e003      	b.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006a06:	f04f 0b00 	mov.w	fp, #0
 8006a0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a0e:	d04c      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1a:	d030      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a20:	d829      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a22:	2bc0      	cmp	r3, #192	; 0xc0
 8006a24:	d02d      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a26:	2bc0      	cmp	r3, #192	; 0xc0
 8006a28:	d825      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a2a:	2b80      	cmp	r3, #128	; 0x80
 8006a2c:	d018      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d821      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006a36:	2b40      	cmp	r3, #64	; 0x40
 8006a38:	d007      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006a3a:	e01c      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a3c:	4b63      	ldr	r3, [pc, #396]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	4a62      	ldr	r2, [pc, #392]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a48:	e01c      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4e:	3308      	adds	r3, #8
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f002 fab8 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a5e:	e011      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a64:	3328      	adds	r3, #40	; 0x28
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f002 fb5f 	bl	800912c <RCCEx_PLL3_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006a74:	e006      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a7c:	e002      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006a8c:	4b4f      	ldr	r3, [pc, #316]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9a:	4a4c      	ldr	r2, [pc, #304]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	6513      	str	r3, [r2, #80]	; 0x50
 8006aa0:	e003      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006ab6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ac0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	d053      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ad6:	d035      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006adc:	d82e      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006ade:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ae2:	d031      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006ae4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ae8:	d828      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aee:	d01a      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af4:	d822      	bhi.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006afe:	d007      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006b00:	e01c      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b02:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	4a31      	ldr	r2, [pc, #196]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b0e:	e01c      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b14:	3308      	adds	r3, #8
 8006b16:	2100      	movs	r1, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f002 fa55 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b24:	e011      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b2a:	3328      	adds	r3, #40	; 0x28
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f002 fafc 	bl	800912c <RCCEx_PLL3_Config>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b3a:	e006      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b42:	e002      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b44:	bf00      	nop
 8006b46:	e000      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b52:	4b1e      	ldr	r3, [pc, #120]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b56:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b62:	4a1a      	ldr	r2, [pc, #104]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6593      	str	r3, [r2, #88]	; 0x58
 8006b68:	e003      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	d056      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b9e:	d038      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba4:	d831      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ba6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006baa:	d034      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006bac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bb0:	d82b      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb6:	d01d      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006bb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bbc:	d825      	bhi.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d006      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006bc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bc6:	d00a      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006bc8:	e01f      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd0:	4ba2      	ldr	r3, [pc, #648]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	4aa1      	ldr	r2, [pc, #644]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bdc:	e01c      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be2:	3308      	adds	r3, #8
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f002 f9ee 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006bf2:	e011      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bf8:	3328      	adds	r3, #40	; 0x28
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f002 fa95 	bl	800912c <RCCEx_PLL3_Config>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c08:	e006      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c10:	e002      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c20:	4b8e      	ldr	r3, [pc, #568]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006c30:	4a8a      	ldr	r2, [pc, #552]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	6593      	str	r3, [r2, #88]	; 0x58
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d03a      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c66:	2b30      	cmp	r3, #48	; 0x30
 8006c68:	d01f      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006c6a:	2b30      	cmp	r3, #48	; 0x30
 8006c6c:	d819      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c6e:	2b20      	cmp	r3, #32
 8006c70:	d00c      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d815      	bhi.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d019      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d111      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7e:	4b77      	ldr	r3, [pc, #476]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	4a76      	ldr	r2, [pc, #472]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006c8a:	e011      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c90:	3308      	adds	r3, #8
 8006c92:	2102      	movs	r1, #2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f002 f997 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006ca0:	e006      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ca8:	e002      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006caa:	bf00      	nop
 8006cac:	e000      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cb8:	4b68      	ldr	r3, [pc, #416]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	4a65      	ldr	r2, [pc, #404]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ccc:	e003      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006ce2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006cec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	d051      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d00:	d035      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d06:	d82e      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d0c:	d031      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006d0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d12:	d828      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d18:	d01a      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d1e:	d822      	bhi.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d28:	d007      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006d2a:	e01c      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d2c:	4b4b      	ldr	r3, [pc, #300]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	4a4a      	ldr	r2, [pc, #296]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d38:	e01c      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d3e:	3308      	adds	r3, #8
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f002 f940 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d4e:	e011      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d54:	3328      	adds	r3, #40	; 0x28
 8006d56:	2100      	movs	r1, #0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f002 f9e7 	bl	800912c <RCCEx_PLL3_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d64:	e006      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d6c:	e002      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d6e:	bf00      	nop
 8006d70:	e000      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d7c:	4b37      	ldr	r3, [pc, #220]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d8a:	4a34      	ldr	r2, [pc, #208]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6513      	str	r3, [r2, #80]	; 0x50
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006daa:	2300      	movs	r3, #0
 8006dac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006db0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006db4:	460b      	mov	r3, r1
 8006db6:	4313      	orrs	r3, r2
 8006db8:	d056      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc4:	d033      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dca:	d82c      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd0:	d02f      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd6:	d826      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006dd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ddc:	d02b      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006de2:	d820      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de8:	d012      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dee:	d81a      	bhi.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d022      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d115      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfe:	3308      	adds	r3, #8
 8006e00:	2101      	movs	r1, #1
 8006e02:	4618      	mov	r0, r3
 8006e04:	f002 f8e0 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e0e:	e015      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e14:	3328      	adds	r3, #40	; 0x28
 8006e16:	2101      	movs	r1, #1
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f002 f987 	bl	800912c <RCCEx_PLL3_Config>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e24:	e00a      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e2c:	e006      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e2e:	bf00      	nop
 8006e30:	e004      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e32:	bf00      	nop
 8006e34:	e002      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e36:	bf00      	nop
 8006e38:	e000      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10d      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e44:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e52:	4a02      	ldr	r2, [pc, #8]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e54:	430b      	orrs	r3, r1
 8006e56:	6513      	str	r3, [r2, #80]	; 0x50
 8006e58:	e006      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e5a:	bf00      	nop
 8006e5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d055      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e94:	d033      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e9a:	d82c      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea0:	d02f      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea6:	d826      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ea8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eac:	d02b      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006eae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eb2:	d820      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb8:	d012      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ebe:	d81a      	bhi.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d022      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec8:	d115      	bne.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ece:	3308      	adds	r3, #8
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f002 f878 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ede:	e015      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee4:	3328      	adds	r3, #40	; 0x28
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f002 f91f 	bl	800912c <RCCEx_PLL3_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ef4:	e00a      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006efc:	e006      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006efe:	bf00      	nop
 8006f00:	e004      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f02:	bf00      	nop
 8006f04:	e002      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f06:	bf00      	nop
 8006f08:	e000      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10b      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f14:	4ba3      	ldr	r3, [pc, #652]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f18:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f24:	4a9f      	ldr	r2, [pc, #636]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f26:	430b      	orrs	r3, r1
 8006f28:	6593      	str	r3, [r2, #88]	; 0x58
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d037      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5e:	d00e      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f64:	d816      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d018      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006f6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f6e:	d111      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f70:	4b8c      	ldr	r3, [pc, #560]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	4a8b      	ldr	r2, [pc, #556]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f7c:	e00f      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f82:	3308      	adds	r3, #8
 8006f84:	2101      	movs	r1, #1
 8006f86:	4618      	mov	r0, r3
 8006f88:	f002 f81e 	bl	8008fc8 <RCCEx_PLL2_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f92:	e004      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f9a:	e000      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fa6:	4b7f      	ldr	r3, [pc, #508]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006faa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb4:	4a7b      	ldr	r2, [pc, #492]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	6513      	str	r3, [r2, #80]	; 0x50
 8006fba:	e003      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	d039      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d81c      	bhi.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007031 	.word	0x08007031
 8006ff8:	08007005 	.word	0x08007005
 8006ffc:	08007013 	.word	0x08007013
 8007000:	08007031 	.word	0x08007031
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007004:	4b67      	ldr	r3, [pc, #412]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	4a66      	ldr	r2, [pc, #408]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800700e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007010:	e00f      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007016:	3308      	adds	r3, #8
 8007018:	2102      	movs	r1, #2
 800701a:	4618      	mov	r0, r3
 800701c:	f001 ffd4 	bl	8008fc8 <RCCEx_PLL2_Config>
 8007020:	4603      	mov	r3, r0
 8007022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007026:	e004      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800702e:	e000      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800703a:	4b5a      	ldr	r3, [pc, #360]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800703c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703e:	f023 0103 	bic.w	r1, r3, #3
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007048:	4a56      	ldr	r2, [pc, #344]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800704a:	430b      	orrs	r3, r1
 800704c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800704e:	e003      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007054:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007064:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007068:	2300      	movs	r3, #0
 800706a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800706e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007072:	460b      	mov	r3, r1
 8007074:	4313      	orrs	r3, r2
 8007076:	f000 809f 	beq.w	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800707a:	4b4b      	ldr	r3, [pc, #300]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a4a      	ldr	r2, [pc, #296]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007084:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007086:	f7fa fba1 	bl	80017cc <HAL_GetTick>
 800708a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800708e:	e00b      	b.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007090:	f7fa fb9c 	bl	80017cc <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b64      	cmp	r3, #100	; 0x64
 800709e:	d903      	bls.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80070a6:	e005      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070a8:	4b3f      	ldr	r3, [pc, #252]	; (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ed      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80070b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d179      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070bc:	4b39      	ldr	r3, [pc, #228]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070c8:	4053      	eors	r3, r2
 80070ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d015      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070d2:	4b34      	ldr	r3, [pc, #208]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070de:	4b31      	ldr	r3, [pc, #196]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	4a30      	ldr	r2, [pc, #192]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070ea:	4b2e      	ldr	r3, [pc, #184]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070f6:	4a2b      	ldr	r2, [pc, #172]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80070fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007102:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710a:	d118      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710c:	f7fa fb5e 	bl	80017cc <HAL_GetTick>
 8007110:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007114:	e00d      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007116:	f7fa fb59 	bl	80017cc <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007120:	1ad2      	subs	r2, r2, r3
 8007122:	f241 3388 	movw	r3, #5000	; 0x1388
 8007126:	429a      	cmp	r2, r3
 8007128:	d903      	bls.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007130:	e005      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007132:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0eb      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800713e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007142:	2b00      	cmp	r3, #0
 8007144:	d129      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800714e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007156:	d10e      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007158:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007164:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007168:	091a      	lsrs	r2, r3, #4
 800716a:	4b10      	ldr	r3, [pc, #64]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800716c:	4013      	ands	r3, r2
 800716e:	4a0d      	ldr	r2, [pc, #52]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007170:	430b      	orrs	r3, r1
 8007172:	6113      	str	r3, [r2, #16]
 8007174:	e005      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800717c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007180:	6113      	str	r3, [r2, #16]
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007184:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800718e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007192:	4a04      	ldr	r2, [pc, #16]	; (80071a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007194:	430b      	orrs	r3, r1
 8007196:	6713      	str	r3, [r2, #112]	; 0x70
 8007198:	e00e      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800719a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800719e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80071a2:	e009      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80071a4:	58024400 	.word	0x58024400
 80071a8:	58024800 	.word	0x58024800
 80071ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f002 0301 	and.w	r3, r2, #1
 80071c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071c8:	2300      	movs	r3, #0
 80071ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f000 8089 	beq.w	80072ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80071da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e0:	2b28      	cmp	r3, #40	; 0x28
 80071e2:	d86b      	bhi.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80071e4:	a201      	add	r2, pc, #4	; (adr r2, 80071ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	080072c5 	.word	0x080072c5
 80071f0:	080072bd 	.word	0x080072bd
 80071f4:	080072bd 	.word	0x080072bd
 80071f8:	080072bd 	.word	0x080072bd
 80071fc:	080072bd 	.word	0x080072bd
 8007200:	080072bd 	.word	0x080072bd
 8007204:	080072bd 	.word	0x080072bd
 8007208:	080072bd 	.word	0x080072bd
 800720c:	08007291 	.word	0x08007291
 8007210:	080072bd 	.word	0x080072bd
 8007214:	080072bd 	.word	0x080072bd
 8007218:	080072bd 	.word	0x080072bd
 800721c:	080072bd 	.word	0x080072bd
 8007220:	080072bd 	.word	0x080072bd
 8007224:	080072bd 	.word	0x080072bd
 8007228:	080072bd 	.word	0x080072bd
 800722c:	080072a7 	.word	0x080072a7
 8007230:	080072bd 	.word	0x080072bd
 8007234:	080072bd 	.word	0x080072bd
 8007238:	080072bd 	.word	0x080072bd
 800723c:	080072bd 	.word	0x080072bd
 8007240:	080072bd 	.word	0x080072bd
 8007244:	080072bd 	.word	0x080072bd
 8007248:	080072bd 	.word	0x080072bd
 800724c:	080072c5 	.word	0x080072c5
 8007250:	080072bd 	.word	0x080072bd
 8007254:	080072bd 	.word	0x080072bd
 8007258:	080072bd 	.word	0x080072bd
 800725c:	080072bd 	.word	0x080072bd
 8007260:	080072bd 	.word	0x080072bd
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072bd 	.word	0x080072bd
 800726c:	080072c5 	.word	0x080072c5
 8007270:	080072bd 	.word	0x080072bd
 8007274:	080072bd 	.word	0x080072bd
 8007278:	080072bd 	.word	0x080072bd
 800727c:	080072bd 	.word	0x080072bd
 8007280:	080072bd 	.word	0x080072bd
 8007284:	080072bd 	.word	0x080072bd
 8007288:	080072bd 	.word	0x080072bd
 800728c:	080072c5 	.word	0x080072c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007294:	3308      	adds	r3, #8
 8007296:	2101      	movs	r1, #1
 8007298:	4618      	mov	r0, r3
 800729a:	f001 fe95 	bl	8008fc8 <RCCEx_PLL2_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072a4:	e00f      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072aa:	3328      	adds	r3, #40	; 0x28
 80072ac:	2101      	movs	r1, #1
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 ff3c 	bl	800912c <RCCEx_PLL3_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072ba:	e004      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80072c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10a      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072ce:	4bbf      	ldr	r3, [pc, #764]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80072d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072dc:	4abb      	ldr	r2, [pc, #748]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072de:	430b      	orrs	r3, r1
 80072e0:	6553      	str	r3, [r2, #84]	; 0x54
 80072e2:	e003      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f002 0302 	and.w	r3, r2, #2
 80072f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007302:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d041      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007312:	2b05      	cmp	r3, #5
 8007314:	d824      	bhi.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007369 	.word	0x08007369
 8007320:	08007335 	.word	0x08007335
 8007324:	0800734b 	.word	0x0800734b
 8007328:	08007369 	.word	0x08007369
 800732c:	08007369 	.word	0x08007369
 8007330:	08007369 	.word	0x08007369
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007338:	3308      	adds	r3, #8
 800733a:	2101      	movs	r1, #1
 800733c:	4618      	mov	r0, r3
 800733e:	f001 fe43 	bl	8008fc8 <RCCEx_PLL2_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007348:	e00f      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734e:	3328      	adds	r3, #40	; 0x28
 8007350:	2101      	movs	r1, #1
 8007352:	4618      	mov	r0, r3
 8007354:	f001 feea 	bl	800912c <RCCEx_PLL3_Config>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800735e:	e004      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007366:	e000      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007372:	4b96      	ldr	r3, [pc, #600]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007376:	f023 0107 	bic.w	r1, r3, #7
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007380:	4a92      	ldr	r2, [pc, #584]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007382:	430b      	orrs	r3, r1
 8007384:	6553      	str	r3, [r2, #84]	; 0x54
 8007386:	e003      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800738c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f002 0304 	and.w	r3, r2, #4
 800739c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a0:	2300      	movs	r3, #0
 80073a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4313      	orrs	r3, r2
 80073ae:	d044      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b8:	2b05      	cmp	r3, #5
 80073ba:	d825      	bhi.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	08007411 	.word	0x08007411
 80073c8:	080073dd 	.word	0x080073dd
 80073cc:	080073f3 	.word	0x080073f3
 80073d0:	08007411 	.word	0x08007411
 80073d4:	08007411 	.word	0x08007411
 80073d8:	08007411 	.word	0x08007411
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e0:	3308      	adds	r3, #8
 80073e2:	2101      	movs	r1, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	f001 fdef 	bl	8008fc8 <RCCEx_PLL2_Config>
 80073ea:	4603      	mov	r3, r0
 80073ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073f0:	e00f      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f6:	3328      	adds	r3, #40	; 0x28
 80073f8:	2101      	movs	r1, #1
 80073fa:	4618      	mov	r0, r3
 80073fc:	f001 fe96 	bl	800912c <RCCEx_PLL3_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007406:	e004      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800740e:	e000      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10b      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800741a:	4b6c      	ldr	r3, [pc, #432]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	f023 0107 	bic.w	r1, r3, #7
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800742a:	4a68      	ldr	r2, [pc, #416]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800742c:	430b      	orrs	r3, r1
 800742e:	6593      	str	r3, [r2, #88]	; 0x58
 8007430:	e003      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f002 0320 	and.w	r3, r2, #32
 8007446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800744a:	2300      	movs	r3, #0
 800744c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007454:	460b      	mov	r3, r1
 8007456:	4313      	orrs	r3, r2
 8007458:	d055      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800745a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007466:	d033      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007468:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800746c:	d82c      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800746e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007472:	d02f      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007478:	d826      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800747a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800747e:	d02b      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007480:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007484:	d820      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800748a:	d012      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800748c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007490:	d81a      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d022      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749a:	d115      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800749c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074a0:	3308      	adds	r3, #8
 80074a2:	2100      	movs	r1, #0
 80074a4:	4618      	mov	r0, r3
 80074a6:	f001 fd8f 	bl	8008fc8 <RCCEx_PLL2_Config>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074b0:	e015      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b6:	3328      	adds	r3, #40	; 0x28
 80074b8:	2102      	movs	r1, #2
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fe36 	bl	800912c <RCCEx_PLL3_Config>
 80074c0:	4603      	mov	r3, r0
 80074c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074c6:	e00a      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074ce:	e006      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074d0:	bf00      	nop
 80074d2:	e004      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074d4:	bf00      	nop
 80074d6:	e002      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80074dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10b      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074e6:	4b39      	ldr	r3, [pc, #228]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f6:	4a35      	ldr	r2, [pc, #212]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80074f8:	430b      	orrs	r3, r1
 80074fa:	6553      	str	r3, [r2, #84]	; 0x54
 80074fc:	e003      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007516:	2300      	movs	r3, #0
 8007518:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800751c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007520:	460b      	mov	r3, r1
 8007522:	4313      	orrs	r3, r2
 8007524:	d058      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800752e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007532:	d033      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007534:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007538:	d82c      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800753a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753e:	d02f      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007544:	d826      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800754a:	d02b      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800754c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007550:	d820      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007556:	d012      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755c:	d81a      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d022      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007566:	d115      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756c:	3308      	adds	r3, #8
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f001 fd29 	bl	8008fc8 <RCCEx_PLL2_Config>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800757c:	e015      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007582:	3328      	adds	r3, #40	; 0x28
 8007584:	2102      	movs	r1, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fdd0 	bl	800912c <RCCEx_PLL3_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007592:	e00a      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800759a:	e006      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800759c:	bf00      	nop
 800759e:	e004      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80075a0:	bf00      	nop
 80075a2:	e002      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80075a4:	bf00      	nop
 80075a6:	e000      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80075a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10e      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075b2:	4b06      	ldr	r3, [pc, #24]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075c2:	4a02      	ldr	r2, [pc, #8]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6593      	str	r3, [r2, #88]	; 0x58
 80075c8:	e006      	b.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80075ca:	bf00      	nop
 80075cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80075e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075e8:	2300      	movs	r3, #0
 80075ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80075f2:	460b      	mov	r3, r1
 80075f4:	4313      	orrs	r3, r2
 80075f6:	d055      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007600:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007604:	d033      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007606:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800760a:	d82c      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800760c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007610:	d02f      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007616:	d826      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007618:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800761c:	d02b      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800761e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007622:	d820      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007628:	d012      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800762a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800762e:	d81a      	bhi.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007630:	2b00      	cmp	r3, #0
 8007632:	d022      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007638:	d115      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763e:	3308      	adds	r3, #8
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f001 fcc0 	bl	8008fc8 <RCCEx_PLL2_Config>
 8007648:	4603      	mov	r3, r0
 800764a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800764e:	e015      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007654:	3328      	adds	r3, #40	; 0x28
 8007656:	2102      	movs	r1, #2
 8007658:	4618      	mov	r0, r3
 800765a:	f001 fd67 	bl	800912c <RCCEx_PLL3_Config>
 800765e:	4603      	mov	r3, r0
 8007660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007664:	e00a      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800766c:	e006      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800766e:	bf00      	nop
 8007670:	e004      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007672:	bf00      	nop
 8007674:	e002      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007676:	bf00      	nop
 8007678:	e000      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800767a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800767c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10b      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007684:	4ba1      	ldr	r3, [pc, #644]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007688:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007690:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007694:	4a9d      	ldr	r2, [pc, #628]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007696:	430b      	orrs	r3, r1
 8007698:	6593      	str	r3, [r2, #88]	; 0x58
 800769a:	e003      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80076a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f002 0308 	and.w	r3, r2, #8
 80076b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80076be:	460b      	mov	r3, r1
 80076c0:	4313      	orrs	r3, r2
 80076c2:	d01e      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80076c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d0:	d10c      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076d6:	3328      	adds	r3, #40	; 0x28
 80076d8:	2102      	movs	r1, #2
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 fd26 	bl	800912c <RCCEx_PLL3_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076ec:	4b87      	ldr	r3, [pc, #540]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076fc:	4a83      	ldr	r2, [pc, #524]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076fe:	430b      	orrs	r3, r1
 8007700:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770a:	f002 0310 	and.w	r3, r2, #16
 800770e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007712:	2300      	movs	r3, #0
 8007714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007718:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800771c:	460b      	mov	r3, r1
 800771e:	4313      	orrs	r3, r2
 8007720:	d01e      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800772a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772e:	d10c      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007734:	3328      	adds	r3, #40	; 0x28
 8007736:	2102      	movs	r1, #2
 8007738:	4618      	mov	r0, r3
 800773a:	f001 fcf7 	bl	800912c <RCCEx_PLL3_Config>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800774a:	4b70      	ldr	r3, [pc, #448]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800774c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800775a:	4a6c      	ldr	r2, [pc, #432]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775c:	430b      	orrs	r3, r1
 800775e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800776c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007770:	2300      	movs	r3, #0
 8007772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007776:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800777a:	460b      	mov	r3, r1
 800777c:	4313      	orrs	r3, r2
 800777e:	d03e      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800778c:	d022      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800778e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007792:	d81b      	bhi.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779c:	d00b      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800779e:	e015      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a4:	3308      	adds	r3, #8
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fc0d 	bl	8008fc8 <RCCEx_PLL2_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077b4:	e00f      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ba:	3328      	adds	r3, #40	; 0x28
 80077bc:	2102      	movs	r1, #2
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 fcb4 	bl	800912c <RCCEx_PLL3_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077ca:	e004      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077d2:	e000      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80077d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077de:	4b4b      	ldr	r3, [pc, #300]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077ee:	4a47      	ldr	r2, [pc, #284]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077f0:	430b      	orrs	r3, r1
 80077f2:	6593      	str	r3, [r2, #88]	; 0x58
 80077f4:	e003      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800780a:	67bb      	str	r3, [r7, #120]	; 0x78
 800780c:	2300      	movs	r3, #0
 800780e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007810:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007814:	460b      	mov	r3, r1
 8007816:	4313      	orrs	r3, r2
 8007818:	d03b      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007822:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007826:	d01f      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800782c:	d818      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800782e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007832:	d003      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007834:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007838:	d007      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800783a:	e011      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800783c:	4b33      	ldr	r3, [pc, #204]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	4a32      	ldr	r2, [pc, #200]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007848:	e00f      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800784e:	3328      	adds	r3, #40	; 0x28
 8007850:	2101      	movs	r1, #1
 8007852:	4618      	mov	r0, r3
 8007854:	f001 fc6a 	bl	800912c <RCCEx_PLL3_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800785e:	e004      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007866:	e000      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007872:	4b26      	ldr	r3, [pc, #152]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007876:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007882:	4a22      	ldr	r2, [pc, #136]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007884:	430b      	orrs	r3, r1
 8007886:	6553      	str	r3, [r2, #84]	; 0x54
 8007888:	e003      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800788e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800789e:	673b      	str	r3, [r7, #112]	; 0x70
 80078a0:	2300      	movs	r3, #0
 80078a2:	677b      	str	r3, [r7, #116]	; 0x74
 80078a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80078a8:	460b      	mov	r3, r1
 80078aa:	4313      	orrs	r3, r2
 80078ac:	d034      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80078ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078bc:	d007      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80078be:	e011      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a11      	ldr	r2, [pc, #68]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078cc:	e00e      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078d2:	3308      	adds	r3, #8
 80078d4:	2102      	movs	r1, #2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 fb76 	bl	8008fc8 <RCCEx_PLL2_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078e2:	e003      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10d      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007902:	4a02      	ldr	r2, [pc, #8]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007904:	430b      	orrs	r3, r1
 8007906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800790a:	bf00      	nop
 800790c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007924:	66bb      	str	r3, [r7, #104]	; 0x68
 8007926:	2300      	movs	r3, #0
 8007928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800792a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800792e:	460b      	mov	r3, r1
 8007930:	4313      	orrs	r3, r2
 8007932:	d00c      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007938:	3328      	adds	r3, #40	; 0x28
 800793a:	2102      	movs	r1, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fbf5 	bl	800912c <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800795a:	663b      	str	r3, [r7, #96]	; 0x60
 800795c:	2300      	movs	r3, #0
 800795e:	667b      	str	r3, [r7, #100]	; 0x64
 8007960:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007964:	460b      	mov	r3, r1
 8007966:	4313      	orrs	r3, r2
 8007968:	d038      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007976:	d018      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800797c:	d811      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800797e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007982:	d014      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007988:	d80b      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d011      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800798e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007992:	d106      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007994:	4bc3      	ldr	r3, [pc, #780]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007998:	4ac2      	ldr	r2, [pc, #776]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800799a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800799e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80079a0:	e008      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079a8:	e004      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80079aa:	bf00      	nop
 80079ac:	e002      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80079ae:	bf00      	nop
 80079b0:	e000      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80079b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10b      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079bc:	4bb9      	ldr	r3, [pc, #740]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079cc:	4ab5      	ldr	r2, [pc, #724]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ce:	430b      	orrs	r3, r1
 80079d0:	6553      	str	r3, [r2, #84]	; 0x54
 80079d2:	e003      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80079e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ea:	2300      	movs	r3, #0
 80079ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80079f2:	460b      	mov	r3, r1
 80079f4:	4313      	orrs	r3, r2
 80079f6:	d009      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079f8:	4baa      	ldr	r3, [pc, #680]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a06:	4aa7      	ldr	r2, [pc, #668]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007a18:	653b      	str	r3, [r7, #80]	; 0x50
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	657b      	str	r3, [r7, #84]	; 0x54
 8007a1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d00a      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a28:	4b9e      	ldr	r3, [pc, #632]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a38:	4a9a      	ldr	r2, [pc, #616]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007a54:	460b      	mov	r3, r1
 8007a56:	4313      	orrs	r3, r2
 8007a58:	d009      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a5a:	4b92      	ldr	r3, [pc, #584]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a68:	4a8e      	ldr	r2, [pc, #568]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007a84:	460b      	mov	r3, r1
 8007a86:	4313      	orrs	r3, r2
 8007a88:	d00e      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a8a:	4b86      	ldr	r3, [pc, #536]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	4a85      	ldr	r2, [pc, #532]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a94:	6113      	str	r3, [r2, #16]
 8007a96:	4b83      	ldr	r3, [pc, #524]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a98:	6919      	ldr	r1, [r3, #16]
 8007a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007aa2:	4a80      	ldr	r2, [pc, #512]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007aa4:	430b      	orrs	r3, r1
 8007aa6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	d009      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ac4:	4b77      	ldr	r3, [pc, #476]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	4a74      	ldr	r2, [pc, #464]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007aee:	460b      	mov	r3, r1
 8007af0:	4313      	orrs	r3, r2
 8007af2:	d00a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007af4:	4b6b      	ldr	r3, [pc, #428]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b04:	4a67      	ldr	r2, [pc, #412]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b06:	430b      	orrs	r3, r1
 8007b08:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	2100      	movs	r1, #0
 8007b14:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007b20:	460b      	mov	r3, r1
 8007b22:	4313      	orrs	r3, r2
 8007b24:	d011      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f001 fa4a 	bl	8008fc8 <RCCEx_PLL2_Config>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	2100      	movs	r1, #0
 8007b54:	6239      	str	r1, [r7, #32]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b60:	460b      	mov	r3, r1
 8007b62:	4313      	orrs	r3, r2
 8007b64:	d011      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 fa2a 	bl	8008fc8 <RCCEx_PLL2_Config>
 8007b74:	4603      	mov	r3, r0
 8007b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	2100      	movs	r1, #0
 8007b94:	61b9      	str	r1, [r7, #24]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	61fb      	str	r3, [r7, #28]
 8007b9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	d011      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007baa:	3308      	adds	r3, #8
 8007bac:	2102      	movs	r1, #2
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fa0a 	bl	8008fc8 <RCCEx_PLL2_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6139      	str	r1, [r7, #16]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007be0:	460b      	mov	r3, r1
 8007be2:	4313      	orrs	r3, r2
 8007be4:	d011      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bea:	3328      	adds	r3, #40	; 0x28
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 fa9c 	bl	800912c <RCCEx_PLL3_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	2100      	movs	r1, #0
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c20:	460b      	mov	r3, r1
 8007c22:	4313      	orrs	r3, r2
 8007c24:	d011      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2a:	3328      	adds	r3, #40	; 0x28
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 fa7c 	bl	800912c <RCCEx_PLL3_Config>
 8007c34:	4603      	mov	r3, r0
 8007c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c52:	2100      	movs	r1, #0
 8007c54:	6039      	str	r1, [r7, #0]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c60:	460b      	mov	r3, r1
 8007c62:	4313      	orrs	r3, r2
 8007c64:	d011      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6a:	3328      	adds	r3, #40	; 0x28
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f001 fa5c 	bl	800912c <RCCEx_PLL3_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007c8a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ca4:	58024400 	.word	0x58024400

08007ca8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b090      	sub	sp, #64	; 0x40
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	f040 8094 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007cc0:	4b9e      	ldr	r3, [pc, #632]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	f200 8087 	bhi.w	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007cd2:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007ced 	.word	0x08007ced
 8007cdc:	08007d15 	.word	0x08007d15
 8007ce0:	08007d3d 	.word	0x08007d3d
 8007ce4:	08007dd9 	.word	0x08007dd9
 8007ce8:	08007d65 	.word	0x08007d65
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cec:	4b93      	ldr	r3, [pc, #588]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cf8:	d108      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 f810 	bl	8008d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d08:	f000 bd45 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d10:	f000 bd41 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d14:	4b89      	ldr	r3, [pc, #548]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d20:	d108      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d22:	f107 0318 	add.w	r3, r7, #24
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fd54 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d30:	f000 bd31 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d38:	f000 bd2d 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d3c:	4b7f      	ldr	r3, [pc, #508]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d48:	d108      	bne.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d4a:	f107 030c 	add.w	r3, r7, #12
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fe94 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d58:	f000 bd1d 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d60:	f000 bd19 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d64:	4b75      	ldr	r3, [pc, #468]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d6c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d6e:	4b73      	ldr	r3, [pc, #460]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d10c      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d109      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d80:	4b6e      	ldr	r3, [pc, #440]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	08db      	lsrs	r3, r3, #3
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	4a6d      	ldr	r2, [pc, #436]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d92:	e01f      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d94:	4b69      	ldr	r3, [pc, #420]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007da0:	d106      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007da8:	d102      	bne.n	8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007daa:	4b66      	ldr	r3, [pc, #408]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dae:	e011      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007db0:	4b62      	ldr	r3, [pc, #392]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dbc:	d106      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc4:	d102      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007dc6:	4b60      	ldr	r3, [pc, #384]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dca:	e003      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dd0:	f000 bce1 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dd4:	f000 bcdf 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007dd8:	4b5c      	ldr	r3, [pc, #368]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ddc:	f000 bcdb 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007de4:	f000 bcd7 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007df0:	430b      	orrs	r3, r1
 8007df2:	f040 80ad 	bne.w	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007df6:	4b51      	ldr	r3, [pc, #324]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007dfe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e06:	d056      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0e:	f200 8090 	bhi.w	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	2bc0      	cmp	r3, #192	; 0xc0
 8007e16:	f000 8088 	beq.w	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	2bc0      	cmp	r3, #192	; 0xc0
 8007e1e:	f200 8088 	bhi.w	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2b80      	cmp	r3, #128	; 0x80
 8007e26:	d032      	beq.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	2b80      	cmp	r3, #128	; 0x80
 8007e2c:	f200 8081 	bhi.w	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	2b40      	cmp	r3, #64	; 0x40
 8007e3a:	d014      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007e3c:	e079      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e3e:	4b3f      	ldr	r3, [pc, #252]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e4a:	d108      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 ff67 	bl	8008d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5a:	f000 bc9c 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e62:	f000 bc98 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e66:	4b35      	ldr	r3, [pc, #212]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e72:	d108      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e74:	f107 0318 	add.w	r3, r7, #24
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fcab 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e82:	f000 bc88 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e8a:	f000 bc84 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e8e:	4b2b      	ldr	r3, [pc, #172]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9a:	d108      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e9c:	f107 030c 	add.w	r3, r7, #12
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fdeb 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eaa:	f000 bc74 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb2:	f000 bc70 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eb6:	4b21      	ldr	r3, [pc, #132]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ebe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ec0:	4b1e      	ldr	r3, [pc, #120]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d10c      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ed2:	4b1a      	ldr	r3, [pc, #104]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	08db      	lsrs	r3, r3, #3
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	4a18      	ldr	r2, [pc, #96]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ede:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee4:	e01f      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ee6:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef2:	d106      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007efa:	d102      	bne.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007efc:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f00:	e011      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0e:	d106      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f16:	d102      	bne.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f18:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f1c:	e003      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f22:	f000 bc38 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f26:	f000 bc36 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f2e:	f000 bc32 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f36:	f000 bc2e 	b.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f3a:	bf00      	nop
 8007f3c:	58024400 	.word	0x58024400
 8007f40:	03d09000 	.word	0x03d09000
 8007f44:	003d0900 	.word	0x003d0900
 8007f48:	007a1200 	.word	0x007a1200
 8007f4c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f54:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	f040 809c 	bne.w	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007f5e:	4b9e      	ldr	r3, [pc, #632]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f62:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007f66:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f6e:	d054      	beq.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f76:	f200 808b 	bhi.w	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f80:	f000 8083 	beq.w	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f8a:	f200 8081 	bhi.w	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f94:	d02f      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f9c:	d878      	bhi.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007faa:	d012      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007fac:	e070      	b.n	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fae:	4b8a      	ldr	r3, [pc, #552]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fba:	d107      	bne.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 feaf 	bl	8008d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fca:	e3e4      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd0:	e3e1      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fd2:	4b81      	ldr	r3, [pc, #516]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fde:	d107      	bne.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe0:	f107 0318 	add.w	r3, r7, #24
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fbf5 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fee:	e3d2      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff4:	e3cf      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ff6:	4b78      	ldr	r3, [pc, #480]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008002:	d107      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008004:	f107 030c 	add.w	r3, r7, #12
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fd37 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008012:	e3c0      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008018:	e3bd      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800801a:	4b6f      	ldr	r3, [pc, #444]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800801c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008022:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008024:	4b6c      	ldr	r3, [pc, #432]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b04      	cmp	r3, #4
 800802e:	d10c      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008036:	4b68      	ldr	r3, [pc, #416]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	08db      	lsrs	r3, r3, #3
 800803c:	f003 0303 	and.w	r3, r3, #3
 8008040:	4a66      	ldr	r2, [pc, #408]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008042:	fa22 f303 	lsr.w	r3, r2, r3
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008048:	e01e      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800804a:	4b63      	ldr	r3, [pc, #396]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008056:	d106      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800805a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008060:	4b5f      	ldr	r3, [pc, #380]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008064:	e010      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008066:	4b5c      	ldr	r3, [pc, #368]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008072:	d106      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800807c:	4b59      	ldr	r3, [pc, #356]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008080:	e002      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008086:	e386      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008088:	e385      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800808a:	4b57      	ldr	r3, [pc, #348]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800808c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800808e:	e382      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008094:	e37f      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800809a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800809e:	430b      	orrs	r3, r1
 80080a0:	f040 80a7 	bne.w	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80080a4:	4b4c      	ldr	r3, [pc, #304]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80080ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080b4:	d055      	beq.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080bc:	f200 8096 	bhi.w	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080c6:	f000 8084 	beq.w	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080d0:	f200 808c 	bhi.w	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080da:	d030      	beq.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80080dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e2:	f200 8083 	bhi.w	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d004      	beq.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080f2:	d012      	beq.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80080f4:	e07a      	b.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080f6:	4b38      	ldr	r3, [pc, #224]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008102:	d107      	bne.n	8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008108:	4618      	mov	r0, r3
 800810a:	f000 fe0b 	bl	8008d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008112:	e340      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008114:	2300      	movs	r3, #0
 8008116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008118:	e33d      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800811a:	4b2f      	ldr	r3, [pc, #188]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008126:	d107      	bne.n	8008138 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008128:	f107 0318 	add.w	r3, r7, #24
 800812c:	4618      	mov	r0, r3
 800812e:	f000 fb51 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008136:	e32e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800813c:	e32b      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800813e:	4b26      	ldr	r3, [pc, #152]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814a:	d107      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fc93 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800815a:	e31c      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008160:	e319      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008162:	4b1d      	ldr	r3, [pc, #116]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800816a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800816c:	4b1a      	ldr	r3, [pc, #104]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b04      	cmp	r3, #4
 8008176:	d10c      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800817e:	4b16      	ldr	r3, [pc, #88]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	08db      	lsrs	r3, r3, #3
 8008184:	f003 0303 	and.w	r3, r3, #3
 8008188:	4a14      	ldr	r2, [pc, #80]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800818a:	fa22 f303 	lsr.w	r3, r2, r3
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008190:	e01e      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008192:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819e:	d106      	bne.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80081a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081a6:	d102      	bne.n	80081ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081a8:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ac:	e010      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ba:	d106      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80081bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c2:	d102      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081c4:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80081c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c8:	e002      	b.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081ce:	e2e2      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081d0:	e2e1      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081d2:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d6:	e2de      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081d8:	58024400 	.word	0x58024400
 80081dc:	03d09000 	.word	0x03d09000
 80081e0:	003d0900 	.word	0x003d0900
 80081e4:	007a1200 	.word	0x007a1200
 80081e8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f0:	e2d1      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081f6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80081fa:	430b      	orrs	r3, r1
 80081fc:	f040 809c 	bne.w	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008200:	4b93      	ldr	r3, [pc, #588]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008208:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008210:	d054      	beq.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008218:	f200 808b 	bhi.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008222:	f000 8083 	beq.w	800832c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800822c:	f200 8081 	bhi.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008236:	d02f      	beq.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823e:	d878      	bhi.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824c:	d012      	beq.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800824e:	e070      	b.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008250:	4b7f      	ldr	r3, [pc, #508]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800825c:	d107      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800825e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fd5e 	bl	8008d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826c:	e293      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008272:	e290      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008274:	4b76      	ldr	r3, [pc, #472]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800827c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008280:	d107      	bne.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008282:	f107 0318 	add.w	r3, r7, #24
 8008286:	4618      	mov	r0, r3
 8008288:	f000 faa4 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008290:	e281      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008292:	2300      	movs	r3, #0
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008296:	e27e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008298:	4b6d      	ldr	r3, [pc, #436]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a4:	d107      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082a6:	f107 030c 	add.w	r3, r7, #12
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 fbe6 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082b4:	e26f      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082b6:	2300      	movs	r3, #0
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ba:	e26c      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082bc:	4b64      	ldr	r3, [pc, #400]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082c6:	4b62      	ldr	r3, [pc, #392]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0304 	and.w	r3, r3, #4
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d10c      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80082d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d109      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082d8:	4b5d      	ldr	r3, [pc, #372]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	08db      	lsrs	r3, r3, #3
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	4a5c      	ldr	r2, [pc, #368]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082ea:	e01e      	b.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082ec:	4b58      	ldr	r3, [pc, #352]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f8:	d106      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80082fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008300:	d102      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008302:	4b55      	ldr	r3, [pc, #340]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008306:	e010      	b.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008308:	4b51      	ldr	r3, [pc, #324]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008314:	d106      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800831c:	d102      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800831e:	4b4f      	ldr	r3, [pc, #316]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008322:	e002      	b.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008328:	e235      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800832a:	e234      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800832c:	4b4c      	ldr	r3, [pc, #304]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008330:	e231      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008336:	e22e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800833c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008340:	430b      	orrs	r3, r1
 8008342:	f040 808f 	bne.w	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008346:	4b42      	ldr	r3, [pc, #264]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800834e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008356:	d06b      	beq.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800835e:	d874      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008366:	d056      	beq.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800836e:	d86c      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008376:	d03b      	beq.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800837e:	d864      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008386:	d021      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800838e:	d85c      	bhi.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800839c:	d004      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800839e:	e054      	b.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80083a0:	f7fe fa4c 	bl	800683c <HAL_RCC_GetPCLK1Freq>
 80083a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083a6:	e1f6      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083a8:	4b29      	ldr	r3, [pc, #164]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083b4:	d107      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083b6:	f107 0318 	add.w	r3, r7, #24
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fa0a 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083c4:	e1e7      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ca:	e1e4      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083cc:	4b20      	ldr	r3, [pc, #128]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d8:	d107      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083da:	f107 030c 	add.w	r3, r7, #12
 80083de:	4618      	mov	r0, r3
 80083e0:	f000 fb4c 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083e8:	e1d5      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083ea:	2300      	movs	r3, #0
 80083ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ee:	e1d2      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083f0:	4b17      	ldr	r3, [pc, #92]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d109      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083fc:	4b14      	ldr	r3, [pc, #80]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	08db      	lsrs	r3, r3, #3
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	4a13      	ldr	r2, [pc, #76]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800840e:	e1c2      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008414:	e1bf      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008416:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008422:	d102      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008424:	4b0c      	ldr	r3, [pc, #48]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008428:	e1b5      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800842e:	e1b2      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008430:	4b07      	ldr	r3, [pc, #28]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800843c:	d102      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008442:	e1a8      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008448:	e1a5      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844e:	e1a2      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008450:	58024400 	.word	0x58024400
 8008454:	03d09000 	.word	0x03d09000
 8008458:	003d0900 	.word	0x003d0900
 800845c:	007a1200 	.word	0x007a1200
 8008460:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008468:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800846c:	430b      	orrs	r3, r1
 800846e:	d173      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008470:	4b9c      	ldr	r3, [pc, #624]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008478:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008480:	d02f      	beq.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008488:	d863      	bhi.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008496:	d012      	beq.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008498:	e05b      	b.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800849a:	4b92      	ldr	r3, [pc, #584]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084a6:	d107      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084a8:	f107 0318 	add.w	r3, r7, #24
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f991 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084b6:	e16e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084bc:	e16b      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084be:	4b89      	ldr	r3, [pc, #548]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ca:	d107      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fad3 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084da:	e15c      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084dc:	2300      	movs	r3, #0
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e0:	e159      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084e2:	4b80      	ldr	r3, [pc, #512]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80084ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084ec:	4b7d      	ldr	r3, [pc, #500]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d10c      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084fe:	4b79      	ldr	r3, [pc, #484]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	4a77      	ldr	r2, [pc, #476]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800850a:	fa22 f303 	lsr.w	r3, r2, r3
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008510:	e01e      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008512:	4b74      	ldr	r3, [pc, #464]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851e:	d106      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008526:	d102      	bne.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008528:	4b70      	ldr	r3, [pc, #448]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852c:	e010      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800852e:	4b6d      	ldr	r3, [pc, #436]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800853a:	d106      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008542:	d102      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008544:	4b6a      	ldr	r3, [pc, #424]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008548:	e002      	b.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800854e:	e122      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008550:	e121      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008556:	e11e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800855c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008560:	430b      	orrs	r3, r1
 8008562:	d133      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008564:	4b5f      	ldr	r3, [pc, #380]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800856c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800856e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d004      	beq.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800857a:	d012      	beq.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800857c:	e023      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800857e:	4b59      	ldr	r3, [pc, #356]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008586:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800858a:	d107      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800858c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fbc7 	bl	8008d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800859a:	e0fc      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a0:	e0f9      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085a2:	4b50      	ldr	r3, [pc, #320]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ae:	d107      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b0:	f107 0318 	add.w	r3, r7, #24
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 f90d 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085be:	e0ea      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c4:	e0e7      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ca:	e0e4      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80085d4:	430b      	orrs	r3, r1
 80085d6:	f040 808d 	bne.w	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80085da:	4b42      	ldr	r3, [pc, #264]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80085dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80085e2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ea:	d06b      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80085ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085f2:	d874      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085fa:	d056      	beq.n	80086aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008602:	d86c      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800860a:	d03b      	beq.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008612:	d864      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800861a:	d021      	beq.n	8008660 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008622:	d85c      	bhi.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	2b00      	cmp	r3, #0
 8008628:	d004      	beq.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008630:	d004      	beq.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008632:	e054      	b.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008634:	f000 f8b8 	bl	80087a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008638:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800863a:	e0ac      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800863c:	4b29      	ldr	r3, [pc, #164]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008648:	d107      	bne.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864a:	f107 0318 	add.w	r3, r7, #24
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f8c0 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008658:	e09d      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800865a:	2300      	movs	r3, #0
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865e:	e09a      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008660:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800866c:	d107      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800866e:	f107 030c 	add.w	r3, r7, #12
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fa02 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800867c:	e08b      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008682:	e088      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008684:	4b17      	ldr	r3, [pc, #92]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b04      	cmp	r3, #4
 800868e:	d109      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008690:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	08db      	lsrs	r3, r3, #3
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	4a13      	ldr	r2, [pc, #76]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800869c:	fa22 f303 	lsr.w	r3, r2, r3
 80086a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086a2:	e078      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086a4:	2300      	movs	r3, #0
 80086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a8:	e075      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086aa:	4b0e      	ldr	r3, [pc, #56]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b6:	d102      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80086b8:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086bc:	e06b      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086be:	2300      	movs	r3, #0
 80086c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086c2:	e068      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086c4:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086d0:	d102      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80086d2:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d6:	e05e      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086dc:	e05b      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086e2:	e058      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086e4:	58024400 	.word	0x58024400
 80086e8:	03d09000 	.word	0x03d09000
 80086ec:	003d0900 	.word	0x003d0900
 80086f0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80086f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80086fc:	430b      	orrs	r3, r1
 80086fe:	d148      	bne.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008700:	4b27      	ldr	r3, [pc, #156]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008704:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008708:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008710:	d02a      	beq.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008718:	d838      	bhi.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008726:	d00d      	beq.n	8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008728:	e030      	b.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800872a:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008736:	d102      	bne.n	800873e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008738:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800873a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800873c:	e02b      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800873e:	2300      	movs	r3, #0
 8008740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008742:	e028      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008744:	4b16      	ldr	r3, [pc, #88]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008750:	d107      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fae4 	bl	8008d24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008760:	e019      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008762:	2300      	movs	r3, #0
 8008764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008766:	e016      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008768:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008774:	d107      	bne.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008776:	f107 0318 	add.w	r3, r7, #24
 800877a:	4618      	mov	r0, r3
 800877c:	f000 f82a 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008784:	e007      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800878a:	e004      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008790:	e001      	b.n	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008798:	4618      	mov	r0, r3
 800879a:	3740      	adds	r7, #64	; 0x40
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	58024400 	.word	0x58024400
 80087a4:	007a1200 	.word	0x007a1200

080087a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087ac:	f7fe f816 	bl	80067dc <HAL_RCC_GetHCLKFreq>
 80087b0:	4602      	mov	r2, r0
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	091b      	lsrs	r3, r3, #4
 80087b8:	f003 0307 	and.w	r3, r3, #7
 80087bc:	4904      	ldr	r1, [pc, #16]	; (80087d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087be:	5ccb      	ldrb	r3, [r1, r3]
 80087c0:	f003 031f 	and.w	r3, r3, #31
 80087c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	58024400 	.word	0x58024400
 80087d0:	0800b60c 	.word	0x0800b60c

080087d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b089      	sub	sp, #36	; 0x24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087dc:	4ba1      	ldr	r3, [pc, #644]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	f003 0303 	and.w	r3, r3, #3
 80087e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80087e6:	4b9f      	ldr	r3, [pc, #636]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ea:	0b1b      	lsrs	r3, r3, #12
 80087ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80087f2:	4b9c      	ldr	r3, [pc, #624]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	091b      	lsrs	r3, r3, #4
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80087fe:	4b99      	ldr	r3, [pc, #612]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	08db      	lsrs	r3, r3, #3
 8008804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8111 	beq.w	8008a44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b02      	cmp	r3, #2
 8008826:	f000 8083 	beq.w	8008930 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	2b02      	cmp	r3, #2
 800882e:	f200 80a1 	bhi.w	8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d056      	beq.n	80088ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800883e:	e099      	b.n	8008974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008840:	4b88      	ldr	r3, [pc, #544]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0320 	and.w	r3, r3, #32
 8008848:	2b00      	cmp	r3, #0
 800884a:	d02d      	beq.n	80088a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800884c:	4b85      	ldr	r3, [pc, #532]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	08db      	lsrs	r3, r3, #3
 8008852:	f003 0303 	and.w	r3, r3, #3
 8008856:	4a84      	ldr	r2, [pc, #528]	; (8008a68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	ee07 3a90 	vmov	s15, r3
 800886e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008876:	4b7b      	ldr	r3, [pc, #492]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008886:	ed97 6a03 	vldr	s12, [r7, #12]
 800888a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800888e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800889a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800889e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088a6:	e087      	b.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ba:	4b6a      	ldr	r3, [pc, #424]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80088ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ea:	e065      	b.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088fe:	4b59      	ldr	r3, [pc, #356]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008912:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800891a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800891e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800892a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800892e:	e043      	b.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800893e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008942:	4b48      	ldr	r3, [pc, #288]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008952:	ed97 6a03 	vldr	s12, [r7, #12]
 8008956:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800895a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800896a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008972:	e021      	b.n	80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008986:	4b37      	ldr	r3, [pc, #220]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008996:	ed97 6a03 	vldr	s12, [r7, #12]
 800899a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800899e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089b8:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089bc:	0a5b      	lsrs	r3, r3, #9
 80089be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089de:	ee17 2a90 	vmov	r2, s15
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80089e6:	4b1f      	ldr	r3, [pc, #124]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	0c1b      	lsrs	r3, r3, #16
 80089ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a0c:	ee17 2a90 	vmov	r2, s15
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a14:	4b13      	ldr	r3, [pc, #76]	; (8008a64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	0e1b      	lsrs	r3, r3, #24
 8008a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a3a:	ee17 2a90 	vmov	r2, s15
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a42:	e008      	b.n	8008a56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	609a      	str	r2, [r3, #8]
}
 8008a56:	bf00      	nop
 8008a58:	3724      	adds	r7, #36	; 0x24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	58024400 	.word	0x58024400
 8008a68:	03d09000 	.word	0x03d09000
 8008a6c:	46000000 	.word	0x46000000
 8008a70:	4c742400 	.word	0x4c742400
 8008a74:	4a742400 	.word	0x4a742400
 8008a78:	4af42400 	.word	0x4af42400

08008a7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b089      	sub	sp, #36	; 0x24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a84:	4ba1      	ldr	r3, [pc, #644]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008a8e:	4b9f      	ldr	r3, [pc, #636]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a92:	0d1b      	lsrs	r3, r3, #20
 8008a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008a9a:	4b9c      	ldr	r3, [pc, #624]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	0a1b      	lsrs	r3, r3, #8
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008aa6:	4b99      	ldr	r3, [pc, #612]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aaa:	08db      	lsrs	r3, r3, #3
 8008aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8111 	beq.w	8008cec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	f000 8083 	beq.w	8008bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	f200 80a1 	bhi.w	8008c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d056      	beq.n	8008b94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008ae6:	e099      	b.n	8008c1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae8:	4b88      	ldr	r3, [pc, #544]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d02d      	beq.n	8008b50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008af4:	4b85      	ldr	r3, [pc, #532]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	08db      	lsrs	r3, r3, #3
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	4a84      	ldr	r2, [pc, #528]	; (8008d10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b00:	fa22 f303 	lsr.w	r3, r2, r3
 8008b04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1e:	4b7b      	ldr	r3, [pc, #492]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b4e:	e087      	b.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b62:	4b6a      	ldr	r3, [pc, #424]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b92:	e065      	b.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba6:	4b59      	ldr	r3, [pc, #356]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bd6:	e043      	b.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bea:	4b48      	ldr	r3, [pc, #288]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c1a:	e021      	b.n	8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b37      	ldr	r3, [pc, #220]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c60:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	0a5b      	lsrs	r3, r3, #9
 8008c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c86:	ee17 2a90 	vmov	r2, s15
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008c8e:	4b1f      	ldr	r3, [pc, #124]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	0c1b      	lsrs	r3, r3, #16
 8008c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb4:	ee17 2a90 	vmov	r2, s15
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008cbc:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	0e1b      	lsrs	r3, r3, #24
 8008cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ce2:	ee17 2a90 	vmov	r2, s15
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008cea:	e008      	b.n	8008cfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	609a      	str	r2, [r3, #8]
}
 8008cfe:	bf00      	nop
 8008d00:	3724      	adds	r7, #36	; 0x24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	03d09000 	.word	0x03d09000
 8008d14:	46000000 	.word	0x46000000
 8008d18:	4c742400 	.word	0x4c742400
 8008d1c:	4a742400 	.word	0x4a742400
 8008d20:	4af42400 	.word	0x4af42400

08008d24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b089      	sub	sp, #36	; 0x24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d2c:	4ba0      	ldr	r3, [pc, #640]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008d36:	4b9e      	ldr	r3, [pc, #632]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3a:	091b      	lsrs	r3, r3, #4
 8008d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d42:	4b9b      	ldr	r3, [pc, #620]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d4c:	4b98      	ldr	r3, [pc, #608]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d50:	08db      	lsrs	r3, r3, #3
 8008d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	fb02 f303 	mul.w	r3, r2, r3
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f000 8111 	beq.w	8008f92 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	f000 8083 	beq.w	8008e7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	f200 80a1 	bhi.w	8008ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d056      	beq.n	8008e3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008d8c:	e099      	b.n	8008ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d8e:	4b88      	ldr	r3, [pc, #544]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d02d      	beq.n	8008df6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d9a:	4b85      	ldr	r3, [pc, #532]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	08db      	lsrs	r3, r3, #3
 8008da0:	f003 0303 	and.w	r3, r3, #3
 8008da4:	4a83      	ldr	r2, [pc, #524]	; (8008fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008da6:	fa22 f303 	lsr.w	r3, r2, r3
 8008daa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	ee07 3a90 	vmov	s15, r3
 8008dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc4:	4b7a      	ldr	r3, [pc, #488]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dcc:	ee07 3a90 	vmov	s15, r3
 8008dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dd8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008df4:	e087      	b.n	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e00:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008fbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e08:	4b69      	ldr	r3, [pc, #420]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e10:	ee07 3a90 	vmov	s15, r3
 8008e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e18:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e38:	e065      	b.n	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	ee07 3a90 	vmov	s15, r3
 8008e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008fc0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4c:	4b58      	ldr	r3, [pc, #352]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e54:	ee07 3a90 	vmov	s15, r3
 8008e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e60:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e7c:	e043      	b.n	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e88:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008fc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e90:	4b47      	ldr	r3, [pc, #284]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e98:	ee07 3a90 	vmov	s15, r3
 8008e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec0:	e021      	b.n	8008f06 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ecc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fbc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed4:	4b36      	ldr	r3, [pc, #216]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ee8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f04:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008f06:	4b2a      	ldr	r3, [pc, #168]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	0a5b      	lsrs	r3, r3, #9
 8008f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f10:	ee07 3a90 	vmov	s15, r3
 8008f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f20:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2c:	ee17 2a90 	vmov	r2, s15
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008f34:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	0c1b      	lsrs	r3, r3, #16
 8008f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f5a:	ee17 2a90 	vmov	r2, s15
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f62:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f66:	0e1b      	lsrs	r3, r3, #24
 8008f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f6c:	ee07 3a90 	vmov	s15, r3
 8008f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f88:	ee17 2a90 	vmov	r2, s15
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008f90:	e008      	b.n	8008fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	609a      	str	r2, [r3, #8]
}
 8008fa4:	bf00      	nop
 8008fa6:	3724      	adds	r7, #36	; 0x24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	58024400 	.word	0x58024400
 8008fb4:	03d09000 	.word	0x03d09000
 8008fb8:	46000000 	.word	0x46000000
 8008fbc:	4c742400 	.word	0x4c742400
 8008fc0:	4a742400 	.word	0x4a742400
 8008fc4:	4af42400 	.word	0x4af42400

08008fc8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fd6:	4b53      	ldr	r3, [pc, #332]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	f003 0303 	and.w	r3, r3, #3
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d101      	bne.n	8008fe6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e099      	b.n	800911a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008fe6:	4b4f      	ldr	r3, [pc, #316]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a4e      	ldr	r2, [pc, #312]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8008fec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ff0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ff2:	f7f8 fbeb 	bl	80017cc <HAL_GetTick>
 8008ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ff8:	e008      	b.n	800900c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ffa:	f7f8 fbe7 	bl	80017cc <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d901      	bls.n	800900c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e086      	b.n	800911a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800900c:	4b45      	ldr	r3, [pc, #276]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1f0      	bne.n	8008ffa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009018:	4b42      	ldr	r3, [pc, #264]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 800901a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	031b      	lsls	r3, r3, #12
 8009026:	493f      	ldr	r1, [pc, #252]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8009028:	4313      	orrs	r3, r2
 800902a:	628b      	str	r3, [r1, #40]	; 0x28
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	3b01      	subs	r3, #1
 8009032:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	3b01      	subs	r3, #1
 800903c:	025b      	lsls	r3, r3, #9
 800903e:	b29b      	uxth	r3, r3
 8009040:	431a      	orrs	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	3b01      	subs	r3, #1
 8009048:	041b      	lsls	r3, r3, #16
 800904a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
 8009054:	3b01      	subs	r3, #1
 8009056:	061b      	lsls	r3, r3, #24
 8009058:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800905c:	4931      	ldr	r1, [pc, #196]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 800905e:	4313      	orrs	r3, r2
 8009060:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009062:	4b30      	ldr	r3, [pc, #192]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	492d      	ldr	r1, [pc, #180]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8009070:	4313      	orrs	r3, r2
 8009072:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009074:	4b2b      	ldr	r3, [pc, #172]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	f023 0220 	bic.w	r2, r3, #32
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	4928      	ldr	r1, [pc, #160]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8009082:	4313      	orrs	r3, r2
 8009084:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009086:	4b27      	ldr	r3, [pc, #156]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908a:	4a26      	ldr	r2, [pc, #152]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 800908c:	f023 0310 	bic.w	r3, r3, #16
 8009090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009092:	4b24      	ldr	r3, [pc, #144]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 8009094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009096:	4b24      	ldr	r3, [pc, #144]	; (8009128 <RCCEx_PLL2_Config+0x160>)
 8009098:	4013      	ands	r3, r2
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	69d2      	ldr	r2, [r2, #28]
 800909e:	00d2      	lsls	r2, r2, #3
 80090a0:	4920      	ldr	r1, [pc, #128]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80090a6:	4b1f      	ldr	r3, [pc, #124]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090aa:	4a1e      	ldr	r2, [pc, #120]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090ac:	f043 0310 	orr.w	r3, r3, #16
 80090b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090b8:	4b1a      	ldr	r3, [pc, #104]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	4a19      	ldr	r2, [pc, #100]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090c4:	e00f      	b.n	80090e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d106      	bne.n	80090da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090cc:	4b15      	ldr	r3, [pc, #84]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4a14      	ldr	r2, [pc, #80]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090d8:	e005      	b.n	80090e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80090da:	4b12      	ldr	r3, [pc, #72]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	4a11      	ldr	r2, [pc, #68]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a0e      	ldr	r2, [pc, #56]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 80090ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090f2:	f7f8 fb6b 	bl	80017cc <HAL_GetTick>
 80090f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80090f8:	e008      	b.n	800910c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80090fa:	f7f8 fb67 	bl	80017cc <HAL_GetTick>
 80090fe:	4602      	mov	r2, r0
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	2b02      	cmp	r3, #2
 8009106:	d901      	bls.n	800910c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e006      	b.n	800911a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <RCCEx_PLL2_Config+0x15c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0f0      	beq.n	80090fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	58024400 	.word	0x58024400
 8009128:	ffff0007 	.word	0xffff0007

0800912c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800913a:	4b53      	ldr	r3, [pc, #332]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	2b03      	cmp	r3, #3
 8009144:	d101      	bne.n	800914a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e099      	b.n	800927e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800914a:	4b4f      	ldr	r3, [pc, #316]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a4e      	ldr	r2, [pc, #312]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009156:	f7f8 fb39 	bl	80017cc <HAL_GetTick>
 800915a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800915c:	e008      	b.n	8009170 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800915e:	f7f8 fb35 	bl	80017cc <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d901      	bls.n	8009170 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e086      	b.n	800927e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009170:	4b45      	ldr	r3, [pc, #276]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1f0      	bne.n	800915e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800917c:	4b42      	ldr	r3, [pc, #264]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 800917e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009180:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	051b      	lsls	r3, r3, #20
 800918a:	493f      	ldr	r1, [pc, #252]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 800918c:	4313      	orrs	r3, r2
 800918e:	628b      	str	r3, [r1, #40]	; 0x28
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	3b01      	subs	r3, #1
 8009196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	3b01      	subs	r3, #1
 80091a0:	025b      	lsls	r3, r3, #9
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091c0:	4931      	ldr	r1, [pc, #196]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091c6:	4b30      	ldr	r3, [pc, #192]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	492d      	ldr	r1, [pc, #180]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80091d8:	4b2b      	ldr	r3, [pc, #172]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	4928      	ldr	r1, [pc, #160]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80091ea:	4b27      	ldr	r3, [pc, #156]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ee:	4a26      	ldr	r2, [pc, #152]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80091f6:	4b24      	ldr	r3, [pc, #144]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 80091f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091fa:	4b24      	ldr	r3, [pc, #144]	; (800928c <RCCEx_PLL3_Config+0x160>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	69d2      	ldr	r2, [r2, #28]
 8009202:	00d2      	lsls	r2, r2, #3
 8009204:	4920      	ldr	r1, [pc, #128]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009206:	4313      	orrs	r3, r2
 8009208:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800920a:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	4a1e      	ldr	r2, [pc, #120]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800921c:	4b1a      	ldr	r3, [pc, #104]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	4a19      	ldr	r2, [pc, #100]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009226:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009228:	e00f      	b.n	800924a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d106      	bne.n	800923e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009230:	4b15      	ldr	r3, [pc, #84]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	4a14      	ldr	r2, [pc, #80]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009236:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800923a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800923c:	e005      	b.n	800924a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800923e:	4b12      	ldr	r3, [pc, #72]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009242:	4a11      	ldr	r2, [pc, #68]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009248:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800924a:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a0e      	ldr	r2, [pc, #56]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009256:	f7f8 fab9 	bl	80017cc <HAL_GetTick>
 800925a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800925c:	e008      	b.n	8009270 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800925e:	f7f8 fab5 	bl	80017cc <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d901      	bls.n	8009270 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e006      	b.n	800927e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009270:	4b05      	ldr	r3, [pc, #20]	; (8009288 <RCCEx_PLL3_Config+0x15c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0f0      	beq.n	800925e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800927c:	7bfb      	ldrb	r3, [r7, #15]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	58024400 	.word	0x58024400
 800928c:	ffff0007 	.word	0xffff0007

08009290 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d071      	beq.n	8009386 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d106      	bne.n	80092bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7f8 f82e 	bl	8001318 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b10      	cmp	r3, #16
 80092d0:	d050      	beq.n	8009374 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	22ca      	movs	r2, #202	; 0xca
 80092d8:	625a      	str	r2, [r3, #36]	; 0x24
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2253      	movs	r2, #83	; 0x53
 80092e0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fa4a 	bl	800977c <RTC_EnterInitMode>
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d124      	bne.n	800933c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	6899      	ldr	r1, [r3, #8]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	4b24      	ldr	r3, [pc, #144]	; (8009390 <HAL_RTC_Init+0x100>)
 80092fe:	400b      	ands	r3, r1
 8009300:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6899      	ldr	r1, [r3, #8]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	431a      	orrs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	0419      	lsls	r1, r3, #16
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa56 	bl	80097e4 <RTC_ExitInitMode>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d113      	bne.n	800936a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0203 	bic.w	r2, r2, #3
 8009350:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69da      	ldr	r2, [r3, #28]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	22ff      	movs	r2, #255	; 0xff
 8009370:	625a      	str	r2, [r3, #36]	; 0x24
 8009372:	e001      	b.n	8009378 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d103      	bne.n	8009386 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	ff8fffbf 	.word	0xff8fffbf

08009394 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_RTC_SetTime+0x1a>
 80093aa:	2302      	movs	r3, #2
 80093ac:	e089      	b.n	80094c2 <HAL_RTC_SetTime+0x12e>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2202      	movs	r2, #2
 80093ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	22ca      	movs	r2, #202	; 0xca
 80093c4:	625a      	str	r2, [r3, #36]	; 0x24
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2253      	movs	r2, #83	; 0x53
 80093cc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f000 f9d4 	bl	800977c <RTC_EnterInitMode>
 80093d4:	4603      	mov	r3, r0
 80093d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80093d8:	7cfb      	ldrb	r3, [r7, #19]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d161      	bne.n	80094a2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d126      	bne.n	8009432 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2200      	movs	r2, #0
 80093f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fa2f 	bl	8009860 <RTC_ByteToBcd2>
 8009402:	4603      	mov	r3, r0
 8009404:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	785b      	ldrb	r3, [r3, #1]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fa28 	bl	8009860 <RTC_ByteToBcd2>
 8009410:	4603      	mov	r3, r0
 8009412:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009414:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	789b      	ldrb	r3, [r3, #2]
 800941a:	4618      	mov	r0, r3
 800941c:	f000 fa20 	bl	8009860 <RTC_ByteToBcd2>
 8009420:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009422:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	78db      	ldrb	r3, [r3, #3]
 800942a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800942c:	4313      	orrs	r3, r2
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	e018      	b.n	8009464 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2200      	movs	r2, #0
 8009444:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009452:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009458:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	78db      	ldrb	r3, [r3, #3]
 800945e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009460:	4313      	orrs	r3, r2
 8009462:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	6979      	ldr	r1, [r7, #20]
 800946a:	4b18      	ldr	r3, [pc, #96]	; (80094cc <HAL_RTC_SetTime+0x138>)
 800946c:	400b      	ands	r3, r1
 800946e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689a      	ldr	r2, [r3, #8]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800947e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6899      	ldr	r1, [r3, #8]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	431a      	orrs	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f9a3 	bl	80097e4 <RTC_ExitInitMode>
 800949e:	4603      	mov	r3, r0
 80094a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	22ff      	movs	r2, #255	; 0xff
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80094aa:	7cfb      	ldrb	r3, [r7, #19]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d103      	bne.n	80094b8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80094c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd90      	pop	{r4, r7, pc}
 80094ca:	bf00      	nop
 80094cc:	007f7f7f 	.word	0x007f7f7f

080094d0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b22      	ldr	r3, [pc, #136]	; (8009584 <HAL_RTC_GetTime+0xb4>)
 80094fc:	4013      	ands	r3, r2
 80094fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	0c1b      	lsrs	r3, r3, #16
 8009504:	b2db      	uxtb	r3, r3
 8009506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800950a:	b2da      	uxtb	r2, r3
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	0a1b      	lsrs	r3, r3, #8
 8009514:	b2db      	uxtb	r3, r3
 8009516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800951a:	b2da      	uxtb	r2, r3
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009528:	b2da      	uxtb	r2, r3
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	0d9b      	lsrs	r3, r3, #22
 8009532:	b2db      	uxtb	r3, r3
 8009534:	f003 0301 	and.w	r3, r3, #1
 8009538:	b2da      	uxtb	r2, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d11a      	bne.n	800957a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 f9a9 	bl	80098a0 <RTC_Bcd2ToByte>
 800954e:	4603      	mov	r3, r0
 8009550:	461a      	mov	r2, r3
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	4618      	mov	r0, r3
 800955c:	f000 f9a0 	bl	80098a0 <RTC_Bcd2ToByte>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	789b      	ldrb	r3, [r3, #2]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 f997 	bl	80098a0 <RTC_Bcd2ToByte>
 8009572:	4603      	mov	r3, r0
 8009574:	461a      	mov	r2, r3
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	007f7f7f 	.word	0x007f7f7f

08009588 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009588:	b590      	push	{r4, r7, lr}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_RTC_SetDate+0x1a>
 800959e:	2302      	movs	r3, #2
 80095a0:	e073      	b.n	800968a <HAL_RTC_SetDate+0x102>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10e      	bne.n	80095d6 <HAL_RTC_SetDate+0x4e>
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	785b      	ldrb	r3, [r3, #1]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d008      	beq.n	80095d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	f023 0310 	bic.w	r3, r3, #16
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	330a      	adds	r3, #10
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d11c      	bne.n	8009616 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	78db      	ldrb	r3, [r3, #3]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f93d 	bl	8009860 <RTC_ByteToBcd2>
 80095e6:	4603      	mov	r3, r0
 80095e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	785b      	ldrb	r3, [r3, #1]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f936 	bl	8009860 <RTC_ByteToBcd2>
 80095f4:	4603      	mov	r3, r0
 80095f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80095f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	789b      	ldrb	r3, [r3, #2]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f92e 	bl	8009860 <RTC_ByteToBcd2>
 8009604:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009606:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009610:	4313      	orrs	r3, r2
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e00e      	b.n	8009634 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	78db      	ldrb	r3, [r3, #3]
 800961a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009622:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009628:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009630:	4313      	orrs	r3, r2
 8009632:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	22ca      	movs	r2, #202	; 0xca
 800963a:	625a      	str	r2, [r3, #36]	; 0x24
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2253      	movs	r2, #83	; 0x53
 8009642:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f899 	bl	800977c <RTC_EnterInitMode>
 800964a:	4603      	mov	r3, r0
 800964c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800964e:	7cfb      	ldrb	r3, [r7, #19]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	6979      	ldr	r1, [r7, #20]
 800965a:	4b0e      	ldr	r3, [pc, #56]	; (8009694 <HAL_RTC_SetDate+0x10c>)
 800965c:	400b      	ands	r3, r1
 800965e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f8bf 	bl	80097e4 <RTC_ExitInitMode>
 8009666:	4603      	mov	r3, r0
 8009668:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	22ff      	movs	r2, #255	; 0xff
 8009670:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009672:	7cfb      	ldrb	r3, [r7, #19]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009688:	7cfb      	ldrb	r3, [r7, #19]


}
 800968a:	4618      	mov	r0, r3
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	bd90      	pop	{r4, r7, pc}
 8009692:	bf00      	nop
 8009694:	00ffff3f 	.word	0x00ffff3f

08009698 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	4b21      	ldr	r3, [pc, #132]	; (8009730 <HAL_RTC_GetDate+0x98>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	0c1b      	lsrs	r3, r3, #16
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	0a1b      	lsrs	r3, r3, #8
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f003 031f 	and.w	r3, r3, #31
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096d2:	b2da      	uxtb	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	0b5b      	lsrs	r3, r3, #13
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d11a      	bne.n	8009724 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	78db      	ldrb	r3, [r3, #3]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 f8d4 	bl	80098a0 <RTC_Bcd2ToByte>
 80096f8:	4603      	mov	r3, r0
 80096fa:	461a      	mov	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 f8cb 	bl	80098a0 <RTC_Bcd2ToByte>
 800970a:	4603      	mov	r3, r0
 800970c:	461a      	mov	r2, r3
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	789b      	ldrb	r3, [r3, #2]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f8c2 	bl	80098a0 <RTC_Bcd2ToByte>
 800971c:	4603      	mov	r3, r0
 800971e:	461a      	mov	r2, r3
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	00ffff3f 	.word	0x00ffff3f

08009734 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a0d      	ldr	r2, [pc, #52]	; (8009778 <HAL_RTC_WaitForSynchro+0x44>)
 8009742:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8009744:	f7f8 f842 	bl	80017cc <HAL_GetTick>
 8009748:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800974a:	e009      	b.n	8009760 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800974c:	f7f8 f83e 	bl	80017cc <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800975a:	d901      	bls.n	8009760 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e007      	b.n	8009770 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0ee      	beq.n	800974c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	0003ff5f 	.word	0x0003ff5f

0800977c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d120      	bne.n	80097d8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f04f 32ff 	mov.w	r2, #4294967295
 800979e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80097a0:	f7f8 f814 	bl	80017cc <HAL_GetTick>
 80097a4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80097a6:	e00d      	b.n	80097c4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80097a8:	f7f8 f810 	bl	80017cc <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097b6:	d905      	bls.n	80097c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2203      	movs	r2, #3
 80097c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <RTC_EnterInitMode+0x5c>
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d1e7      	bne.n	80097a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80097f0:	4b1a      	ldr	r3, [pc, #104]	; (800985c <RTC_ExitInitMode+0x78>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	4a19      	ldr	r2, [pc, #100]	; (800985c <RTC_ExitInitMode+0x78>)
 80097f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097fa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80097fc:	4b17      	ldr	r3, [pc, #92]	; (800985c <RTC_ExitInitMode+0x78>)
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10c      	bne.n	8009822 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff ff93 	bl	8009734 <HAL_RTC_WaitForSynchro>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d01e      	beq.n	8009852 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2203      	movs	r2, #3
 8009818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	73fb      	strb	r3, [r7, #15]
 8009820:	e017      	b.n	8009852 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009822:	4b0e      	ldr	r3, [pc, #56]	; (800985c <RTC_ExitInitMode+0x78>)
 8009824:	689b      	ldr	r3, [r3, #8]
 8009826:	4a0d      	ldr	r2, [pc, #52]	; (800985c <RTC_ExitInitMode+0x78>)
 8009828:	f023 0320 	bic.w	r3, r3, #32
 800982c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff ff80 	bl	8009734 <HAL_RTC_WaitForSynchro>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d005      	beq.n	8009846 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2203      	movs	r2, #3
 800983e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <RTC_ExitInitMode+0x78>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	4a04      	ldr	r2, [pc, #16]	; (800985c <RTC_ExitInitMode+0x78>)
 800984c:	f043 0320 	orr.w	r3, r3, #32
 8009850:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	58004000 	.word	0x58004000

08009860 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8009872:	e005      	b.n	8009880 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800987a:	7afb      	ldrb	r3, [r7, #11]
 800987c:	3b0a      	subs	r3, #10
 800987e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	2b09      	cmp	r3, #9
 8009884:	d8f6      	bhi.n	8009874 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	b2da      	uxtb	r2, r3
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	4313      	orrs	r3, r2
 8009892:	b2db      	uxtb	r3, r3
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80098aa:	79fb      	ldrb	r3, [r7, #7]
 80098ac:	091b      	lsrs	r3, r3, #4
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	0092      	lsls	r2, r2, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	4413      	add	r3, r2
 80098c6:	b2db      	uxtb	r3, r3
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d101      	bne.n	80098ec <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80098e8:	2302      	movs	r3, #2
 80098ea:	e034      	b.n	8009956 <HAL_RTCEx_SetCalibrationOutPut+0x82>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	22ca      	movs	r2, #202	; 0xca
 8009902:	625a      	str	r2, [r3, #36]	; 0x24
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2253      	movs	r2, #83	; 0x53
 800990a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689a      	ldr	r2, [r3, #8]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800991a:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6899      	ldr	r1, [r3, #8]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800993a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	22ff      	movs	r2, #255	; 0xff
 8009942:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e042      	b.n	80099fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7f7 fd26 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2224      	movs	r2, #36	; 0x24
 8009990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 0201 	bic.w	r2, r2, #1
 80099a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f8bb 	bl	8009b20 <UART_SetConfig>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d101      	bne.n	80099b4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e022      	b.n	80099fa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d002      	beq.n	80099c2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fe17 	bl	800a5f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	689a      	ldr	r2, [r3, #8]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0201 	orr.w	r2, r2, #1
 80099f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fe9e 	bl	800a734 <UART_CheckIdleState>
 80099f8:	4603      	mov	r3, r0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b08a      	sub	sp, #40	; 0x28
 8009a06:	af02      	add	r7, sp, #8
 8009a08:	60f8      	str	r0, [r7, #12]
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	603b      	str	r3, [r7, #0]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a18:	2b20      	cmp	r3, #32
 8009a1a:	d17b      	bne.n	8009b14 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <HAL_UART_Transmit+0x26>
 8009a22:	88fb      	ldrh	r3, [r7, #6]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e074      	b.n	8009b16 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2221      	movs	r2, #33	; 0x21
 8009a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a3c:	f7f7 fec6 	bl	80017cc <HAL_GetTick>
 8009a40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	88fa      	ldrh	r2, [r7, #6]
 8009a46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	88fa      	ldrh	r2, [r7, #6]
 8009a4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a5a:	d108      	bne.n	8009a6e <HAL_UART_Transmit+0x6c>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d104      	bne.n	8009a6e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	61bb      	str	r3, [r7, #24]
 8009a6c:	e003      	b.n	8009a76 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a76:	e030      	b.n	8009ada <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2180      	movs	r1, #128	; 0x80
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 ff00 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e03d      	b.n	8009b16 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009aae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	3302      	adds	r3, #2
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e007      	b.n	8009ac8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	781a      	ldrb	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1c8      	bne.n	8009a78 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2140      	movs	r1, #64	; 0x40
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 fec9 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2220      	movs	r2, #32
 8009b00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e006      	b.n	8009b16 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	e000      	b.n	8009b16 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009b14:	2302      	movs	r3, #2
  }
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3720      	adds	r7, #32
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
	...

08009b20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b24:	b092      	sub	sp, #72	; 0x48
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	689a      	ldr	r2, [r3, #8]
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	69db      	ldr	r3, [r3, #28]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4bbe      	ldr	r3, [pc, #760]	; (8009e48 <UART_SetConfig+0x328>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4ab3      	ldr	r2, [pc, #716]	; (8009e4c <UART_SetConfig+0x32c>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d004      	beq.n	8009b8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	4baf      	ldr	r3, [pc, #700]	; (8009e50 <UART_SetConfig+0x330>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	6812      	ldr	r2, [r2, #0]
 8009b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	f023 010f 	bic.w	r1, r3, #15
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4aa6      	ldr	r2, [pc, #664]	; (8009e54 <UART_SetConfig+0x334>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d177      	bne.n	8009cb0 <UART_SetConfig+0x190>
 8009bc0:	4ba5      	ldr	r3, [pc, #660]	; (8009e58 <UART_SetConfig+0x338>)
 8009bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc8:	2b28      	cmp	r3, #40	; 0x28
 8009bca:	d86d      	bhi.n	8009ca8 <UART_SetConfig+0x188>
 8009bcc:	a201      	add	r2, pc, #4	; (adr r2, 8009bd4 <UART_SetConfig+0xb4>)
 8009bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd2:	bf00      	nop
 8009bd4:	08009c79 	.word	0x08009c79
 8009bd8:	08009ca9 	.word	0x08009ca9
 8009bdc:	08009ca9 	.word	0x08009ca9
 8009be0:	08009ca9 	.word	0x08009ca9
 8009be4:	08009ca9 	.word	0x08009ca9
 8009be8:	08009ca9 	.word	0x08009ca9
 8009bec:	08009ca9 	.word	0x08009ca9
 8009bf0:	08009ca9 	.word	0x08009ca9
 8009bf4:	08009c81 	.word	0x08009c81
 8009bf8:	08009ca9 	.word	0x08009ca9
 8009bfc:	08009ca9 	.word	0x08009ca9
 8009c00:	08009ca9 	.word	0x08009ca9
 8009c04:	08009ca9 	.word	0x08009ca9
 8009c08:	08009ca9 	.word	0x08009ca9
 8009c0c:	08009ca9 	.word	0x08009ca9
 8009c10:	08009ca9 	.word	0x08009ca9
 8009c14:	08009c89 	.word	0x08009c89
 8009c18:	08009ca9 	.word	0x08009ca9
 8009c1c:	08009ca9 	.word	0x08009ca9
 8009c20:	08009ca9 	.word	0x08009ca9
 8009c24:	08009ca9 	.word	0x08009ca9
 8009c28:	08009ca9 	.word	0x08009ca9
 8009c2c:	08009ca9 	.word	0x08009ca9
 8009c30:	08009ca9 	.word	0x08009ca9
 8009c34:	08009c91 	.word	0x08009c91
 8009c38:	08009ca9 	.word	0x08009ca9
 8009c3c:	08009ca9 	.word	0x08009ca9
 8009c40:	08009ca9 	.word	0x08009ca9
 8009c44:	08009ca9 	.word	0x08009ca9
 8009c48:	08009ca9 	.word	0x08009ca9
 8009c4c:	08009ca9 	.word	0x08009ca9
 8009c50:	08009ca9 	.word	0x08009ca9
 8009c54:	08009c99 	.word	0x08009c99
 8009c58:	08009ca9 	.word	0x08009ca9
 8009c5c:	08009ca9 	.word	0x08009ca9
 8009c60:	08009ca9 	.word	0x08009ca9
 8009c64:	08009ca9 	.word	0x08009ca9
 8009c68:	08009ca9 	.word	0x08009ca9
 8009c6c:	08009ca9 	.word	0x08009ca9
 8009c70:	08009ca9 	.word	0x08009ca9
 8009c74:	08009ca1 	.word	0x08009ca1
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7e:	e222      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009c80:	2304      	movs	r3, #4
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c86:	e21e      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009c88:	2308      	movs	r3, #8
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8e:	e21a      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009c90:	2310      	movs	r3, #16
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c96:	e216      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009c98:	2320      	movs	r3, #32
 8009c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9e:	e212      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009ca0:	2340      	movs	r3, #64	; 0x40
 8009ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca6:	e20e      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009ca8:	2380      	movs	r3, #128	; 0x80
 8009caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cae:	e20a      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a69      	ldr	r2, [pc, #420]	; (8009e5c <UART_SetConfig+0x33c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d130      	bne.n	8009d1c <UART_SetConfig+0x1fc>
 8009cba:	4b67      	ldr	r3, [pc, #412]	; (8009e58 <UART_SetConfig+0x338>)
 8009cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cbe:	f003 0307 	and.w	r3, r3, #7
 8009cc2:	2b05      	cmp	r3, #5
 8009cc4:	d826      	bhi.n	8009d14 <UART_SetConfig+0x1f4>
 8009cc6:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <UART_SetConfig+0x1ac>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009ce5 	.word	0x08009ce5
 8009cd0:	08009ced 	.word	0x08009ced
 8009cd4:	08009cf5 	.word	0x08009cf5
 8009cd8:	08009cfd 	.word	0x08009cfd
 8009cdc:	08009d05 	.word	0x08009d05
 8009ce0:	08009d0d 	.word	0x08009d0d
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e1ec      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009cec:	2304      	movs	r3, #4
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e1e8      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009cf4:	2308      	movs	r3, #8
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfa:	e1e4      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009cfc:	2310      	movs	r3, #16
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d02:	e1e0      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d04:	2320      	movs	r3, #32
 8009d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0a:	e1dc      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d0c:	2340      	movs	r3, #64	; 0x40
 8009d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d12:	e1d8      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d14:	2380      	movs	r3, #128	; 0x80
 8009d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1a:	e1d4      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a4f      	ldr	r2, [pc, #316]	; (8009e60 <UART_SetConfig+0x340>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d130      	bne.n	8009d88 <UART_SetConfig+0x268>
 8009d26:	4b4c      	ldr	r3, [pc, #304]	; (8009e58 <UART_SetConfig+0x338>)
 8009d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2a:	f003 0307 	and.w	r3, r3, #7
 8009d2e:	2b05      	cmp	r3, #5
 8009d30:	d826      	bhi.n	8009d80 <UART_SetConfig+0x260>
 8009d32:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <UART_SetConfig+0x218>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d51 	.word	0x08009d51
 8009d3c:	08009d59 	.word	0x08009d59
 8009d40:	08009d61 	.word	0x08009d61
 8009d44:	08009d69 	.word	0x08009d69
 8009d48:	08009d71 	.word	0x08009d71
 8009d4c:	08009d79 	.word	0x08009d79
 8009d50:	2300      	movs	r3, #0
 8009d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d56:	e1b6      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d58:	2304      	movs	r3, #4
 8009d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5e:	e1b2      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d60:	2308      	movs	r3, #8
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d66:	e1ae      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d68:	2310      	movs	r3, #16
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6e:	e1aa      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d70:	2320      	movs	r3, #32
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d76:	e1a6      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7e:	e1a2      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d86:	e19e      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a35      	ldr	r2, [pc, #212]	; (8009e64 <UART_SetConfig+0x344>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d130      	bne.n	8009df4 <UART_SetConfig+0x2d4>
 8009d92:	4b31      	ldr	r3, [pc, #196]	; (8009e58 <UART_SetConfig+0x338>)
 8009d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d96:	f003 0307 	and.w	r3, r3, #7
 8009d9a:	2b05      	cmp	r3, #5
 8009d9c:	d826      	bhi.n	8009dec <UART_SetConfig+0x2cc>
 8009d9e:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <UART_SetConfig+0x284>)
 8009da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da4:	08009dbd 	.word	0x08009dbd
 8009da8:	08009dc5 	.word	0x08009dc5
 8009dac:	08009dcd 	.word	0x08009dcd
 8009db0:	08009dd5 	.word	0x08009dd5
 8009db4:	08009ddd 	.word	0x08009ddd
 8009db8:	08009de5 	.word	0x08009de5
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc2:	e180      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dca:	e17c      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009dcc:	2308      	movs	r3, #8
 8009dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd2:	e178      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009dd4:	2310      	movs	r3, #16
 8009dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dda:	e174      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009ddc:	2320      	movs	r3, #32
 8009dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de2:	e170      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009de4:	2340      	movs	r3, #64	; 0x40
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e16c      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009dec:	2380      	movs	r3, #128	; 0x80
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df2:	e168      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a1b      	ldr	r2, [pc, #108]	; (8009e68 <UART_SetConfig+0x348>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d142      	bne.n	8009e84 <UART_SetConfig+0x364>
 8009dfe:	4b16      	ldr	r3, [pc, #88]	; (8009e58 <UART_SetConfig+0x338>)
 8009e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e02:	f003 0307 	and.w	r3, r3, #7
 8009e06:	2b05      	cmp	r3, #5
 8009e08:	d838      	bhi.n	8009e7c <UART_SetConfig+0x35c>
 8009e0a:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <UART_SetConfig+0x2f0>)
 8009e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e10:	08009e29 	.word	0x08009e29
 8009e14:	08009e31 	.word	0x08009e31
 8009e18:	08009e39 	.word	0x08009e39
 8009e1c:	08009e41 	.word	0x08009e41
 8009e20:	08009e6d 	.word	0x08009e6d
 8009e24:	08009e75 	.word	0x08009e75
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e14a      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009e30:	2304      	movs	r3, #4
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e146      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009e38:	2308      	movs	r3, #8
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3e:	e142      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009e40:	2310      	movs	r3, #16
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e46:	e13e      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009e48:	cfff69f3 	.word	0xcfff69f3
 8009e4c:	58000c00 	.word	0x58000c00
 8009e50:	11fff4ff 	.word	0x11fff4ff
 8009e54:	40011000 	.word	0x40011000
 8009e58:	58024400 	.word	0x58024400
 8009e5c:	40004400 	.word	0x40004400
 8009e60:	40004800 	.word	0x40004800
 8009e64:	40004c00 	.word	0x40004c00
 8009e68:	40005000 	.word	0x40005000
 8009e6c:	2320      	movs	r3, #32
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e72:	e128      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009e74:	2340      	movs	r3, #64	; 0x40
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7a:	e124      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009e7c:	2380      	movs	r3, #128	; 0x80
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e82:	e120      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4acb      	ldr	r2, [pc, #812]	; (800a1b8 <UART_SetConfig+0x698>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d176      	bne.n	8009f7c <UART_SetConfig+0x45c>
 8009e8e:	4bcb      	ldr	r3, [pc, #812]	; (800a1bc <UART_SetConfig+0x69c>)
 8009e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e96:	2b28      	cmp	r3, #40	; 0x28
 8009e98:	d86c      	bhi.n	8009f74 <UART_SetConfig+0x454>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <UART_SetConfig+0x380>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009f45 	.word	0x08009f45
 8009ea4:	08009f75 	.word	0x08009f75
 8009ea8:	08009f75 	.word	0x08009f75
 8009eac:	08009f75 	.word	0x08009f75
 8009eb0:	08009f75 	.word	0x08009f75
 8009eb4:	08009f75 	.word	0x08009f75
 8009eb8:	08009f75 	.word	0x08009f75
 8009ebc:	08009f75 	.word	0x08009f75
 8009ec0:	08009f4d 	.word	0x08009f4d
 8009ec4:	08009f75 	.word	0x08009f75
 8009ec8:	08009f75 	.word	0x08009f75
 8009ecc:	08009f75 	.word	0x08009f75
 8009ed0:	08009f75 	.word	0x08009f75
 8009ed4:	08009f75 	.word	0x08009f75
 8009ed8:	08009f75 	.word	0x08009f75
 8009edc:	08009f75 	.word	0x08009f75
 8009ee0:	08009f55 	.word	0x08009f55
 8009ee4:	08009f75 	.word	0x08009f75
 8009ee8:	08009f75 	.word	0x08009f75
 8009eec:	08009f75 	.word	0x08009f75
 8009ef0:	08009f75 	.word	0x08009f75
 8009ef4:	08009f75 	.word	0x08009f75
 8009ef8:	08009f75 	.word	0x08009f75
 8009efc:	08009f75 	.word	0x08009f75
 8009f00:	08009f5d 	.word	0x08009f5d
 8009f04:	08009f75 	.word	0x08009f75
 8009f08:	08009f75 	.word	0x08009f75
 8009f0c:	08009f75 	.word	0x08009f75
 8009f10:	08009f75 	.word	0x08009f75
 8009f14:	08009f75 	.word	0x08009f75
 8009f18:	08009f75 	.word	0x08009f75
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f65 	.word	0x08009f65
 8009f24:	08009f75 	.word	0x08009f75
 8009f28:	08009f75 	.word	0x08009f75
 8009f2c:	08009f75 	.word	0x08009f75
 8009f30:	08009f75 	.word	0x08009f75
 8009f34:	08009f75 	.word	0x08009f75
 8009f38:	08009f75 	.word	0x08009f75
 8009f3c:	08009f75 	.word	0x08009f75
 8009f40:	08009f6d 	.word	0x08009f6d
 8009f44:	2301      	movs	r3, #1
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4a:	e0bc      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009f4c:	2304      	movs	r3, #4
 8009f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f52:	e0b8      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009f54:	2308      	movs	r3, #8
 8009f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5a:	e0b4      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f62:	e0b0      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009f64:	2320      	movs	r3, #32
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6a:	e0ac      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009f6c:	2340      	movs	r3, #64	; 0x40
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f72:	e0a8      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009f74:	2380      	movs	r3, #128	; 0x80
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7a:	e0a4      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a8f      	ldr	r2, [pc, #572]	; (800a1c0 <UART_SetConfig+0x6a0>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d130      	bne.n	8009fe8 <UART_SetConfig+0x4c8>
 8009f86:	4b8d      	ldr	r3, [pc, #564]	; (800a1bc <UART_SetConfig+0x69c>)
 8009f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8a:	f003 0307 	and.w	r3, r3, #7
 8009f8e:	2b05      	cmp	r3, #5
 8009f90:	d826      	bhi.n	8009fe0 <UART_SetConfig+0x4c0>
 8009f92:	a201      	add	r2, pc, #4	; (adr r2, 8009f98 <UART_SetConfig+0x478>)
 8009f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f98:	08009fb1 	.word	0x08009fb1
 8009f9c:	08009fb9 	.word	0x08009fb9
 8009fa0:	08009fc1 	.word	0x08009fc1
 8009fa4:	08009fc9 	.word	0x08009fc9
 8009fa8:	08009fd1 	.word	0x08009fd1
 8009fac:	08009fd9 	.word	0x08009fd9
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e086      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009fb8:	2304      	movs	r3, #4
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e082      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009fc0:	2308      	movs	r3, #8
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e07e      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009fc8:	2310      	movs	r3, #16
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fce:	e07a      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009fd0:	2320      	movs	r3, #32
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e076      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009fd8:	2340      	movs	r3, #64	; 0x40
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e072      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009fe0:	2380      	movs	r3, #128	; 0x80
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e06e      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a75      	ldr	r2, [pc, #468]	; (800a1c4 <UART_SetConfig+0x6a4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d130      	bne.n	800a054 <UART_SetConfig+0x534>
 8009ff2:	4b72      	ldr	r3, [pc, #456]	; (800a1bc <UART_SetConfig+0x69c>)
 8009ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	2b05      	cmp	r3, #5
 8009ffc:	d826      	bhi.n	800a04c <UART_SetConfig+0x52c>
 8009ffe:	a201      	add	r2, pc, #4	; (adr r2, 800a004 <UART_SetConfig+0x4e4>)
 800a000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a004:	0800a01d 	.word	0x0800a01d
 800a008:	0800a025 	.word	0x0800a025
 800a00c:	0800a02d 	.word	0x0800a02d
 800a010:	0800a035 	.word	0x0800a035
 800a014:	0800a03d 	.word	0x0800a03d
 800a018:	0800a045 	.word	0x0800a045
 800a01c:	2300      	movs	r3, #0
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a022:	e050      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a024:	2304      	movs	r3, #4
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02a:	e04c      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a02c:	2308      	movs	r3, #8
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a032:	e048      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a034:	2310      	movs	r3, #16
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03a:	e044      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a03c:	2320      	movs	r3, #32
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a042:	e040      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a044:	2340      	movs	r3, #64	; 0x40
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04a:	e03c      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a04c:	2380      	movs	r3, #128	; 0x80
 800a04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a052:	e038      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a5b      	ldr	r2, [pc, #364]	; (800a1c8 <UART_SetConfig+0x6a8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d130      	bne.n	800a0c0 <UART_SetConfig+0x5a0>
 800a05e:	4b57      	ldr	r3, [pc, #348]	; (800a1bc <UART_SetConfig+0x69c>)
 800a060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	2b05      	cmp	r3, #5
 800a068:	d826      	bhi.n	800a0b8 <UART_SetConfig+0x598>
 800a06a:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <UART_SetConfig+0x550>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a089 	.word	0x0800a089
 800a074:	0800a091 	.word	0x0800a091
 800a078:	0800a099 	.word	0x0800a099
 800a07c:	0800a0a1 	.word	0x0800a0a1
 800a080:	0800a0a9 	.word	0x0800a0a9
 800a084:	0800a0b1 	.word	0x0800a0b1
 800a088:	2302      	movs	r3, #2
 800a08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08e:	e01a      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a090:	2304      	movs	r3, #4
 800a092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a096:	e016      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a098:	2308      	movs	r3, #8
 800a09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a09e:	e012      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0a6:	e00e      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a0a8:	2320      	movs	r3, #32
 800a0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ae:	e00a      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a0b0:	2340      	movs	r3, #64	; 0x40
 800a0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b6:	e006      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a0b8:	2380      	movs	r3, #128	; 0x80
 800a0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0be:	e002      	b.n	800a0c6 <UART_SetConfig+0x5a6>
 800a0c0:	2380      	movs	r3, #128	; 0x80
 800a0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a3f      	ldr	r2, [pc, #252]	; (800a1c8 <UART_SetConfig+0x6a8>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	f040 80f8 	bne.w	800a2c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a0d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	dc46      	bgt.n	800a168 <UART_SetConfig+0x648>
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	f2c0 8082 	blt.w	800a1e4 <UART_SetConfig+0x6c4>
 800a0e0:	3b02      	subs	r3, #2
 800a0e2:	2b1e      	cmp	r3, #30
 800a0e4:	d87e      	bhi.n	800a1e4 <UART_SetConfig+0x6c4>
 800a0e6:	a201      	add	r2, pc, #4	; (adr r2, 800a0ec <UART_SetConfig+0x5cc>)
 800a0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ec:	0800a16f 	.word	0x0800a16f
 800a0f0:	0800a1e5 	.word	0x0800a1e5
 800a0f4:	0800a177 	.word	0x0800a177
 800a0f8:	0800a1e5 	.word	0x0800a1e5
 800a0fc:	0800a1e5 	.word	0x0800a1e5
 800a100:	0800a1e5 	.word	0x0800a1e5
 800a104:	0800a187 	.word	0x0800a187
 800a108:	0800a1e5 	.word	0x0800a1e5
 800a10c:	0800a1e5 	.word	0x0800a1e5
 800a110:	0800a1e5 	.word	0x0800a1e5
 800a114:	0800a1e5 	.word	0x0800a1e5
 800a118:	0800a1e5 	.word	0x0800a1e5
 800a11c:	0800a1e5 	.word	0x0800a1e5
 800a120:	0800a1e5 	.word	0x0800a1e5
 800a124:	0800a197 	.word	0x0800a197
 800a128:	0800a1e5 	.word	0x0800a1e5
 800a12c:	0800a1e5 	.word	0x0800a1e5
 800a130:	0800a1e5 	.word	0x0800a1e5
 800a134:	0800a1e5 	.word	0x0800a1e5
 800a138:	0800a1e5 	.word	0x0800a1e5
 800a13c:	0800a1e5 	.word	0x0800a1e5
 800a140:	0800a1e5 	.word	0x0800a1e5
 800a144:	0800a1e5 	.word	0x0800a1e5
 800a148:	0800a1e5 	.word	0x0800a1e5
 800a14c:	0800a1e5 	.word	0x0800a1e5
 800a150:	0800a1e5 	.word	0x0800a1e5
 800a154:	0800a1e5 	.word	0x0800a1e5
 800a158:	0800a1e5 	.word	0x0800a1e5
 800a15c:	0800a1e5 	.word	0x0800a1e5
 800a160:	0800a1e5 	.word	0x0800a1e5
 800a164:	0800a1d7 	.word	0x0800a1d7
 800a168:	2b40      	cmp	r3, #64	; 0x40
 800a16a:	d037      	beq.n	800a1dc <UART_SetConfig+0x6bc>
 800a16c:	e03a      	b.n	800a1e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a16e:	f7fe fb1b 	bl	80087a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a174:	e03c      	b.n	800a1f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fb2a 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a184:	e034      	b.n	800a1f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a186:	f107 0318 	add.w	r3, r7, #24
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe fc76 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a194:	e02c      	b.n	800a1f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <UART_SetConfig+0x69c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d016      	beq.n	800a1d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1a2:	4b06      	ldr	r3, [pc, #24]	; (800a1bc <UART_SetConfig+0x69c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	08db      	lsrs	r3, r3, #3
 800a1a8:	f003 0303 	and.w	r3, r3, #3
 800a1ac:	4a07      	ldr	r2, [pc, #28]	; (800a1cc <UART_SetConfig+0x6ac>)
 800a1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a1b4:	e01c      	b.n	800a1f0 <UART_SetConfig+0x6d0>
 800a1b6:	bf00      	nop
 800a1b8:	40011400 	.word	0x40011400
 800a1bc:	58024400 	.word	0x58024400
 800a1c0:	40007800 	.word	0x40007800
 800a1c4:	40007c00 	.word	0x40007c00
 800a1c8:	58000c00 	.word	0x58000c00
 800a1cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a1d0:	4b9d      	ldr	r3, [pc, #628]	; (800a448 <UART_SetConfig+0x928>)
 800a1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1d4:	e00c      	b.n	800a1f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a1d6:	4b9d      	ldr	r3, [pc, #628]	; (800a44c <UART_SetConfig+0x92c>)
 800a1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1da:	e009      	b.n	800a1f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1e2:	e005      	b.n	800a1f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a1ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 81de 	beq.w	800a5b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fc:	4a94      	ldr	r2, [pc, #592]	; (800a450 <UART_SetConfig+0x930>)
 800a1fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a202:	461a      	mov	r2, r3
 800a204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a206:	fbb3 f3f2 	udiv	r3, r3, r2
 800a20a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	4613      	mov	r3, r2
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	4413      	add	r3, r2
 800a216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a218:	429a      	cmp	r2, r3
 800a21a:	d305      	bcc.n	800a228 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a224:	429a      	cmp	r2, r3
 800a226:	d903      	bls.n	800a230 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a22e:	e1c1      	b.n	800a5b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a232:	2200      	movs	r2, #0
 800a234:	60bb      	str	r3, [r7, #8]
 800a236:	60fa      	str	r2, [r7, #12]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23c:	4a84      	ldr	r2, [pc, #528]	; (800a450 <UART_SetConfig+0x930>)
 800a23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a242:	b29b      	uxth	r3, r3
 800a244:	2200      	movs	r2, #0
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	607a      	str	r2, [r7, #4]
 800a24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a24e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a252:	f7f6 f89d 	bl	8000390 <__aeabi_uldivmod>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4610      	mov	r0, r2
 800a25c:	4619      	mov	r1, r3
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	020b      	lsls	r3, r1, #8
 800a268:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a26c:	0202      	lsls	r2, r0, #8
 800a26e:	6979      	ldr	r1, [r7, #20]
 800a270:	6849      	ldr	r1, [r1, #4]
 800a272:	0849      	lsrs	r1, r1, #1
 800a274:	2000      	movs	r0, #0
 800a276:	460c      	mov	r4, r1
 800a278:	4605      	mov	r5, r0
 800a27a:	eb12 0804 	adds.w	r8, r2, r4
 800a27e:	eb43 0905 	adc.w	r9, r3, r5
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	469a      	mov	sl, r3
 800a28a:	4693      	mov	fp, r2
 800a28c:	4652      	mov	r2, sl
 800a28e:	465b      	mov	r3, fp
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f6 f87c 	bl	8000390 <__aeabi_uldivmod>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4613      	mov	r3, r2
 800a29e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2a6:	d308      	bcc.n	800a2ba <UART_SetConfig+0x79a>
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2ae:	d204      	bcs.n	800a2ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2b6:	60da      	str	r2, [r3, #12]
 800a2b8:	e17c      	b.n	800a5b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2c0:	e178      	b.n	800a5b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ca:	f040 80c5 	bne.w	800a458 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a2ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	dc48      	bgt.n	800a368 <UART_SetConfig+0x848>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	db7b      	blt.n	800a3d2 <UART_SetConfig+0x8b2>
 800a2da:	2b20      	cmp	r3, #32
 800a2dc:	d879      	bhi.n	800a3d2 <UART_SetConfig+0x8b2>
 800a2de:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <UART_SetConfig+0x7c4>)
 800a2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e4:	0800a36f 	.word	0x0800a36f
 800a2e8:	0800a377 	.word	0x0800a377
 800a2ec:	0800a3d3 	.word	0x0800a3d3
 800a2f0:	0800a3d3 	.word	0x0800a3d3
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a3d3 	.word	0x0800a3d3
 800a2fc:	0800a3d3 	.word	0x0800a3d3
 800a300:	0800a3d3 	.word	0x0800a3d3
 800a304:	0800a38f 	.word	0x0800a38f
 800a308:	0800a3d3 	.word	0x0800a3d3
 800a30c:	0800a3d3 	.word	0x0800a3d3
 800a310:	0800a3d3 	.word	0x0800a3d3
 800a314:	0800a3d3 	.word	0x0800a3d3
 800a318:	0800a3d3 	.word	0x0800a3d3
 800a31c:	0800a3d3 	.word	0x0800a3d3
 800a320:	0800a3d3 	.word	0x0800a3d3
 800a324:	0800a39f 	.word	0x0800a39f
 800a328:	0800a3d3 	.word	0x0800a3d3
 800a32c:	0800a3d3 	.word	0x0800a3d3
 800a330:	0800a3d3 	.word	0x0800a3d3
 800a334:	0800a3d3 	.word	0x0800a3d3
 800a338:	0800a3d3 	.word	0x0800a3d3
 800a33c:	0800a3d3 	.word	0x0800a3d3
 800a340:	0800a3d3 	.word	0x0800a3d3
 800a344:	0800a3d3 	.word	0x0800a3d3
 800a348:	0800a3d3 	.word	0x0800a3d3
 800a34c:	0800a3d3 	.word	0x0800a3d3
 800a350:	0800a3d3 	.word	0x0800a3d3
 800a354:	0800a3d3 	.word	0x0800a3d3
 800a358:	0800a3d3 	.word	0x0800a3d3
 800a35c:	0800a3d3 	.word	0x0800a3d3
 800a360:	0800a3d3 	.word	0x0800a3d3
 800a364:	0800a3c5 	.word	0x0800a3c5
 800a368:	2b40      	cmp	r3, #64	; 0x40
 800a36a:	d02e      	beq.n	800a3ca <UART_SetConfig+0x8aa>
 800a36c:	e031      	b.n	800a3d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a36e:	f7fc fa65 	bl	800683c <HAL_RCC_GetPCLK1Freq>
 800a372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a374:	e033      	b.n	800a3de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a376:	f7fc fa77 	bl	8006868 <HAL_RCC_GetPCLK2Freq>
 800a37a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a37c:	e02f      	b.n	800a3de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a37e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe fa26 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38c:	e027      	b.n	800a3de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a38e:	f107 0318 	add.w	r3, r7, #24
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe fb72 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a39c:	e01f      	b.n	800a3de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a39e:	4b2d      	ldr	r3, [pc, #180]	; (800a454 <UART_SetConfig+0x934>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d009      	beq.n	800a3be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3aa:	4b2a      	ldr	r3, [pc, #168]	; (800a454 <UART_SetConfig+0x934>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	08db      	lsrs	r3, r3, #3
 800a3b0:	f003 0303 	and.w	r3, r3, #3
 800a3b4:	4a24      	ldr	r2, [pc, #144]	; (800a448 <UART_SetConfig+0x928>)
 800a3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3bc:	e00f      	b.n	800a3de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a3be:	4b22      	ldr	r3, [pc, #136]	; (800a448 <UART_SetConfig+0x928>)
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c2:	e00c      	b.n	800a3de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3c4:	4b21      	ldr	r3, [pc, #132]	; (800a44c <UART_SetConfig+0x92c>)
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c8:	e009      	b.n	800a3de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d0:	e005      	b.n	800a3de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 80e7 	beq.w	800a5b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	4a19      	ldr	r2, [pc, #100]	; (800a450 <UART_SetConfig+0x930>)
 800a3ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3f8:	005a      	lsls	r2, r3, #1
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	085b      	lsrs	r3, r3, #1
 800a400:	441a      	add	r2, r3
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	fbb2 f3f3 	udiv	r3, r2, r3
 800a40a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	2b0f      	cmp	r3, #15
 800a410:	d916      	bls.n	800a440 <UART_SetConfig+0x920>
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a418:	d212      	bcs.n	800a440 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f023 030f 	bic.w	r3, r3, #15
 800a422:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	b29b      	uxth	r3, r3
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	b29a      	uxth	r2, r3
 800a430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a432:	4313      	orrs	r3, r2
 800a434:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a43c:	60da      	str	r2, [r3, #12]
 800a43e:	e0b9      	b.n	800a5b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a446:	e0b5      	b.n	800a5b4 <UART_SetConfig+0xa94>
 800a448:	03d09000 	.word	0x03d09000
 800a44c:	003d0900 	.word	0x003d0900
 800a450:	0800b624 	.word	0x0800b624
 800a454:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a458:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	dc49      	bgt.n	800a4f4 <UART_SetConfig+0x9d4>
 800a460:	2b00      	cmp	r3, #0
 800a462:	db7c      	blt.n	800a55e <UART_SetConfig+0xa3e>
 800a464:	2b20      	cmp	r3, #32
 800a466:	d87a      	bhi.n	800a55e <UART_SetConfig+0xa3e>
 800a468:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <UART_SetConfig+0x950>)
 800a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46e:	bf00      	nop
 800a470:	0800a4fb 	.word	0x0800a4fb
 800a474:	0800a503 	.word	0x0800a503
 800a478:	0800a55f 	.word	0x0800a55f
 800a47c:	0800a55f 	.word	0x0800a55f
 800a480:	0800a50b 	.word	0x0800a50b
 800a484:	0800a55f 	.word	0x0800a55f
 800a488:	0800a55f 	.word	0x0800a55f
 800a48c:	0800a55f 	.word	0x0800a55f
 800a490:	0800a51b 	.word	0x0800a51b
 800a494:	0800a55f 	.word	0x0800a55f
 800a498:	0800a55f 	.word	0x0800a55f
 800a49c:	0800a55f 	.word	0x0800a55f
 800a4a0:	0800a55f 	.word	0x0800a55f
 800a4a4:	0800a55f 	.word	0x0800a55f
 800a4a8:	0800a55f 	.word	0x0800a55f
 800a4ac:	0800a55f 	.word	0x0800a55f
 800a4b0:	0800a52b 	.word	0x0800a52b
 800a4b4:	0800a55f 	.word	0x0800a55f
 800a4b8:	0800a55f 	.word	0x0800a55f
 800a4bc:	0800a55f 	.word	0x0800a55f
 800a4c0:	0800a55f 	.word	0x0800a55f
 800a4c4:	0800a55f 	.word	0x0800a55f
 800a4c8:	0800a55f 	.word	0x0800a55f
 800a4cc:	0800a55f 	.word	0x0800a55f
 800a4d0:	0800a55f 	.word	0x0800a55f
 800a4d4:	0800a55f 	.word	0x0800a55f
 800a4d8:	0800a55f 	.word	0x0800a55f
 800a4dc:	0800a55f 	.word	0x0800a55f
 800a4e0:	0800a55f 	.word	0x0800a55f
 800a4e4:	0800a55f 	.word	0x0800a55f
 800a4e8:	0800a55f 	.word	0x0800a55f
 800a4ec:	0800a55f 	.word	0x0800a55f
 800a4f0:	0800a551 	.word	0x0800a551
 800a4f4:	2b40      	cmp	r3, #64	; 0x40
 800a4f6:	d02e      	beq.n	800a556 <UART_SetConfig+0xa36>
 800a4f8:	e031      	b.n	800a55e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4fa:	f7fc f99f 	bl	800683c <HAL_RCC_GetPCLK1Freq>
 800a4fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a500:	e033      	b.n	800a56a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a502:	f7fc f9b1 	bl	8006868 <HAL_RCC_GetPCLK2Freq>
 800a506:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a508:	e02f      	b.n	800a56a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe f960 	bl	80087d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a518:	e027      	b.n	800a56a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a51a:	f107 0318 	add.w	r3, r7, #24
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe faac 	bl	8008a7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a528:	e01f      	b.n	800a56a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a52a:	4b2d      	ldr	r3, [pc, #180]	; (800a5e0 <UART_SetConfig+0xac0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a536:	4b2a      	ldr	r3, [pc, #168]	; (800a5e0 <UART_SetConfig+0xac0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	08db      	lsrs	r3, r3, #3
 800a53c:	f003 0303 	and.w	r3, r3, #3
 800a540:	4a28      	ldr	r2, [pc, #160]	; (800a5e4 <UART_SetConfig+0xac4>)
 800a542:	fa22 f303 	lsr.w	r3, r2, r3
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a548:	e00f      	b.n	800a56a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a54a:	4b26      	ldr	r3, [pc, #152]	; (800a5e4 <UART_SetConfig+0xac4>)
 800a54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a54e:	e00c      	b.n	800a56a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a550:	4b25      	ldr	r3, [pc, #148]	; (800a5e8 <UART_SetConfig+0xac8>)
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a554:	e009      	b.n	800a56a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a55c:	e005      	b.n	800a56a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a568:	bf00      	nop
    }

    if (pclk != 0U)
 800a56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d021      	beq.n	800a5b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	4a1d      	ldr	r2, [pc, #116]	; (800a5ec <UART_SetConfig+0xacc>)
 800a576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a57a:	461a      	mov	r2, r3
 800a57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a57e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	085b      	lsrs	r3, r3, #1
 800a588:	441a      	add	r2, r3
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a592:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	2b0f      	cmp	r3, #15
 800a598:	d909      	bls.n	800a5ae <UART_SetConfig+0xa8e>
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5a0:	d205      	bcs.n	800a5ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	60da      	str	r2, [r3, #12]
 800a5ac:	e002      	b.n	800a5b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a5d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3748      	adds	r7, #72	; 0x48
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5de:	bf00      	nop
 800a5e0:	58024400 	.word	0x58024400
 800a5e4:	03d09000 	.word	0x03d09000
 800a5e8:	003d0900 	.word	0x003d0900
 800a5ec:	0800b624 	.word	0x0800b624

0800a5f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00a      	beq.n	800a65e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	f003 0308 	and.w	r3, r3, #8
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	f003 0310 	and.w	r3, r3, #16
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00a      	beq.n	800a6a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a6:	f003 0320 	and.w	r3, r3, #32
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01a      	beq.n	800a706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ee:	d10a      	bne.n	800a706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00a      	beq.n	800a728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	430a      	orrs	r2, r1
 800a726:	605a      	str	r2, [r3, #4]
  }
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b098      	sub	sp, #96	; 0x60
 800a738:	af02      	add	r7, sp, #8
 800a73a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a744:	f7f7 f842 	bl	80017cc <HAL_GetTick>
 800a748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b08      	cmp	r3, #8
 800a756:	d12f      	bne.n	800a7b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a760:	2200      	movs	r2, #0
 800a762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f88e 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d022      	beq.n	800a7b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77a:	e853 3f00 	ldrex	r3, [r3]
 800a77e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a786:	653b      	str	r3, [r7, #80]	; 0x50
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a790:	647b      	str	r3, [r7, #68]	; 0x44
 800a792:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a798:	e841 2300 	strex	r3, r2, [r1]
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e6      	bne.n	800a772 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2220      	movs	r2, #32
 800a7a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e063      	b.n	800a880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d149      	bne.n	800a85a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 f857 	bl	800a888 <UART_WaitOnFlagUntilTimeout>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d03c      	beq.n	800a85a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7fe:	633b      	str	r3, [r7, #48]	; 0x30
 800a800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e6      	bne.n	800a7e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	3308      	adds	r3, #8
 800a818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	60fb      	str	r3, [r7, #12]
   return(result);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f023 0301 	bic.w	r3, r3, #1
 800a828:	64bb      	str	r3, [r7, #72]	; 0x48
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a832:	61fa      	str	r2, [r7, #28]
 800a834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	69b9      	ldr	r1, [r7, #24]
 800a838:	69fa      	ldr	r2, [r7, #28]
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	617b      	str	r3, [r7, #20]
   return(result);
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e5      	bne.n	800a812 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a856:	2303      	movs	r3, #3
 800a858:	e012      	b.n	800a880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2220      	movs	r2, #32
 800a85e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2220      	movs	r2, #32
 800a866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3758      	adds	r7, #88	; 0x58
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	603b      	str	r3, [r7, #0]
 800a894:	4613      	mov	r3, r2
 800a896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a898:	e049      	b.n	800a92e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a0:	d045      	beq.n	800a92e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8a2:	f7f6 ff93 	bl	80017cc <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d302      	bcc.n	800a8b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e048      	b.n	800a94e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d031      	beq.n	800a92e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	f003 0308 	and.w	r3, r3, #8
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d110      	bne.n	800a8fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2208      	movs	r2, #8
 800a8de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 f839 	bl	800a958 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2208      	movs	r2, #8
 800a8ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e029      	b.n	800a94e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a908:	d111      	bne.n	800a92e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 f81f 	bl	800a958 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	2220      	movs	r2, #32
 800a91e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e00f      	b.n	800a94e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	69da      	ldr	r2, [r3, #28]
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	4013      	ands	r3, r2
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	bf0c      	ite	eq
 800a93e:	2301      	moveq	r3, #1
 800a940:	2300      	movne	r3, #0
 800a942:	b2db      	uxtb	r3, r3
 800a944:	461a      	mov	r2, r3
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d0a6      	beq.n	800a89a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a94c:	2300      	movs	r3, #0
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
	...

0800a958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a958:	b480      	push	{r7}
 800a95a:	b095      	sub	sp, #84	; 0x54
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a968:	e853 3f00 	ldrex	r3, [r3]
 800a96c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a974:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a97e:	643b      	str	r3, [r7, #64]	; 0x40
 800a980:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a982:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a986:	e841 2300 	strex	r3, r2, [r1]
 800a98a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1e6      	bne.n	800a960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3308      	adds	r3, #8
 800a998:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	e853 3f00 	ldrex	r3, [r3]
 800a9a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9a2:	69fa      	ldr	r2, [r7, #28]
 800a9a4:	4b1e      	ldr	r3, [pc, #120]	; (800aa20 <UART_EndRxTransfer+0xc8>)
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e5      	bne.n	800a992 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d118      	bne.n	800aa00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	f023 0310 	bic.w	r3, r3, #16
 800a9e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9ec:	61bb      	str	r3, [r7, #24]
 800a9ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6979      	ldr	r1, [r7, #20]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	613b      	str	r3, [r7, #16]
   return(result);
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e6      	bne.n	800a9ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2220      	movs	r2, #32
 800aa04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aa14:	bf00      	nop
 800aa16:	3754      	adds	r7, #84	; 0x54
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	effffffe 	.word	0xeffffffe

0800aa24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <HAL_UARTEx_DisableFifoMode+0x16>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e027      	b.n	800aa8a <HAL_UARTEx_DisableFifoMode+0x66>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2224      	movs	r2, #36	; 0x24
 800aa46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 0201 	bic.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d101      	bne.n	800aaae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	e02d      	b.n	800ab0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2224      	movs	r2, #36	; 0x24
 800aaba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f022 0201 	bic.w	r2, r2, #1
 800aad4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	430a      	orrs	r2, r1
 800aae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f850 	bl	800ab90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d101      	bne.n	800ab2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab26:	2302      	movs	r3, #2
 800ab28:	e02d      	b.n	800ab86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2224      	movs	r2, #36	; 0x24
 800ab36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0201 	bic.w	r2, r2, #1
 800ab50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	683a      	ldr	r2, [r7, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f812 	bl	800ab90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
	...

0800ab90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d108      	bne.n	800abb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abb0:	e031      	b.n	800ac16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abb2:	2310      	movs	r3, #16
 800abb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abb6:	2310      	movs	r3, #16
 800abb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	0e5b      	lsrs	r3, r3, #25
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f003 0307 	and.w	r3, r3, #7
 800abc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	0f5b      	lsrs	r3, r3, #29
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	7b3a      	ldrb	r2, [r7, #12]
 800abde:	4911      	ldr	r1, [pc, #68]	; (800ac24 <UARTEx_SetNbDataToProcess+0x94>)
 800abe0:	5c8a      	ldrb	r2, [r1, r2]
 800abe2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abe6:	7b3a      	ldrb	r2, [r7, #12]
 800abe8:	490f      	ldr	r1, [pc, #60]	; (800ac28 <UARTEx_SetNbDataToProcess+0x98>)
 800abea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abec:	fb93 f3f2 	sdiv	r3, r3, r2
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	7b7a      	ldrb	r2, [r7, #13]
 800abfc:	4909      	ldr	r1, [pc, #36]	; (800ac24 <UARTEx_SetNbDataToProcess+0x94>)
 800abfe:	5c8a      	ldrb	r2, [r1, r2]
 800ac00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac04:	7b7a      	ldrb	r2, [r7, #13]
 800ac06:	4908      	ldr	r1, [pc, #32]	; (800ac28 <UARTEx_SetNbDataToProcess+0x98>)
 800ac08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	0800b63c 	.word	0x0800b63c
 800ac28:	0800b644 	.word	0x0800b644

0800ac2c <_vsniprintf_r>:
 800ac2c:	b530      	push	{r4, r5, lr}
 800ac2e:	4614      	mov	r4, r2
 800ac30:	2c00      	cmp	r4, #0
 800ac32:	b09b      	sub	sp, #108	; 0x6c
 800ac34:	4605      	mov	r5, r0
 800ac36:	461a      	mov	r2, r3
 800ac38:	da05      	bge.n	800ac46 <_vsniprintf_r+0x1a>
 800ac3a:	238b      	movs	r3, #139	; 0x8b
 800ac3c:	6003      	str	r3, [r0, #0]
 800ac3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac42:	b01b      	add	sp, #108	; 0x6c
 800ac44:	bd30      	pop	{r4, r5, pc}
 800ac46:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac4a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ac4e:	bf14      	ite	ne
 800ac50:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac54:	4623      	moveq	r3, r4
 800ac56:	9302      	str	r3, [sp, #8]
 800ac58:	9305      	str	r3, [sp, #20]
 800ac5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac5e:	9100      	str	r1, [sp, #0]
 800ac60:	9104      	str	r1, [sp, #16]
 800ac62:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ac66:	4669      	mov	r1, sp
 800ac68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ac6a:	f000 f9bb 	bl	800afe4 <_svfiprintf_r>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	bfbc      	itt	lt
 800ac72:	238b      	movlt	r3, #139	; 0x8b
 800ac74:	602b      	strlt	r3, [r5, #0]
 800ac76:	2c00      	cmp	r4, #0
 800ac78:	d0e3      	beq.n	800ac42 <_vsniprintf_r+0x16>
 800ac7a:	9b00      	ldr	r3, [sp, #0]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
 800ac80:	e7df      	b.n	800ac42 <_vsniprintf_r+0x16>
	...

0800ac84 <vsniprintf>:
 800ac84:	b507      	push	{r0, r1, r2, lr}
 800ac86:	9300      	str	r3, [sp, #0]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	460a      	mov	r2, r1
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	4803      	ldr	r0, [pc, #12]	; (800ac9c <vsniprintf+0x18>)
 800ac90:	6800      	ldr	r0, [r0, #0]
 800ac92:	f7ff ffcb 	bl	800ac2c <_vsniprintf_r>
 800ac96:	b003      	add	sp, #12
 800ac98:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac9c:	2400005c 	.word	0x2400005c

0800aca0 <memset>:
 800aca0:	4402      	add	r2, r0
 800aca2:	4603      	mov	r3, r0
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d100      	bne.n	800acaa <memset+0xa>
 800aca8:	4770      	bx	lr
 800acaa:	f803 1b01 	strb.w	r1, [r3], #1
 800acae:	e7f9      	b.n	800aca4 <memset+0x4>

0800acb0 <_write_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d07      	ldr	r5, [pc, #28]	; (800acd0 <_write_r+0x20>)
 800acb4:	4604      	mov	r4, r0
 800acb6:	4608      	mov	r0, r1
 800acb8:	4611      	mov	r1, r2
 800acba:	2200      	movs	r2, #0
 800acbc:	602a      	str	r2, [r5, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	f7f6 fc82 	bl	80015c8 <_write>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_write_r+0x1e>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_write_r+0x1e>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	24018bdc 	.word	0x24018bdc

0800acd4 <__errno>:
 800acd4:	4b01      	ldr	r3, [pc, #4]	; (800acdc <__errno+0x8>)
 800acd6:	6818      	ldr	r0, [r3, #0]
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	2400005c 	.word	0x2400005c

0800ace0 <__libc_init_array>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	4d0d      	ldr	r5, [pc, #52]	; (800ad18 <__libc_init_array+0x38>)
 800ace4:	4c0d      	ldr	r4, [pc, #52]	; (800ad1c <__libc_init_array+0x3c>)
 800ace6:	1b64      	subs	r4, r4, r5
 800ace8:	10a4      	asrs	r4, r4, #2
 800acea:	2600      	movs	r6, #0
 800acec:	42a6      	cmp	r6, r4
 800acee:	d109      	bne.n	800ad04 <__libc_init_array+0x24>
 800acf0:	4d0b      	ldr	r5, [pc, #44]	; (800ad20 <__libc_init_array+0x40>)
 800acf2:	4c0c      	ldr	r4, [pc, #48]	; (800ad24 <__libc_init_array+0x44>)
 800acf4:	f000 fc74 	bl	800b5e0 <_init>
 800acf8:	1b64      	subs	r4, r4, r5
 800acfa:	10a4      	asrs	r4, r4, #2
 800acfc:	2600      	movs	r6, #0
 800acfe:	42a6      	cmp	r6, r4
 800ad00:	d105      	bne.n	800ad0e <__libc_init_array+0x2e>
 800ad02:	bd70      	pop	{r4, r5, r6, pc}
 800ad04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad08:	4798      	blx	r3
 800ad0a:	3601      	adds	r6, #1
 800ad0c:	e7ee      	b.n	800acec <__libc_init_array+0xc>
 800ad0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad12:	4798      	blx	r3
 800ad14:	3601      	adds	r6, #1
 800ad16:	e7f2      	b.n	800acfe <__libc_init_array+0x1e>
 800ad18:	0800b688 	.word	0x0800b688
 800ad1c:	0800b688 	.word	0x0800b688
 800ad20:	0800b688 	.word	0x0800b688
 800ad24:	0800b68c 	.word	0x0800b68c

0800ad28 <__retarget_lock_acquire_recursive>:
 800ad28:	4770      	bx	lr

0800ad2a <__retarget_lock_release_recursive>:
 800ad2a:	4770      	bx	lr

0800ad2c <write>:
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	460a      	mov	r2, r1
 800ad30:	4601      	mov	r1, r0
 800ad32:	4802      	ldr	r0, [pc, #8]	; (800ad3c <write+0x10>)
 800ad34:	6800      	ldr	r0, [r0, #0]
 800ad36:	f7ff bfbb 	b.w	800acb0 <_write_r>
 800ad3a:	bf00      	nop
 800ad3c:	2400005c 	.word	0x2400005c

0800ad40 <_free_r>:
 800ad40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad42:	2900      	cmp	r1, #0
 800ad44:	d044      	beq.n	800add0 <_free_r+0x90>
 800ad46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad4a:	9001      	str	r0, [sp, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f1a1 0404 	sub.w	r4, r1, #4
 800ad52:	bfb8      	it	lt
 800ad54:	18e4      	addlt	r4, r4, r3
 800ad56:	f000 f8df 	bl	800af18 <__malloc_lock>
 800ad5a:	4a1e      	ldr	r2, [pc, #120]	; (800add4 <_free_r+0x94>)
 800ad5c:	9801      	ldr	r0, [sp, #4]
 800ad5e:	6813      	ldr	r3, [r2, #0]
 800ad60:	b933      	cbnz	r3, 800ad70 <_free_r+0x30>
 800ad62:	6063      	str	r3, [r4, #4]
 800ad64:	6014      	str	r4, [r2, #0]
 800ad66:	b003      	add	sp, #12
 800ad68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad6c:	f000 b8da 	b.w	800af24 <__malloc_unlock>
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	d908      	bls.n	800ad86 <_free_r+0x46>
 800ad74:	6825      	ldr	r5, [r4, #0]
 800ad76:	1961      	adds	r1, r4, r5
 800ad78:	428b      	cmp	r3, r1
 800ad7a:	bf01      	itttt	eq
 800ad7c:	6819      	ldreq	r1, [r3, #0]
 800ad7e:	685b      	ldreq	r3, [r3, #4]
 800ad80:	1949      	addeq	r1, r1, r5
 800ad82:	6021      	streq	r1, [r4, #0]
 800ad84:	e7ed      	b.n	800ad62 <_free_r+0x22>
 800ad86:	461a      	mov	r2, r3
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	b10b      	cbz	r3, 800ad90 <_free_r+0x50>
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	d9fa      	bls.n	800ad86 <_free_r+0x46>
 800ad90:	6811      	ldr	r1, [r2, #0]
 800ad92:	1855      	adds	r5, r2, r1
 800ad94:	42a5      	cmp	r5, r4
 800ad96:	d10b      	bne.n	800adb0 <_free_r+0x70>
 800ad98:	6824      	ldr	r4, [r4, #0]
 800ad9a:	4421      	add	r1, r4
 800ad9c:	1854      	adds	r4, r2, r1
 800ad9e:	42a3      	cmp	r3, r4
 800ada0:	6011      	str	r1, [r2, #0]
 800ada2:	d1e0      	bne.n	800ad66 <_free_r+0x26>
 800ada4:	681c      	ldr	r4, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	6053      	str	r3, [r2, #4]
 800adaa:	440c      	add	r4, r1
 800adac:	6014      	str	r4, [r2, #0]
 800adae:	e7da      	b.n	800ad66 <_free_r+0x26>
 800adb0:	d902      	bls.n	800adb8 <_free_r+0x78>
 800adb2:	230c      	movs	r3, #12
 800adb4:	6003      	str	r3, [r0, #0]
 800adb6:	e7d6      	b.n	800ad66 <_free_r+0x26>
 800adb8:	6825      	ldr	r5, [r4, #0]
 800adba:	1961      	adds	r1, r4, r5
 800adbc:	428b      	cmp	r3, r1
 800adbe:	bf04      	itt	eq
 800adc0:	6819      	ldreq	r1, [r3, #0]
 800adc2:	685b      	ldreq	r3, [r3, #4]
 800adc4:	6063      	str	r3, [r4, #4]
 800adc6:	bf04      	itt	eq
 800adc8:	1949      	addeq	r1, r1, r5
 800adca:	6021      	streq	r1, [r4, #0]
 800adcc:	6054      	str	r4, [r2, #4]
 800adce:	e7ca      	b.n	800ad66 <_free_r+0x26>
 800add0:	b003      	add	sp, #12
 800add2:	bd30      	pop	{r4, r5, pc}
 800add4:	24018be4 	.word	0x24018be4

0800add8 <sbrk_aligned>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	4e0e      	ldr	r6, [pc, #56]	; (800ae14 <sbrk_aligned+0x3c>)
 800addc:	460c      	mov	r4, r1
 800adde:	6831      	ldr	r1, [r6, #0]
 800ade0:	4605      	mov	r5, r0
 800ade2:	b911      	cbnz	r1, 800adea <sbrk_aligned+0x12>
 800ade4:	f000 fba6 	bl	800b534 <_sbrk_r>
 800ade8:	6030      	str	r0, [r6, #0]
 800adea:	4621      	mov	r1, r4
 800adec:	4628      	mov	r0, r5
 800adee:	f000 fba1 	bl	800b534 <_sbrk_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	d00a      	beq.n	800ae0c <sbrk_aligned+0x34>
 800adf6:	1cc4      	adds	r4, r0, #3
 800adf8:	f024 0403 	bic.w	r4, r4, #3
 800adfc:	42a0      	cmp	r0, r4
 800adfe:	d007      	beq.n	800ae10 <sbrk_aligned+0x38>
 800ae00:	1a21      	subs	r1, r4, r0
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 fb96 	bl	800b534 <_sbrk_r>
 800ae08:	3001      	adds	r0, #1
 800ae0a:	d101      	bne.n	800ae10 <sbrk_aligned+0x38>
 800ae0c:	f04f 34ff 	mov.w	r4, #4294967295
 800ae10:	4620      	mov	r0, r4
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
 800ae14:	24018be8 	.word	0x24018be8

0800ae18 <_malloc_r>:
 800ae18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae1c:	1ccd      	adds	r5, r1, #3
 800ae1e:	f025 0503 	bic.w	r5, r5, #3
 800ae22:	3508      	adds	r5, #8
 800ae24:	2d0c      	cmp	r5, #12
 800ae26:	bf38      	it	cc
 800ae28:	250c      	movcc	r5, #12
 800ae2a:	2d00      	cmp	r5, #0
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	db01      	blt.n	800ae34 <_malloc_r+0x1c>
 800ae30:	42a9      	cmp	r1, r5
 800ae32:	d905      	bls.n	800ae40 <_malloc_r+0x28>
 800ae34:	230c      	movs	r3, #12
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	2600      	movs	r6, #0
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af14 <_malloc_r+0xfc>
 800ae44:	f000 f868 	bl	800af18 <__malloc_lock>
 800ae48:	f8d8 3000 	ldr.w	r3, [r8]
 800ae4c:	461c      	mov	r4, r3
 800ae4e:	bb5c      	cbnz	r4, 800aea8 <_malloc_r+0x90>
 800ae50:	4629      	mov	r1, r5
 800ae52:	4638      	mov	r0, r7
 800ae54:	f7ff ffc0 	bl	800add8 <sbrk_aligned>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	d155      	bne.n	800af0a <_malloc_r+0xf2>
 800ae5e:	f8d8 4000 	ldr.w	r4, [r8]
 800ae62:	4626      	mov	r6, r4
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	d145      	bne.n	800aef4 <_malloc_r+0xdc>
 800ae68:	2c00      	cmp	r4, #0
 800ae6a:	d048      	beq.n	800aefe <_malloc_r+0xe6>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4638      	mov	r0, r7
 800ae72:	eb04 0903 	add.w	r9, r4, r3
 800ae76:	f000 fb5d 	bl	800b534 <_sbrk_r>
 800ae7a:	4581      	cmp	r9, r0
 800ae7c:	d13f      	bne.n	800aefe <_malloc_r+0xe6>
 800ae7e:	6821      	ldr	r1, [r4, #0]
 800ae80:	1a6d      	subs	r5, r5, r1
 800ae82:	4629      	mov	r1, r5
 800ae84:	4638      	mov	r0, r7
 800ae86:	f7ff ffa7 	bl	800add8 <sbrk_aligned>
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	d037      	beq.n	800aefe <_malloc_r+0xe6>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	442b      	add	r3, r5
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	f8d8 3000 	ldr.w	r3, [r8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d038      	beq.n	800af0e <_malloc_r+0xf6>
 800ae9c:	685a      	ldr	r2, [r3, #4]
 800ae9e:	42a2      	cmp	r2, r4
 800aea0:	d12b      	bne.n	800aefa <_malloc_r+0xe2>
 800aea2:	2200      	movs	r2, #0
 800aea4:	605a      	str	r2, [r3, #4]
 800aea6:	e00f      	b.n	800aec8 <_malloc_r+0xb0>
 800aea8:	6822      	ldr	r2, [r4, #0]
 800aeaa:	1b52      	subs	r2, r2, r5
 800aeac:	d41f      	bmi.n	800aeee <_malloc_r+0xd6>
 800aeae:	2a0b      	cmp	r2, #11
 800aeb0:	d917      	bls.n	800aee2 <_malloc_r+0xca>
 800aeb2:	1961      	adds	r1, r4, r5
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	6025      	str	r5, [r4, #0]
 800aeb8:	bf18      	it	ne
 800aeba:	6059      	strne	r1, [r3, #4]
 800aebc:	6863      	ldr	r3, [r4, #4]
 800aebe:	bf08      	it	eq
 800aec0:	f8c8 1000 	streq.w	r1, [r8]
 800aec4:	5162      	str	r2, [r4, r5]
 800aec6:	604b      	str	r3, [r1, #4]
 800aec8:	4638      	mov	r0, r7
 800aeca:	f104 060b 	add.w	r6, r4, #11
 800aece:	f000 f829 	bl	800af24 <__malloc_unlock>
 800aed2:	f026 0607 	bic.w	r6, r6, #7
 800aed6:	1d23      	adds	r3, r4, #4
 800aed8:	1af2      	subs	r2, r6, r3
 800aeda:	d0ae      	beq.n	800ae3a <_malloc_r+0x22>
 800aedc:	1b9b      	subs	r3, r3, r6
 800aede:	50a3      	str	r3, [r4, r2]
 800aee0:	e7ab      	b.n	800ae3a <_malloc_r+0x22>
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	6862      	ldr	r2, [r4, #4]
 800aee6:	d1dd      	bne.n	800aea4 <_malloc_r+0x8c>
 800aee8:	f8c8 2000 	str.w	r2, [r8]
 800aeec:	e7ec      	b.n	800aec8 <_malloc_r+0xb0>
 800aeee:	4623      	mov	r3, r4
 800aef0:	6864      	ldr	r4, [r4, #4]
 800aef2:	e7ac      	b.n	800ae4e <_malloc_r+0x36>
 800aef4:	4634      	mov	r4, r6
 800aef6:	6876      	ldr	r6, [r6, #4]
 800aef8:	e7b4      	b.n	800ae64 <_malloc_r+0x4c>
 800aefa:	4613      	mov	r3, r2
 800aefc:	e7cc      	b.n	800ae98 <_malloc_r+0x80>
 800aefe:	230c      	movs	r3, #12
 800af00:	603b      	str	r3, [r7, #0]
 800af02:	4638      	mov	r0, r7
 800af04:	f000 f80e 	bl	800af24 <__malloc_unlock>
 800af08:	e797      	b.n	800ae3a <_malloc_r+0x22>
 800af0a:	6025      	str	r5, [r4, #0]
 800af0c:	e7dc      	b.n	800aec8 <_malloc_r+0xb0>
 800af0e:	605b      	str	r3, [r3, #4]
 800af10:	deff      	udf	#255	; 0xff
 800af12:	bf00      	nop
 800af14:	24018be4 	.word	0x24018be4

0800af18 <__malloc_lock>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__malloc_lock+0x8>)
 800af1a:	f7ff bf05 	b.w	800ad28 <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	24018be0 	.word	0x24018be0

0800af24 <__malloc_unlock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_unlock+0x8>)
 800af26:	f7ff bf00 	b.w	800ad2a <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	24018be0 	.word	0x24018be0

0800af30 <__ssputs_r>:
 800af30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	688e      	ldr	r6, [r1, #8]
 800af36:	461f      	mov	r7, r3
 800af38:	42be      	cmp	r6, r7
 800af3a:	680b      	ldr	r3, [r1, #0]
 800af3c:	4682      	mov	sl, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	4690      	mov	r8, r2
 800af42:	d82c      	bhi.n	800af9e <__ssputs_r+0x6e>
 800af44:	898a      	ldrh	r2, [r1, #12]
 800af46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af4a:	d026      	beq.n	800af9a <__ssputs_r+0x6a>
 800af4c:	6965      	ldr	r5, [r4, #20]
 800af4e:	6909      	ldr	r1, [r1, #16]
 800af50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af54:	eba3 0901 	sub.w	r9, r3, r1
 800af58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af5c:	1c7b      	adds	r3, r7, #1
 800af5e:	444b      	add	r3, r9
 800af60:	106d      	asrs	r5, r5, #1
 800af62:	429d      	cmp	r5, r3
 800af64:	bf38      	it	cc
 800af66:	461d      	movcc	r5, r3
 800af68:	0553      	lsls	r3, r2, #21
 800af6a:	d527      	bpl.n	800afbc <__ssputs_r+0x8c>
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7ff ff53 	bl	800ae18 <_malloc_r>
 800af72:	4606      	mov	r6, r0
 800af74:	b360      	cbz	r0, 800afd0 <__ssputs_r+0xa0>
 800af76:	6921      	ldr	r1, [r4, #16]
 800af78:	464a      	mov	r2, r9
 800af7a:	f000 faeb 	bl	800b554 <memcpy>
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	6126      	str	r6, [r4, #16]
 800af8c:	6165      	str	r5, [r4, #20]
 800af8e:	444e      	add	r6, r9
 800af90:	eba5 0509 	sub.w	r5, r5, r9
 800af94:	6026      	str	r6, [r4, #0]
 800af96:	60a5      	str	r5, [r4, #8]
 800af98:	463e      	mov	r6, r7
 800af9a:	42be      	cmp	r6, r7
 800af9c:	d900      	bls.n	800afa0 <__ssputs_r+0x70>
 800af9e:	463e      	mov	r6, r7
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	4632      	mov	r2, r6
 800afa4:	4641      	mov	r1, r8
 800afa6:	f000 faab 	bl	800b500 <memmove>
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	1b9b      	subs	r3, r3, r6
 800afae:	60a3      	str	r3, [r4, #8]
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	4433      	add	r3, r6
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	2000      	movs	r0, #0
 800afb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afbc:	462a      	mov	r2, r5
 800afbe:	f000 fad7 	bl	800b570 <_realloc_r>
 800afc2:	4606      	mov	r6, r0
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d1e0      	bne.n	800af8a <__ssputs_r+0x5a>
 800afc8:	6921      	ldr	r1, [r4, #16]
 800afca:	4650      	mov	r0, sl
 800afcc:	f7ff feb8 	bl	800ad40 <_free_r>
 800afd0:	230c      	movs	r3, #12
 800afd2:	f8ca 3000 	str.w	r3, [sl]
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afdc:	81a3      	strh	r3, [r4, #12]
 800afde:	f04f 30ff 	mov.w	r0, #4294967295
 800afe2:	e7e9      	b.n	800afb8 <__ssputs_r+0x88>

0800afe4 <_svfiprintf_r>:
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	4698      	mov	r8, r3
 800afea:	898b      	ldrh	r3, [r1, #12]
 800afec:	061b      	lsls	r3, r3, #24
 800afee:	b09d      	sub	sp, #116	; 0x74
 800aff0:	4607      	mov	r7, r0
 800aff2:	460d      	mov	r5, r1
 800aff4:	4614      	mov	r4, r2
 800aff6:	d50e      	bpl.n	800b016 <_svfiprintf_r+0x32>
 800aff8:	690b      	ldr	r3, [r1, #16]
 800affa:	b963      	cbnz	r3, 800b016 <_svfiprintf_r+0x32>
 800affc:	2140      	movs	r1, #64	; 0x40
 800affe:	f7ff ff0b 	bl	800ae18 <_malloc_r>
 800b002:	6028      	str	r0, [r5, #0]
 800b004:	6128      	str	r0, [r5, #16]
 800b006:	b920      	cbnz	r0, 800b012 <_svfiprintf_r+0x2e>
 800b008:	230c      	movs	r3, #12
 800b00a:	603b      	str	r3, [r7, #0]
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	e0d0      	b.n	800b1b4 <_svfiprintf_r+0x1d0>
 800b012:	2340      	movs	r3, #64	; 0x40
 800b014:	616b      	str	r3, [r5, #20]
 800b016:	2300      	movs	r3, #0
 800b018:	9309      	str	r3, [sp, #36]	; 0x24
 800b01a:	2320      	movs	r3, #32
 800b01c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b020:	f8cd 800c 	str.w	r8, [sp, #12]
 800b024:	2330      	movs	r3, #48	; 0x30
 800b026:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b1cc <_svfiprintf_r+0x1e8>
 800b02a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b02e:	f04f 0901 	mov.w	r9, #1
 800b032:	4623      	mov	r3, r4
 800b034:	469a      	mov	sl, r3
 800b036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b03a:	b10a      	cbz	r2, 800b040 <_svfiprintf_r+0x5c>
 800b03c:	2a25      	cmp	r2, #37	; 0x25
 800b03e:	d1f9      	bne.n	800b034 <_svfiprintf_r+0x50>
 800b040:	ebba 0b04 	subs.w	fp, sl, r4
 800b044:	d00b      	beq.n	800b05e <_svfiprintf_r+0x7a>
 800b046:	465b      	mov	r3, fp
 800b048:	4622      	mov	r2, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	4638      	mov	r0, r7
 800b04e:	f7ff ff6f 	bl	800af30 <__ssputs_r>
 800b052:	3001      	adds	r0, #1
 800b054:	f000 80a9 	beq.w	800b1aa <_svfiprintf_r+0x1c6>
 800b058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b05a:	445a      	add	r2, fp
 800b05c:	9209      	str	r2, [sp, #36]	; 0x24
 800b05e:	f89a 3000 	ldrb.w	r3, [sl]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 80a1 	beq.w	800b1aa <_svfiprintf_r+0x1c6>
 800b068:	2300      	movs	r3, #0
 800b06a:	f04f 32ff 	mov.w	r2, #4294967295
 800b06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b072:	f10a 0a01 	add.w	sl, sl, #1
 800b076:	9304      	str	r3, [sp, #16]
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b07e:	931a      	str	r3, [sp, #104]	; 0x68
 800b080:	4654      	mov	r4, sl
 800b082:	2205      	movs	r2, #5
 800b084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b088:	4850      	ldr	r0, [pc, #320]	; (800b1cc <_svfiprintf_r+0x1e8>)
 800b08a:	f7f5 f931 	bl	80002f0 <memchr>
 800b08e:	9a04      	ldr	r2, [sp, #16]
 800b090:	b9d8      	cbnz	r0, 800b0ca <_svfiprintf_r+0xe6>
 800b092:	06d0      	lsls	r0, r2, #27
 800b094:	bf44      	itt	mi
 800b096:	2320      	movmi	r3, #32
 800b098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09c:	0711      	lsls	r1, r2, #28
 800b09e:	bf44      	itt	mi
 800b0a0:	232b      	movmi	r3, #43	; 0x2b
 800b0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ac:	d015      	beq.n	800b0da <_svfiprintf_r+0xf6>
 800b0ae:	9a07      	ldr	r2, [sp, #28]
 800b0b0:	4654      	mov	r4, sl
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	f04f 0c0a 	mov.w	ip, #10
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0be:	3b30      	subs	r3, #48	; 0x30
 800b0c0:	2b09      	cmp	r3, #9
 800b0c2:	d94d      	bls.n	800b160 <_svfiprintf_r+0x17c>
 800b0c4:	b1b0      	cbz	r0, 800b0f4 <_svfiprintf_r+0x110>
 800b0c6:	9207      	str	r2, [sp, #28]
 800b0c8:	e014      	b.n	800b0f4 <_svfiprintf_r+0x110>
 800b0ca:	eba0 0308 	sub.w	r3, r0, r8
 800b0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	46a2      	mov	sl, r4
 800b0d8:	e7d2      	b.n	800b080 <_svfiprintf_r+0x9c>
 800b0da:	9b03      	ldr	r3, [sp, #12]
 800b0dc:	1d19      	adds	r1, r3, #4
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	9103      	str	r1, [sp, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bfbb      	ittet	lt
 800b0e6:	425b      	neglt	r3, r3
 800b0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ec:	9307      	strge	r3, [sp, #28]
 800b0ee:	9307      	strlt	r3, [sp, #28]
 800b0f0:	bfb8      	it	lt
 800b0f2:	9204      	strlt	r2, [sp, #16]
 800b0f4:	7823      	ldrb	r3, [r4, #0]
 800b0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0f8:	d10c      	bne.n	800b114 <_svfiprintf_r+0x130>
 800b0fa:	7863      	ldrb	r3, [r4, #1]
 800b0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b0fe:	d134      	bne.n	800b16a <_svfiprintf_r+0x186>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	1d1a      	adds	r2, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	9203      	str	r2, [sp, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bfb8      	it	lt
 800b10c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b110:	3402      	adds	r4, #2
 800b112:	9305      	str	r3, [sp, #20]
 800b114:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b1dc <_svfiprintf_r+0x1f8>
 800b118:	7821      	ldrb	r1, [r4, #0]
 800b11a:	2203      	movs	r2, #3
 800b11c:	4650      	mov	r0, sl
 800b11e:	f7f5 f8e7 	bl	80002f0 <memchr>
 800b122:	b138      	cbz	r0, 800b134 <_svfiprintf_r+0x150>
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	eba0 000a 	sub.w	r0, r0, sl
 800b12a:	2240      	movs	r2, #64	; 0x40
 800b12c:	4082      	lsls	r2, r0
 800b12e:	4313      	orrs	r3, r2
 800b130:	3401      	adds	r4, #1
 800b132:	9304      	str	r3, [sp, #16]
 800b134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b138:	4825      	ldr	r0, [pc, #148]	; (800b1d0 <_svfiprintf_r+0x1ec>)
 800b13a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b13e:	2206      	movs	r2, #6
 800b140:	f7f5 f8d6 	bl	80002f0 <memchr>
 800b144:	2800      	cmp	r0, #0
 800b146:	d038      	beq.n	800b1ba <_svfiprintf_r+0x1d6>
 800b148:	4b22      	ldr	r3, [pc, #136]	; (800b1d4 <_svfiprintf_r+0x1f0>)
 800b14a:	bb1b      	cbnz	r3, 800b194 <_svfiprintf_r+0x1b0>
 800b14c:	9b03      	ldr	r3, [sp, #12]
 800b14e:	3307      	adds	r3, #7
 800b150:	f023 0307 	bic.w	r3, r3, #7
 800b154:	3308      	adds	r3, #8
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15a:	4433      	add	r3, r6
 800b15c:	9309      	str	r3, [sp, #36]	; 0x24
 800b15e:	e768      	b.n	800b032 <_svfiprintf_r+0x4e>
 800b160:	fb0c 3202 	mla	r2, ip, r2, r3
 800b164:	460c      	mov	r4, r1
 800b166:	2001      	movs	r0, #1
 800b168:	e7a6      	b.n	800b0b8 <_svfiprintf_r+0xd4>
 800b16a:	2300      	movs	r3, #0
 800b16c:	3401      	adds	r4, #1
 800b16e:	9305      	str	r3, [sp, #20]
 800b170:	4619      	mov	r1, r3
 800b172:	f04f 0c0a 	mov.w	ip, #10
 800b176:	4620      	mov	r0, r4
 800b178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b17c:	3a30      	subs	r2, #48	; 0x30
 800b17e:	2a09      	cmp	r2, #9
 800b180:	d903      	bls.n	800b18a <_svfiprintf_r+0x1a6>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0c6      	beq.n	800b114 <_svfiprintf_r+0x130>
 800b186:	9105      	str	r1, [sp, #20]
 800b188:	e7c4      	b.n	800b114 <_svfiprintf_r+0x130>
 800b18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b18e:	4604      	mov	r4, r0
 800b190:	2301      	movs	r3, #1
 800b192:	e7f0      	b.n	800b176 <_svfiprintf_r+0x192>
 800b194:	ab03      	add	r3, sp, #12
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	462a      	mov	r2, r5
 800b19a:	4b0f      	ldr	r3, [pc, #60]	; (800b1d8 <_svfiprintf_r+0x1f4>)
 800b19c:	a904      	add	r1, sp, #16
 800b19e:	4638      	mov	r0, r7
 800b1a0:	f3af 8000 	nop.w
 800b1a4:	1c42      	adds	r2, r0, #1
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	d1d6      	bne.n	800b158 <_svfiprintf_r+0x174>
 800b1aa:	89ab      	ldrh	r3, [r5, #12]
 800b1ac:	065b      	lsls	r3, r3, #25
 800b1ae:	f53f af2d 	bmi.w	800b00c <_svfiprintf_r+0x28>
 800b1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b4:	b01d      	add	sp, #116	; 0x74
 800b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ba:	ab03      	add	r3, sp, #12
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	462a      	mov	r2, r5
 800b1c0:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <_svfiprintf_r+0x1f4>)
 800b1c2:	a904      	add	r1, sp, #16
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	f000 f879 	bl	800b2bc <_printf_i>
 800b1ca:	e7eb      	b.n	800b1a4 <_svfiprintf_r+0x1c0>
 800b1cc:	0800b64c 	.word	0x0800b64c
 800b1d0:	0800b656 	.word	0x0800b656
 800b1d4:	00000000 	.word	0x00000000
 800b1d8:	0800af31 	.word	0x0800af31
 800b1dc:	0800b652 	.word	0x0800b652

0800b1e0 <_printf_common>:
 800b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	4699      	mov	r9, r3
 800b1e8:	688a      	ldr	r2, [r1, #8]
 800b1ea:	690b      	ldr	r3, [r1, #16]
 800b1ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	bfb8      	it	lt
 800b1f4:	4613      	movlt	r3, r2
 800b1f6:	6033      	str	r3, [r6, #0]
 800b1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	460c      	mov	r4, r1
 800b200:	b10a      	cbz	r2, 800b206 <_printf_common+0x26>
 800b202:	3301      	adds	r3, #1
 800b204:	6033      	str	r3, [r6, #0]
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	0699      	lsls	r1, r3, #26
 800b20a:	bf42      	ittt	mi
 800b20c:	6833      	ldrmi	r3, [r6, #0]
 800b20e:	3302      	addmi	r3, #2
 800b210:	6033      	strmi	r3, [r6, #0]
 800b212:	6825      	ldr	r5, [r4, #0]
 800b214:	f015 0506 	ands.w	r5, r5, #6
 800b218:	d106      	bne.n	800b228 <_printf_common+0x48>
 800b21a:	f104 0a19 	add.w	sl, r4, #25
 800b21e:	68e3      	ldr	r3, [r4, #12]
 800b220:	6832      	ldr	r2, [r6, #0]
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	42ab      	cmp	r3, r5
 800b226:	dc26      	bgt.n	800b276 <_printf_common+0x96>
 800b228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b22c:	1e13      	subs	r3, r2, #0
 800b22e:	6822      	ldr	r2, [r4, #0]
 800b230:	bf18      	it	ne
 800b232:	2301      	movne	r3, #1
 800b234:	0692      	lsls	r2, r2, #26
 800b236:	d42b      	bmi.n	800b290 <_printf_common+0xb0>
 800b238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b23c:	4649      	mov	r1, r9
 800b23e:	4638      	mov	r0, r7
 800b240:	47c0      	blx	r8
 800b242:	3001      	adds	r0, #1
 800b244:	d01e      	beq.n	800b284 <_printf_common+0xa4>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	6922      	ldr	r2, [r4, #16]
 800b24a:	f003 0306 	and.w	r3, r3, #6
 800b24e:	2b04      	cmp	r3, #4
 800b250:	bf02      	ittt	eq
 800b252:	68e5      	ldreq	r5, [r4, #12]
 800b254:	6833      	ldreq	r3, [r6, #0]
 800b256:	1aed      	subeq	r5, r5, r3
 800b258:	68a3      	ldr	r3, [r4, #8]
 800b25a:	bf0c      	ite	eq
 800b25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b260:	2500      	movne	r5, #0
 800b262:	4293      	cmp	r3, r2
 800b264:	bfc4      	itt	gt
 800b266:	1a9b      	subgt	r3, r3, r2
 800b268:	18ed      	addgt	r5, r5, r3
 800b26a:	2600      	movs	r6, #0
 800b26c:	341a      	adds	r4, #26
 800b26e:	42b5      	cmp	r5, r6
 800b270:	d11a      	bne.n	800b2a8 <_printf_common+0xc8>
 800b272:	2000      	movs	r0, #0
 800b274:	e008      	b.n	800b288 <_printf_common+0xa8>
 800b276:	2301      	movs	r3, #1
 800b278:	4652      	mov	r2, sl
 800b27a:	4649      	mov	r1, r9
 800b27c:	4638      	mov	r0, r7
 800b27e:	47c0      	blx	r8
 800b280:	3001      	adds	r0, #1
 800b282:	d103      	bne.n	800b28c <_printf_common+0xac>
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28c:	3501      	adds	r5, #1
 800b28e:	e7c6      	b.n	800b21e <_printf_common+0x3e>
 800b290:	18e1      	adds	r1, r4, r3
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	2030      	movs	r0, #48	; 0x30
 800b296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b29a:	4422      	add	r2, r4
 800b29c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	e7c7      	b.n	800b238 <_printf_common+0x58>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	4622      	mov	r2, r4
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	47c0      	blx	r8
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	d0e6      	beq.n	800b284 <_printf_common+0xa4>
 800b2b6:	3601      	adds	r6, #1
 800b2b8:	e7d9      	b.n	800b26e <_printf_common+0x8e>
	...

0800b2bc <_printf_i>:
 800b2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	7e0f      	ldrb	r7, [r1, #24]
 800b2c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2c4:	2f78      	cmp	r7, #120	; 0x78
 800b2c6:	4691      	mov	r9, r2
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	469a      	mov	sl, r3
 800b2ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2d2:	d807      	bhi.n	800b2e4 <_printf_i+0x28>
 800b2d4:	2f62      	cmp	r7, #98	; 0x62
 800b2d6:	d80a      	bhi.n	800b2ee <_printf_i+0x32>
 800b2d8:	2f00      	cmp	r7, #0
 800b2da:	f000 80d4 	beq.w	800b486 <_printf_i+0x1ca>
 800b2de:	2f58      	cmp	r7, #88	; 0x58
 800b2e0:	f000 80c0 	beq.w	800b464 <_printf_i+0x1a8>
 800b2e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2ec:	e03a      	b.n	800b364 <_printf_i+0xa8>
 800b2ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2f2:	2b15      	cmp	r3, #21
 800b2f4:	d8f6      	bhi.n	800b2e4 <_printf_i+0x28>
 800b2f6:	a101      	add	r1, pc, #4	; (adr r1, 800b2fc <_printf_i+0x40>)
 800b2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2fc:	0800b355 	.word	0x0800b355
 800b300:	0800b369 	.word	0x0800b369
 800b304:	0800b2e5 	.word	0x0800b2e5
 800b308:	0800b2e5 	.word	0x0800b2e5
 800b30c:	0800b2e5 	.word	0x0800b2e5
 800b310:	0800b2e5 	.word	0x0800b2e5
 800b314:	0800b369 	.word	0x0800b369
 800b318:	0800b2e5 	.word	0x0800b2e5
 800b31c:	0800b2e5 	.word	0x0800b2e5
 800b320:	0800b2e5 	.word	0x0800b2e5
 800b324:	0800b2e5 	.word	0x0800b2e5
 800b328:	0800b46d 	.word	0x0800b46d
 800b32c:	0800b395 	.word	0x0800b395
 800b330:	0800b427 	.word	0x0800b427
 800b334:	0800b2e5 	.word	0x0800b2e5
 800b338:	0800b2e5 	.word	0x0800b2e5
 800b33c:	0800b48f 	.word	0x0800b48f
 800b340:	0800b2e5 	.word	0x0800b2e5
 800b344:	0800b395 	.word	0x0800b395
 800b348:	0800b2e5 	.word	0x0800b2e5
 800b34c:	0800b2e5 	.word	0x0800b2e5
 800b350:	0800b42f 	.word	0x0800b42f
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	1d1a      	adds	r2, r3, #4
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	602a      	str	r2, [r5, #0]
 800b35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b364:	2301      	movs	r3, #1
 800b366:	e09f      	b.n	800b4a8 <_printf_i+0x1ec>
 800b368:	6820      	ldr	r0, [r4, #0]
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	0607      	lsls	r7, r0, #24
 800b36e:	f103 0104 	add.w	r1, r3, #4
 800b372:	6029      	str	r1, [r5, #0]
 800b374:	d501      	bpl.n	800b37a <_printf_i+0xbe>
 800b376:	681e      	ldr	r6, [r3, #0]
 800b378:	e003      	b.n	800b382 <_printf_i+0xc6>
 800b37a:	0646      	lsls	r6, r0, #25
 800b37c:	d5fb      	bpl.n	800b376 <_printf_i+0xba>
 800b37e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b382:	2e00      	cmp	r6, #0
 800b384:	da03      	bge.n	800b38e <_printf_i+0xd2>
 800b386:	232d      	movs	r3, #45	; 0x2d
 800b388:	4276      	negs	r6, r6
 800b38a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b38e:	485a      	ldr	r0, [pc, #360]	; (800b4f8 <_printf_i+0x23c>)
 800b390:	230a      	movs	r3, #10
 800b392:	e012      	b.n	800b3ba <_printf_i+0xfe>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	6820      	ldr	r0, [r4, #0]
 800b398:	1d19      	adds	r1, r3, #4
 800b39a:	6029      	str	r1, [r5, #0]
 800b39c:	0605      	lsls	r5, r0, #24
 800b39e:	d501      	bpl.n	800b3a4 <_printf_i+0xe8>
 800b3a0:	681e      	ldr	r6, [r3, #0]
 800b3a2:	e002      	b.n	800b3aa <_printf_i+0xee>
 800b3a4:	0641      	lsls	r1, r0, #25
 800b3a6:	d5fb      	bpl.n	800b3a0 <_printf_i+0xe4>
 800b3a8:	881e      	ldrh	r6, [r3, #0]
 800b3aa:	4853      	ldr	r0, [pc, #332]	; (800b4f8 <_printf_i+0x23c>)
 800b3ac:	2f6f      	cmp	r7, #111	; 0x6f
 800b3ae:	bf0c      	ite	eq
 800b3b0:	2308      	moveq	r3, #8
 800b3b2:	230a      	movne	r3, #10
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3ba:	6865      	ldr	r5, [r4, #4]
 800b3bc:	60a5      	str	r5, [r4, #8]
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	bfa2      	ittt	ge
 800b3c2:	6821      	ldrge	r1, [r4, #0]
 800b3c4:	f021 0104 	bicge.w	r1, r1, #4
 800b3c8:	6021      	strge	r1, [r4, #0]
 800b3ca:	b90e      	cbnz	r6, 800b3d0 <_printf_i+0x114>
 800b3cc:	2d00      	cmp	r5, #0
 800b3ce:	d04b      	beq.n	800b468 <_printf_i+0x1ac>
 800b3d0:	4615      	mov	r5, r2
 800b3d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3d6:	fb03 6711 	mls	r7, r3, r1, r6
 800b3da:	5dc7      	ldrb	r7, [r0, r7]
 800b3dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3e0:	4637      	mov	r7, r6
 800b3e2:	42bb      	cmp	r3, r7
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	d9f4      	bls.n	800b3d2 <_printf_i+0x116>
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d10b      	bne.n	800b404 <_printf_i+0x148>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	07de      	lsls	r6, r3, #31
 800b3f0:	d508      	bpl.n	800b404 <_printf_i+0x148>
 800b3f2:	6923      	ldr	r3, [r4, #16]
 800b3f4:	6861      	ldr	r1, [r4, #4]
 800b3f6:	4299      	cmp	r1, r3
 800b3f8:	bfde      	ittt	le
 800b3fa:	2330      	movle	r3, #48	; 0x30
 800b3fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b400:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b404:	1b52      	subs	r2, r2, r5
 800b406:	6122      	str	r2, [r4, #16]
 800b408:	f8cd a000 	str.w	sl, [sp]
 800b40c:	464b      	mov	r3, r9
 800b40e:	aa03      	add	r2, sp, #12
 800b410:	4621      	mov	r1, r4
 800b412:	4640      	mov	r0, r8
 800b414:	f7ff fee4 	bl	800b1e0 <_printf_common>
 800b418:	3001      	adds	r0, #1
 800b41a:	d14a      	bne.n	800b4b2 <_printf_i+0x1f6>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	b004      	add	sp, #16
 800b422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	f043 0320 	orr.w	r3, r3, #32
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	4833      	ldr	r0, [pc, #204]	; (800b4fc <_printf_i+0x240>)
 800b430:	2778      	movs	r7, #120	; 0x78
 800b432:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	6829      	ldr	r1, [r5, #0]
 800b43a:	061f      	lsls	r7, r3, #24
 800b43c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b440:	d402      	bmi.n	800b448 <_printf_i+0x18c>
 800b442:	065f      	lsls	r7, r3, #25
 800b444:	bf48      	it	mi
 800b446:	b2b6      	uxthmi	r6, r6
 800b448:	07df      	lsls	r7, r3, #31
 800b44a:	bf48      	it	mi
 800b44c:	f043 0320 	orrmi.w	r3, r3, #32
 800b450:	6029      	str	r1, [r5, #0]
 800b452:	bf48      	it	mi
 800b454:	6023      	strmi	r3, [r4, #0]
 800b456:	b91e      	cbnz	r6, 800b460 <_printf_i+0x1a4>
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	f023 0320 	bic.w	r3, r3, #32
 800b45e:	6023      	str	r3, [r4, #0]
 800b460:	2310      	movs	r3, #16
 800b462:	e7a7      	b.n	800b3b4 <_printf_i+0xf8>
 800b464:	4824      	ldr	r0, [pc, #144]	; (800b4f8 <_printf_i+0x23c>)
 800b466:	e7e4      	b.n	800b432 <_printf_i+0x176>
 800b468:	4615      	mov	r5, r2
 800b46a:	e7bd      	b.n	800b3e8 <_printf_i+0x12c>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	6826      	ldr	r6, [r4, #0]
 800b470:	6961      	ldr	r1, [r4, #20]
 800b472:	1d18      	adds	r0, r3, #4
 800b474:	6028      	str	r0, [r5, #0]
 800b476:	0635      	lsls	r5, r6, #24
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	d501      	bpl.n	800b480 <_printf_i+0x1c4>
 800b47c:	6019      	str	r1, [r3, #0]
 800b47e:	e002      	b.n	800b486 <_printf_i+0x1ca>
 800b480:	0670      	lsls	r0, r6, #25
 800b482:	d5fb      	bpl.n	800b47c <_printf_i+0x1c0>
 800b484:	8019      	strh	r1, [r3, #0]
 800b486:	2300      	movs	r3, #0
 800b488:	6123      	str	r3, [r4, #16]
 800b48a:	4615      	mov	r5, r2
 800b48c:	e7bc      	b.n	800b408 <_printf_i+0x14c>
 800b48e:	682b      	ldr	r3, [r5, #0]
 800b490:	1d1a      	adds	r2, r3, #4
 800b492:	602a      	str	r2, [r5, #0]
 800b494:	681d      	ldr	r5, [r3, #0]
 800b496:	6862      	ldr	r2, [r4, #4]
 800b498:	2100      	movs	r1, #0
 800b49a:	4628      	mov	r0, r5
 800b49c:	f7f4 ff28 	bl	80002f0 <memchr>
 800b4a0:	b108      	cbz	r0, 800b4a6 <_printf_i+0x1ea>
 800b4a2:	1b40      	subs	r0, r0, r5
 800b4a4:	6060      	str	r0, [r4, #4]
 800b4a6:	6863      	ldr	r3, [r4, #4]
 800b4a8:	6123      	str	r3, [r4, #16]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4b0:	e7aa      	b.n	800b408 <_printf_i+0x14c>
 800b4b2:	6923      	ldr	r3, [r4, #16]
 800b4b4:	462a      	mov	r2, r5
 800b4b6:	4649      	mov	r1, r9
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	47d0      	blx	sl
 800b4bc:	3001      	adds	r0, #1
 800b4be:	d0ad      	beq.n	800b41c <_printf_i+0x160>
 800b4c0:	6823      	ldr	r3, [r4, #0]
 800b4c2:	079b      	lsls	r3, r3, #30
 800b4c4:	d413      	bmi.n	800b4ee <_printf_i+0x232>
 800b4c6:	68e0      	ldr	r0, [r4, #12]
 800b4c8:	9b03      	ldr	r3, [sp, #12]
 800b4ca:	4298      	cmp	r0, r3
 800b4cc:	bfb8      	it	lt
 800b4ce:	4618      	movlt	r0, r3
 800b4d0:	e7a6      	b.n	800b420 <_printf_i+0x164>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4640      	mov	r0, r8
 800b4da:	47d0      	blx	sl
 800b4dc:	3001      	adds	r0, #1
 800b4de:	d09d      	beq.n	800b41c <_printf_i+0x160>
 800b4e0:	3501      	adds	r5, #1
 800b4e2:	68e3      	ldr	r3, [r4, #12]
 800b4e4:	9903      	ldr	r1, [sp, #12]
 800b4e6:	1a5b      	subs	r3, r3, r1
 800b4e8:	42ab      	cmp	r3, r5
 800b4ea:	dcf2      	bgt.n	800b4d2 <_printf_i+0x216>
 800b4ec:	e7eb      	b.n	800b4c6 <_printf_i+0x20a>
 800b4ee:	2500      	movs	r5, #0
 800b4f0:	f104 0619 	add.w	r6, r4, #25
 800b4f4:	e7f5      	b.n	800b4e2 <_printf_i+0x226>
 800b4f6:	bf00      	nop
 800b4f8:	0800b65d 	.word	0x0800b65d
 800b4fc:	0800b66e 	.word	0x0800b66e

0800b500 <memmove>:
 800b500:	4288      	cmp	r0, r1
 800b502:	b510      	push	{r4, lr}
 800b504:	eb01 0402 	add.w	r4, r1, r2
 800b508:	d902      	bls.n	800b510 <memmove+0x10>
 800b50a:	4284      	cmp	r4, r0
 800b50c:	4623      	mov	r3, r4
 800b50e:	d807      	bhi.n	800b520 <memmove+0x20>
 800b510:	1e43      	subs	r3, r0, #1
 800b512:	42a1      	cmp	r1, r4
 800b514:	d008      	beq.n	800b528 <memmove+0x28>
 800b516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b51a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b51e:	e7f8      	b.n	800b512 <memmove+0x12>
 800b520:	4402      	add	r2, r0
 800b522:	4601      	mov	r1, r0
 800b524:	428a      	cmp	r2, r1
 800b526:	d100      	bne.n	800b52a <memmove+0x2a>
 800b528:	bd10      	pop	{r4, pc}
 800b52a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b52e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b532:	e7f7      	b.n	800b524 <memmove+0x24>

0800b534 <_sbrk_r>:
 800b534:	b538      	push	{r3, r4, r5, lr}
 800b536:	4d06      	ldr	r5, [pc, #24]	; (800b550 <_sbrk_r+0x1c>)
 800b538:	2300      	movs	r3, #0
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	602b      	str	r3, [r5, #0]
 800b540:	f7f6 f85e 	bl	8001600 <_sbrk>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_sbrk_r+0x1a>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_sbrk_r+0x1a>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	24018bdc 	.word	0x24018bdc

0800b554 <memcpy>:
 800b554:	440a      	add	r2, r1
 800b556:	4291      	cmp	r1, r2
 800b558:	f100 33ff 	add.w	r3, r0, #4294967295
 800b55c:	d100      	bne.n	800b560 <memcpy+0xc>
 800b55e:	4770      	bx	lr
 800b560:	b510      	push	{r4, lr}
 800b562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b56a:	4291      	cmp	r1, r2
 800b56c:	d1f9      	bne.n	800b562 <memcpy+0xe>
 800b56e:	bd10      	pop	{r4, pc}

0800b570 <_realloc_r>:
 800b570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b574:	4680      	mov	r8, r0
 800b576:	4614      	mov	r4, r2
 800b578:	460e      	mov	r6, r1
 800b57a:	b921      	cbnz	r1, 800b586 <_realloc_r+0x16>
 800b57c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b580:	4611      	mov	r1, r2
 800b582:	f7ff bc49 	b.w	800ae18 <_malloc_r>
 800b586:	b92a      	cbnz	r2, 800b594 <_realloc_r+0x24>
 800b588:	f7ff fbda 	bl	800ad40 <_free_r>
 800b58c:	4625      	mov	r5, r4
 800b58e:	4628      	mov	r0, r5
 800b590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b594:	f000 f81b 	bl	800b5ce <_malloc_usable_size_r>
 800b598:	4284      	cmp	r4, r0
 800b59a:	4607      	mov	r7, r0
 800b59c:	d802      	bhi.n	800b5a4 <_realloc_r+0x34>
 800b59e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5a2:	d812      	bhi.n	800b5ca <_realloc_r+0x5a>
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f7ff fc36 	bl	800ae18 <_malloc_r>
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d0ed      	beq.n	800b58e <_realloc_r+0x1e>
 800b5b2:	42bc      	cmp	r4, r7
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4631      	mov	r1, r6
 800b5b8:	bf28      	it	cs
 800b5ba:	463a      	movcs	r2, r7
 800b5bc:	f7ff ffca 	bl	800b554 <memcpy>
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	f7ff fbbc 	bl	800ad40 <_free_r>
 800b5c8:	e7e1      	b.n	800b58e <_realloc_r+0x1e>
 800b5ca:	4635      	mov	r5, r6
 800b5cc:	e7df      	b.n	800b58e <_realloc_r+0x1e>

0800b5ce <_malloc_usable_size_r>:
 800b5ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5d2:	1f18      	subs	r0, r3, #4
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfbc      	itt	lt
 800b5d8:	580b      	ldrlt	r3, [r1, r0]
 800b5da:	18c0      	addlt	r0, r0, r3
 800b5dc:	4770      	bx	lr
	...

0800b5e0 <_init>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr

0800b5ec <_fini>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr
