
STM32H745_ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b528  0800b528  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b528  0800b528  0001b528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b530  0800b530  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b530  0800b530  0001b530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b534  0800b534  0001b534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800b538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023ac  24000060  0800b598  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400240c  0800b598  0002240c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb12  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002edc  00000000  00000000  0003bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001280  00000000  00000000  0003eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4d  00000000  00000000  0003fd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003d51e  00000000  00000000  00040b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a3bc  00000000  00000000  0007e0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0019af36  00000000  00000000  00098467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053f8  00000000  00000000  002333a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00238798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b480 	.word	0x0800b480

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b480 	.word	0x0800b480

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <myprintf2>:
  _write(0, (char*)buffer,len);
  //HAL_USART_Transmit(&husart2, (uint8_t*)buffer, len, -1);

}

void myprintf2(const char *fmt, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <myprintf2+0x44>)
 80007ce:	f00a f9c5 	bl	800ab5c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <myprintf2+0x44>)
 80007d4:	f7ff fd84 	bl	80002e0 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <myprintf2+0x44>)
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <myprintf2+0x48>)
 80007e8:	f009 f877 	bl	80098da <HAL_UART_Transmit>

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24002254 	.word	0x24002254
 8000800:	24002188 	.word	0x24002188

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef _time;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000810:	bf00      	nop
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <main+0x114>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081a:	2b00      	cmp	r3, #0
 800081c:	d004      	beq.n	8000828 <main+0x24>
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	61fa      	str	r2, [r7, #28]
 8000824:	2b00      	cmp	r3, #0
 8000826:	dcf4      	bgt.n	8000812 <main+0xe>
  if ( timeout < 0 )
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	2b00      	cmp	r3, #0
 800082c:	da01      	bge.n	8000832 <main+0x2e>
  {
  Error_Handler();
 800082e:	f000 fc0d 	bl	800104c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 feb1 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f885 	bl	8000944 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800083a:	f000 f8fd 	bl	8000a38 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800083e:	4b36      	ldr	r3, [pc, #216]	; (8000918 <main+0x114>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	4a34      	ldr	r2, [pc, #208]	; (8000918 <main+0x114>)
 8000846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800084a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <main+0x114>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800085c:	2000      	movs	r0, #0
 800085e:	f004 ff17 	bl	8005690 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f004 ff2d 	bl	80056c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800086a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800086e:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000870:	bf00      	nop
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <main+0x114>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087a:	2b00      	cmp	r3, #0
 800087c:	d104      	bne.n	8000888 <main+0x84>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	61fa      	str	r2, [r7, #28]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dcf4      	bgt.n	8000872 <main+0x6e>
if ( timeout < 0 )
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	2b00      	cmp	r3, #0
 800088c:	da01      	bge.n	8000892 <main+0x8e>
{
Error_Handler();
 800088e:	f000 fbdd 	bl	800104c <Error_Handler>
  //SWD_Init();
  //write(0,"Hello",5);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 fac9 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000896:	f000 faa7 	bl	8000de8 <MX_DMA_Init>
  //MX_LPUART1_UART_Init();
  MX_USART3_UART_Init();
 800089a:	f000 fa59 	bl	8000d50 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800089e:	f000 f961 	bl	8000b64 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008a2:	f000 f9e9 	bl	8000c78 <MX_ADC2_Init>
  MX_RTC_Init();
 80008a6:	f000 f8f7 	bl	8000a98 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTC_GetTime(&hrtc, &_time, RTC_FORMAT_BCD);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <main+0x118>)
 80008b2:	f008 fd79 	bl	80093a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &_date, RTC_FORMAT_BCD);
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4817      	ldr	r0, [pc, #92]	; (800091c <main+0x118>)
 80008c0:	f008 fe56 	bl	8009570 <HAL_RTC_GetDate>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t *)ADC_DualModeVal,4);
 80008c4:	2204      	movs	r2, #4
 80008c6:	4916      	ldr	r1, [pc, #88]	; (8000920 <main+0x11c>)
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <main+0x120>)
 80008ca:	f002 f96f 	bl	8002bac <HAL_ADCEx_MultiModeStart_DMA>

  //a_shot = HAL_GetTick();

  myprintf2("STARTING : \r\n");
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <main+0x124>)
 80008d0:	f7ff ff72 	bl	80007b8 <myprintf2>

  while (1)
  {

	  //if(ctr==BUFFER_SIZE)
	  if(gidxA == BFR_SIZE)
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <main+0x128>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008dc:	d102      	bne.n	80008e4 <main+0xe0>
#endif
		//TransferDataADC();

		////printBuffers(buffer1, buffer2, 100);
		////HAL_Delay(3000);
		ctr=0;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <main+0x12c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
//	  HAL_Delay(1000);
//	  b_shot  = HAL_GetTick();
//	  MX_DMA_Init();
//	}

	  if(flag_buffer_complete == 1)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <main+0x130>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d1f3      	bne.n	80008d4 <main+0xd0>
	  {
		  printBuffers(buffer1, buffer2, 1000);
 80008ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f0:	4911      	ldr	r1, [pc, #68]	; (8000938 <main+0x134>)
 80008f2:	4812      	ldr	r0, [pc, #72]	; (800093c <main+0x138>)
 80008f4:	f000 fb82 	bl	8000ffc <printBuffers>
		  HAL_Delay(500);
 80008f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fc:	f000 fede 	bl	80016bc <HAL_Delay>
		  flag_buffer_complete = 0;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <main+0x130>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
		  b_shot  = HAL_GetTick();
 8000906:	f000 fecd 	bl	80016a4 <HAL_GetTick>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <main+0x13c>)
 8000910:	601a      	str	r2, [r3, #0]
		  MX_DMA_Init();
 8000912:	f000 fa69 	bl	8000de8 <MX_DMA_Init>
	  if(gidxA == BFR_SIZE)
 8000916:	e7dd      	b.n	80008d4 <main+0xd0>
 8000918:	58024400 	.word	0x58024400
 800091c:	2400221c 	.word	0x2400221c
 8000920:	24002240 	.word	0x24002240
 8000924:	24001fd0 	.word	0x24001fd0
 8000928:	0800b498 	.word	0x0800b498
 800092c:	24001fbc 	.word	0x24001fbc
 8000930:	24002250 	.word	0x24002250
 8000934:	24001fcc 	.word	0x24001fcc
 8000938:	2400101c 	.word	0x2400101c
 800093c:	2400007c 	.word	0x2400007c
 8000940:	24001fc8 	.word	0x24001fc8

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b09c      	sub	sp, #112	; 0x70
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094e:	224c      	movs	r2, #76	; 0x4c
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f00a f910 	bl	800ab78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2220      	movs	r2, #32
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f00a f90a 	bl	800ab78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000964:	2004      	movs	r0, #4
 8000966:	f004 fec1 	bl	80056ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <SystemClock_Config+0xec>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <SystemClock_Config+0xec>)
 8000974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000978:	6193      	str	r3, [r2, #24]
 800097a:	4b2d      	ldr	r3, [pc, #180]	; (8000a30 <SystemClock_Config+0xec>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	4b2b      	ldr	r3, [pc, #172]	; (8000a34 <SystemClock_Config+0xf0>)
 8000986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000988:	4a2a      	ldr	r2, [pc, #168]	; (8000a34 <SystemClock_Config+0xf0>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <SystemClock_Config+0xf0>)
 8000992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800099c:	bf00      	nop
 800099e:	4b24      	ldr	r3, [pc, #144]	; (8000a30 <SystemClock_Config+0xec>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009aa:	d1f8      	bne.n	800099e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ac:	2301      	movs	r3, #1
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ba:	2302      	movs	r3, #2
 80009bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009be:	2301      	movs	r3, #1
 80009c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009c2:	2378      	movs	r3, #120	; 0x78
 80009c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009d2:	230c      	movs	r3, #12
 80009d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e2:	4618      	mov	r0, r3
 80009e4:	f004 fedc 	bl	80057a0 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009ee:	f000 fb2d 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	233f      	movs	r3, #63	; 0x3f
 80009f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2303      	movs	r3, #3
 80009f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009fe:	2308      	movs	r3, #8
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a02:	2340      	movs	r3, #64	; 0x40
 8000a04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a06:	2340      	movs	r3, #64	; 0x40
 8000a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2104      	movs	r1, #4
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f005 fb1b 	bl	8006054 <HAL_RCC_ClockConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a24:	f000 fb12 	bl	800104c <Error_Handler>
  }

   //HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_8);

}
 8000a28:	bf00      	nop
 8000a2a:	3770      	adds	r7, #112	; 0x70
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	58024800 	.word	0x58024800
 8000a34:	58000400 	.word	0x58000400

08000a38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0b0      	sub	sp, #192	; 0xc0
 8000a3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3e:	463b      	mov	r3, r7
 8000a40:	22c0      	movs	r2, #192	; 0xc0
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f00a f897 	bl	800ab78 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a4e:	f04f 0300 	mov.w	r3, #0
 8000a52:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000a5a:	2314      	movs	r3, #20
 8000a5c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000a5e:	2304      	movs	r3, #4
 8000a60:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a6a:	23c0      	movs	r3, #192	; 0xc0
 8000a6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a6e:	2320      	movs	r3, #32
 8000a70:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 fe74 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a8a:	f000 fadf 	bl	800104c <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	37c0      	adds	r7, #192	; 0xc0
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000aac:	2300      	movs	r3, #0
 8000aae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ab0:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000ab2:	4a2b      	ldr	r2, [pc, #172]	; (8000b60 <MX_RTC_Init+0xc8>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ab6:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000abc:	4b27      	ldr	r3, [pc, #156]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000abe:	227f      	movs	r2, #127	; 0x7f
 8000ac0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000ac4:	22ff      	movs	r2, #255	; 0xff
 8000ac6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000ae2:	f008 fb41 	bl	8009168 <HAL_RTC_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000aec:	f000 faae 	bl	800104c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = HOURS;
 8000af0:	2310      	movs	r3, #16
 8000af2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MINUTES;
 8000af4:	2306      	movs	r3, #6
 8000af6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2201      	movs	r2, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4814      	ldr	r0, [pc, #80]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000b0c:	f008 fbae 	bl	800926c <HAL_RTC_SetTime>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000b16:	f000 fa99 	bl	800104c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	707b      	strb	r3, [r7, #1]
  sDate.Date = DATE;
 8000b22:	2310      	movs	r3, #16
 8000b24:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8000b26:	2323      	movs	r3, #35	; 0x23
 8000b28:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480a      	ldr	r0, [pc, #40]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000b32:	f008 fc95 	bl	8009460 <HAL_RTC_SetDate>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000b3c:	f000 fa86 	bl	800104c <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000b40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_RTC_Init+0xc4>)
 8000b46:	f008 fe31 	bl	80097ac <HAL_RTCEx_SetCalibrationOutPut>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000b50:	f000 fa7c 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2400221c 	.word	0x2400221c
 8000b60:	58004000 	.word	0x58004000

08000b64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	463b      	mov	r3, r7
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
 8000b84:	615a      	str	r2, [r3, #20]
 8000b86:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b88:	4b38      	ldr	r3, [pc, #224]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000b8a:	4a39      	ldr	r2, [pc, #228]	; (8000c70 <MX_ADC1_Init+0x10c>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b8e:	4b37      	ldr	r3, [pc, #220]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba0:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba6:	4b31      	ldr	r3, [pc, #196]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bac:	4b2f      	ldr	r3, [pc, #188]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000bb2:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000bca:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bcc:	2203      	movs	r2, #3
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000be6:	f000 ff7f 	bl	8001ae8 <HAL_ADC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bf0:	f000 fa2c 	bl	800104c <Error_Handler>



  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_ADC1_Init+0x110>)
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c04:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c06:	2304      	movs	r3, #4
 8000c08:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4815      	ldr	r0, [pc, #84]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000c18:	f001 f91c 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000c22:	f000 fa13 	bl	800104c <Error_Handler>
  }

/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000c26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000c30:	f001 ff58 	bl	8002ae4 <HAL_ADCEx_Calibration_Start>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0xda>
  {
    /* Calibration Error */
    Error_Handler();
 8000c3a:	f000 fa07 	bl	800104c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c46:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <MX_ADC1_Init+0x108>)
 8000c54:	f002 f85a 	bl	8002d0c <HAL_ADCEx_MultiModeConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000c5e:	f000 f9f5 	bl	800104c <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	; 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24001fd0 	.word	0x24001fd0
 8000c70:	40022000 	.word	0x40022000
 8000c74:	0c900008 	.word	0x0c900008

08000c78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c90:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000c92:	4a2d      	ldr	r2, [pc, #180]	; (8000d48 <MX_ADC2_Init+0xd0>)
 8000c94:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000ce2:	f000 ff01 	bl	8001ae8 <HAL_ADC_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000cec:	f000 f9ae 	bl	800104c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cf0:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_ADC2_Init+0xd4>)
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf4:	2306      	movs	r3, #6
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cfc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d02:	2304      	movs	r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000d14:	f001 f89e 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d1e:	f000 f995 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
/* Run the ADC calibration in single-ended mode */
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8000d22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC2_Init+0xcc>)
 8000d2c:	f001 feda 	bl	8002ae4 <HAL_ADCEx_Calibration_Start>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC2_Init+0xc2>
  {
    /* Calibration Error */
    Error_Handler();
 8000d36:	f000 f989 	bl	800104c <Error_Handler>
  }
  /* USER CODE END ADC2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	24002034 	.word	0x24002034
 8000d48:	40022100 	.word	0x40022100
 8000d4c:	0c900008 	.word	0x0c900008

08000d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d56:	4a23      	ldr	r2, [pc, #140]	; (8000de4 <MX_USART3_UART_Init+0x94>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5a:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d98:	4811      	ldr	r0, [pc, #68]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000d9a:	f008 fd4e 	bl	800983a <HAL_UART_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000da4:	f000 f952 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da8:	2100      	movs	r1, #0
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dac:	f009 fddf 	bl	800a96e <HAL_UARTEx_SetTxFifoThreshold>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000db6:	f000 f949 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f009 fe14 	bl	800a9ea <HAL_UARTEx_SetRxFifoThreshold>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc8:	f000 f940 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <MX_USART3_UART_Init+0x90>)
 8000dce:	f009 fd95 	bl	800a8fc <HAL_UARTEx_DisableFifoMode>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f938 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	24002188 	.word	0x24002188
 8000de4:	40004800 	.word	0x40004800

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_DMA_Init+0x3c>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	200b      	movs	r0, #11
 8000e12:	f002 f958 	bl	80030c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e16:	200b      	movs	r0, #11
 8000e18:	f002 f96f 	bl	80030fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  //HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);

}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b45      	ldr	r3, [pc, #276]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a43      	ldr	r2, [pc, #268]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a3c      	ldr	r2, [pc, #240]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b39      	ldr	r3, [pc, #228]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a34      	ldr	r2, [pc, #208]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	4a2d      	ldr	r2, [pc, #180]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e98:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	4a25      	ldr	r2, [pc, #148]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb6:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]


 GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_GPIO_Init+0x11c>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	683b      	ldr	r3, [r7, #0]

  /* Configure PC.13 pin as the EXTI input event line in interrupt mode for both CPU1 and CPU2*/
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;    /* current CPU (CM7) config in IT rising */
 8000f00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5;
 8000f0a:	2320      	movs	r3, #32
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  //HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;    /* current CPU (CM7) config in IT rising */
 8000f12:	2301      	movs	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_9;
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f20:	2303      	movs	r3, #3
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_GPIO_Init+0x120>)
 8000f2c:	f004 f9e6 	bl	80052fc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f36:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_GPIO_Init+0x120>)
 8000f38:	f004 fb90 	bl	800565c <HAL_GPIO_WritePin>
  /* Configure the second CPU (CM4) EXTI line for IT*/
 // HAL_EXTI_D1_EventInputConfig(EXTI_LINE5 , EXTI_MODE_IT,  ENABLE);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3c:	bf00      	nop
 8000f3e:	3730      	adds	r7, #48	; 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58020800 	.word	0x58020800

08000f4c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
		//HAL_ADC_Stop(&hadc2);
    	//HAL_ADCEx_MultiModeStop_DMA(&hdma_adc1);
    }
    */

	if( HAL_GetTick() > (b_shot + 1000))
 8000f54:	f000 fba6 	bl	80016a4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_ADC_ConvCpltCallback+0x90>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d90d      	bls.n	8000f82 <HAL_ADC_ConvCpltCallback+0x36>
	{
		b_shot  = HAL_GetTick();
 8000f66:	f000 fb9d 	bl	80016a4 <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_ADC_ConvCpltCallback+0x90>)
 8000f70:	601a      	str	r2, [r3, #0]
		//HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
		rateB = rateA;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <HAL_ADC_ConvCpltCallback+0x98>)
 8000f78:	6013      	str	r3, [r2, #0]
		rateA = 0;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e004      	b.n	8000f8c <HAL_ADC_ConvCpltCallback+0x40>
	}
	else
	{
		rateA++;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f8a:	6013      	str	r3, [r2, #0]
	}

    if(gidxA < BFR_SIZE)
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f94:	da15      	bge.n	8000fc2 <HAL_ADC_ConvCpltCallback+0x76>
    {
    	buffer1[gidxA] = (ADC_DualModeVal[0] >> 16);
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	0c12      	lsrs	r2, r2, #16
 8000fa0:	4913      	ldr	r1, [pc, #76]	; (8000ff0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	buffer2[gidxA] = (ADC_DualModeVal[1] >> 16);
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_ADC_ConvCpltCallback+0xa0>)
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	0c12      	lsrs	r2, r2, #16
 8000fb0:	4910      	ldr	r1, [pc, #64]	; (8000ff4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	gidxA++;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000fbe:	6013      	str	r3, [r2, #0]
    {
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
    	flag_buffer_complete = 1;
    	gidxA = 0;
    }
}
 8000fc0:	e008      	b.n	8000fd4 <HAL_ADC_ConvCpltCallback+0x88>
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f002 f8a7 	bl	8003116 <HAL_NVIC_DisableIRQ>
    	flag_buffer_complete = 1;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_ADC_ConvCpltCallback+0xac>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
    	gidxA = 0;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	24001fc8 	.word	0x24001fc8
 8000fe0:	24001fc0 	.word	0x24001fc0
 8000fe4:	24001fc4 	.word	0x24001fc4
 8000fe8:	24001fbc 	.word	0x24001fbc
 8000fec:	24002240 	.word	0x24002240
 8000ff0:	2400007c 	.word	0x2400007c
 8000ff4:	2400101c 	.word	0x2400101c
 8000ff8:	24001fcc 	.word	0x24001fcc

08000ffc <printBuffers>:


}

void printBuffers(uint32_t *bfr1, uint32_t *bfr2, int size)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	int lidx = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

	for(lidx=0;lidx < size; lidx++)
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e010      	b.n	8001034 <printBuffers+0x38>
	{
		myprintf2("%d, %d\r\n", bfr1[lidx], bfr2[lidx]);
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <printBuffers+0x4c>)
 800102a:	f7ff fbc5 	bl	80007b8 <myprintf2>
	for(lidx=0;lidx < size; lidx++)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3301      	adds	r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	dbea      	blt.n	8001012 <printBuffers+0x16>
	}
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	0800b4a8 	.word	0x0800b4a8

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_MspInit+0x30>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_MspInit+0x30>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_MspInit+0x30>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	58024400 	.word	0x58024400

0800108c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a58      	ldr	r2, [pc, #352]	; (800120c <HAL_ADC_MspInit+0x180>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d17d      	bne.n	80011aa <HAL_ADC_MspInit+0x11e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80010ae:	4b58      	ldr	r3, [pc, #352]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b4:	4a56      	ldr	r2, [pc, #344]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010be:	4b54      	ldr	r3, [pc, #336]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80010c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80010cc:	4b51      	ldr	r3, [pc, #324]	; (8001214 <HAL_ADC_MspInit+0x188>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a50      	ldr	r2, [pc, #320]	; (8001214 <HAL_ADC_MspInit+0x188>)
 80010d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80010d6:	4b4f      	ldr	r3, [pc, #316]	; (8001214 <HAL_ADC_MspInit+0x188>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10e      	bne.n	80010fc <HAL_ADC_MspInit+0x70>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010de:	4b4c      	ldr	r3, [pc, #304]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80010e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010e4:	4a4a      	ldr	r2, [pc, #296]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80010f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010f4:	f003 0320 	and.w	r3, r3, #32
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_ADC_MspInit+0x184>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <HAL_ADC_MspInit+0x184>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800111a:	2340      	movs	r3, #64	; 0x40
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	483a      	ldr	r0, [pc, #232]	; (8001218 <HAL_ADC_MspInit+0x18c>)
 800112e:	f004 f8e5 	bl	80052fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001132:	4b3a      	ldr	r3, [pc, #232]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001134:	4a3a      	ldr	r2, [pc, #232]	; (8001220 <HAL_ADC_MspInit+0x194>)
 8001136:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001138:	4b38      	ldr	r3, [pc, #224]	; (800121c <HAL_ADC_MspInit+0x190>)
 800113a:	2209      	movs	r2, #9
 800113c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113e:	4b37      	ldr	r3, [pc, #220]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b35      	ldr	r3, [pc, #212]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_ADC_MspInit+0x190>)
 800114c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001152:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001158:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_PDATAALIGN_WORD;
 800115a:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_ADC_MspInit+0x190>)
 800115c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001160:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001168:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <HAL_ADC_MspInit+0x190>)
 800116c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001170:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001174:	2204      	movs	r2, #4
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_ADC_MspInit+0x190>)
 800117a:	2203      	movs	r2, #3
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800117e:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001180:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001184:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001186:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_ADC_MspInit+0x190>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <HAL_ADC_MspInit+0x190>)
 800118e:	f001 ffdd 	bl	800314c <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_ADC_MspInit+0x110>
    {
      Error_Handler();
 8001198:	f7ff ff58 	bl	800104c <Error_Handler>
    }

   __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a1f      	ldr	r2, [pc, #124]	; (800121c <HAL_ADC_MspInit+0x190>)
 80011a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <HAL_ADC_MspInit+0x190>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6393      	str	r3, [r2, #56]	; 0x38
    // HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
    // HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011a8:	e02b      	b.n	8001202 <HAL_ADC_MspInit+0x176>
  else if(hadc->Instance==ADC2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_ADC_MspInit+0x198>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d126      	bne.n	8001202 <HAL_ADC_MspInit+0x176>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_ADC_MspInit+0x188>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a16      	ldr	r2, [pc, #88]	; (8001214 <HAL_ADC_MspInit+0x188>)
 80011bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_ADC_MspInit+0x188>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d10e      	bne.n	80011e4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80011c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80011ce:	f043 0320 	orr.w	r3, r3, #32
 80011d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80011d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011dc:	f003 0320 	and.w	r3, r3, #32
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	4a09      	ldr	r2, [pc, #36]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_ADC_MspInit+0x184>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40022000 	.word	0x40022000
 8001210:	58024400 	.word	0x58024400
 8001214:	240022b8 	.word	0x240022b8
 8001218:	58020000 	.word	0x58020000
 800121c:	24002098 	.word	0x24002098
 8001220:	40020010 	.word	0x40020010
 8001224:	40022100 	.word	0x40022100

08001228 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0ba      	sub	sp, #232	; 0xe8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	22c0      	movs	r2, #192	; 0xc0
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f009 fc95 	bl	800ab78 <memset>
  if(hrtc->Instance==RTC)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a22      	ldr	r2, [pc, #136]	; (80012dc <HAL_RTC_MspInit+0xb4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d13d      	bne.n	80012d4 <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001258:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800125c:	f04f 0300 	mov.w	r3, #0
 8001260:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001268:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4618      	mov	r0, r3
 8001272:	f005 fa7b 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 800127c:	f7ff fee6 	bl	800104c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_RTC_MspInit+0xb8>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <HAL_RTC_MspInit+0xb8>)
 8001286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128a:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_RTC_MspInit+0xb8>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_RTC_MspInit+0xb8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <HAL_RTC_MspInit+0xb8>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012aa:	2304      	movs	r3, #4
 80012ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_RTC_MspInit+0xbc>)
 80012d0:	f004 f814 	bl	80052fc <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	37e8      	adds	r7, #232	; 0xe8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	58004000 	.word	0x58004000
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58020400 	.word	0x58020400

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b0bc      	sub	sp, #240	; 0xf0
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	22c0      	movs	r2, #192	; 0xc0
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f009 fc35 	bl	800ab78 <memset>

  if(huart->Instance==LPUART1)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <HAL_UART_MspInit+0x160>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d146      	bne.n	80013a6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001318:	f04f 0204 	mov.w	r2, #4
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	4618      	mov	r0, r3
 8001330:	f005 fa1c 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800133a:	f7ff fe87 	bl	800104c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800133e:	4b43      	ldr	r3, [pc, #268]	; (800144c <HAL_UART_MspInit+0x164>)
 8001340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001344:	4a41      	ldr	r2, [pc, #260]	; (800144c <HAL_UART_MspInit+0x164>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <HAL_UART_MspInit+0x164>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_UART_MspInit+0x164>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	4a3a      	ldr	r2, [pc, #232]	; (800144c <HAL_UART_MspInit+0x164>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_UART_MspInit+0x164>)
 800136e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800137a:	23c0      	movs	r3, #192	; 0xc0
 800137c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8001392:	2308      	movs	r3, #8
 8001394:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800139c:	4619      	mov	r1, r3
 800139e:	482c      	ldr	r0, [pc, #176]	; (8001450 <HAL_UART_MspInit+0x168>)
 80013a0:	f003 ffac 	bl	80052fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a4:	e04b      	b.n	800143e <HAL_UART_MspInit+0x156>
  if(huart->Instance==USART3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_UART_MspInit+0x16c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d146      	bne.n	800143e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013b0:	f04f 0202 	mov.w	r2, #2
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4618      	mov	r0, r3
 80013c8:	f005 f9d0 	bl	800676c <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_UART_MspInit+0xee>
      Error_Handler();
 80013d2:	f7ff fe3b 	bl	800104c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_UART_MspInit+0x164>)
 80013d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013dc:	4a1b      	ldr	r2, [pc, #108]	; (800144c <HAL_UART_MspInit+0x164>)
 80013de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_UART_MspInit+0x164>)
 80013e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_UART_MspInit+0x164>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_UART_MspInit+0x164>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_UART_MspInit+0x164>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800142c:	2307      	movs	r3, #7
 800142e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001432:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <HAL_UART_MspInit+0x170>)
 800143a:	f003 ff5f 	bl	80052fc <HAL_GPIO_Init>
}
 800143e:	bf00      	nop
 8001440:	37f0      	adds	r7, #240	; 0xf0
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	58000c00 	.word	0x58000c00
 800144c:	58024400 	.word	0x58024400
 8001450:	58020400 	.word	0x58020400
 8001454:	40004800 	.word	0x40004800
 8001458:	58020c00 	.word	0x58020c00

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f8e8 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <DMA1_Stream0_IRQHandler+0x10>)
 80014b6:	f002 fc0f 	bl	8003cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	24002098 	.word	0x24002098

080014c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA1_Stream1_IRQHandler+0x10>)
 80014ca:	f002 fc05 	bl	8003cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	24002110 	.word	0x24002110

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f009 fb3e 	bl	800ab88 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	24080000 	.word	0x24080000
 8001538:	00000400 	.word	0x00000400
 800153c:	240022bc 	.word	0x240022bc
 8001540:	24002410 	.word	0x24002410

08001544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800157c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001548:	f7ff f8a0 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800154e:	490d      	ldr	r1, [pc, #52]	; (8001584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001554:	e002      	b.n	800155c <LoopCopyDataInit>

08001556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800155a:	3304      	adds	r3, #4

0800155c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800155c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800155e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001560:	d3f9      	bcc.n	8001556 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001564:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001568:	e001      	b.n	800156e <LoopFillZerobss>

0800156a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800156a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800156c:	3204      	adds	r2, #4

0800156e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800156e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001570:	d3fb      	bcc.n	800156a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001572:	f009 fb0f 	bl	800ab94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001576:	f7ff f945 	bl	8000804 <main>
  bx  lr
 800157a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001580:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001584:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001588:	0800b538 	.word	0x0800b538
  ldr r2, =_sbss
 800158c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001590:	2400240c 	.word	0x2400240c

08001594 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001594:	e7fe      	b.n	8001594 <ADC3_IRQHandler>
	...

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159e:	2003      	movs	r0, #3
 80015a0:	f001 fd86 	bl	80030b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015a4:	f004 ff0c 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_Init+0x68>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	4913      	ldr	r1, [pc, #76]	; (8001604 <HAL_Init+0x6c>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_Init+0x68>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_Init+0x6c>)
 80015cc:	5cd3      	ldrb	r3, [r2, r3]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_Init+0x70>)
 80015da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015dc:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_Init+0x74>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e2:	2000      	movs	r0, #0
 80015e4:	f000 f814 	bl	8001610 <HAL_InitTick>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e002      	b.n	80015f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80015f2:	f7ff fd31 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	58024400 	.word	0x58024400
 8001604:	0800b4b4 	.word	0x0800b4b4
 8001608:	24000004 	.word	0x24000004
 800160c:	24000000 	.word	0x24000000

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_InitTick+0x60>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e021      	b.n	8001668 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_InitTick+0x64>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_InitTick+0x60>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f001 fd79 	bl	8003132 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f001 fd35 	bl	80030c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_InitTick+0x68>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2400000c 	.word	0x2400000c
 8001674:	24000000 	.word	0x24000000
 8001678:	24000008 	.word	0x24000008

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	2400000c 	.word	0x2400000c
 80016a0:	240022c0 	.word	0x240022c0

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	240022c0 	.word	0x240022c0

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2400000c 	.word	0x2400000c

08001704 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetREVID+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0c1b      	lsrs	r3, r3, #16
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	5c001000 	.word	0x5c001000

0800171c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3360      	adds	r3, #96	; 0x60
 8001796:	461a      	mov	r2, r3
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	430b      	orrs	r3, r1
 80017b2:	431a      	orrs	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017b8:	bf00      	nop
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	611a      	str	r2, [r3, #16]
}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b087      	sub	sp, #28
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3360      	adds	r3, #96	; 0x60
 8001806:	461a      	mov	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]
  }
}
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001852:	b480      	push	{r7}
 8001854:	b087      	sub	sp, #28
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3330      	adds	r3, #48	; 0x30
 8001862:	461a      	mov	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	4413      	add	r3, r2
 8001870:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 031f 	and.w	r3, r3, #31
 800187c:	211f      	movs	r1, #31
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	401a      	ands	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	0e9b      	lsrs	r3, r3, #26
 800188a:	f003 011f 	and.w	r1, r3, #31
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3314      	adds	r3, #20
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	0e5b      	lsrs	r3, r3, #25
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	4413      	add	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	0d1b      	lsrs	r3, r3, #20
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	2107      	movs	r1, #7
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	0d1b      	lsrs	r3, r3, #20
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	431a      	orrs	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0318 	and.w	r3, r3, #24
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001924:	40d9      	lsrs	r1, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	400b      	ands	r3, r1
 800192a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800192e:	431a      	orrs	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	000fffff 	.word	0x000fffff

08001948 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 031f 	and.w	r3, r3, #31
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6093      	str	r3, [r2, #8]
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	5fffffc0 	.word	0x5fffffc0

08001988 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800199c:	d101      	bne.n	80019a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80019be:	4013      	ands	r3, r2
 80019c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	6fffffc0 	.word	0x6fffffc0

080019d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019ec:	d101      	bne.n	80019f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LL_ADC_Enable+0x24>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	7fffffc0 	.word	0x7fffffc0

08001a28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <LL_ADC_Disable+0x24>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	f043 0202 	orr.w	r2, r3, #2
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	7fffffc0 	.word	0x7fffffc0

08001a50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <LL_ADC_IsEnabled+0x18>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <LL_ADC_IsEnabled+0x1a>
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d101      	bne.n	8001a8e <LL_ADC_IsDisableOngoing+0x18>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <LL_ADC_IsDisableOngoing+0x1a>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d101      	bne.n	8001ab4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e18f      	b.n	8001e22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fabb 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff2d 	bl	8001988 <LL_ADC_IsDeepPowerDownEnabled>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d004      	beq.n	8001b3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff13 	bl	8001964 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff ff48 	bl	80019d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d114      	bne.n	8001b78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff2c 	bl	80019b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b58:	4b87      	ldr	r3, [pc, #540]	; (8001d78 <HAL_ADC_Init+0x290>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	099b      	lsrs	r3, r3, #6
 8001b5e:	4a87      	ldr	r2, [pc, #540]	; (8001d7c <HAL_ADC_Init+0x294>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	3301      	adds	r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b6a:	e002      	b.n	8001b72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f9      	bne.n	8001b6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff2b 	bl	80019d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10d      	bne.n	8001ba4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	f043 0210 	orr.w	r2, r3, #16
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff77 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001bae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 8129 	bne.w	8001e10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 8125 	bne.w	8001e10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bce:	f043 0202 	orr.w	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff38 	bl	8001a50 <LL_ADC_IsEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d136      	bne.n	8001c54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a65      	ldr	r2, [pc, #404]	; (8001d80 <HAL_ADC_Init+0x298>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d004      	beq.n	8001bfa <HAL_ADC_Init+0x112>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a63      	ldr	r2, [pc, #396]	; (8001d84 <HAL_ADC_Init+0x29c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10e      	bne.n	8001c18 <HAL_ADC_Init+0x130>
 8001bfa:	4861      	ldr	r0, [pc, #388]	; (8001d80 <HAL_ADC_Init+0x298>)
 8001bfc:	f7ff ff28 	bl	8001a50 <LL_ADC_IsEnabled>
 8001c00:	4604      	mov	r4, r0
 8001c02:	4860      	ldr	r0, [pc, #384]	; (8001d84 <HAL_ADC_Init+0x29c>)
 8001c04:	f7ff ff24 	bl	8001a50 <LL_ADC_IsEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4323      	orrs	r3, r4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e008      	b.n	8001c2a <HAL_ADC_Init+0x142>
 8001c18:	485b      	ldr	r0, [pc, #364]	; (8001d88 <HAL_ADC_Init+0x2a0>)
 8001c1a:	f7ff ff19 	bl	8001a50 <LL_ADC_IsEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d012      	beq.n	8001c54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a53      	ldr	r2, [pc, #332]	; (8001d80 <HAL_ADC_Init+0x298>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_ADC_Init+0x15a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_ADC_Init+0x29c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_ADC_Init+0x15e>
 8001c42:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_ADC_Init+0x2a4>)
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_Init+0x160>
 8001c46:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_ADC_Init+0x2a8>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7ff fd64 	bl	800171c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c54:	f7ff fd56 	bl	8001704 <HAL_GetREVID>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d914      	bls.n	8001c8c <HAL_ADC_Init+0x1a4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d110      	bne.n	8001c8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	7d5b      	ldrb	r3, [r3, #21]
 8001c6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7f1b      	ldrb	r3, [r3, #28]
 8001c80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c84:	f043 030c 	orr.w	r3, r3, #12
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	e00d      	b.n	8001ca8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7d5b      	ldrb	r3, [r3, #21]
 8001c90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7f1b      	ldrb	r3, [r3, #28]
 8001ca2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7f1b      	ldrb	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	045b      	lsls	r3, r3, #17
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_ADC_Init+0x2ac>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	69b9      	ldr	r1, [r7, #24]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fed2 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001cf8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fedf 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 8001d04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d15f      	bne.n	8001dcc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d15c      	bne.n	8001dcc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7d1b      	ldrb	r3, [r3, #20]
 8001d16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_ADC_Init+0x2b0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	69b9      	ldr	r1, [r7, #24]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d130      	bne.n	8001da0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_ADC_Init+0x2b4>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d52:	3a01      	subs	r2, #1
 8001d54:	0411      	lsls	r1, r2, #16
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d66:	430a      	orrs	r2, r1
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	e01c      	b.n	8001db0 <HAL_ADC_Init+0x2c8>
 8001d76:	bf00      	nop
 8001d78:	24000000 	.word	0x24000000
 8001d7c:	053e2d63 	.word	0x053e2d63
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40022100 	.word	0x40022100
 8001d88:	58026000 	.word	0x58026000
 8001d8c:	40022300 	.word	0x40022300
 8001d90:	58026300 	.word	0x58026300
 8001d94:	fff0c003 	.word	0xfff0c003
 8001d98:	ffffbffc 	.word	0xffffbffc
 8001d9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 fd12 	bl	80027f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10c      	bne.n	8001dee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f023 010f 	bic.w	r1, r3, #15
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
 8001dec:	e007      	b.n	8001dfe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 020f 	bic.w	r2, r2, #15
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	f023 0303 	bic.w	r3, r3, #3
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
 8001e0e:	e007      	b.n	8001e20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f043 0210 	orr.w	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd90      	pop	{r4, r7, pc}
 8001e2a:	bf00      	nop

08001e2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b0a1      	sub	sp, #132	; 0x84
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a9d      	ldr	r2, [pc, #628]	; (80020e4 <HAL_ADC_ConfigChannel+0x290>)
 8001e6e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x2a>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e321      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x66e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fe06 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 8306 	bne.w	80024a4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d108      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x62>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2201      	movs	r2, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	e016      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x90>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ec6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001ece:	2320      	movs	r3, #32
 8001ed0:	e003      	b.n	8001eda <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ed4:	fab3 f383 	clz	r3, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	2201      	movs	r2, #1
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	69d1      	ldr	r1, [r2, #28]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	f7ff fca7 	bl	8001852 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fdc7 	bl	8001a9c <LL_ADC_REG_IsConversionOngoing>
 8001f0e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fdd4 	bl	8001ac2 <LL_ADC_INJ_IsConversionOngoing>
 8001f1a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f040 80b3 	bne.w	800208a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 80af 	bne.w	800208a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f7ff fcb6 	bl	80018aa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f3e:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <HAL_ADC_ConfigChannel+0x294>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f4a:	d10b      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x110>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	e01d      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x14c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x136>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	e00a      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x14c>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d027      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fb8:	f7ff fbe4 	bl	8001784 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6919      	ldr	r1, [r3, #16]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	7e5b      	ldrb	r3, [r3, #25]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x17e>
 8001fcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001fd0:	e000      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x180>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f7ff fc0e 	bl	80017f6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6919      	ldr	r1, [r3, #16]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7e1b      	ldrb	r3, [r3, #24]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d102      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x19c>
 8001fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fee:	e000      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x19e>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f7ff fbe6 	bl	80017c4 <LL_ADC_SetDataRightShift>
 8001ff8:	e047      	b.n	800208a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002000:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	069b      	lsls	r3, r3, #26
 800200a:	429a      	cmp	r2, r3
 800200c:	d107      	bne.n	800201e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800201c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002024:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	069b      	lsls	r3, r3, #26
 800202e:	429a      	cmp	r2, r3
 8002030:	d107      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002040:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	069b      	lsls	r3, r3, #26
 8002052:	429a      	cmp	r2, r3
 8002054:	d107      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002064:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800206c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	429a      	cmp	r2, r3
 8002078:	d107      	bne.n	800208a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002088:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fcde 	bl	8001a50 <LL_ADC_IsEnabled>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 820d 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	461a      	mov	r2, r3
 80020aa:	f7ff fc29 	bl	8001900 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_ADC_ConfigChannel+0x290>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	f040 8133 	bne.w	8002320 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d110      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x298>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2b09      	cmp	r3, #9
 80020d8:	bf94      	ite	ls
 80020da:	2301      	movls	r3, #1
 80020dc:	2300      	movhi	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	e01e      	b.n	8002120 <HAL_ADC_ConfigChannel+0x2cc>
 80020e2:	bf00      	nop
 80020e4:	47ff0000 	.word	0x47ff0000
 80020e8:	5c001000 	.word	0x5c001000
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80020fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80020fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002104:	2320      	movs	r3, #32
 8002106:	e003      	b.n	8002110 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2b09      	cmp	r3, #9
 8002118:	bf94      	ite	ls
 800211a:	2301      	movls	r3, #1
 800211c:	2300      	movhi	r3, #0
 800211e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002120:	2b00      	cmp	r3, #0
 8002122:	d079      	beq.n	8002218 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x2ec>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	3301      	adds	r3, #1
 8002138:	069b      	lsls	r3, r3, #26
 800213a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800213e:	e015      	b.n	800216c <HAL_ADC_ConfigChannel+0x318>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002150:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002158:	2320      	movs	r3, #32
 800215a:	e003      	b.n	8002164 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800215c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3301      	adds	r3, #1
 8002166:	069b      	lsls	r3, r3, #26
 8002168:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_ADC_ConfigChannel+0x338>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	3301      	adds	r3, #1
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	e017      	b.n	80021bc <HAL_ADC_ConfigChannel+0x368>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800219a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800219e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80021a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	ea42 0103 	orr.w	r1, r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x38e>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0e9b      	lsrs	r3, r3, #26
 80021d2:	3301      	adds	r3, #1
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	051b      	lsls	r3, r3, #20
 80021e0:	e018      	b.n	8002214 <HAL_ADC_ConfigChannel+0x3c0>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80021f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80021fa:	2320      	movs	r3, #32
 80021fc:	e003      	b.n	8002206 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80021fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002200:	fab3 f383 	clz	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002214:	430b      	orrs	r3, r1
 8002216:	e07e      	b.n	8002316 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x3e0>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	3301      	adds	r3, #1
 800222c:	069b      	lsls	r3, r3, #26
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	e015      	b.n	8002260 <HAL_ADC_ConfigChannel+0x40c>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800224c:	2320      	movs	r3, #32
 800224e:	e003      	b.n	8002258 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3301      	adds	r3, #1
 800225a:	069b      	lsls	r3, r3, #26
 800225c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x42c>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	3301      	adds	r3, #1
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	e017      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x45c>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	61bb      	str	r3, [r7, #24]
  return result;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	ea42 0103 	orr.w	r1, r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10d      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x488>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	3301      	adds	r3, #1
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	3b1e      	subs	r3, #30
 80022d4:	051b      	lsls	r3, r3, #20
 80022d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022da:	e01b      	b.n	8002314 <HAL_ADC_ConfigChannel+0x4c0>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	60fb      	str	r3, [r7, #12]
  return result;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e003      	b.n	8002300 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	3301      	adds	r3, #1
 8002302:	f003 021f 	and.w	r2, r3, #31
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	3b1e      	subs	r3, #30
 800230e:	051b      	lsls	r3, r3, #20
 8002310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002314:	430b      	orrs	r3, r1
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	6892      	ldr	r2, [r2, #8]
 800231a:	4619      	mov	r1, r3
 800231c:	f7ff fac5 	bl	80018aa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f280 80c6 	bge.w	80024b6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a67      	ldr	r2, [pc, #412]	; (80024cc <HAL_ADC_ConfigChannel+0x678>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_ADC_ConfigChannel+0x4ea>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a65      	ldr	r2, [pc, #404]	; (80024d0 <HAL_ADC_ConfigChannel+0x67c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x4ee>
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_ADC_ConfigChannel+0x680>)
 8002340:	e000      	b.n	8002344 <HAL_ADC_ConfigChannel+0x4f0>
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_ADC_ConfigChannel+0x684>)
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fa0f 	bl	8001768 <LL_ADC_GetCommonPathInternalCh>
 800234a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5e      	ldr	r2, [pc, #376]	; (80024cc <HAL_ADC_ConfigChannel+0x678>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_ADC_ConfigChannel+0x50c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a5d      	ldr	r2, [pc, #372]	; (80024d0 <HAL_ADC_ConfigChannel+0x67c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d10e      	bne.n	800237e <HAL_ADC_ConfigChannel+0x52a>
 8002360:	485a      	ldr	r0, [pc, #360]	; (80024cc <HAL_ADC_ConfigChannel+0x678>)
 8002362:	f7ff fb75 	bl	8001a50 <LL_ADC_IsEnabled>
 8002366:	4604      	mov	r4, r0
 8002368:	4859      	ldr	r0, [pc, #356]	; (80024d0 <HAL_ADC_ConfigChannel+0x67c>)
 800236a:	f7ff fb71 	bl	8001a50 <LL_ADC_IsEnabled>
 800236e:	4603      	mov	r3, r0
 8002370:	4323      	orrs	r3, r4
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf0c      	ite	eq
 8002376:	2301      	moveq	r3, #1
 8002378:	2300      	movne	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	e008      	b.n	8002390 <HAL_ADC_ConfigChannel+0x53c>
 800237e:	4857      	ldr	r0, [pc, #348]	; (80024dc <HAL_ADC_ConfigChannel+0x688>)
 8002380:	f7ff fb66 	bl	8001a50 <LL_ADC_IsEnabled>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d07d      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a51      	ldr	r2, [pc, #324]	; (80024e0 <HAL_ADC_ConfigChannel+0x68c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d130      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x5ac>
 800239e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d12b      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a4b      	ldr	r2, [pc, #300]	; (80024dc <HAL_ADC_ConfigChannel+0x688>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f040 8081 	bne.w	80024b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a44      	ldr	r2, [pc, #272]	; (80024cc <HAL_ADC_ConfigChannel+0x678>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_ConfigChannel+0x574>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a43      	ldr	r2, [pc, #268]	; (80024d0 <HAL_ADC_ConfigChannel+0x67c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x578>
 80023c8:	4a42      	ldr	r2, [pc, #264]	; (80024d4 <HAL_ADC_ConfigChannel+0x680>)
 80023ca:	e000      	b.n	80023ce <HAL_ADC_ConfigChannel+0x57a>
 80023cc:	4a42      	ldr	r2, [pc, #264]	; (80024d8 <HAL_ADC_ConfigChannel+0x684>)
 80023ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f7ff f9b3 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023dc:	4b41      	ldr	r3, [pc, #260]	; (80024e4 <HAL_ADC_ConfigChannel+0x690>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <HAL_ADC_ConfigChannel+0x694>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023f0:	e002      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f9      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023fe:	e05a      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a39      	ldr	r2, [pc, #228]	; (80024ec <HAL_ADC_ConfigChannel+0x698>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11e      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x5f4>
 800240a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d119      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a30      	ldr	r2, [pc, #192]	; (80024dc <HAL_ADC_ConfigChannel+0x688>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d14b      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <HAL_ADC_ConfigChannel+0x678>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_ADC_ConfigChannel+0x5de>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <HAL_ADC_ConfigChannel+0x67c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x5e2>
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_ADC_ConfigChannel+0x680>)
 8002434:	e000      	b.n	8002438 <HAL_ADC_ConfigChannel+0x5e4>
 8002436:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <HAL_ADC_ConfigChannel+0x684>)
 8002438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f7ff f97e 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002446:	e036      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <HAL_ADC_ConfigChannel+0x69c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d131      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
 8002452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d12c      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <HAL_ADC_ConfigChannel+0x688>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d127      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_ADC_ConfigChannel+0x678>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_ADC_ConfigChannel+0x626>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_ADC_ConfigChannel+0x67c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x62a>
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_ADC_ConfigChannel+0x680>)
 800247c:	e000      	b.n	8002480 <HAL_ADC_ConfigChannel+0x62c>
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_ADC_ConfigChannel+0x684>)
 8002480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002486:	4619      	mov	r1, r3
 8002488:	4610      	mov	r0, r2
 800248a:	f7ff f95a 	bl	8001742 <LL_ADC_SetCommonPathInternalCh>
 800248e:	e012      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80024a2:	e008      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3784      	adds	r7, #132	; 0x84
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40022100 	.word	0x40022100
 80024d4:	40022300 	.word	0x40022300
 80024d8:	58026300 	.word	0x58026300
 80024dc:	58026000 	.word	0x58026000
 80024e0:	cb840000 	.word	0xcb840000
 80024e4:	24000000 	.word	0x24000000
 80024e8:	053e2d63 	.word	0x053e2d63
 80024ec:	c7520000 	.word	0xc7520000
 80024f0:	cfb80000 	.word	0xcfb80000

080024f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff faa5 	bl	8001a50 <LL_ADC_IsEnabled>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d16e      	bne.n	80025ea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <ADC_Enable+0x100>)
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e05a      	b.n	80025ec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fa60 	bl	8001a00 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002540:	f7ff f8b0 	bl	80016a4 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <ADC_Enable+0x104>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d004      	beq.n	800255a <ADC_Enable+0x66>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a29      	ldr	r2, [pc, #164]	; (80025fc <ADC_Enable+0x108>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <ADC_Enable+0x6a>
 800255a:	4b29      	ldr	r3, [pc, #164]	; (8002600 <ADC_Enable+0x10c>)
 800255c:	e000      	b.n	8002560 <ADC_Enable+0x6c>
 800255e:	4b29      	ldr	r3, [pc, #164]	; (8002604 <ADC_Enable+0x110>)
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff f9f1 	bl	8001948 <LL_ADC_GetMultimode>
 8002566:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a23      	ldr	r2, [pc, #140]	; (80025fc <ADC_Enable+0x108>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d002      	beq.n	8002578 <ADC_Enable+0x84>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	e000      	b.n	800257a <ADC_Enable+0x86>
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <ADC_Enable+0x104>)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	4293      	cmp	r3, r2
 8002580:	d02c      	beq.n	80025dc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d130      	bne.n	80025ea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002588:	e028      	b.n	80025dc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fa5e 	bl	8001a50 <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fa2e 	bl	8001a00 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025a4:	f7ff f87e 	bl	80016a4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d914      	bls.n	80025dc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d00d      	beq.n	80025dc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	f043 0210 	orr.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f043 0201 	orr.w	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d1cf      	bne.n	800258a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	8000003f 	.word	0x8000003f
 80025f8:	40022000 	.word	0x40022000
 80025fc:	40022100 	.word	0x40022100
 8002600:	40022300 	.word	0x40022300
 8002604:	58026300 	.word	0x58026300

08002608 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fa2e 	bl	8001a76 <LL_ADC_IsDisableOngoing>
 800261a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fa15 	bl	8001a50 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d047      	beq.n	80026bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d144      	bne.n	80026bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030d 	and.w	r3, r3, #13
 800263c:	2b01      	cmp	r3, #1
 800263e:	d10c      	bne.n	800265a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f9ef 	bl	8001a28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2203      	movs	r2, #3
 8002650:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002652:	f7ff f827 	bl	80016a4 <HAL_GetTick>
 8002656:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002658:	e029      	b.n	80026ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e023      	b.n	80026be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002676:	f7ff f815 	bl	80016a4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d914      	bls.n	80026ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e007      	b.n	80026be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1dc      	bne.n	8002676 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d14b      	bne.n	8002778 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d021      	beq.n	800273e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f894 	bl	800182c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d032      	beq.n	8002770 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d12b      	bne.n	8002770 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11f      	bne.n	8002770 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
 800273c:	e018      	b.n	8002770 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0201 	orr.w	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7fe fbeb 	bl	8000f4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002776:	e00e      	b.n	8002796 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff fb5b 	bl	8001e40 <HAL_ADC_ErrorCallback>
}
 800278a:	e004      	b.n	8002796 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
}
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fb3d 	bl	8001e2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f043 0204 	orr.w	r2, r3, #4
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff fb2d 	bl	8001e40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7a      	ldr	r2, [pc, #488]	; (80029e8 <ADC_ConfigureBoostMode+0x1f8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <ADC_ConfigureBoostMode+0x1c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a79      	ldr	r2, [pc, #484]	; (80029ec <ADC_ConfigureBoostMode+0x1fc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d109      	bne.n	8002820 <ADC_ConfigureBoostMode+0x30>
 800280c:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <ADC_ConfigureBoostMode+0x200>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	e008      	b.n	8002832 <ADC_ConfigureBoostMode+0x42>
 8002820:	4b74      	ldr	r3, [pc, #464]	; (80029f4 <ADC_ConfigureBoostMode+0x204>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002828:	2b00      	cmp	r3, #0
 800282a:	bf14      	ite	ne
 800282c:	2301      	movne	r3, #1
 800282e:	2300      	moveq	r3, #0
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d01c      	beq.n	8002870 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002836:	f003 ff3d 	bl	80066b4 <HAL_RCC_GetHCLKFreq>
 800283a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002844:	d010      	beq.n	8002868 <ADC_ConfigureBoostMode+0x78>
 8002846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800284a:	d873      	bhi.n	8002934 <ADC_ConfigureBoostMode+0x144>
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d002      	beq.n	8002858 <ADC_ConfigureBoostMode+0x68>
 8002852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002856:	d16d      	bne.n	8002934 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	fbb2 f3f3 	udiv	r3, r2, r3
 8002864:	60fb      	str	r3, [r7, #12]
        break;
 8002866:	e068      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	60fb      	str	r3, [r7, #12]
        break;
 800286e:	e064      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002870:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	f005 f982 	bl	8007b80 <HAL_RCCEx_GetPeriphCLKFreq>
 800287c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002886:	d051      	beq.n	800292c <ADC_ConfigureBoostMode+0x13c>
 8002888:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800288c:	d854      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 800288e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002892:	d047      	beq.n	8002924 <ADC_ConfigureBoostMode+0x134>
 8002894:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002898:	d84e      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 800289a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800289e:	d03d      	beq.n	800291c <ADC_ConfigureBoostMode+0x12c>
 80028a0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80028a4:	d848      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 80028a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028aa:	d033      	beq.n	8002914 <ADC_ConfigureBoostMode+0x124>
 80028ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b0:	d842      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 80028b2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028b6:	d029      	beq.n	800290c <ADC_ConfigureBoostMode+0x11c>
 80028b8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80028bc:	d83c      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 80028be:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028c2:	d01a      	beq.n	80028fa <ADC_ConfigureBoostMode+0x10a>
 80028c4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80028c8:	d836      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 80028ca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028ce:	d014      	beq.n	80028fa <ADC_ConfigureBoostMode+0x10a>
 80028d0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80028d4:	d830      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 80028d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028da:	d00e      	beq.n	80028fa <ADC_ConfigureBoostMode+0x10a>
 80028dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e0:	d82a      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 80028e2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028e6:	d008      	beq.n	80028fa <ADC_ConfigureBoostMode+0x10a>
 80028e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028ec:	d824      	bhi.n	8002938 <ADC_ConfigureBoostMode+0x148>
 80028ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028f2:	d002      	beq.n	80028fa <ADC_ConfigureBoostMode+0x10a>
 80028f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028f8:	d11e      	bne.n	8002938 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0c9b      	lsrs	r3, r3, #18
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	60fb      	str	r3, [r7, #12]
        break;
 800290a:	e016      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	60fb      	str	r3, [r7, #12]
        break;
 8002912:	e012      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	60fb      	str	r3, [r7, #12]
        break;
 800291a:	e00e      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	60fb      	str	r3, [r7, #12]
        break;
 8002922:	e00a      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	09db      	lsrs	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
        break;
 800292a:	e006      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	60fb      	str	r3, [r7, #12]
        break;
 8002932:	e002      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
        break;
 8002934:	bf00      	nop
 8002936:	e000      	b.n	800293a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002938:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800293a:	f7fe fee3 	bl	8001704 <HAL_GetREVID>
 800293e:	4603      	mov	r3, r0
 8002940:	f241 0203 	movw	r2, #4099	; 0x1003
 8002944:	4293      	cmp	r3, r2
 8002946:	d815      	bhi.n	8002974 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <ADC_ConfigureBoostMode+0x208>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d908      	bls.n	8002962 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800295e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002960:	e03e      	b.n	80029e0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002970:	609a      	str	r2, [r3, #8]
}
 8002972:	e035      	b.n	80029e0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a1f      	ldr	r2, [pc, #124]	; (80029fc <ADC_ConfigureBoostMode+0x20c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d808      	bhi.n	8002994 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002990:	609a      	str	r2, [r3, #8]
}
 8002992:	e025      	b.n	80029e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <ADC_ConfigureBoostMode+0x210>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d80a      	bhi.n	80029b2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	e016      	b.n	80029e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <ADC_ConfigureBoostMode+0x214>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d80a      	bhi.n	80029d0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029cc:	609a      	str	r2, [r3, #8]
}
 80029ce:	e007      	b.n	80029e0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80029de:	609a      	str	r2, [r3, #8]
}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40022100 	.word	0x40022100
 80029f0:	40022300 	.word	0x40022300
 80029f4:	58026300 	.word	0x58026300
 80029f8:	01312d00 	.word	0x01312d00
 80029fc:	005f5e10 	.word	0x005f5e10
 8002a00:	00bebc20 	.word	0x00bebc20
 8002a04:	017d7840 	.word	0x017d7840

08002a08 <LL_ADC_IsEnabled>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <LL_ADC_IsEnabled+0x18>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <LL_ADC_IsEnabled+0x1a>
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <LL_ADC_StartCalibration>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <LL_ADC_StartCalibration+0x38>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a50:	430a      	orrs	r2, r1
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	3ffeffc0 	.word	0x3ffeffc0

08002a6c <LL_ADC_IsCalibrationOnGoing>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a80:	d101      	bne.n	8002a86 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_ADC_REG_StartConversion>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <LL_ADC_REG_StartConversion+0x24>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	f043 0204 	orr.w	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	7fffffc0 	.word	0x7fffffc0

08002abc <LL_ADC_REG_IsConversionOngoing>:
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d101      	bne.n	8002ad4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_ADCEx_Calibration_Start+0x1e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e04c      	b.n	8002b9c <HAL_ADCEx_Calibration_Start+0xb8>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f7ff fd7c 	bl	8002608 <ADC_Disable>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d135      	bne.n	8002b86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff7c 	bl	8002a30 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b38:	e014      	b.n	8002b64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d30d      	bcc.n	8002b64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f023 0312 	bic.w	r3, r3, #18
 8002b50:	f043 0210 	orr.w	r2, r3, #16
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e01b      	b.n	8002b9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff7f 	bl	8002a6c <LL_ADC_IsCalibrationOnGoing>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e2      	bne.n	8002b3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f023 0303 	bic.w	r3, r3, #3
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
 8002b84:	e005      	b.n	8002b92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	ffffeefd 	.word	0xffffeefd
 8002ba8:	25c3f800 	.word	0x25c3f800

08002bac <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b0a0      	sub	sp, #128	; 0x80
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff7d 	bl	8002abc <LL_ADC_REG_IsConversionOngoing>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e08a      	b.n	8002ce2 <HAL_ADCEx_MultiModeStart_DMA+0x136>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e083      	b.n	8002ce2 <HAL_ADCEx_MultiModeStart_DMA+0x136>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	66bb      	str	r3, [r7, #104]	; 0x68
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a3f      	ldr	r2, [pc, #252]	; (8002cec <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d102      	bne.n	8002bfa <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8002bf4:	4b3e      	ldr	r3, [pc, #248]	; (8002cf0 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e001      	b.n	8002bfe <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e062      	b.n	8002ce2 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff fc69 	bl	80024f4 <ADC_Enable>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (tmp_hal_status == HAL_OK)
 8002c28:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fc5d 	bl	80024f4 <ADC_Enable>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002c40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d146      	bne.n	8002cd6 <HAL_ADCEx_MultiModeStart_DMA+0x12a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c4c:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8002c64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8002c74:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_ADCEx_MultiModeStart_DMA+0x140>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1a      	ldr	r2, [pc, #104]	; (8002cf0 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002c8c:	e000      	b.n	8002c90 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002c90:	67bb      	str	r3, [r7, #120]	; 0x78
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	221c      	movs	r2, #28
 8002c98:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0210 	orr.w	r2, r2, #16
 8002cb0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cb8:	330c      	adds	r3, #12
 8002cba:	4619      	mov	r1, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f000 fda0 	bl	8003804 <HAL_DMA_Start_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fee0 	bl	8002a94 <LL_ADC_REG_StartConversion>
 8002cd4:	e003      	b.n	8002cde <HAL_ADCEx_MultiModeStart_DMA+0x132>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002cde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
  }
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3780      	adds	r7, #128	; 0x80
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40022000 	.word	0x40022000
 8002cf0:	40022100 	.word	0x40022100
 8002cf4:	fffff0fe 	.word	0xfffff0fe
 8002cf8:	080026c7 	.word	0x080026c7
 8002cfc:	0800279f 	.word	0x0800279f
 8002d00:	080027bb 	.word	0x080027bb
 8002d04:	40022300 	.word	0x40022300
 8002d08:	58026300 	.word	0x58026300

08002d0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b09f      	sub	sp, #124	; 0x7c
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e0be      	b.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002d32:	2300      	movs	r3, #0
 8002d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d102      	bne.n	8002d4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d44:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	e001      	b.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e09d      	b.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fea4 	bl	8002abc <LL_ADC_REG_IsConversionOngoing>
 8002d74:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fe9e 	bl	8002abc <LL_ADC_REG_IsConversionOngoing>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d17f      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d17c      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a47      	ldr	r2, [pc, #284]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a46      	ldr	r2, [pc, #280]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002da0:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002da2:	e000      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002da4:	4b45      	ldr	r3, [pc, #276]	; (8002ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002da6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d039      	beq.n	8002e24 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a38      	ldr	r2, [pc, #224]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10e      	bne.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002dd6:	4836      	ldr	r0, [pc, #216]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002dd8:	f7ff fe16 	bl	8002a08 <LL_ADC_IsEnabled>
 8002ddc:	4604      	mov	r4, r0
 8002dde:	4835      	ldr	r0, [pc, #212]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002de0:	f7ff fe12 	bl	8002a08 <LL_ADC_IsEnabled>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4323      	orrs	r3, r4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e008      	b.n	8002e06 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002df4:	4832      	ldr	r0, [pc, #200]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002df6:	f7ff fe07 	bl	8002a08 <LL_ADC_IsEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d047      	beq.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	6811      	ldr	r1, [r2, #0]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	6892      	ldr	r2, [r2, #8]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e20:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e22:	e03a      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d10e      	bne.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002e44:	481a      	ldr	r0, [pc, #104]	; (8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e46:	f7ff fddf 	bl	8002a08 <LL_ADC_IsEnabled>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4819      	ldr	r0, [pc, #100]	; (8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e4e:	f7ff fddb 	bl	8002a08 <LL_ADC_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4323      	orrs	r3, r4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	e008      	b.n	8002e74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e62:	4817      	ldr	r0, [pc, #92]	; (8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002e64:	f7ff fdd0 	bl	8002a08 <LL_ADC_IsEnabled>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf0c      	ite	eq
 8002e6e:	2301      	moveq	r3, #1
 8002e70:	2300      	movne	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d010      	beq.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e82:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e84:	e009      	b.n	8002e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f043 0220 	orr.w	r2, r3, #32
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002e98:	e000      	b.n	8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e9a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ea4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	377c      	adds	r7, #124	; 0x7c
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	40022000 	.word	0x40022000
 8002eb4:	40022100 	.word	0x40022100
 8002eb8:	40022300 	.word	0x40022300
 8002ebc:	58026300 	.word	0x58026300
 8002ec0:	58026000 	.word	0x58026000
 8002ec4:	fffff0e0 	.word	0xfffff0e0

08002ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	05fa0000 	.word	0x05fa0000

08002f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <__NVIC_GetPriorityGrouping+0x18>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0307 	and.w	r3, r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db0b      	blt.n	8002f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <__NVIC_EnableIRQ+0x38>)
 8002f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100

08002f68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db12      	blt.n	8002fa0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	490a      	ldr	r1, [pc, #40]	; (8002fac <__NVIC_DisableIRQ+0x44>)
 8002f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2001      	movs	r0, #1
 8002f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f8e:	3320      	adds	r3, #32
 8002f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f94:	f3bf 8f4f 	dsb	sy
}
 8002f98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f9a:	f3bf 8f6f 	isb	sy
}
 8002f9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100

08002fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	6039      	str	r1, [r7, #0]
 8002fba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	db0a      	blt.n	8002fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	490c      	ldr	r1, [pc, #48]	; (8002ffc <__NVIC_SetPriority+0x4c>)
 8002fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fd8:	e00a      	b.n	8002ff0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	4908      	ldr	r1, [pc, #32]	; (8003000 <__NVIC_SetPriority+0x50>)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	3b04      	subs	r3, #4
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	440b      	add	r3, r1
 8002fee:	761a      	strb	r2, [r3, #24]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000e100 	.word	0xe000e100
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003004:	b480      	push	{r7}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f1c3 0307 	rsb	r3, r3, #7
 800301e:	2b04      	cmp	r3, #4
 8003020:	bf28      	it	cs
 8003022:	2304      	movcs	r3, #4
 8003024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3304      	adds	r3, #4
 800302a:	2b06      	cmp	r3, #6
 800302c:	d902      	bls.n	8003034 <NVIC_EncodePriority+0x30>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3b03      	subs	r3, #3
 8003032:	e000      	b.n	8003036 <NVIC_EncodePriority+0x32>
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800304c:	f04f 31ff 	mov.w	r1, #4294967295
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	43d9      	mvns	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	4313      	orrs	r3, r2
         );
}
 800305e:	4618      	mov	r0, r3
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3b01      	subs	r3, #1
 8003078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800307c:	d301      	bcc.n	8003082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800307e:	2301      	movs	r3, #1
 8003080:	e00f      	b.n	80030a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003082:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <SysTick_Config+0x40>)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3b01      	subs	r3, #1
 8003088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308a:	210f      	movs	r1, #15
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	f7ff ff8e 	bl	8002fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <SysTick_Config+0x40>)
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <SysTick_Config+0x40>)
 800309c:	2207      	movs	r2, #7
 800309e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	e000e010 	.word	0xe000e010

080030b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff05 	bl	8002ec8 <__NVIC_SetPriorityGrouping>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030d4:	f7ff ff1c 	bl	8002f10 <__NVIC_GetPriorityGrouping>
 80030d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f7ff ff90 	bl	8003004 <NVIC_EncodePriority>
 80030e4:	4602      	mov	r2, r0
 80030e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff5f 	bl	8002fb0 <__NVIC_SetPriority>
}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	4603      	mov	r3, r0
 8003102:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003104:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff0f 	bl	8002f2c <__NVIC_EnableIRQ>
}
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff1f 	bl	8002f68 <__NVIC_DisableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ff96 	bl	800306c <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7fe faa6 	bl	80016a4 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e316      	b.n	8003792 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a66      	ldr	r2, [pc, #408]	; (8003304 <HAL_DMA_Init+0x1b8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04a      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a65      	ldr	r2, [pc, #404]	; (8003308 <HAL_DMA_Init+0x1bc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d045      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a63      	ldr	r2, [pc, #396]	; (800330c <HAL_DMA_Init+0x1c0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d040      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a62      	ldr	r2, [pc, #392]	; (8003310 <HAL_DMA_Init+0x1c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d03b      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a60      	ldr	r2, [pc, #384]	; (8003314 <HAL_DMA_Init+0x1c8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d036      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a5f      	ldr	r2, [pc, #380]	; (8003318 <HAL_DMA_Init+0x1cc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d031      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5d      	ldr	r2, [pc, #372]	; (800331c <HAL_DMA_Init+0x1d0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02c      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <HAL_DMA_Init+0x1d4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d027      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5a      	ldr	r2, [pc, #360]	; (8003324 <HAL_DMA_Init+0x1d8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d022      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a59      	ldr	r2, [pc, #356]	; (8003328 <HAL_DMA_Init+0x1dc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d01d      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a57      	ldr	r2, [pc, #348]	; (800332c <HAL_DMA_Init+0x1e0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d018      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a56      	ldr	r2, [pc, #344]	; (8003330 <HAL_DMA_Init+0x1e4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a54      	ldr	r2, [pc, #336]	; (8003334 <HAL_DMA_Init+0x1e8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00e      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a53      	ldr	r2, [pc, #332]	; (8003338 <HAL_DMA_Init+0x1ec>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d009      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a51      	ldr	r2, [pc, #324]	; (800333c <HAL_DMA_Init+0x1f0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d004      	beq.n	8003204 <HAL_DMA_Init+0xb8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a50      	ldr	r2, [pc, #320]	; (8003340 <HAL_DMA_Init+0x1f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d101      	bne.n	8003208 <HAL_DMA_Init+0xbc>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <HAL_DMA_Init+0xbe>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 813b 	beq.w	8003486 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a37      	ldr	r2, [pc, #220]	; (8003304 <HAL_DMA_Init+0x1b8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a36      	ldr	r2, [pc, #216]	; (8003308 <HAL_DMA_Init+0x1bc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a34      	ldr	r2, [pc, #208]	; (800330c <HAL_DMA_Init+0x1c0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a33      	ldr	r2, [pc, #204]	; (8003310 <HAL_DMA_Init+0x1c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_DMA_Init+0x1c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a30      	ldr	r2, [pc, #192]	; (8003318 <HAL_DMA_Init+0x1cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a2e      	ldr	r2, [pc, #184]	; (800331c <HAL_DMA_Init+0x1d0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <HAL_DMA_Init+0x1d4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <HAL_DMA_Init+0x1d8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <HAL_DMA_Init+0x1dc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <HAL_DMA_Init+0x1e0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_DMA_Init+0x1e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <HAL_DMA_Init+0x1e8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a24      	ldr	r2, [pc, #144]	; (8003338 <HAL_DMA_Init+0x1ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <HAL_DMA_Init+0x1f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Init+0x174>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_DMA_Init+0x1f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d108      	bne.n	80032d2 <HAL_DMA_Init+0x186>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e007      	b.n	80032e2 <HAL_DMA_Init+0x196>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032e2:	e02f      	b.n	8003344 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032e4:	f7fe f9de 	bl	80016a4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d928      	bls.n	8003344 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2203      	movs	r2, #3
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e246      	b.n	8003792 <HAL_DMA_Init+0x646>
 8003304:	40020010 	.word	0x40020010
 8003308:	40020028 	.word	0x40020028
 800330c:	40020040 	.word	0x40020040
 8003310:	40020058 	.word	0x40020058
 8003314:	40020070 	.word	0x40020070
 8003318:	40020088 	.word	0x40020088
 800331c:	400200a0 	.word	0x400200a0
 8003320:	400200b8 	.word	0x400200b8
 8003324:	40020410 	.word	0x40020410
 8003328:	40020428 	.word	0x40020428
 800332c:	40020440 	.word	0x40020440
 8003330:	40020458 	.word	0x40020458
 8003334:	40020470 	.word	0x40020470
 8003338:	40020488 	.word	0x40020488
 800333c:	400204a0 	.word	0x400204a0
 8003340:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1c8      	bne.n	80032e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4b83      	ldr	r3, [pc, #524]	; (800356c <HAL_DMA_Init+0x420>)
 800335e:	4013      	ands	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800336a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003376:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003382:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b04      	cmp	r3, #4
 8003396:	d107      	bne.n	80033a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4313      	orrs	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033a8:	4b71      	ldr	r3, [pc, #452]	; (8003570 <HAL_DMA_Init+0x424>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_DMA_Init+0x428>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b4:	d328      	bcc.n	8003408 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b28      	cmp	r3, #40	; 0x28
 80033bc:	d903      	bls.n	80033c6 <HAL_DMA_Init+0x27a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b2e      	cmp	r3, #46	; 0x2e
 80033c4:	d917      	bls.n	80033f6 <HAL_DMA_Init+0x2aa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b3e      	cmp	r3, #62	; 0x3e
 80033cc:	d903      	bls.n	80033d6 <HAL_DMA_Init+0x28a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b42      	cmp	r3, #66	; 0x42
 80033d4:	d90f      	bls.n	80033f6 <HAL_DMA_Init+0x2aa>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b46      	cmp	r3, #70	; 0x46
 80033dc:	d903      	bls.n	80033e6 <HAL_DMA_Init+0x29a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b48      	cmp	r3, #72	; 0x48
 80033e4:	d907      	bls.n	80033f6 <HAL_DMA_Init+0x2aa>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2b4e      	cmp	r3, #78	; 0x4e
 80033ec:	d905      	bls.n	80033fa <HAL_DMA_Init+0x2ae>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b52      	cmp	r3, #82	; 0x52
 80033f4:	d801      	bhi.n	80033fa <HAL_DMA_Init+0x2ae>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_DMA_Init+0x2b0>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003406:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 0307 	bic.w	r3, r3, #7
 800341e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b04      	cmp	r3, #4
 8003430:	d117      	bne.n	8003462 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00e      	beq.n	8003462 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f001 fdcf 	bl	8004fe8 <DMA_CheckFifoParam>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2240      	movs	r2, #64	; 0x40
 8003454:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e197      	b.n	8003792 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f001 fd0a 	bl	8004e84 <DMA_CalcBaseAndBitshift>
 8003470:	4603      	mov	r3, r0
 8003472:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	409a      	lsls	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e0cd      	b.n	8003622 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3b      	ldr	r2, [pc, #236]	; (8003578 <HAL_DMA_Init+0x42c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_DMA_Init+0x38a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a39      	ldr	r2, [pc, #228]	; (800357c <HAL_DMA_Init+0x430>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01d      	beq.n	80034d6 <HAL_DMA_Init+0x38a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a38      	ldr	r2, [pc, #224]	; (8003580 <HAL_DMA_Init+0x434>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_DMA_Init+0x38a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a36      	ldr	r2, [pc, #216]	; (8003584 <HAL_DMA_Init+0x438>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_DMA_Init+0x38a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a35      	ldr	r2, [pc, #212]	; (8003588 <HAL_DMA_Init+0x43c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_DMA_Init+0x38a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a33      	ldr	r2, [pc, #204]	; (800358c <HAL_DMA_Init+0x440>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_DMA_Init+0x38a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a32      	ldr	r2, [pc, #200]	; (8003590 <HAL_DMA_Init+0x444>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_DMA_Init+0x38a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a30      	ldr	r2, [pc, #192]	; (8003594 <HAL_DMA_Init+0x448>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_DMA_Init+0x38e>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_DMA_Init+0x390>
 80034da:	2300      	movs	r3, #0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8097 	beq.w	8003610 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a24      	ldr	r2, [pc, #144]	; (8003578 <HAL_DMA_Init+0x42c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d021      	beq.n	8003530 <HAL_DMA_Init+0x3e4>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <HAL_DMA_Init+0x430>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01c      	beq.n	8003530 <HAL_DMA_Init+0x3e4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a21      	ldr	r2, [pc, #132]	; (8003580 <HAL_DMA_Init+0x434>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d017      	beq.n	8003530 <HAL_DMA_Init+0x3e4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <HAL_DMA_Init+0x438>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d012      	beq.n	8003530 <HAL_DMA_Init+0x3e4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_DMA_Init+0x43c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00d      	beq.n	8003530 <HAL_DMA_Init+0x3e4>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_DMA_Init+0x440>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d008      	beq.n	8003530 <HAL_DMA_Init+0x3e4>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_DMA_Init+0x444>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <HAL_DMA_Init+0x3e4>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_DMA_Init+0x448>)
 800352e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <HAL_DMA_Init+0x44c>)
 800354c:	4013      	ands	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b40      	cmp	r3, #64	; 0x40
 8003556:	d021      	beq.n	800359c <HAL_DMA_Init+0x450>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d102      	bne.n	8003566 <HAL_DMA_Init+0x41a>
 8003560:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003564:	e01b      	b.n	800359e <HAL_DMA_Init+0x452>
 8003566:	2300      	movs	r3, #0
 8003568:	e019      	b.n	800359e <HAL_DMA_Init+0x452>
 800356a:	bf00      	nop
 800356c:	fe10803f 	.word	0xfe10803f
 8003570:	5c001000 	.word	0x5c001000
 8003574:	ffff0000 	.word	0xffff0000
 8003578:	58025408 	.word	0x58025408
 800357c:	5802541c 	.word	0x5802541c
 8003580:	58025430 	.word	0x58025430
 8003584:	58025444 	.word	0x58025444
 8003588:	58025458 	.word	0x58025458
 800358c:	5802546c 	.word	0x5802546c
 8003590:	58025480 	.word	0x58025480
 8003594:	58025494 	.word	0x58025494
 8003598:	fffe000f 	.word	0xfffe000f
 800359c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68d2      	ldr	r2, [r2, #12]
 80035a2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035cc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b6e      	ldr	r3, [pc, #440]	; (800379c <HAL_DMA_Init+0x650>)
 80035e4:	4413      	add	r3, r2
 80035e6:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_DMA_Init+0x654>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	009a      	lsls	r2, r3, #2
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f001 fc45 	bl	8004e84 <DMA_CalcBaseAndBitshift>
 80035fa:	4603      	mov	r3, r0
 80035fc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2201      	movs	r2, #1
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e008      	b.n	8003622 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2203      	movs	r2, #3
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0b7      	b.n	8003792 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5f      	ldr	r2, [pc, #380]	; (80037a4 <HAL_DMA_Init+0x658>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d072      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <HAL_DMA_Init+0x65c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d06d      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5c      	ldr	r2, [pc, #368]	; (80037ac <HAL_DMA_Init+0x660>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d068      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a5a      	ldr	r2, [pc, #360]	; (80037b0 <HAL_DMA_Init+0x664>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d063      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a59      	ldr	r2, [pc, #356]	; (80037b4 <HAL_DMA_Init+0x668>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d05e      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a57      	ldr	r2, [pc, #348]	; (80037b8 <HAL_DMA_Init+0x66c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d059      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a56      	ldr	r2, [pc, #344]	; (80037bc <HAL_DMA_Init+0x670>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d054      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a54      	ldr	r2, [pc, #336]	; (80037c0 <HAL_DMA_Init+0x674>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04f      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a53      	ldr	r2, [pc, #332]	; (80037c4 <HAL_DMA_Init+0x678>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04a      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_DMA_Init+0x67c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d045      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_DMA_Init+0x680>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d040      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a4e      	ldr	r2, [pc, #312]	; (80037d0 <HAL_DMA_Init+0x684>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d03b      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a4d      	ldr	r2, [pc, #308]	; (80037d4 <HAL_DMA_Init+0x688>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d036      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a4b      	ldr	r2, [pc, #300]	; (80037d8 <HAL_DMA_Init+0x68c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d031      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_DMA_Init+0x690>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d02c      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a48      	ldr	r2, [pc, #288]	; (80037e0 <HAL_DMA_Init+0x694>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d027      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a47      	ldr	r2, [pc, #284]	; (80037e4 <HAL_DMA_Init+0x698>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a45      	ldr	r2, [pc, #276]	; (80037e8 <HAL_DMA_Init+0x69c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d01d      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a44      	ldr	r2, [pc, #272]	; (80037ec <HAL_DMA_Init+0x6a0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d018      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a42      	ldr	r2, [pc, #264]	; (80037f0 <HAL_DMA_Init+0x6a4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a41      	ldr	r2, [pc, #260]	; (80037f4 <HAL_DMA_Init+0x6a8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a3f      	ldr	r2, [pc, #252]	; (80037f8 <HAL_DMA_Init+0x6ac>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a3e      	ldr	r2, [pc, #248]	; (80037fc <HAL_DMA_Init+0x6b0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d004      	beq.n	8003712 <HAL_DMA_Init+0x5c6>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <HAL_DMA_Init+0x6b4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Init+0x5ca>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_DMA_Init+0x5cc>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d032      	beq.n	8003782 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f001 fcdf 	bl	80050e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d102      	bne.n	8003730 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003744:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_DMA_Init+0x624>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b08      	cmp	r3, #8
 8003754:	d80c      	bhi.n	8003770 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f001 fd5c 	bl	8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e008      	b.n	8003782 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	a7fdabf8 	.word	0xa7fdabf8
 80037a0:	cccccccd 	.word	0xcccccccd
 80037a4:	40020010 	.word	0x40020010
 80037a8:	40020028 	.word	0x40020028
 80037ac:	40020040 	.word	0x40020040
 80037b0:	40020058 	.word	0x40020058
 80037b4:	40020070 	.word	0x40020070
 80037b8:	40020088 	.word	0x40020088
 80037bc:	400200a0 	.word	0x400200a0
 80037c0:	400200b8 	.word	0x400200b8
 80037c4:	40020410 	.word	0x40020410
 80037c8:	40020428 	.word	0x40020428
 80037cc:	40020440 	.word	0x40020440
 80037d0:	40020458 	.word	0x40020458
 80037d4:	40020470 	.word	0x40020470
 80037d8:	40020488 	.word	0x40020488
 80037dc:	400204a0 	.word	0x400204a0
 80037e0:	400204b8 	.word	0x400204b8
 80037e4:	58025408 	.word	0x58025408
 80037e8:	5802541c 	.word	0x5802541c
 80037ec:	58025430 	.word	0x58025430
 80037f0:	58025444 	.word	0x58025444
 80037f4:	58025458 	.word	0x58025458
 80037f8:	5802546c 	.word	0x5802546c
 80037fc:	58025480 	.word	0x58025480
 8003800:	58025494 	.word	0x58025494

08003804 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e226      	b.n	8003c6e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_DMA_Start_IT+0x2a>
 800382a:	2302      	movs	r3, #2
 800382c:	e21f      	b.n	8003c6e <HAL_DMA_Start_IT+0x46a>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 820a 	bne.w	8003c58 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a68      	ldr	r2, [pc, #416]	; (80039f8 <HAL_DMA_Start_IT+0x1f4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a66      	ldr	r2, [pc, #408]	; (80039fc <HAL_DMA_Start_IT+0x1f8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_DMA_Start_IT+0x1fc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a63      	ldr	r2, [pc, #396]	; (8003a04 <HAL_DMA_Start_IT+0x200>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a62      	ldr	r2, [pc, #392]	; (8003a08 <HAL_DMA_Start_IT+0x204>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a60      	ldr	r2, [pc, #384]	; (8003a0c <HAL_DMA_Start_IT+0x208>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5f      	ldr	r2, [pc, #380]	; (8003a10 <HAL_DMA_Start_IT+0x20c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a5d      	ldr	r2, [pc, #372]	; (8003a14 <HAL_DMA_Start_IT+0x210>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a5c      	ldr	r2, [pc, #368]	; (8003a18 <HAL_DMA_Start_IT+0x214>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5a      	ldr	r2, [pc, #360]	; (8003a1c <HAL_DMA_Start_IT+0x218>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a59      	ldr	r2, [pc, #356]	; (8003a20 <HAL_DMA_Start_IT+0x21c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <HAL_DMA_Start_IT+0x220>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a56      	ldr	r2, [pc, #344]	; (8003a28 <HAL_DMA_Start_IT+0x224>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a54      	ldr	r2, [pc, #336]	; (8003a2c <HAL_DMA_Start_IT+0x228>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a53      	ldr	r2, [pc, #332]	; (8003a30 <HAL_DMA_Start_IT+0x22c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_Start_IT+0xee>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a51      	ldr	r2, [pc, #324]	; (8003a34 <HAL_DMA_Start_IT+0x230>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <HAL_DMA_Start_IT+0x100>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e007      	b.n	8003914 <HAL_DMA_Start_IT+0x110>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f001 f906 	bl	8004b2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <HAL_DMA_Start_IT+0x1f4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04a      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a33      	ldr	r2, [pc, #204]	; (80039fc <HAL_DMA_Start_IT+0x1f8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d045      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a31      	ldr	r2, [pc, #196]	; (8003a00 <HAL_DMA_Start_IT+0x1fc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d040      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <HAL_DMA_Start_IT+0x200>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d03b      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <HAL_DMA_Start_IT+0x204>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <HAL_DMA_Start_IT+0x208>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <HAL_DMA_Start_IT+0x20c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02c      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <HAL_DMA_Start_IT+0x210>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d027      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <HAL_DMA_Start_IT+0x214>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <HAL_DMA_Start_IT+0x218>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <HAL_DMA_Start_IT+0x21c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a24      	ldr	r2, [pc, #144]	; (8003a24 <HAL_DMA_Start_IT+0x220>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <HAL_DMA_Start_IT+0x224>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_DMA_Start_IT+0x228>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_DMA_Start_IT+0x22c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Start_IT+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_DMA_Start_IT+0x230>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_Start_IT+0x1c0>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_DMA_Start_IT+0x1c2>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d036      	beq.n	8003a38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 021e 	bic.w	r2, r3, #30
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0216 	orr.w	r2, r2, #22
 80039dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d03e      	beq.n	8003a64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0208 	orr.w	r2, r2, #8
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e035      	b.n	8003a64 <HAL_DMA_Start_IT+0x260>
 80039f8:	40020010 	.word	0x40020010
 80039fc:	40020028 	.word	0x40020028
 8003a00:	40020040 	.word	0x40020040
 8003a04:	40020058 	.word	0x40020058
 8003a08:	40020070 	.word	0x40020070
 8003a0c:	40020088 	.word	0x40020088
 8003a10:	400200a0 	.word	0x400200a0
 8003a14:	400200b8 	.word	0x400200b8
 8003a18:	40020410 	.word	0x40020410
 8003a1c:	40020428 	.word	0x40020428
 8003a20:	40020440 	.word	0x40020440
 8003a24:	40020458 	.word	0x40020458
 8003a28:	40020470 	.word	0x40020470
 8003a2c:	40020488 	.word	0x40020488
 8003a30:	400204a0 	.word	0x400204a0
 8003a34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 020e 	bic.w	r2, r3, #14
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 020a 	orr.w	r2, r2, #10
 8003a4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d007      	beq.n	8003a64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0204 	orr.w	r2, r2, #4
 8003a62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a83      	ldr	r2, [pc, #524]	; (8003c78 <HAL_DMA_Start_IT+0x474>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d072      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a82      	ldr	r2, [pc, #520]	; (8003c7c <HAL_DMA_Start_IT+0x478>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d06d      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a80      	ldr	r2, [pc, #512]	; (8003c80 <HAL_DMA_Start_IT+0x47c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d068      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7f      	ldr	r2, [pc, #508]	; (8003c84 <HAL_DMA_Start_IT+0x480>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d063      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7d      	ldr	r2, [pc, #500]	; (8003c88 <HAL_DMA_Start_IT+0x484>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d05e      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7c      	ldr	r2, [pc, #496]	; (8003c8c <HAL_DMA_Start_IT+0x488>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d059      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a7a      	ldr	r2, [pc, #488]	; (8003c90 <HAL_DMA_Start_IT+0x48c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d054      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a79      	ldr	r2, [pc, #484]	; (8003c94 <HAL_DMA_Start_IT+0x490>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04f      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a77      	ldr	r2, [pc, #476]	; (8003c98 <HAL_DMA_Start_IT+0x494>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04a      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a76      	ldr	r2, [pc, #472]	; (8003c9c <HAL_DMA_Start_IT+0x498>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d045      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a74      	ldr	r2, [pc, #464]	; (8003ca0 <HAL_DMA_Start_IT+0x49c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d040      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a73      	ldr	r2, [pc, #460]	; (8003ca4 <HAL_DMA_Start_IT+0x4a0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d03b      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a71      	ldr	r2, [pc, #452]	; (8003ca8 <HAL_DMA_Start_IT+0x4a4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d036      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a70      	ldr	r2, [pc, #448]	; (8003cac <HAL_DMA_Start_IT+0x4a8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d031      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a6e      	ldr	r2, [pc, #440]	; (8003cb0 <HAL_DMA_Start_IT+0x4ac>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02c      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6d      	ldr	r2, [pc, #436]	; (8003cb4 <HAL_DMA_Start_IT+0x4b0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d027      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a6b      	ldr	r2, [pc, #428]	; (8003cb8 <HAL_DMA_Start_IT+0x4b4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6a      	ldr	r2, [pc, #424]	; (8003cbc <HAL_DMA_Start_IT+0x4b8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01d      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a68      	ldr	r2, [pc, #416]	; (8003cc0 <HAL_DMA_Start_IT+0x4bc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a67      	ldr	r2, [pc, #412]	; (8003cc4 <HAL_DMA_Start_IT+0x4c0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a65      	ldr	r2, [pc, #404]	; (8003cc8 <HAL_DMA_Start_IT+0x4c4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a64      	ldr	r2, [pc, #400]	; (8003ccc <HAL_DMA_Start_IT+0x4c8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a62      	ldr	r2, [pc, #392]	; (8003cd0 <HAL_DMA_Start_IT+0x4cc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_DMA_Start_IT+0x350>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a61      	ldr	r2, [pc, #388]	; (8003cd4 <HAL_DMA_Start_IT+0x4d0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_DMA_Start_IT+0x354>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_DMA_Start_IT+0x356>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01a      	beq.n	8003b94 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b7a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b92:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a37      	ldr	r2, [pc, #220]	; (8003c78 <HAL_DMA_Start_IT+0x474>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d04a      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a36      	ldr	r2, [pc, #216]	; (8003c7c <HAL_DMA_Start_IT+0x478>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d045      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a34      	ldr	r2, [pc, #208]	; (8003c80 <HAL_DMA_Start_IT+0x47c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d040      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <HAL_DMA_Start_IT+0x480>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d03b      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <HAL_DMA_Start_IT+0x484>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d036      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <HAL_DMA_Start_IT+0x488>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d031      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2e      	ldr	r2, [pc, #184]	; (8003c90 <HAL_DMA_Start_IT+0x48c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02c      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <HAL_DMA_Start_IT+0x490>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d027      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2b      	ldr	r2, [pc, #172]	; (8003c98 <HAL_DMA_Start_IT+0x494>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d022      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2a      	ldr	r2, [pc, #168]	; (8003c9c <HAL_DMA_Start_IT+0x498>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01d      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a28      	ldr	r2, [pc, #160]	; (8003ca0 <HAL_DMA_Start_IT+0x49c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <HAL_DMA_Start_IT+0x4a0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <HAL_DMA_Start_IT+0x4a4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a24      	ldr	r2, [pc, #144]	; (8003cac <HAL_DMA_Start_IT+0x4a8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <HAL_DMA_Start_IT+0x4ac>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_Start_IT+0x430>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <HAL_DMA_Start_IT+0x4b0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d108      	bne.n	8003c46 <HAL_DMA_Start_IT+0x442>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	e012      	b.n	8003c6c <HAL_DMA_Start_IT+0x468>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0201 	orr.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e009      	b.n	8003c6c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	40020028 	.word	0x40020028
 8003c80:	40020040 	.word	0x40020040
 8003c84:	40020058 	.word	0x40020058
 8003c88:	40020070 	.word	0x40020070
 8003c8c:	40020088 	.word	0x40020088
 8003c90:	400200a0 	.word	0x400200a0
 8003c94:	400200b8 	.word	0x400200b8
 8003c98:	40020410 	.word	0x40020410
 8003c9c:	40020428 	.word	0x40020428
 8003ca0:	40020440 	.word	0x40020440
 8003ca4:	40020458 	.word	0x40020458
 8003ca8:	40020470 	.word	0x40020470
 8003cac:	40020488 	.word	0x40020488
 8003cb0:	400204a0 	.word	0x400204a0
 8003cb4:	400204b8 	.word	0x400204b8
 8003cb8:	58025408 	.word	0x58025408
 8003cbc:	5802541c 	.word	0x5802541c
 8003cc0:	58025430 	.word	0x58025430
 8003cc4:	58025444 	.word	0x58025444
 8003cc8:	58025458 	.word	0x58025458
 8003ccc:	5802546c 	.word	0x5802546c
 8003cd0:	58025480 	.word	0x58025480
 8003cd4:	58025494 	.word	0x58025494

08003cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ce4:	4b67      	ldr	r3, [pc, #412]	; (8003e84 <HAL_DMA_IRQHandler+0x1ac>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a67      	ldr	r2, [pc, #412]	; (8003e88 <HAL_DMA_IRQHandler+0x1b0>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0a9b      	lsrs	r3, r3, #10
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5f      	ldr	r2, [pc, #380]	; (8003e8c <HAL_DMA_IRQHandler+0x1b4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d04a      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_DMA_IRQHandler+0x1b8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d045      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a5c      	ldr	r2, [pc, #368]	; (8003e94 <HAL_DMA_IRQHandler+0x1bc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d040      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a5a      	ldr	r2, [pc, #360]	; (8003e98 <HAL_DMA_IRQHandler+0x1c0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d03b      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a59      	ldr	r2, [pc, #356]	; (8003e9c <HAL_DMA_IRQHandler+0x1c4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d036      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a57      	ldr	r2, [pc, #348]	; (8003ea0 <HAL_DMA_IRQHandler+0x1c8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d031      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a56      	ldr	r2, [pc, #344]	; (8003ea4 <HAL_DMA_IRQHandler+0x1cc>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d02c      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a54      	ldr	r2, [pc, #336]	; (8003ea8 <HAL_DMA_IRQHandler+0x1d0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d027      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a53      	ldr	r2, [pc, #332]	; (8003eac <HAL_DMA_IRQHandler+0x1d4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a51      	ldr	r2, [pc, #324]	; (8003eb0 <HAL_DMA_IRQHandler+0x1d8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01d      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a50      	ldr	r2, [pc, #320]	; (8003eb4 <HAL_DMA_IRQHandler+0x1dc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <HAL_DMA_IRQHandler+0x1e0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a4d      	ldr	r2, [pc, #308]	; (8003ebc <HAL_DMA_IRQHandler+0x1e4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00e      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <HAL_DMA_IRQHandler+0x1e8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_DMA_IRQHandler+0x1ec>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d004      	beq.n	8003daa <HAL_DMA_IRQHandler+0xd2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a48      	ldr	r2, [pc, #288]	; (8003ec8 <HAL_DMA_IRQHandler+0x1f0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_DMA_IRQHandler+0xd6>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_DMA_IRQHandler+0xd8>
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 842b 	beq.w	800460c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80a2 	beq.w	8003f10 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <HAL_DMA_IRQHandler+0x1b4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d04a      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2d      	ldr	r2, [pc, #180]	; (8003e90 <HAL_DMA_IRQHandler+0x1b8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d045      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <HAL_DMA_IRQHandler+0x1bc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d040      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <HAL_DMA_IRQHandler+0x1c0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d03b      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <HAL_DMA_IRQHandler+0x1c4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d036      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <HAL_DMA_IRQHandler+0x1c8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d031      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_DMA_IRQHandler+0x1cc>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02c      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a24      	ldr	r2, [pc, #144]	; (8003ea8 <HAL_DMA_IRQHandler+0x1d0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d027      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	; (8003eac <HAL_DMA_IRQHandler+0x1d4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d022      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a21      	ldr	r2, [pc, #132]	; (8003eb0 <HAL_DMA_IRQHandler+0x1d8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d01d      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1f      	ldr	r2, [pc, #124]	; (8003eb4 <HAL_DMA_IRQHandler+0x1dc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d018      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <HAL_DMA_IRQHandler+0x1e0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_DMA_IRQHandler+0x1e4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00e      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_DMA_IRQHandler+0x1e8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <HAL_DMA_IRQHandler+0x1ec>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d004      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x194>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_DMA_IRQHandler+0x1f0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d12f      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x1f4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	bf14      	ite	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	2300      	moveq	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	e02e      	b.n	8003ee0 <HAL_DMA_IRQHandler+0x208>
 8003e82:	bf00      	nop
 8003e84:	24000000 	.word	0x24000000
 8003e88:	1b4e81b5 	.word	0x1b4e81b5
 8003e8c:	40020010 	.word	0x40020010
 8003e90:	40020028 	.word	0x40020028
 8003e94:	40020040 	.word	0x40020040
 8003e98:	40020058 	.word	0x40020058
 8003e9c:	40020070 	.word	0x40020070
 8003ea0:	40020088 	.word	0x40020088
 8003ea4:	400200a0 	.word	0x400200a0
 8003ea8:	400200b8 	.word	0x400200b8
 8003eac:	40020410 	.word	0x40020410
 8003eb0:	40020428 	.word	0x40020428
 8003eb4:	40020440 	.word	0x40020440
 8003eb8:	40020458 	.word	0x40020458
 8003ebc:	40020470 	.word	0x40020470
 8003ec0:	40020488 	.word	0x40020488
 8003ec4:	400204a0 	.word	0x400204a0
 8003ec8:	400204b8 	.word	0x400204b8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf14      	ite	ne
 8003eda:	2301      	movne	r3, #1
 8003edc:	2300      	moveq	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d015      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0204 	bic.w	r2, r2, #4
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2208      	movs	r2, #8
 8003efe:	409a      	lsls	r2, r3
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	f043 0201 	orr.w	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d06e      	beq.n	8004004 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a69      	ldr	r2, [pc, #420]	; (80040d0 <HAL_DMA_IRQHandler+0x3f8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d04a      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <HAL_DMA_IRQHandler+0x3fc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d045      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a66      	ldr	r2, [pc, #408]	; (80040d8 <HAL_DMA_IRQHandler+0x400>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d040      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a64      	ldr	r2, [pc, #400]	; (80040dc <HAL_DMA_IRQHandler+0x404>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d03b      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a63      	ldr	r2, [pc, #396]	; (80040e0 <HAL_DMA_IRQHandler+0x408>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d036      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a61      	ldr	r2, [pc, #388]	; (80040e4 <HAL_DMA_IRQHandler+0x40c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d031      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a60      	ldr	r2, [pc, #384]	; (80040e8 <HAL_DMA_IRQHandler+0x410>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d02c      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a5e      	ldr	r2, [pc, #376]	; (80040ec <HAL_DMA_IRQHandler+0x414>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d027      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5d      	ldr	r2, [pc, #372]	; (80040f0 <HAL_DMA_IRQHandler+0x418>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d022      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a5b      	ldr	r2, [pc, #364]	; (80040f4 <HAL_DMA_IRQHandler+0x41c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01d      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5a      	ldr	r2, [pc, #360]	; (80040f8 <HAL_DMA_IRQHandler+0x420>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d018      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a58      	ldr	r2, [pc, #352]	; (80040fc <HAL_DMA_IRQHandler+0x424>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d013      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a57      	ldr	r2, [pc, #348]	; (8004100 <HAL_DMA_IRQHandler+0x428>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d00e      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a55      	ldr	r2, [pc, #340]	; (8004104 <HAL_DMA_IRQHandler+0x42c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d009      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a54      	ldr	r2, [pc, #336]	; (8004108 <HAL_DMA_IRQHandler+0x430>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x2ee>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_DMA_IRQHandler+0x434>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d10a      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x304>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bf14      	ite	ne
 8003fd4:	2301      	movne	r3, #1
 8003fd6:	2300      	moveq	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e003      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x30c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	409a      	lsls	r2, r3
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	f043 0202 	orr.w	r2, r3, #2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	2204      	movs	r2, #4
 800400e:	409a      	lsls	r2, r3
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 808f 	beq.w	8004138 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <HAL_DMA_IRQHandler+0x3f8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d04a      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <HAL_DMA_IRQHandler+0x3fc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d045      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <HAL_DMA_IRQHandler+0x400>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d040      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a27      	ldr	r2, [pc, #156]	; (80040dc <HAL_DMA_IRQHandler+0x404>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d03b      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a26      	ldr	r2, [pc, #152]	; (80040e0 <HAL_DMA_IRQHandler+0x408>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d036      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <HAL_DMA_IRQHandler+0x40c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d031      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <HAL_DMA_IRQHandler+0x410>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d02c      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a21      	ldr	r2, [pc, #132]	; (80040ec <HAL_DMA_IRQHandler+0x414>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d027      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <HAL_DMA_IRQHandler+0x418>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1e      	ldr	r2, [pc, #120]	; (80040f4 <HAL_DMA_IRQHandler+0x41c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01d      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <HAL_DMA_IRQHandler+0x420>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_DMA_IRQHandler+0x424>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <HAL_DMA_IRQHandler+0x428>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_DMA_IRQHandler+0x42c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_DMA_IRQHandler+0x430>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_DMA_IRQHandler+0x3e2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <HAL_DMA_IRQHandler+0x434>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d12a      	bne.n	8004110 <HAL_DMA_IRQHandler+0x438>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	e023      	b.n	8004118 <HAL_DMA_IRQHandler+0x440>
 80040d0:	40020010 	.word	0x40020010
 80040d4:	40020028 	.word	0x40020028
 80040d8:	40020040 	.word	0x40020040
 80040dc:	40020058 	.word	0x40020058
 80040e0:	40020070 	.word	0x40020070
 80040e4:	40020088 	.word	0x40020088
 80040e8:	400200a0 	.word	0x400200a0
 80040ec:	400200b8 	.word	0x400200b8
 80040f0:	40020410 	.word	0x40020410
 80040f4:	40020428 	.word	0x40020428
 80040f8:	40020440 	.word	0x40020440
 80040fc:	40020458 	.word	0x40020458
 8004100:	40020470 	.word	0x40020470
 8004104:	40020488 	.word	0x40020488
 8004108:	400204a0 	.word	0x400204a0
 800410c:	400204b8 	.word	0x400204b8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2300      	movs	r3, #0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2204      	movs	r2, #4
 8004126:	409a      	lsls	r2, r3
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f043 0204 	orr.w	r2, r3, #4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2210      	movs	r2, #16
 8004142:	409a      	lsls	r2, r3
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80a6 	beq.w	800429a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a85      	ldr	r2, [pc, #532]	; (8004368 <HAL_DMA_IRQHandler+0x690>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d04a      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a83      	ldr	r2, [pc, #524]	; (800436c <HAL_DMA_IRQHandler+0x694>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d045      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a82      	ldr	r2, [pc, #520]	; (8004370 <HAL_DMA_IRQHandler+0x698>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d040      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a80      	ldr	r2, [pc, #512]	; (8004374 <HAL_DMA_IRQHandler+0x69c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d03b      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a7f      	ldr	r2, [pc, #508]	; (8004378 <HAL_DMA_IRQHandler+0x6a0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d036      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a7d      	ldr	r2, [pc, #500]	; (800437c <HAL_DMA_IRQHandler+0x6a4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d031      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7c      	ldr	r2, [pc, #496]	; (8004380 <HAL_DMA_IRQHandler+0x6a8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d02c      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a7a      	ldr	r2, [pc, #488]	; (8004384 <HAL_DMA_IRQHandler+0x6ac>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d027      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a79      	ldr	r2, [pc, #484]	; (8004388 <HAL_DMA_IRQHandler+0x6b0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a77      	ldr	r2, [pc, #476]	; (800438c <HAL_DMA_IRQHandler+0x6b4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01d      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a76      	ldr	r2, [pc, #472]	; (8004390 <HAL_DMA_IRQHandler+0x6b8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a74      	ldr	r2, [pc, #464]	; (8004394 <HAL_DMA_IRQHandler+0x6bc>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a73      	ldr	r2, [pc, #460]	; (8004398 <HAL_DMA_IRQHandler+0x6c0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a71      	ldr	r2, [pc, #452]	; (800439c <HAL_DMA_IRQHandler+0x6c4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a70      	ldr	r2, [pc, #448]	; (80043a0 <HAL_DMA_IRQHandler+0x6c8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_DMA_IRQHandler+0x516>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6e      	ldr	r2, [pc, #440]	; (80043a4 <HAL_DMA_IRQHandler+0x6cc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10a      	bne.n	8004204 <HAL_DMA_IRQHandler+0x52c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e009      	b.n	8004218 <HAL_DMA_IRQHandler+0x540>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf14      	ite	ne
 8004212:	2301      	movne	r3, #1
 8004214:	2300      	moveq	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d03e      	beq.n	800429a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2210      	movs	r2, #16
 8004226:	409a      	lsls	r2, r3
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d024      	beq.n	800429a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
 8004258:	e01f      	b.n	800429a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01b      	beq.n	800429a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	4798      	blx	r3
 800426a:	e016      	b.n	800429a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d107      	bne.n	800428a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0208 	bic.w	r2, r2, #8
 8004288:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2220      	movs	r2, #32
 80042a4:	409a      	lsls	r2, r3
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8110 	beq.w	80044d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	; (8004368 <HAL_DMA_IRQHandler+0x690>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04a      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2b      	ldr	r2, [pc, #172]	; (800436c <HAL_DMA_IRQHandler+0x694>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d045      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a29      	ldr	r2, [pc, #164]	; (8004370 <HAL_DMA_IRQHandler+0x698>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d040      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a28      	ldr	r2, [pc, #160]	; (8004374 <HAL_DMA_IRQHandler+0x69c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d03b      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a26      	ldr	r2, [pc, #152]	; (8004378 <HAL_DMA_IRQHandler+0x6a0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d036      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a25      	ldr	r2, [pc, #148]	; (800437c <HAL_DMA_IRQHandler+0x6a4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d031      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a23      	ldr	r2, [pc, #140]	; (8004380 <HAL_DMA_IRQHandler+0x6a8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02c      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a22      	ldr	r2, [pc, #136]	; (8004384 <HAL_DMA_IRQHandler+0x6ac>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d027      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a20      	ldr	r2, [pc, #128]	; (8004388 <HAL_DMA_IRQHandler+0x6b0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1f      	ldr	r2, [pc, #124]	; (800438c <HAL_DMA_IRQHandler+0x6b4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1d      	ldr	r2, [pc, #116]	; (8004390 <HAL_DMA_IRQHandler+0x6b8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <HAL_DMA_IRQHandler+0x6bc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <HAL_DMA_IRQHandler+0x6c0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a19      	ldr	r2, [pc, #100]	; (800439c <HAL_DMA_IRQHandler+0x6c4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <HAL_DMA_IRQHandler+0x6c8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_IRQHandler+0x678>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <HAL_DMA_IRQHandler+0x6cc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d12b      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x6d0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf14      	ite	ne
 800435e:	2301      	movne	r3, #1
 8004360:	2300      	moveq	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	e02a      	b.n	80043bc <HAL_DMA_IRQHandler+0x6e4>
 8004366:	bf00      	nop
 8004368:	40020010 	.word	0x40020010
 800436c:	40020028 	.word	0x40020028
 8004370:	40020040 	.word	0x40020040
 8004374:	40020058 	.word	0x40020058
 8004378:	40020070 	.word	0x40020070
 800437c:	40020088 	.word	0x40020088
 8004380:	400200a0 	.word	0x400200a0
 8004384:	400200b8 	.word	0x400200b8
 8004388:	40020410 	.word	0x40020410
 800438c:	40020428 	.word	0x40020428
 8004390:	40020440 	.word	0x40020440
 8004394:	40020458 	.word	0x40020458
 8004398:	40020470 	.word	0x40020470
 800439c:	40020488 	.word	0x40020488
 80043a0:	400204a0 	.word	0x400204a0
 80043a4:	400204b8 	.word	0x400204b8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8087 	beq.w	80044d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	2220      	movs	r2, #32
 80043cc:	409a      	lsls	r2, r3
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d139      	bne.n	8004452 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0216 	bic.w	r2, r2, #22
 80043ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <HAL_DMA_IRQHandler+0x736>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0208 	bic.w	r2, r2, #8
 800441c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	223f      	movs	r2, #63	; 0x3f
 8004428:	409a      	lsls	r2, r3
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 834a 	beq.w	8004adc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	4798      	blx	r3
          }
          return;
 8004450:	e344      	b.n	8004adc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d018      	beq.n	8004492 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02c      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
 800447e:	e027      	b.n	80044d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d023      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
 8004490:	e01e      	b.n	80044d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10f      	bne.n	80044c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0210 	bic.w	r2, r2, #16
 80044ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8306 	beq.w	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8088 	beq.w	80045f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2204      	movs	r2, #4
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a7a      	ldr	r2, [pc, #488]	; (80046e0 <HAL_DMA_IRQHandler+0xa08>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d04a      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a79      	ldr	r2, [pc, #484]	; (80046e4 <HAL_DMA_IRQHandler+0xa0c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d045      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a77      	ldr	r2, [pc, #476]	; (80046e8 <HAL_DMA_IRQHandler+0xa10>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d040      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a76      	ldr	r2, [pc, #472]	; (80046ec <HAL_DMA_IRQHandler+0xa14>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d03b      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a74      	ldr	r2, [pc, #464]	; (80046f0 <HAL_DMA_IRQHandler+0xa18>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d036      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a73      	ldr	r2, [pc, #460]	; (80046f4 <HAL_DMA_IRQHandler+0xa1c>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d031      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a71      	ldr	r2, [pc, #452]	; (80046f8 <HAL_DMA_IRQHandler+0xa20>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d02c      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a70      	ldr	r2, [pc, #448]	; (80046fc <HAL_DMA_IRQHandler+0xa24>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d027      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a6e      	ldr	r2, [pc, #440]	; (8004700 <HAL_DMA_IRQHandler+0xa28>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6d      	ldr	r2, [pc, #436]	; (8004704 <HAL_DMA_IRQHandler+0xa2c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d01d      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6b      	ldr	r2, [pc, #428]	; (8004708 <HAL_DMA_IRQHandler+0xa30>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6a      	ldr	r2, [pc, #424]	; (800470c <HAL_DMA_IRQHandler+0xa34>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a68      	ldr	r2, [pc, #416]	; (8004710 <HAL_DMA_IRQHandler+0xa38>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a67      	ldr	r2, [pc, #412]	; (8004714 <HAL_DMA_IRQHandler+0xa3c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a65      	ldr	r2, [pc, #404]	; (8004718 <HAL_DMA_IRQHandler+0xa40>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_DMA_IRQHandler+0x8b8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a64      	ldr	r2, [pc, #400]	; (800471c <HAL_DMA_IRQHandler+0xa44>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d108      	bne.n	80045a2 <HAL_DMA_IRQHandler+0x8ca>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e007      	b.n	80045b2 <HAL_DMA_IRQHandler+0x8da>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3301      	adds	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d307      	bcc.n	80045ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f2      	bne.n	80045b2 <HAL_DMA_IRQHandler+0x8da>
 80045cc:	e000      	b.n	80045d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80045ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2203      	movs	r2, #3
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80045e6:	e003      	b.n	80045f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8272 	beq.w	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
 800460a:	e26c      	b.n	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a43      	ldr	r2, [pc, #268]	; (8004720 <HAL_DMA_IRQHandler+0xa48>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d022      	beq.n	800465c <HAL_DMA_IRQHandler+0x984>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a42      	ldr	r2, [pc, #264]	; (8004724 <HAL_DMA_IRQHandler+0xa4c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d01d      	beq.n	800465c <HAL_DMA_IRQHandler+0x984>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a40      	ldr	r2, [pc, #256]	; (8004728 <HAL_DMA_IRQHandler+0xa50>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d018      	beq.n	800465c <HAL_DMA_IRQHandler+0x984>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <HAL_DMA_IRQHandler+0xa54>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <HAL_DMA_IRQHandler+0x984>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a3d      	ldr	r2, [pc, #244]	; (8004730 <HAL_DMA_IRQHandler+0xa58>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00e      	beq.n	800465c <HAL_DMA_IRQHandler+0x984>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a3c      	ldr	r2, [pc, #240]	; (8004734 <HAL_DMA_IRQHandler+0xa5c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_DMA_IRQHandler+0x984>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3a      	ldr	r2, [pc, #232]	; (8004738 <HAL_DMA_IRQHandler+0xa60>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <HAL_DMA_IRQHandler+0x984>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a39      	ldr	r2, [pc, #228]	; (800473c <HAL_DMA_IRQHandler+0xa64>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d101      	bne.n	8004660 <HAL_DMA_IRQHandler+0x988>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_DMA_IRQHandler+0x98a>
 8004660:	2300      	movs	r3, #0
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 823f 	beq.w	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2204      	movs	r2, #4
 800467a:	409a      	lsls	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80cd 	beq.w	8004820 <HAL_DMA_IRQHandler+0xb48>
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 80c7 	beq.w	8004820 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	2204      	movs	r2, #4
 800469c:	409a      	lsls	r2, r3
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d049      	beq.n	8004740 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8210 	beq.w	8004ae0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c8:	e20a      	b.n	8004ae0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8206 	beq.w	8004ae0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046dc:	e200      	b.n	8004ae0 <HAL_DMA_IRQHandler+0xe08>
 80046de:	bf00      	nop
 80046e0:	40020010 	.word	0x40020010
 80046e4:	40020028 	.word	0x40020028
 80046e8:	40020040 	.word	0x40020040
 80046ec:	40020058 	.word	0x40020058
 80046f0:	40020070 	.word	0x40020070
 80046f4:	40020088 	.word	0x40020088
 80046f8:	400200a0 	.word	0x400200a0
 80046fc:	400200b8 	.word	0x400200b8
 8004700:	40020410 	.word	0x40020410
 8004704:	40020428 	.word	0x40020428
 8004708:	40020440 	.word	0x40020440
 800470c:	40020458 	.word	0x40020458
 8004710:	40020470 	.word	0x40020470
 8004714:	40020488 	.word	0x40020488
 8004718:	400204a0 	.word	0x400204a0
 800471c:	400204b8 	.word	0x400204b8
 8004720:	58025408 	.word	0x58025408
 8004724:	5802541c 	.word	0x5802541c
 8004728:	58025430 	.word	0x58025430
 800472c:	58025444 	.word	0x58025444
 8004730:	58025458 	.word	0x58025458
 8004734:	5802546c 	.word	0x5802546c
 8004738:	58025480 	.word	0x58025480
 800473c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d160      	bne.n	800480c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a7f      	ldr	r2, [pc, #508]	; (800494c <HAL_DMA_IRQHandler+0xc74>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d04a      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a7d      	ldr	r2, [pc, #500]	; (8004950 <HAL_DMA_IRQHandler+0xc78>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d045      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a7c      	ldr	r2, [pc, #496]	; (8004954 <HAL_DMA_IRQHandler+0xc7c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d040      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a7a      	ldr	r2, [pc, #488]	; (8004958 <HAL_DMA_IRQHandler+0xc80>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d03b      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a79      	ldr	r2, [pc, #484]	; (800495c <HAL_DMA_IRQHandler+0xc84>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d036      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a77      	ldr	r2, [pc, #476]	; (8004960 <HAL_DMA_IRQHandler+0xc88>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d031      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a76      	ldr	r2, [pc, #472]	; (8004964 <HAL_DMA_IRQHandler+0xc8c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d02c      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a74      	ldr	r2, [pc, #464]	; (8004968 <HAL_DMA_IRQHandler+0xc90>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d027      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a73      	ldr	r2, [pc, #460]	; (800496c <HAL_DMA_IRQHandler+0xc94>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a71      	ldr	r2, [pc, #452]	; (8004970 <HAL_DMA_IRQHandler+0xc98>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d01d      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a70      	ldr	r2, [pc, #448]	; (8004974 <HAL_DMA_IRQHandler+0xc9c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d018      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6e      	ldr	r2, [pc, #440]	; (8004978 <HAL_DMA_IRQHandler+0xca0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a6d      	ldr	r2, [pc, #436]	; (800497c <HAL_DMA_IRQHandler+0xca4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a6b      	ldr	r2, [pc, #428]	; (8004980 <HAL_DMA_IRQHandler+0xca8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6a      	ldr	r2, [pc, #424]	; (8004984 <HAL_DMA_IRQHandler+0xcac>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_DMA_IRQHandler+0xb12>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a68      	ldr	r2, [pc, #416]	; (8004988 <HAL_DMA_IRQHandler+0xcb0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <HAL_DMA_IRQHandler+0xb24>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0208 	bic.w	r2, r2, #8
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e007      	b.n	800480c <HAL_DMA_IRQHandler+0xb34>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8165 	beq.w	8004ae0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800481e:	e15f      	b.n	8004ae0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	2202      	movs	r2, #2
 800482a:	409a      	lsls	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80c5 	beq.w	80049c0 <HAL_DMA_IRQHandler+0xce8>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80bf 	beq.w	80049c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2202      	movs	r2, #2
 800484c:	409a      	lsls	r2, r3
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d018      	beq.n	800488e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d109      	bne.n	800487a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 813a 	beq.w	8004ae4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004878:	e134      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8130 	beq.w	8004ae4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800488c:	e12a      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 8089 	bne.w	80049ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2b      	ldr	r2, [pc, #172]	; (800494c <HAL_DMA_IRQHandler+0xc74>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d04a      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a29      	ldr	r2, [pc, #164]	; (8004950 <HAL_DMA_IRQHandler+0xc78>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d045      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a28      	ldr	r2, [pc, #160]	; (8004954 <HAL_DMA_IRQHandler+0xc7c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d040      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a26      	ldr	r2, [pc, #152]	; (8004958 <HAL_DMA_IRQHandler+0xc80>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d03b      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a25      	ldr	r2, [pc, #148]	; (800495c <HAL_DMA_IRQHandler+0xc84>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d036      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a23      	ldr	r2, [pc, #140]	; (8004960 <HAL_DMA_IRQHandler+0xc88>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d031      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a22      	ldr	r2, [pc, #136]	; (8004964 <HAL_DMA_IRQHandler+0xc8c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d02c      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a20      	ldr	r2, [pc, #128]	; (8004968 <HAL_DMA_IRQHandler+0xc90>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d027      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1f      	ldr	r2, [pc, #124]	; (800496c <HAL_DMA_IRQHandler+0xc94>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d022      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <HAL_DMA_IRQHandler+0xc98>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d01d      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <HAL_DMA_IRQHandler+0xc9c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d018      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1a      	ldr	r2, [pc, #104]	; (8004978 <HAL_DMA_IRQHandler+0xca0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a19      	ldr	r2, [pc, #100]	; (800497c <HAL_DMA_IRQHandler+0xca4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <HAL_DMA_IRQHandler+0xca8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d009      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <HAL_DMA_IRQHandler+0xcac>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_DMA_IRQHandler+0xc62>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a14      	ldr	r2, [pc, #80]	; (8004988 <HAL_DMA_IRQHandler+0xcb0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d128      	bne.n	800498c <HAL_DMA_IRQHandler+0xcb4>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0214 	bic.w	r2, r2, #20
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e027      	b.n	800499c <HAL_DMA_IRQHandler+0xcc4>
 800494c:	40020010 	.word	0x40020010
 8004950:	40020028 	.word	0x40020028
 8004954:	40020040 	.word	0x40020040
 8004958:	40020058 	.word	0x40020058
 800495c:	40020070 	.word	0x40020070
 8004960:	40020088 	.word	0x40020088
 8004964:	400200a0 	.word	0x400200a0
 8004968:	400200b8 	.word	0x400200b8
 800496c:	40020410 	.word	0x40020410
 8004970:	40020428 	.word	0x40020428
 8004974:	40020440 	.word	0x40020440
 8004978:	40020458 	.word	0x40020458
 800497c:	40020470 	.word	0x40020470
 8004980:	40020488 	.word	0x40020488
 8004984:	400204a0 	.word	0x400204a0
 8004988:	400204b8 	.word	0x400204b8
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 020a 	bic.w	r2, r2, #10
 800499a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8097 	beq.w	8004ae4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049be:	e091      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2208      	movs	r2, #8
 80049ca:	409a      	lsls	r2, r3
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8088 	beq.w	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f003 0308 	and.w	r3, r3, #8
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8082 	beq.w	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a41      	ldr	r2, [pc, #260]	; (8004aec <HAL_DMA_IRQHandler+0xe14>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d04a      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3f      	ldr	r2, [pc, #252]	; (8004af0 <HAL_DMA_IRQHandler+0xe18>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d045      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3e      	ldr	r2, [pc, #248]	; (8004af4 <HAL_DMA_IRQHandler+0xe1c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d040      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <HAL_DMA_IRQHandler+0xe20>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d03b      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <HAL_DMA_IRQHandler+0xe24>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d036      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a39      	ldr	r2, [pc, #228]	; (8004b00 <HAL_DMA_IRQHandler+0xe28>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d031      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a38      	ldr	r2, [pc, #224]	; (8004b04 <HAL_DMA_IRQHandler+0xe2c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d02c      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a36      	ldr	r2, [pc, #216]	; (8004b08 <HAL_DMA_IRQHandler+0xe30>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d027      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a35      	ldr	r2, [pc, #212]	; (8004b0c <HAL_DMA_IRQHandler+0xe34>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d022      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a33      	ldr	r2, [pc, #204]	; (8004b10 <HAL_DMA_IRQHandler+0xe38>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01d      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a32      	ldr	r2, [pc, #200]	; (8004b14 <HAL_DMA_IRQHandler+0xe3c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d018      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a30      	ldr	r2, [pc, #192]	; (8004b18 <HAL_DMA_IRQHandler+0xe40>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d013      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a2f      	ldr	r2, [pc, #188]	; (8004b1c <HAL_DMA_IRQHandler+0xe44>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00e      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2d      	ldr	r2, [pc, #180]	; (8004b20 <HAL_DMA_IRQHandler+0xe48>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <HAL_DMA_IRQHandler+0xe4c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <HAL_DMA_IRQHandler+0xdaa>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <HAL_DMA_IRQHandler+0xe50>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d108      	bne.n	8004a94 <HAL_DMA_IRQHandler+0xdbc>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 021c 	bic.w	r2, r2, #28
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e007      	b.n	8004aa4 <HAL_DMA_IRQHandler+0xdcc>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 020e 	bic.w	r2, r2, #14
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	2201      	movs	r2, #1
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d009      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
 8004ada:	e004      	b.n	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004adc:	bf00      	nop
 8004ade:	e002      	b.n	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ae0:	bf00      	nop
 8004ae2:	e000      	b.n	8004ae6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ae4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004ae6:	3728      	adds	r7, #40	; 0x28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40020010 	.word	0x40020010
 8004af0:	40020028 	.word	0x40020028
 8004af4:	40020040 	.word	0x40020040
 8004af8:	40020058 	.word	0x40020058
 8004afc:	40020070 	.word	0x40020070
 8004b00:	40020088 	.word	0x40020088
 8004b04:	400200a0 	.word	0x400200a0
 8004b08:	400200b8 	.word	0x400200b8
 8004b0c:	40020410 	.word	0x40020410
 8004b10:	40020428 	.word	0x40020428
 8004b14:	40020440 	.word	0x40020440
 8004b18:	40020458 	.word	0x40020458
 8004b1c:	40020470 	.word	0x40020470
 8004b20:	40020488 	.word	0x40020488
 8004b24:	400204a0 	.word	0x400204a0
 8004b28:	400204b8 	.word	0x400204b8

08004b2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a7f      	ldr	r2, [pc, #508]	; (8004d48 <DMA_SetConfig+0x21c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d072      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a7d      	ldr	r2, [pc, #500]	; (8004d4c <DMA_SetConfig+0x220>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d06d      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7c      	ldr	r2, [pc, #496]	; (8004d50 <DMA_SetConfig+0x224>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d068      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a7a      	ldr	r2, [pc, #488]	; (8004d54 <DMA_SetConfig+0x228>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d063      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a79      	ldr	r2, [pc, #484]	; (8004d58 <DMA_SetConfig+0x22c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d05e      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a77      	ldr	r2, [pc, #476]	; (8004d5c <DMA_SetConfig+0x230>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d059      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a76      	ldr	r2, [pc, #472]	; (8004d60 <DMA_SetConfig+0x234>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d054      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a74      	ldr	r2, [pc, #464]	; (8004d64 <DMA_SetConfig+0x238>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04f      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a73      	ldr	r2, [pc, #460]	; (8004d68 <DMA_SetConfig+0x23c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d04a      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a71      	ldr	r2, [pc, #452]	; (8004d6c <DMA_SetConfig+0x240>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d045      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a70      	ldr	r2, [pc, #448]	; (8004d70 <DMA_SetConfig+0x244>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d040      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a6e      	ldr	r2, [pc, #440]	; (8004d74 <DMA_SetConfig+0x248>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d03b      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6d      	ldr	r2, [pc, #436]	; (8004d78 <DMA_SetConfig+0x24c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d036      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a6b      	ldr	r2, [pc, #428]	; (8004d7c <DMA_SetConfig+0x250>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d031      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a6a      	ldr	r2, [pc, #424]	; (8004d80 <DMA_SetConfig+0x254>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d02c      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a68      	ldr	r2, [pc, #416]	; (8004d84 <DMA_SetConfig+0x258>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d027      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a67      	ldr	r2, [pc, #412]	; (8004d88 <DMA_SetConfig+0x25c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d022      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a65      	ldr	r2, [pc, #404]	; (8004d8c <DMA_SetConfig+0x260>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01d      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a64      	ldr	r2, [pc, #400]	; (8004d90 <DMA_SetConfig+0x264>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d018      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a62      	ldr	r2, [pc, #392]	; (8004d94 <DMA_SetConfig+0x268>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d013      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a61      	ldr	r2, [pc, #388]	; (8004d98 <DMA_SetConfig+0x26c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d00e      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5f      	ldr	r2, [pc, #380]	; (8004d9c <DMA_SetConfig+0x270>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d009      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a5e      	ldr	r2, [pc, #376]	; (8004da0 <DMA_SetConfig+0x274>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <DMA_SetConfig+0x10a>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5c      	ldr	r2, [pc, #368]	; (8004da4 <DMA_SetConfig+0x278>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <DMA_SetConfig+0x10e>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <DMA_SetConfig+0x110>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00d      	beq.n	8004c5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a39      	ldr	r2, [pc, #228]	; (8004d48 <DMA_SetConfig+0x21c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d04a      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a38      	ldr	r2, [pc, #224]	; (8004d4c <DMA_SetConfig+0x220>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d045      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a36      	ldr	r2, [pc, #216]	; (8004d50 <DMA_SetConfig+0x224>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d040      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a35      	ldr	r2, [pc, #212]	; (8004d54 <DMA_SetConfig+0x228>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d03b      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a33      	ldr	r2, [pc, #204]	; (8004d58 <DMA_SetConfig+0x22c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d036      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <DMA_SetConfig+0x230>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d031      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a30      	ldr	r2, [pc, #192]	; (8004d60 <DMA_SetConfig+0x234>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d02c      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <DMA_SetConfig+0x238>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d027      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <DMA_SetConfig+0x23c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d022      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2c      	ldr	r2, [pc, #176]	; (8004d6c <DMA_SetConfig+0x240>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d01d      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a2a      	ldr	r2, [pc, #168]	; (8004d70 <DMA_SetConfig+0x244>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d018      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <DMA_SetConfig+0x248>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a27      	ldr	r2, [pc, #156]	; (8004d78 <DMA_SetConfig+0x24c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <DMA_SetConfig+0x250>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a24      	ldr	r2, [pc, #144]	; (8004d80 <DMA_SetConfig+0x254>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <DMA_SetConfig+0x1d0>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a23      	ldr	r2, [pc, #140]	; (8004d84 <DMA_SetConfig+0x258>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d101      	bne.n	8004d00 <DMA_SetConfig+0x1d4>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <DMA_SetConfig+0x1d6>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d059      	beq.n	8004dba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	223f      	movs	r2, #63	; 0x3f
 8004d10:	409a      	lsls	r2, r3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b40      	cmp	r3, #64	; 0x40
 8004d34:	d138      	bne.n	8004da8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d46:	e086      	b.n	8004e56 <DMA_SetConfig+0x32a>
 8004d48:	40020010 	.word	0x40020010
 8004d4c:	40020028 	.word	0x40020028
 8004d50:	40020040 	.word	0x40020040
 8004d54:	40020058 	.word	0x40020058
 8004d58:	40020070 	.word	0x40020070
 8004d5c:	40020088 	.word	0x40020088
 8004d60:	400200a0 	.word	0x400200a0
 8004d64:	400200b8 	.word	0x400200b8
 8004d68:	40020410 	.word	0x40020410
 8004d6c:	40020428 	.word	0x40020428
 8004d70:	40020440 	.word	0x40020440
 8004d74:	40020458 	.word	0x40020458
 8004d78:	40020470 	.word	0x40020470
 8004d7c:	40020488 	.word	0x40020488
 8004d80:	400204a0 	.word	0x400204a0
 8004d84:	400204b8 	.word	0x400204b8
 8004d88:	58025408 	.word	0x58025408
 8004d8c:	5802541c 	.word	0x5802541c
 8004d90:	58025430 	.word	0x58025430
 8004d94:	58025444 	.word	0x58025444
 8004d98:	58025458 	.word	0x58025458
 8004d9c:	5802546c 	.word	0x5802546c
 8004da0:	58025480 	.word	0x58025480
 8004da4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	60da      	str	r2, [r3, #12]
}
 8004db8:	e04d      	b.n	8004e56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <DMA_SetConfig+0x338>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <DMA_SetConfig+0x2de>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a27      	ldr	r2, [pc, #156]	; (8004e68 <DMA_SetConfig+0x33c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01d      	beq.n	8004e0a <DMA_SetConfig+0x2de>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a26      	ldr	r2, [pc, #152]	; (8004e6c <DMA_SetConfig+0x340>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d018      	beq.n	8004e0a <DMA_SetConfig+0x2de>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <DMA_SetConfig+0x344>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <DMA_SetConfig+0x2de>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <DMA_SetConfig+0x348>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <DMA_SetConfig+0x2de>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a21      	ldr	r2, [pc, #132]	; (8004e78 <DMA_SetConfig+0x34c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <DMA_SetConfig+0x2de>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a20      	ldr	r2, [pc, #128]	; (8004e7c <DMA_SetConfig+0x350>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <DMA_SetConfig+0x2de>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1e      	ldr	r2, [pc, #120]	; (8004e80 <DMA_SetConfig+0x354>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d101      	bne.n	8004e0e <DMA_SetConfig+0x2e2>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <DMA_SetConfig+0x2e4>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e18:	f003 031f 	and.w	r3, r3, #31
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	409a      	lsls	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d108      	bne.n	8004e46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	60da      	str	r2, [r3, #12]
}
 8004e44:	e007      	b.n	8004e56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	60da      	str	r2, [r3, #12]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	58025408 	.word	0x58025408
 8004e68:	5802541c 	.word	0x5802541c
 8004e6c:	58025430 	.word	0x58025430
 8004e70:	58025444 	.word	0x58025444
 8004e74:	58025458 	.word	0x58025458
 8004e78:	5802546c 	.word	0x5802546c
 8004e7c:	58025480 	.word	0x58025480
 8004e80:	58025494 	.word	0x58025494

08004e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a42      	ldr	r2, [pc, #264]	; (8004f9c <DMA_CalcBaseAndBitshift+0x118>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d04a      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a41      	ldr	r2, [pc, #260]	; (8004fa0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d045      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a3f      	ldr	r2, [pc, #252]	; (8004fa4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d040      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a3e      	ldr	r2, [pc, #248]	; (8004fa8 <DMA_CalcBaseAndBitshift+0x124>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d03b      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3c      	ldr	r2, [pc, #240]	; (8004fac <DMA_CalcBaseAndBitshift+0x128>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d036      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d031      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a39      	ldr	r2, [pc, #228]	; (8004fb4 <DMA_CalcBaseAndBitshift+0x130>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02c      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a38      	ldr	r2, [pc, #224]	; (8004fb8 <DMA_CalcBaseAndBitshift+0x134>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d027      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a36      	ldr	r2, [pc, #216]	; (8004fbc <DMA_CalcBaseAndBitshift+0x138>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d022      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d01d      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a33      	ldr	r2, [pc, #204]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x140>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d018      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a32      	ldr	r2, [pc, #200]	; (8004fc8 <DMA_CalcBaseAndBitshift+0x144>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <DMA_CalcBaseAndBitshift+0x148>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00e      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d009      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2d      	ldr	r2, [pc, #180]	; (8004fd4 <DMA_CalcBaseAndBitshift+0x150>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <DMA_CalcBaseAndBitshift+0xa8>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2c      	ldr	r2, [pc, #176]	; (8004fd8 <DMA_CalcBaseAndBitshift+0x154>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <DMA_CalcBaseAndBitshift+0xac>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <DMA_CalcBaseAndBitshift+0xae>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d024      	beq.n	8004f80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	3b10      	subs	r3, #16
 8004f3e:	4a27      	ldr	r2, [pc, #156]	; (8004fdc <DMA_CalcBaseAndBitshift+0x158>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	4a24      	ldr	r2, [pc, #144]	; (8004fe0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004f50:	5cd3      	ldrb	r3, [r2, r3]
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d908      	bls.n	8004f70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	1d1a      	adds	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	659a      	str	r2, [r3, #88]	; 0x58
 8004f6e:	e00d      	b.n	8004f8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <DMA_CalcBaseAndBitshift+0x160>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f7e:	e005      	b.n	8004f8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40020010 	.word	0x40020010
 8004fa0:	40020028 	.word	0x40020028
 8004fa4:	40020040 	.word	0x40020040
 8004fa8:	40020058 	.word	0x40020058
 8004fac:	40020070 	.word	0x40020070
 8004fb0:	40020088 	.word	0x40020088
 8004fb4:	400200a0 	.word	0x400200a0
 8004fb8:	400200b8 	.word	0x400200b8
 8004fbc:	40020410 	.word	0x40020410
 8004fc0:	40020428 	.word	0x40020428
 8004fc4:	40020440 	.word	0x40020440
 8004fc8:	40020458 	.word	0x40020458
 8004fcc:	40020470 	.word	0x40020470
 8004fd0:	40020488 	.word	0x40020488
 8004fd4:	400204a0 	.word	0x400204a0
 8004fd8:	400204b8 	.word	0x400204b8
 8004fdc:	aaaaaaab 	.word	0xaaaaaaab
 8004fe0:	0800b4c4 	.word	0x0800b4c4
 8004fe4:	fffffc00 	.word	0xfffffc00

08004fe8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d120      	bne.n	800503e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005000:	2b03      	cmp	r3, #3
 8005002:	d858      	bhi.n	80050b6 <DMA_CheckFifoParam+0xce>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <DMA_CheckFifoParam+0x24>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	0800501d 	.word	0x0800501d
 8005010:	0800502f 	.word	0x0800502f
 8005014:	0800501d 	.word	0x0800501d
 8005018:	080050b7 	.word	0x080050b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d048      	beq.n	80050ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800502c:	e045      	b.n	80050ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005036:	d142      	bne.n	80050be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800503c:	e03f      	b.n	80050be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005046:	d123      	bne.n	8005090 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	2b03      	cmp	r3, #3
 800504e:	d838      	bhi.n	80050c2 <DMA_CheckFifoParam+0xda>
 8005050:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <DMA_CheckFifoParam+0x70>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	08005069 	.word	0x08005069
 800505c:	0800506f 	.word	0x0800506f
 8005060:	08005069 	.word	0x08005069
 8005064:	08005081 	.word	0x08005081
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
        break;
 800506c:	e030      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d025      	beq.n	80050c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800507e:	e022      	b.n	80050c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005088:	d11f      	bne.n	80050ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800508e:	e01c      	b.n	80050ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	2b02      	cmp	r3, #2
 8005096:	d902      	bls.n	800509e <DMA_CheckFifoParam+0xb6>
 8005098:	2b03      	cmp	r3, #3
 800509a:	d003      	beq.n	80050a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800509c:	e018      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
        break;
 80050a2:	e015      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00e      	beq.n	80050ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
    break;
 80050b4:	e00b      	b.n	80050ce <DMA_CheckFifoParam+0xe6>
        break;
 80050b6:	bf00      	nop
 80050b8:	e00a      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
        break;
 80050ba:	bf00      	nop
 80050bc:	e008      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
        break;
 80050be:	bf00      	nop
 80050c0:	e006      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
        break;
 80050c2:	bf00      	nop
 80050c4:	e004      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
        break;
 80050c6:	bf00      	nop
 80050c8:	e002      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
        break;
 80050ca:	bf00      	nop
 80050cc:	e000      	b.n	80050d0 <DMA_CheckFifoParam+0xe8>
    break;
 80050ce:	bf00      	nop
    }
  }

  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop

080050e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a38      	ldr	r2, [pc, #224]	; (80051d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d022      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a36      	ldr	r2, [pc, #216]	; (80051d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d01d      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a35      	ldr	r2, [pc, #212]	; (80051dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d018      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a32      	ldr	r2, [pc, #200]	; (80051e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00e      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a30      	ldr	r2, [pc, #192]	; (80051e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d009      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2f      	ldr	r2, [pc, #188]	; (80051ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2d      	ldr	r2, [pc, #180]	; (80051f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d101      	bne.n	8005142 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800513e:	2301      	movs	r3, #1
 8005140:	e000      	b.n	8005144 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005142:	2300      	movs	r3, #0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01a      	beq.n	800517e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	3b08      	subs	r3, #8
 8005150:	4a28      	ldr	r2, [pc, #160]	; (80051f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a24      	ldr	r2, [pc, #144]	; (80051fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800516c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800517c:	e024      	b.n	80051c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	3b10      	subs	r3, #16
 8005186:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d806      	bhi.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d902      	bls.n	80051a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3308      	adds	r3, #8
 80051a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4b18      	ldr	r3, [pc, #96]	; (800520c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	461a      	mov	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a16      	ldr	r2, [pc, #88]	; (8005210 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80051b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	2201      	movs	r2, #1
 80051c2:	409a      	lsls	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	58025408 	.word	0x58025408
 80051d8:	5802541c 	.word	0x5802541c
 80051dc:	58025430 	.word	0x58025430
 80051e0:	58025444 	.word	0x58025444
 80051e4:	58025458 	.word	0x58025458
 80051e8:	5802546c 	.word	0x5802546c
 80051ec:	58025480 	.word	0x58025480
 80051f0:	58025494 	.word	0x58025494
 80051f4:	cccccccd 	.word	0xcccccccd
 80051f8:	16009600 	.word	0x16009600
 80051fc:	58025880 	.word	0x58025880
 8005200:	aaaaaaab 	.word	0xaaaaaaab
 8005204:	400204b8 	.word	0x400204b8
 8005208:	4002040f 	.word	0x4002040f
 800520c:	10008200 	.word	0x10008200
 8005210:	40020880 	.word	0x40020880

08005214 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d04a      	beq.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b08      	cmp	r3, #8
 800522e:	d847      	bhi.n	80052c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a25      	ldr	r2, [pc, #148]	; (80052cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d022      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a24      	ldr	r2, [pc, #144]	; (80052d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d01d      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a22      	ldr	r2, [pc, #136]	; (80052d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d018      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00e      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d009      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4b17      	ldr	r3, [pc, #92]	; (80052ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	461a      	mov	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800529c:	671a      	str	r2, [r3, #112]	; 0x70
 800529e:	e009      	b.n	80052b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	461a      	mov	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a11      	ldr	r2, [pc, #68]	; (80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80052b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	2201      	movs	r2, #1
 80052ba:	409a      	lsls	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	58025408 	.word	0x58025408
 80052d0:	5802541c 	.word	0x5802541c
 80052d4:	58025430 	.word	0x58025430
 80052d8:	58025444 	.word	0x58025444
 80052dc:	58025458 	.word	0x58025458
 80052e0:	5802546c 	.word	0x5802546c
 80052e4:	58025480 	.word	0x58025480
 80052e8:	58025494 	.word	0x58025494
 80052ec:	1600963f 	.word	0x1600963f
 80052f0:	58025940 	.word	0x58025940
 80052f4:	1000823f 	.word	0x1000823f
 80052f8:	40020940 	.word	0x40020940

080052fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800530a:	4b89      	ldr	r3, [pc, #548]	; (8005530 <HAL_GPIO_Init+0x234>)
 800530c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800530e:	e194      	b.n	800563a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2101      	movs	r1, #1
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	fa01 f303 	lsl.w	r3, r1, r3
 800531c:	4013      	ands	r3, r2
 800531e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 8186 	beq.w	8005634 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d005      	beq.n	8005340 <HAL_GPIO_Init+0x44>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d130      	bne.n	80053a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	2203      	movs	r2, #3
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4313      	orrs	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005376:	2201      	movs	r2, #1
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	f003 0201 	and.w	r2, r3, #1
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4313      	orrs	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	2b03      	cmp	r3, #3
 80053ac:	d017      	beq.n	80053de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	2203      	movs	r2, #3
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d123      	bne.n	8005432 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	08da      	lsrs	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3208      	adds	r2, #8
 80053f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	220f      	movs	r2, #15
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	43db      	mvns	r3, r3
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	4013      	ands	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	08da      	lsrs	r2, r3, #3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3208      	adds	r2, #8
 800542c:	69b9      	ldr	r1, [r7, #24]
 800542e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	2203      	movs	r2, #3
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 0203 	and.w	r2, r3, #3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	4313      	orrs	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80e0 	beq.w	8005634 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005474:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <HAL_GPIO_Init+0x238>)
 8005476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800547a:	4a2e      	ldr	r2, [pc, #184]	; (8005534 <HAL_GPIO_Init+0x238>)
 800547c:	f043 0302 	orr.w	r3, r3, #2
 8005480:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_GPIO_Init+0x238>)
 8005486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005492:	4a29      	ldr	r2, [pc, #164]	; (8005538 <HAL_GPIO_Init+0x23c>)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	089b      	lsrs	r3, r3, #2
 8005498:	3302      	adds	r3, #2
 800549a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f003 0303 	and.w	r3, r3, #3
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	220f      	movs	r2, #15
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a20      	ldr	r2, [pc, #128]	; (800553c <HAL_GPIO_Init+0x240>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d052      	beq.n	8005564 <HAL_GPIO_Init+0x268>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <HAL_GPIO_Init+0x244>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d031      	beq.n	800552a <HAL_GPIO_Init+0x22e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <HAL_GPIO_Init+0x248>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02b      	beq.n	8005526 <HAL_GPIO_Init+0x22a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_GPIO_Init+0x24c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d025      	beq.n	8005522 <HAL_GPIO_Init+0x226>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1c      	ldr	r2, [pc, #112]	; (800554c <HAL_GPIO_Init+0x250>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01f      	beq.n	800551e <HAL_GPIO_Init+0x222>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1b      	ldr	r2, [pc, #108]	; (8005550 <HAL_GPIO_Init+0x254>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d019      	beq.n	800551a <HAL_GPIO_Init+0x21e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a1a      	ldr	r2, [pc, #104]	; (8005554 <HAL_GPIO_Init+0x258>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_GPIO_Init+0x21a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <HAL_GPIO_Init+0x25c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00d      	beq.n	8005512 <HAL_GPIO_Init+0x216>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_GPIO_Init+0x260>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <HAL_GPIO_Init+0x212>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a17      	ldr	r2, [pc, #92]	; (8005560 <HAL_GPIO_Init+0x264>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_GPIO_Init+0x20e>
 8005506:	2309      	movs	r3, #9
 8005508:	e02d      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 800550a:	230a      	movs	r3, #10
 800550c:	e02b      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 800550e:	2308      	movs	r3, #8
 8005510:	e029      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 8005512:	2307      	movs	r3, #7
 8005514:	e027      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 8005516:	2306      	movs	r3, #6
 8005518:	e025      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 800551a:	2305      	movs	r3, #5
 800551c:	e023      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 800551e:	2304      	movs	r3, #4
 8005520:	e021      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 8005522:	2303      	movs	r3, #3
 8005524:	e01f      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 8005526:	2302      	movs	r3, #2
 8005528:	e01d      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 800552a:	2301      	movs	r3, #1
 800552c:	e01b      	b.n	8005566 <HAL_GPIO_Init+0x26a>
 800552e:	bf00      	nop
 8005530:	58000080 	.word	0x58000080
 8005534:	58024400 	.word	0x58024400
 8005538:	58000400 	.word	0x58000400
 800553c:	58020000 	.word	0x58020000
 8005540:	58020400 	.word	0x58020400
 8005544:	58020800 	.word	0x58020800
 8005548:	58020c00 	.word	0x58020c00
 800554c:	58021000 	.word	0x58021000
 8005550:	58021400 	.word	0x58021400
 8005554:	58021800 	.word	0x58021800
 8005558:	58021c00 	.word	0x58021c00
 800555c:	58022000 	.word	0x58022000
 8005560:	58022400 	.word	0x58022400
 8005564:	2300      	movs	r3, #0
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	f002 0203 	and.w	r2, r2, #3
 800556c:	0092      	lsls	r2, r2, #2
 800556e:	4093      	lsls	r3, r2
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005576:	4938      	ldr	r1, [pc, #224]	; (8005658 <HAL_GPIO_Init+0x35c>)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	089b      	lsrs	r3, r3, #2
 800557c:	3302      	adds	r3, #2
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80055aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	43db      	mvns	r3, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4013      	ands	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	43db      	mvns	r3, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4013      	ands	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4313      	orrs	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa22 f303 	lsr.w	r3, r2, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	f47f ae63 	bne.w	8005310 <HAL_GPIO_Init+0x14>
  }
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	3724      	adds	r7, #36	; 0x24
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	58000400 	.word	0x58000400

0800565c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	807b      	strh	r3, [r7, #2]
 8005668:	4613      	mov	r3, r2
 800566a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800566c:	787b      	ldrb	r3, [r7, #1]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005672:	887a      	ldrh	r2, [r7, #2]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005678:	e003      	b.n	8005682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	041a      	lsls	r2, r3, #16
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	619a      	str	r2, [r3, #24]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005698:	4a08      	ldr	r2, [pc, #32]	; (80056bc <HAL_HSEM_FastTake+0x2c>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3320      	adds	r3, #32
 800569e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a2:	4a07      	ldr	r2, [pc, #28]	; (80056c0 <HAL_HSEM_FastTake+0x30>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d101      	bne.n	80056ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	58026400 	.word	0x58026400
 80056c0:	80000300 	.word	0x80000300

080056c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80056ce:	4906      	ldr	r1, [pc, #24]	; (80056e8 <HAL_HSEM_Release+0x24>)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	58026400 	.word	0x58026400

080056ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80056f4:	4b29      	ldr	r3, [pc, #164]	; (800579c <HAL_PWREx_ConfigSupply+0xb0>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d00a      	beq.n	8005716 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005700:	4b26      	ldr	r3, [pc, #152]	; (800579c <HAL_PWREx_ConfigSupply+0xb0>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d001      	beq.n	8005712 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e040      	b.n	8005794 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	e03e      	b.n	8005794 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005716:	4b21      	ldr	r3, [pc, #132]	; (800579c <HAL_PWREx_ConfigSupply+0xb0>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800571e:	491f      	ldr	r1, [pc, #124]	; (800579c <HAL_PWREx_ConfigSupply+0xb0>)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4313      	orrs	r3, r2
 8005724:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005726:	f7fb ffbd 	bl	80016a4 <HAL_GetTick>
 800572a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800572c:	e009      	b.n	8005742 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800572e:	f7fb ffb9 	bl	80016a4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573c:	d901      	bls.n	8005742 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e028      	b.n	8005794 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <HAL_PWREx_ConfigSupply+0xb0>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800574a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574e:	d1ee      	bne.n	800572e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b1e      	cmp	r3, #30
 8005754:	d008      	beq.n	8005768 <HAL_PWREx_ConfigSupply+0x7c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b2e      	cmp	r3, #46	; 0x2e
 800575a:	d005      	beq.n	8005768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b1d      	cmp	r3, #29
 8005760:	d002      	beq.n	8005768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b2d      	cmp	r3, #45	; 0x2d
 8005766:	d114      	bne.n	8005792 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005768:	f7fb ff9c 	bl	80016a4 <HAL_GetTick>
 800576c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800576e:	e009      	b.n	8005784 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005770:	f7fb ff98 	bl	80016a4 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800577e:	d901      	bls.n	8005784 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e007      	b.n	8005794 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_PWREx_ConfigSupply+0xb0>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d1ee      	bne.n	8005770 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	58024800 	.word	0x58024800

080057a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08c      	sub	sp, #48	; 0x30
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f000 bc48 	b.w	8006044 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 8088 	beq.w	80058d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c2:	4b99      	ldr	r3, [pc, #612]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057cc:	4b96      	ldr	r3, [pc, #600]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d007      	beq.n	80057e8 <HAL_RCC_OscConfig+0x48>
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	2b18      	cmp	r3, #24
 80057dc:	d111      	bne.n	8005802 <HAL_RCC_OscConfig+0x62>
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	f003 0303 	and.w	r3, r3, #3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d10c      	bne.n	8005802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e8:	4b8f      	ldr	r3, [pc, #572]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d06d      	beq.n	80058d0 <HAL_RCC_OscConfig+0x130>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d169      	bne.n	80058d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f000 bc21 	b.w	8006044 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x7a>
 800580c:	4b86      	ldr	r3, [pc, #536]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a85      	ldr	r2, [pc, #532]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e02e      	b.n	8005878 <HAL_RCC_OscConfig+0xd8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x9c>
 8005822:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a80      	ldr	r2, [pc, #512]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	4b7e      	ldr	r3, [pc, #504]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a7d      	ldr	r2, [pc, #500]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e01d      	b.n	8005878 <HAL_RCC_OscConfig+0xd8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005844:	d10c      	bne.n	8005860 <HAL_RCC_OscConfig+0xc0>
 8005846:	4b78      	ldr	r3, [pc, #480]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a77      	ldr	r2, [pc, #476]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800584c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b75      	ldr	r3, [pc, #468]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a74      	ldr	r2, [pc, #464]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e00b      	b.n	8005878 <HAL_RCC_OscConfig+0xd8>
 8005860:	4b71      	ldr	r3, [pc, #452]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a70      	ldr	r2, [pc, #448]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	4b6e      	ldr	r3, [pc, #440]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6d      	ldr	r2, [pc, #436]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fb ff10 	bl	80016a4 <HAL_GetTick>
 8005884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005888:	f7fb ff0c 	bl	80016a4 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e3d4      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800589a:	4b63      	ldr	r3, [pc, #396]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0xe8>
 80058a6:	e014      	b.n	80058d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a8:	f7fb fefc 	bl	80016a4 <HAL_GetTick>
 80058ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b0:	f7fb fef8 	bl	80016a4 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b64      	cmp	r3, #100	; 0x64
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e3c0      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058c2:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x110>
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80ca 	beq.w	8005a74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058e0:	4b51      	ldr	r3, [pc, #324]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058ea:	4b4f      	ldr	r3, [pc, #316]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_RCC_OscConfig+0x166>
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2b18      	cmp	r3, #24
 80058fa:	d156      	bne.n	80059aa <HAL_RCC_OscConfig+0x20a>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d151      	bne.n	80059aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005906:	4b48      	ldr	r3, [pc, #288]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_RCC_OscConfig+0x17e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e392      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800591e:	4b42      	ldr	r3, [pc, #264]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 0219 	bic.w	r2, r3, #25
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	493f      	ldr	r1, [pc, #252]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005930:	f7fb feb8 	bl	80016a4 <HAL_GetTick>
 8005934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005938:	f7fb feb4 	bl	80016a4 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e37c      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800594a:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005956:	f7fb fed5 	bl	8001704 <HAL_GetREVID>
 800595a:	4603      	mov	r3, r0
 800595c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005960:	4293      	cmp	r3, r2
 8005962:	d817      	bhi.n	8005994 <HAL_RCC_OscConfig+0x1f4>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d108      	bne.n	800597e <HAL_RCC_OscConfig+0x1de>
 800596c:	4b2e      	ldr	r3, [pc, #184]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005974:	4a2c      	ldr	r2, [pc, #176]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800597c:	e07a      	b.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800597e:	4b2a      	ldr	r3, [pc, #168]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	031b      	lsls	r3, r3, #12
 800598c:	4926      	ldr	r1, [pc, #152]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 800598e:	4313      	orrs	r3, r2
 8005990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005992:	e06f      	b.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005994:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	061b      	lsls	r3, r3, #24
 80059a2:	4921      	ldr	r1, [pc, #132]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059a8:	e064      	b.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d047      	beq.n	8005a42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80059b2:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 0219 	bic.w	r2, r3, #25
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	491a      	ldr	r1, [pc, #104]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fb fe6e 	bl	80016a4 <HAL_GetTick>
 80059c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059cc:	f7fb fe6a 	bl	80016a4 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e332      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ea:	f7fb fe8b 	bl	8001704 <HAL_GetREVID>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d819      	bhi.n	8005a2c <HAL_RCC_OscConfig+0x28c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d108      	bne.n	8005a12 <HAL_RCC_OscConfig+0x272>
 8005a00:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005a08:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a0e:	6053      	str	r3, [r2, #4]
 8005a10:	e030      	b.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	031b      	lsls	r3, r3, #12
 8005a20:	4901      	ldr	r1, [pc, #4]	; (8005a28 <HAL_RCC_OscConfig+0x288>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]
 8005a26:	e025      	b.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
 8005a28:	58024400 	.word	0x58024400
 8005a2c:	4b9a      	ldr	r3, [pc, #616]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	061b      	lsls	r3, r3, #24
 8005a3a:	4997      	ldr	r1, [pc, #604]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]
 8005a40:	e018      	b.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a42:	4b95      	ldr	r3, [pc, #596]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a94      	ldr	r2, [pc, #592]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4e:	f7fb fe29 	bl	80016a4 <HAL_GetTick>
 8005a52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a56:	f7fb fe25 	bl	80016a4 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e2ed      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a68:	4b8b      	ldr	r3, [pc, #556]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f0      	bne.n	8005a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 80a9 	beq.w	8005bd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a82:	4b85      	ldr	r3, [pc, #532]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a8c:	4b82      	ldr	r3, [pc, #520]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d007      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x308>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b18      	cmp	r3, #24
 8005a9c:	d13a      	bne.n	8005b14 <HAL_RCC_OscConfig+0x374>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d135      	bne.n	8005b14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa8:	4b7b      	ldr	r3, [pc, #492]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x320>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d001      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e2c1      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ac0:	f7fb fe20 	bl	8001704 <HAL_GetREVID>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d817      	bhi.n	8005afe <HAL_RCC_OscConfig+0x35e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d108      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x348>
 8005ad6:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ade:	4a6e      	ldr	r2, [pc, #440]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ae4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ae6:	e075      	b.n	8005bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ae8:	4b6b      	ldr	r3, [pc, #428]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	069b      	lsls	r3, r3, #26
 8005af6:	4968      	ldr	r1, [pc, #416]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005afc:	e06a      	b.n	8005bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005afe:	4b66      	ldr	r3, [pc, #408]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	4962      	ldr	r1, [pc, #392]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005b12:	e05f      	b.n	8005bd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d042      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005b1c:	4b5e      	ldr	r3, [pc, #376]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a5d      	ldr	r2, [pc, #372]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fb fdbc 	bl	80016a4 <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005b30:	f7fb fdb8 	bl	80016a4 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e280      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b42:	4b55      	ldr	r3, [pc, #340]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b4e:	f7fb fdd9 	bl	8001704 <HAL_GetREVID>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d817      	bhi.n	8005b8c <HAL_RCC_OscConfig+0x3ec>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	d108      	bne.n	8005b76 <HAL_RCC_OscConfig+0x3d6>
 8005b64:	4b4c      	ldr	r3, [pc, #304]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b6c:	4a4a      	ldr	r2, [pc, #296]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b72:	6053      	str	r3, [r2, #4]
 8005b74:	e02e      	b.n	8005bd4 <HAL_RCC_OscConfig+0x434>
 8005b76:	4b48      	ldr	r3, [pc, #288]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	069b      	lsls	r3, r3, #26
 8005b84:	4944      	ldr	r1, [pc, #272]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	604b      	str	r3, [r1, #4]
 8005b8a:	e023      	b.n	8005bd4 <HAL_RCC_OscConfig+0x434>
 8005b8c:	4b42      	ldr	r3, [pc, #264]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	061b      	lsls	r3, r3, #24
 8005b9a:	493f      	ldr	r1, [pc, #252]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60cb      	str	r3, [r1, #12]
 8005ba0:	e018      	b.n	8005bd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005ba2:	4b3d      	ldr	r3, [pc, #244]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3c      	ldr	r2, [pc, #240]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bae:	f7fb fd79 	bl	80016a4 <HAL_GetTick>
 8005bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005bb6:	f7fb fd75 	bl	80016a4 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e23d      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005bc8:	4b33      	ldr	r3, [pc, #204]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f0      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d036      	beq.n	8005c4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d019      	beq.n	8005c1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005be8:	4b2b      	ldr	r3, [pc, #172]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bec:	4a2a      	ldr	r2, [pc, #168]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fb fd56 	bl	80016a4 <HAL_GetTick>
 8005bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bfc:	f7fb fd52 	bl	80016a4 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e21a      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c0e:	4b22      	ldr	r3, [pc, #136]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x45c>
 8005c1a:	e018      	b.n	8005c4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c20:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c28:	f7fb fd3c 	bl	80016a4 <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c30:	f7fb fd38 	bl	80016a4 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e200      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0320 	and.w	r3, r3, #32
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d039      	beq.n	8005cce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01c      	beq.n	8005c9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c62:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c6e:	f7fb fd19 	bl	80016a4 <HAL_GetTick>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c76:	f7fb fd15 	bl	80016a4 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e1dd      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_RCC_OscConfig+0x4f8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x4d6>
 8005c94:	e01b      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c9c:	4b9b      	ldr	r3, [pc, #620]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a9a      	ldr	r2, [pc, #616]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ca8:	f7fb fcfc 	bl	80016a4 <HAL_GetTick>
 8005cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cb0:	f7fb fcf8 	bl	80016a4 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e1c0      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005cc2:	4b92      	ldr	r3, [pc, #584]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 8081 	beq.w	8005dde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cdc:	4b8c      	ldr	r3, [pc, #560]	; (8005f10 <HAL_RCC_OscConfig+0x770>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a8b      	ldr	r2, [pc, #556]	; (8005f10 <HAL_RCC_OscConfig+0x770>)
 8005ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ce8:	f7fb fcdc 	bl	80016a4 <HAL_GetTick>
 8005cec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf0:	f7fb fcd8 	bl	80016a4 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1a0      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d02:	4b83      	ldr	r3, [pc, #524]	; (8005f10 <HAL_RCC_OscConfig+0x770>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d106      	bne.n	8005d24 <HAL_RCC_OscConfig+0x584>
 8005d16:	4b7d      	ldr	r3, [pc, #500]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	4a7c      	ldr	r2, [pc, #496]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	6713      	str	r3, [r2, #112]	; 0x70
 8005d22:	e02d      	b.n	8005d80 <HAL_RCC_OscConfig+0x5e0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10c      	bne.n	8005d46 <HAL_RCC_OscConfig+0x5a6>
 8005d2c:	4b77      	ldr	r3, [pc, #476]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d30:	4a76      	ldr	r2, [pc, #472]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d32:	f023 0301 	bic.w	r3, r3, #1
 8005d36:	6713      	str	r3, [r2, #112]	; 0x70
 8005d38:	4b74      	ldr	r3, [pc, #464]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3c:	4a73      	ldr	r2, [pc, #460]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d3e:	f023 0304 	bic.w	r3, r3, #4
 8005d42:	6713      	str	r3, [r2, #112]	; 0x70
 8005d44:	e01c      	b.n	8005d80 <HAL_RCC_OscConfig+0x5e0>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b05      	cmp	r3, #5
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0x5c8>
 8005d4e:	4b6f      	ldr	r3, [pc, #444]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	4a6e      	ldr	r2, [pc, #440]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d54:	f043 0304 	orr.w	r3, r3, #4
 8005d58:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	4a6b      	ldr	r2, [pc, #428]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	6713      	str	r3, [r2, #112]	; 0x70
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0x5e0>
 8005d68:	4b68      	ldr	r3, [pc, #416]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	4a67      	ldr	r2, [pc, #412]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	6713      	str	r3, [r2, #112]	; 0x70
 8005d74:	4b65      	ldr	r3, [pc, #404]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a64      	ldr	r2, [pc, #400]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005d7a:	f023 0304 	bic.w	r3, r3, #4
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d015      	beq.n	8005db4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d88:	f7fb fc8c 	bl	80016a4 <HAL_GetTick>
 8005d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d8e:	e00a      	b.n	8005da6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d90:	f7fb fc88 	bl	80016a4 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e14e      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005da6:	4b59      	ldr	r3, [pc, #356]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0ee      	beq.n	8005d90 <HAL_RCC_OscConfig+0x5f0>
 8005db2:	e014      	b.n	8005dde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fb fc76 	bl	80016a4 <HAL_GetTick>
 8005db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dbc:	f7fb fc72 	bl	80016a4 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e138      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005dd2:	4b4e      	ldr	r3, [pc, #312]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1ee      	bne.n	8005dbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 812d 	beq.w	8006042 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005de8:	4b48      	ldr	r3, [pc, #288]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005df0:	2b18      	cmp	r3, #24
 8005df2:	f000 80bd 	beq.w	8005f70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	f040 809e 	bne.w	8005f3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e00:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a41      	ldr	r2, [pc, #260]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fb fc4a 	bl	80016a4 <HAL_GetTick>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fb fc46 	bl	80016a4 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e10e      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e32:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e36:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <HAL_RCC_OscConfig+0x774>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e42:	0112      	lsls	r2, r2, #4
 8005e44:	430a      	orrs	r2, r1
 8005e46:	4931      	ldr	r1, [pc, #196]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	3b01      	subs	r3, #1
 8005e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	025b      	lsls	r3, r3, #9
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	3b01      	subs	r3, #1
 8005e68:	041b      	lsls	r3, r3, #16
 8005e6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e74:	3b01      	subs	r3, #1
 8005e76:	061b      	lsls	r3, r3, #24
 8005e78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e7c:	4923      	ldr	r1, [pc, #140]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005e82:	4b22      	ldr	r3, [pc, #136]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e92:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <HAL_RCC_OscConfig+0x778>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e9a:	00d2      	lsls	r2, r2, #3
 8005e9c:	491b      	ldr	r1, [pc, #108]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005ea2:	4b1a      	ldr	r3, [pc, #104]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f023 020c 	bic.w	r2, r3, #12
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	4917      	ldr	r1, [pc, #92]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005eb4:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f023 0202 	bic.w	r2, r3, #2
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec0:	4912      	ldr	r1, [pc, #72]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	4a10      	ldr	r2, [pc, #64]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed2:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ede:	4b0b      	ldr	r3, [pc, #44]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005eea:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	4a07      	ldr	r2, [pc, #28]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <HAL_RCC_OscConfig+0x76c>)
 8005efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f02:	f7fb fbcf 	bl	80016a4 <HAL_GetTick>
 8005f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f08:	e011      	b.n	8005f2e <HAL_RCC_OscConfig+0x78e>
 8005f0a:	bf00      	nop
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	58024800 	.word	0x58024800
 8005f14:	fffffc0c 	.word	0xfffffc0c
 8005f18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fb fbc2 	bl	80016a4 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e08a      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0x77c>
 8005f3a:	e082      	b.n	8006042 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3c:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a42      	ldr	r2, [pc, #264]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8005f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fb fbac 	bl	80016a4 <HAL_GetTick>
 8005f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f50:	f7fb fba8 	bl	80016a4 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e070      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f62:	4b3a      	ldr	r3, [pc, #232]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x7b0>
 8005f6e:	e068      	b.n	8006042 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f70:	4b36      	ldr	r3, [pc, #216]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f76:	4b35      	ldr	r3, [pc, #212]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d031      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f003 0203 	and.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d12a      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d122      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d11a      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	0a5b      	lsrs	r3, r3, #9
 8005fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	0c1b      	lsrs	r3, r3, #16
 8005fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d108      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	0e1b      	lsrs	r3, r3, #24
 8005fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e02b      	b.n	8006044 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	08db      	lsrs	r3, r3, #3
 8005ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d01f      	beq.n	8006042 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	4a11      	ldr	r2, [pc, #68]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800600e:	f7fb fb49 	bl	80016a4 <HAL_GetTick>
 8006012:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006014:	bf00      	nop
 8006016:	f7fb fb45 	bl	80016a4 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	4293      	cmp	r3, r2
 8006020:	d0f9      	beq.n	8006016 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8006024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_RCC_OscConfig+0x8b0>)
 8006028:	4013      	ands	r3, r2
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800602e:	00d2      	lsls	r2, r2, #3
 8006030:	4906      	ldr	r1, [pc, #24]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8006032:	4313      	orrs	r3, r2
 8006034:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006036:	4b05      	ldr	r3, [pc, #20]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4a04      	ldr	r2, [pc, #16]	; (800604c <HAL_RCC_OscConfig+0x8ac>)
 800603c:	f043 0301 	orr.w	r3, r3, #1
 8006040:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3730      	adds	r7, #48	; 0x30
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	58024400 	.word	0x58024400
 8006050:	ffff0007 	.word	0xffff0007

08006054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e19c      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006068:	4b8a      	ldr	r3, [pc, #552]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	429a      	cmp	r2, r3
 8006074:	d910      	bls.n	8006098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006076:	4b87      	ldr	r3, [pc, #540]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f023 020f 	bic.w	r2, r3, #15
 800607e:	4985      	ldr	r1, [pc, #532]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	4313      	orrs	r3, r2
 8006084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006086:	4b83      	ldr	r3, [pc, #524]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 030f 	and.w	r3, r3, #15
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	429a      	cmp	r2, r3
 8006092:	d001      	beq.n	8006098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e184      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d010      	beq.n	80060c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	4b7b      	ldr	r3, [pc, #492]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d908      	bls.n	80060c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060b4:	4b78      	ldr	r3, [pc, #480]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	4975      	ldr	r1, [pc, #468]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d010      	beq.n	80060f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	4b70      	ldr	r3, [pc, #448]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060de:	429a      	cmp	r2, r3
 80060e0:	d908      	bls.n	80060f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060e2:	4b6d      	ldr	r3, [pc, #436]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	496a      	ldr	r1, [pc, #424]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d010      	beq.n	8006122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	4b64      	ldr	r3, [pc, #400]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800610c:	429a      	cmp	r2, r3
 800610e:	d908      	bls.n	8006122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006110:	4b61      	ldr	r3, [pc, #388]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	495e      	ldr	r1, [pc, #376]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 800611e:	4313      	orrs	r3, r2
 8006120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d010      	beq.n	8006150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	4b59      	ldr	r3, [pc, #356]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800613a:	429a      	cmp	r2, r3
 800613c:	d908      	bls.n	8006150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800613e:	4b56      	ldr	r3, [pc, #344]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4953      	ldr	r1, [pc, #332]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 800614c:	4313      	orrs	r3, r2
 800614e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	4b4d      	ldr	r3, [pc, #308]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	429a      	cmp	r2, r3
 800616a:	d908      	bls.n	800617e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800616c:	4b4a      	ldr	r3, [pc, #296]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f023 020f 	bic.w	r2, r3, #15
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4947      	ldr	r1, [pc, #284]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 800617a:	4313      	orrs	r3, r2
 800617c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d055      	beq.n	8006236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800618a:	4b43      	ldr	r3, [pc, #268]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	4940      	ldr	r1, [pc, #256]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006198:	4313      	orrs	r3, r2
 800619a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d107      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061a4:	4b3c      	ldr	r3, [pc, #240]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d121      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0f6      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061bc:	4b36      	ldr	r3, [pc, #216]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d115      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0ea      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80061d4:	4b30      	ldr	r3, [pc, #192]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0de      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0d6      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80061f4:	4b28      	ldr	r3, [pc, #160]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	f023 0207 	bic.w	r2, r3, #7
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	4925      	ldr	r1, [pc, #148]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006202:	4313      	orrs	r3, r2
 8006204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006206:	f7fb fa4d 	bl	80016a4 <HAL_GetTick>
 800620a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620c:	e00a      	b.n	8006224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800620e:	f7fb fa49 	bl	80016a4 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	f241 3288 	movw	r2, #5000	; 0x1388
 800621c:	4293      	cmp	r3, r2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e0be      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006224:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	429a      	cmp	r2, r3
 8006234:	d1eb      	bne.n	800620e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d010      	beq.n	8006264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	4b14      	ldr	r3, [pc, #80]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	429a      	cmp	r2, r3
 8006250:	d208      	bcs.n	8006264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006252:	4b11      	ldr	r3, [pc, #68]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f023 020f 	bic.w	r2, r3, #15
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	490e      	ldr	r1, [pc, #56]	; (8006298 <HAL_RCC_ClockConfig+0x244>)
 8006260:	4313      	orrs	r3, r2
 8006262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	429a      	cmp	r2, r3
 8006270:	d214      	bcs.n	800629c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006272:	4b08      	ldr	r3, [pc, #32]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f023 020f 	bic.w	r2, r3, #15
 800627a:	4906      	ldr	r1, [pc, #24]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006282:	4b04      	ldr	r3, [pc, #16]	; (8006294 <HAL_RCC_ClockConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d005      	beq.n	800629c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e086      	b.n	80063a2 <HAL_RCC_ClockConfig+0x34e>
 8006294:	52002000 	.word	0x52002000
 8006298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d010      	beq.n	80062ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	4b3f      	ldr	r3, [pc, #252]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d208      	bcs.n	80062ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80062b8:	4b3c      	ldr	r3, [pc, #240]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	4939      	ldr	r1, [pc, #228]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d010      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695a      	ldr	r2, [r3, #20]
 80062da:	4b34      	ldr	r3, [pc, #208]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d208      	bcs.n	80062f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062e6:	4b31      	ldr	r3, [pc, #196]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	492e      	ldr	r1, [pc, #184]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b00      	cmp	r3, #0
 8006302:	d010      	beq.n	8006326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	4b28      	ldr	r3, [pc, #160]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006310:	429a      	cmp	r2, r3
 8006312:	d208      	bcs.n	8006326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	4922      	ldr	r1, [pc, #136]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 8006322:	4313      	orrs	r3, r2
 8006324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d010      	beq.n	8006354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69da      	ldr	r2, [r3, #28]
 8006336:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800633e:	429a      	cmp	r2, r3
 8006340:	d208      	bcs.n	8006354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006342:	4b1a      	ldr	r3, [pc, #104]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	4917      	ldr	r1, [pc, #92]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 8006350:	4313      	orrs	r3, r2
 8006352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006354:	f000 f834 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 8006358:	4602      	mov	r2, r0
 800635a:	4b14      	ldr	r3, [pc, #80]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	0a1b      	lsrs	r3, r3, #8
 8006360:	f003 030f 	and.w	r3, r3, #15
 8006364:	4912      	ldr	r1, [pc, #72]	; (80063b0 <HAL_RCC_ClockConfig+0x35c>)
 8006366:	5ccb      	ldrb	r3, [r1, r3]
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	fa22 f303 	lsr.w	r3, r2, r3
 8006370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006372:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <HAL_RCC_ClockConfig+0x358>)
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	4a0d      	ldr	r2, [pc, #52]	; (80063b0 <HAL_RCC_ClockConfig+0x35c>)
 800637c:	5cd3      	ldrb	r3, [r2, r3]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <HAL_RCC_ClockConfig+0x360>)
 800638a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800638c:	4a0a      	ldr	r2, [pc, #40]	; (80063b8 <HAL_RCC_ClockConfig+0x364>)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006392:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <HAL_RCC_ClockConfig+0x368>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f7fb f93a 	bl	8001610 <HAL_InitTick>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
 80063b0:	0800b4b4 	.word	0x0800b4b4
 80063b4:	24000004 	.word	0x24000004
 80063b8:	24000000 	.word	0x24000000
 80063bc:	24000008 	.word	0x24000008

080063c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b089      	sub	sp, #36	; 0x24
 80063c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c6:	4bb3      	ldr	r3, [pc, #716]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063ce:	2b18      	cmp	r3, #24
 80063d0:	f200 8155 	bhi.w	800667e <HAL_RCC_GetSysClockFreq+0x2be>
 80063d4:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006441 	.word	0x08006441
 80063e0:	0800667f 	.word	0x0800667f
 80063e4:	0800667f 	.word	0x0800667f
 80063e8:	0800667f 	.word	0x0800667f
 80063ec:	0800667f 	.word	0x0800667f
 80063f0:	0800667f 	.word	0x0800667f
 80063f4:	0800667f 	.word	0x0800667f
 80063f8:	0800667f 	.word	0x0800667f
 80063fc:	08006467 	.word	0x08006467
 8006400:	0800667f 	.word	0x0800667f
 8006404:	0800667f 	.word	0x0800667f
 8006408:	0800667f 	.word	0x0800667f
 800640c:	0800667f 	.word	0x0800667f
 8006410:	0800667f 	.word	0x0800667f
 8006414:	0800667f 	.word	0x0800667f
 8006418:	0800667f 	.word	0x0800667f
 800641c:	0800646d 	.word	0x0800646d
 8006420:	0800667f 	.word	0x0800667f
 8006424:	0800667f 	.word	0x0800667f
 8006428:	0800667f 	.word	0x0800667f
 800642c:	0800667f 	.word	0x0800667f
 8006430:	0800667f 	.word	0x0800667f
 8006434:	0800667f 	.word	0x0800667f
 8006438:	0800667f 	.word	0x0800667f
 800643c:	08006473 	.word	0x08006473
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006440:	4b94      	ldr	r3, [pc, #592]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d009      	beq.n	8006460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800644c:	4b91      	ldr	r3, [pc, #580]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	4a90      	ldr	r2, [pc, #576]	; (8006698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800645e:	e111      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006460:	4b8d      	ldr	r3, [pc, #564]	; (8006698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006462:	61bb      	str	r3, [r7, #24]
      break;
 8006464:	e10e      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006466:	4b8d      	ldr	r3, [pc, #564]	; (800669c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006468:	61bb      	str	r3, [r7, #24]
      break;
 800646a:	e10b      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800646c:	4b8c      	ldr	r3, [pc, #560]	; (80066a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800646e:	61bb      	str	r3, [r7, #24]
      break;
 8006470:	e108      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006472:	4b88      	ldr	r3, [pc, #544]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800647c:	4b85      	ldr	r3, [pc, #532]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006486:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006488:	4b82      	ldr	r3, [pc, #520]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006492:	4b80      	ldr	r3, [pc, #512]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	08db      	lsrs	r3, r3, #3
 8006498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	ee07 3a90 	vmov	s15, r3
 80064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80e1 	beq.w	8006678 <HAL_RCC_GetSysClockFreq+0x2b8>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	f000 8083 	beq.w	80065c4 <HAL_RCC_GetSysClockFreq+0x204>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	f200 80a1 	bhi.w	8006608 <HAL_RCC_GetSysClockFreq+0x248>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_RCC_GetSysClockFreq+0x114>
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d056      	beq.n	8006580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80064d2:	e099      	b.n	8006608 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d02d      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064e0:	4b6c      	ldr	r3, [pc, #432]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	08db      	lsrs	r3, r3, #3
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	4a6b      	ldr	r2, [pc, #428]	; (8006698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
 80064f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650a:	4b62      	ldr	r3, [pc, #392]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	ed97 6a02 	vldr	s12, [r7, #8]
 800651e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80066a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800653a:	e087      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	eddf 6a58 	vldr	s13, [pc, #352]	; 80066a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800654a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654e:	4b51      	ldr	r3, [pc, #324]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006562:	eddf 5a50 	vldr	s11, [pc, #320]	; 80066a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800657e:	e065      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80066ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	4b40      	ldr	r3, [pc, #256]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80065a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80066a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065c2:	e043      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80066b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80065d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d6:	4b2f      	ldr	r3, [pc, #188]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80066a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006606:	e021      	b.n	800664c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006612:	eddf 6a26 	vldr	s13, [pc, #152]	; 80066ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800661a:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800662a:	ed97 6a02 	vldr	s12, [r7, #8]
 800662e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80066a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800663a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800663e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800664a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006650:	0a5b      	lsrs	r3, r3, #9
 8006652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006656:	3301      	adds	r3, #1
 8006658:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	ee07 3a90 	vmov	s15, r3
 8006660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006664:	edd7 6a07 	vldr	s13, [r7, #28]
 8006668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006670:	ee17 3a90 	vmov	r3, s15
 8006674:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006676:	e005      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	61bb      	str	r3, [r7, #24]
      break;
 800667c:	e002      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006680:	61bb      	str	r3, [r7, #24]
      break;
 8006682:	bf00      	nop
  }

  return sysclockfreq;
 8006684:	69bb      	ldr	r3, [r7, #24]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3724      	adds	r7, #36	; 0x24
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	03d09000 	.word	0x03d09000
 800669c:	003d0900 	.word	0x003d0900
 80066a0:	007a1200 	.word	0x007a1200
 80066a4:	46000000 	.word	0x46000000
 80066a8:	4c742400 	.word	0x4c742400
 80066ac:	4a742400 	.word	0x4a742400
 80066b0:	4af42400 	.word	0x4af42400

080066b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066ba:	f7ff fe81 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 80066be:	4602      	mov	r2, r0
 80066c0:	4b10      	ldr	r3, [pc, #64]	; (8006704 <HAL_RCC_GetHCLKFreq+0x50>)
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	0a1b      	lsrs	r3, r3, #8
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	490f      	ldr	r1, [pc, #60]	; (8006708 <HAL_RCC_GetHCLKFreq+0x54>)
 80066cc:	5ccb      	ldrb	r3, [r1, r3]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066d8:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <HAL_RCC_GetHCLKFreq+0x50>)
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	4a09      	ldr	r2, [pc, #36]	; (8006708 <HAL_RCC_GetHCLKFreq+0x54>)
 80066e2:	5cd3      	ldrb	r3, [r2, r3]
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	fa22 f303 	lsr.w	r3, r2, r3
 80066ee:	4a07      	ldr	r2, [pc, #28]	; (800670c <HAL_RCC_GetHCLKFreq+0x58>)
 80066f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066f2:	4a07      	ldr	r2, [pc, #28]	; (8006710 <HAL_RCC_GetHCLKFreq+0x5c>)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80066f8:	4b04      	ldr	r3, [pc, #16]	; (800670c <HAL_RCC_GetHCLKFreq+0x58>)
 80066fa:	681b      	ldr	r3, [r3, #0]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	58024400 	.word	0x58024400
 8006708:	0800b4b4 	.word	0x0800b4b4
 800670c:	24000004 	.word	0x24000004
 8006710:	24000000 	.word	0x24000000

08006714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006718:	f7ff ffcc 	bl	80066b4 <HAL_RCC_GetHCLKFreq>
 800671c:	4602      	mov	r2, r0
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	091b      	lsrs	r3, r3, #4
 8006724:	f003 0307 	and.w	r3, r3, #7
 8006728:	4904      	ldr	r1, [pc, #16]	; (800673c <HAL_RCC_GetPCLK1Freq+0x28>)
 800672a:	5ccb      	ldrb	r3, [r1, r3]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006734:	4618      	mov	r0, r3
 8006736:	bd80      	pop	{r7, pc}
 8006738:	58024400 	.word	0x58024400
 800673c:	0800b4b4 	.word	0x0800b4b4

08006740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006744:	f7ff ffb6 	bl	80066b4 <HAL_RCC_GetHCLKFreq>
 8006748:	4602      	mov	r2, r0
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	f003 0307 	and.w	r3, r3, #7
 8006754:	4904      	ldr	r1, [pc, #16]	; (8006768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006756:	5ccb      	ldrb	r3, [r1, r3]
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006760:	4618      	mov	r0, r3
 8006762:	bd80      	pop	{r7, pc}
 8006764:	58024400 	.word	0x58024400
 8006768:	0800b4b4 	.word	0x0800b4b4

0800676c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800676c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006770:	b0ca      	sub	sp, #296	; 0x128
 8006772:	af00      	add	r7, sp, #0
 8006774:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006778:	2300      	movs	r3, #0
 800677a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800677e:	2300      	movs	r3, #0
 8006780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006790:	2500      	movs	r5, #0
 8006792:	ea54 0305 	orrs.w	r3, r4, r5
 8006796:	d049      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800679c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800679e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067a2:	d02f      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80067a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067a8:	d828      	bhi.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ae:	d01a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80067b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067b4:	d822      	bhi.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80067ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067be:	d007      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80067c0:	e01c      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c2:	4bb8      	ldr	r3, [pc, #736]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c6:	4ab7      	ldr	r2, [pc, #732]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067ce:	e01a      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d4:	3308      	adds	r3, #8
 80067d6:	2102      	movs	r1, #2
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 fb61 	bl	8008ea0 <RCCEx_PLL2_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067e4:	e00f      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ea:	3328      	adds	r3, #40	; 0x28
 80067ec:	2102      	movs	r1, #2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f002 fc08 	bl	8009004 <RCCEx_PLL3_Config>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80067fa:	e004      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006802:	e000      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800680e:	4ba5      	ldr	r3, [pc, #660]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006812:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800681a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681c:	4aa1      	ldr	r2, [pc, #644]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800681e:	430b      	orrs	r3, r1
 8006820:	6513      	str	r3, [r2, #80]	; 0x50
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800682c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006838:	f04f 0900 	mov.w	r9, #0
 800683c:	ea58 0309 	orrs.w	r3, r8, r9
 8006840:	d047      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006848:	2b04      	cmp	r3, #4
 800684a:	d82a      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006869 	.word	0x08006869
 8006858:	08006877 	.word	0x08006877
 800685c:	0800688d 	.word	0x0800688d
 8006860:	080068ab 	.word	0x080068ab
 8006864:	080068ab 	.word	0x080068ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4b8e      	ldr	r3, [pc, #568]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a8d      	ldr	r2, [pc, #564]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006874:	e01a      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687a:	3308      	adds	r3, #8
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f002 fb0e 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800688a:	e00f      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800688c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006890:	3328      	adds	r3, #40	; 0x28
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f002 fbb5 	bl	8009004 <RCCEx_PLL3_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068a0:	e004      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068a8:	e000      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80068aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80068b4:	4b7b      	ldr	r3, [pc, #492]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b8:	f023 0107 	bic.w	r1, r3, #7
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	4a78      	ldr	r2, [pc, #480]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6513      	str	r3, [r2, #80]	; 0x50
 80068c8:	e003      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80068de:	f04f 0b00 	mov.w	fp, #0
 80068e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80068e6:	d04c      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80068e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f2:	d030      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80068f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f8:	d829      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80068fa:	2bc0      	cmp	r3, #192	; 0xc0
 80068fc:	d02d      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80068fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006900:	d825      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006902:	2b80      	cmp	r3, #128	; 0x80
 8006904:	d018      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d821      	bhi.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d007      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006912:	e01c      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006914:	4b63      	ldr	r3, [pc, #396]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	4a62      	ldr	r2, [pc, #392]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800691a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800691e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006920:	e01c      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006926:	3308      	adds	r3, #8
 8006928:	2100      	movs	r1, #0
 800692a:	4618      	mov	r0, r3
 800692c:	f002 fab8 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006936:	e011      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800693c:	3328      	adds	r3, #40	; 0x28
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f002 fb5f 	bl	8009004 <RCCEx_PLL3_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800694c:	e006      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006954:	e002      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006956:	bf00      	nop
 8006958:	e000      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800695a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800695c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006964:	4b4f      	ldr	r3, [pc, #316]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006972:	4a4c      	ldr	r2, [pc, #304]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006974:	430b      	orrs	r3, r1
 8006976:	6513      	str	r3, [r2, #80]	; 0x50
 8006978:	e003      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800697e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800698e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006992:	2300      	movs	r3, #0
 8006994:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006998:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800699c:	460b      	mov	r3, r1
 800699e:	4313      	orrs	r3, r2
 80069a0:	d053      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069ae:	d035      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80069b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069b4:	d82e      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069ba:	d031      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80069bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069c0:	d828      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c6:	d01a      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80069c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069cc:	d822      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80069d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069d6:	d007      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80069d8:	e01c      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069da:	4b32      	ldr	r3, [pc, #200]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	4a31      	ldr	r2, [pc, #196]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069e6:	e01c      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ec:	3308      	adds	r3, #8
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f002 fa55 	bl	8008ea0 <RCCEx_PLL2_Config>
 80069f6:	4603      	mov	r3, r0
 80069f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80069fc:	e011      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a02:	3328      	adds	r3, #40	; 0x28
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f002 fafc 	bl	8009004 <RCCEx_PLL3_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a12:	e006      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a1a:	e002      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a1c:	bf00      	nop
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a3a:	4a1a      	ldr	r2, [pc, #104]	; (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006a56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d056      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a76:	d038      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a7c:	d831      	bhi.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a82:	d034      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a88:	d82b      	bhi.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a8e:	d01d      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a94:	d825      	bhi.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d006      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a9e:	d00a      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006aa0:	e01f      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006aa2:	bf00      	nop
 8006aa4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa8:	4ba2      	ldr	r3, [pc, #648]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4aa1      	ldr	r2, [pc, #644]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ab4:	e01c      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aba:	3308      	adds	r3, #8
 8006abc:	2100      	movs	r1, #0
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f002 f9ee 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006aca:	e011      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ad0:	3328      	adds	r3, #40	; 0x28
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 fa95 	bl	8009004 <RCCEx_PLL3_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ae0:	e006      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006af8:	4b8e      	ldr	r3, [pc, #568]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b08:	4a8a      	ldr	r2, [pc, #552]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d03a      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3e:	2b30      	cmp	r3, #48	; 0x30
 8006b40:	d01f      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006b42:	2b30      	cmp	r3, #48	; 0x30
 8006b44:	d819      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b46:	2b20      	cmp	r3, #32
 8006b48:	d00c      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	d815      	bhi.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d019      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006b52:	2b10      	cmp	r3, #16
 8006b54:	d111      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b56:	4b77      	ldr	r3, [pc, #476]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	4a76      	ldr	r2, [pc, #472]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b62:	e011      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b68:	3308      	adds	r3, #8
 8006b6a:	2102      	movs	r1, #2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f002 f997 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006b78:	e006      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b90:	4b68      	ldr	r3, [pc, #416]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b94:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9e:	4a65      	ldr	r2, [pc, #404]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ba4:	e003      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006baa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	d051      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd8:	d035      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bde:	d82e      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006be0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006be4:	d031      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bea:	d828      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf0:	d01a      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bf6:	d822      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c00:	d007      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006c02:	e01c      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c04:	4b4b      	ldr	r3, [pc, #300]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	4a4a      	ldr	r2, [pc, #296]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c10:	e01c      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c16:	3308      	adds	r3, #8
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f002 f940 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c26:	e011      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c2c:	3328      	adds	r3, #40	; 0x28
 8006c2e:	2100      	movs	r1, #0
 8006c30:	4618      	mov	r0, r3
 8006c32:	f002 f9e7 	bl	8009004 <RCCEx_PLL3_Config>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c3c:	e006      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c44:	e002      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c46:	bf00      	nop
 8006c48:	e000      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c54:	4b37      	ldr	r3, [pc, #220]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c62:	4a34      	ldr	r2, [pc, #208]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6513      	str	r3, [r2, #80]	; 0x50
 8006c68:	e003      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c82:	2300      	movs	r3, #0
 8006c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d056      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c9c:	d033      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ca2:	d82c      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ca4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ca8:	d02f      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006caa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cae:	d826      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cb4:	d02b      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006cb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006cba:	d820      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cc0:	d012      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cc6:	d81a      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d022      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd0:	d115      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	2101      	movs	r1, #1
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f002 f8e0 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ce6:	e015      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cec:	3328      	adds	r3, #40	; 0x28
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 f987 	bl	8009004 <RCCEx_PLL3_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006cfc:	e00a      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d04:	e006      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d06:	bf00      	nop
 8006d08:	e004      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d20:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d2a:	4a02      	ldr	r2, [pc, #8]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	6513      	str	r3, [r2, #80]	; 0x50
 8006d30:	e006      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006d32:	bf00      	nop
 8006d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d50:	2300      	movs	r3, #0
 8006d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	d055      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d6c:	d033      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d72:	d82c      	bhi.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d78:	d02f      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d7e:	d826      	bhi.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d84:	d02b      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d8a:	d820      	bhi.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d90:	d012      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d96:	d81a      	bhi.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d022      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006da0:	d115      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da6:	3308      	adds	r3, #8
 8006da8:	2101      	movs	r1, #1
 8006daa:	4618      	mov	r0, r3
 8006dac:	f002 f878 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006db6:	e015      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbc:	3328      	adds	r3, #40	; 0x28
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 f91f 	bl	8009004 <RCCEx_PLL3_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dcc:	e00a      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dd4:	e006      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dd6:	bf00      	nop
 8006dd8:	e004      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006dec:	4ba3      	ldr	r3, [pc, #652]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dfc:	4a9f      	ldr	r2, [pc, #636]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dfe:	430b      	orrs	r3, r1
 8006e00:	6593      	str	r3, [r2, #88]	; 0x58
 8006e02:	e003      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e26:	460b      	mov	r3, r1
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	d037      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e36:	d00e      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3c:	d816      	bhi.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d018      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e46:	d111      	bne.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e48:	4b8c      	ldr	r3, [pc, #560]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	4a8b      	ldr	r2, [pc, #556]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e54:	e00f      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f002 f81e 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e6a:	e004      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e72:	e000      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e7e:	4b7f      	ldr	r3, [pc, #508]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8c:	4a7b      	ldr	r2, [pc, #492]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	6513      	str	r3, [r2, #80]	; 0x50
 8006e92:	e003      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eac:	2300      	movs	r3, #0
 8006eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006eb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	d039      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d81c      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006ec6:	a201      	add	r2, pc, #4	; (adr r2, 8006ecc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f09 	.word	0x08006f09
 8006ed0:	08006edd 	.word	0x08006edd
 8006ed4:	08006eeb 	.word	0x08006eeb
 8006ed8:	08006f09 	.word	0x08006f09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006edc:	4b67      	ldr	r3, [pc, #412]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee0:	4a66      	ldr	r2, [pc, #408]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ee8:	e00f      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eee:	3308      	adds	r3, #8
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 ffd4 	bl	8008ea0 <RCCEx_PLL2_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f12:	4b5a      	ldr	r3, [pc, #360]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f16:	f023 0103 	bic.w	r1, r3, #3
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f20:	4a56      	ldr	r2, [pc, #344]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f22:	430b      	orrs	r3, r1
 8006f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f40:	2300      	movs	r3, #0
 8006f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	f000 809f 	beq.w	8007090 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f52:	4b4b      	ldr	r3, [pc, #300]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a4a      	ldr	r2, [pc, #296]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f5e:	f7fa fba1 	bl	80016a4 <HAL_GetTick>
 8006f62:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f66:	e00b      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f68:	f7fa fb9c 	bl	80016a4 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b64      	cmp	r3, #100	; 0x64
 8006f76:	d903      	bls.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f7e:	e005      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f80:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0ed      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d179      	bne.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f94:	4b39      	ldr	r3, [pc, #228]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fa0:	4053      	eors	r3, r2
 8006fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d015      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006faa:	4b34      	ldr	r3, [pc, #208]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fb6:	4b31      	ldr	r3, [pc, #196]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	4a30      	ldr	r2, [pc, #192]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fc2:	4b2e      	ldr	r3, [pc, #184]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fc6:	4a2d      	ldr	r2, [pc, #180]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fcc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fce:	4a2b      	ldr	r2, [pc, #172]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006fd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe2:	d118      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fa fb5e 	bl	80016a4 <HAL_GetTick>
 8006fe8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fec:	e00d      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fee:	f7fa fb59 	bl	80016a4 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ff8:	1ad2      	subs	r2, r2, r3
 8006ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d903      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007008:	e005      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800700a:	4b1c      	ldr	r3, [pc, #112]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0eb      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800701a:	2b00      	cmp	r3, #0
 800701c:	d129      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800702a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800702e:	d10e      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007030:	4b12      	ldr	r3, [pc, #72]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800703c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007040:	091a      	lsrs	r2, r3, #4
 8007042:	4b10      	ldr	r3, [pc, #64]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007044:	4013      	ands	r3, r2
 8007046:	4a0d      	ldr	r2, [pc, #52]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007048:	430b      	orrs	r3, r1
 800704a:	6113      	str	r3, [r2, #16]
 800704c:	e005      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800704e:	4b0b      	ldr	r3, [pc, #44]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	4a0a      	ldr	r2, [pc, #40]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007054:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007058:	6113      	str	r3, [r2, #16]
 800705a:	4b08      	ldr	r3, [pc, #32]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800705c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800705e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800706a:	4a04      	ldr	r2, [pc, #16]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706c:	430b      	orrs	r3, r1
 800706e:	6713      	str	r3, [r2, #112]	; 0x70
 8007070:	e00e      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007076:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800707a:	e009      	b.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800707c:	58024400 	.word	0x58024400
 8007080:	58024800 	.word	0x58024800
 8007084:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800708c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f002 0301 	and.w	r3, r2, #1
 800709c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070a0:	2300      	movs	r3, #0
 80070a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f000 8089 	beq.w	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b8:	2b28      	cmp	r3, #40	; 0x28
 80070ba:	d86b      	bhi.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	0800719d 	.word	0x0800719d
 80070c8:	08007195 	.word	0x08007195
 80070cc:	08007195 	.word	0x08007195
 80070d0:	08007195 	.word	0x08007195
 80070d4:	08007195 	.word	0x08007195
 80070d8:	08007195 	.word	0x08007195
 80070dc:	08007195 	.word	0x08007195
 80070e0:	08007195 	.word	0x08007195
 80070e4:	08007169 	.word	0x08007169
 80070e8:	08007195 	.word	0x08007195
 80070ec:	08007195 	.word	0x08007195
 80070f0:	08007195 	.word	0x08007195
 80070f4:	08007195 	.word	0x08007195
 80070f8:	08007195 	.word	0x08007195
 80070fc:	08007195 	.word	0x08007195
 8007100:	08007195 	.word	0x08007195
 8007104:	0800717f 	.word	0x0800717f
 8007108:	08007195 	.word	0x08007195
 800710c:	08007195 	.word	0x08007195
 8007110:	08007195 	.word	0x08007195
 8007114:	08007195 	.word	0x08007195
 8007118:	08007195 	.word	0x08007195
 800711c:	08007195 	.word	0x08007195
 8007120:	08007195 	.word	0x08007195
 8007124:	0800719d 	.word	0x0800719d
 8007128:	08007195 	.word	0x08007195
 800712c:	08007195 	.word	0x08007195
 8007130:	08007195 	.word	0x08007195
 8007134:	08007195 	.word	0x08007195
 8007138:	08007195 	.word	0x08007195
 800713c:	08007195 	.word	0x08007195
 8007140:	08007195 	.word	0x08007195
 8007144:	0800719d 	.word	0x0800719d
 8007148:	08007195 	.word	0x08007195
 800714c:	08007195 	.word	0x08007195
 8007150:	08007195 	.word	0x08007195
 8007154:	08007195 	.word	0x08007195
 8007158:	08007195 	.word	0x08007195
 800715c:	08007195 	.word	0x08007195
 8007160:	08007195 	.word	0x08007195
 8007164:	0800719d 	.word	0x0800719d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716c:	3308      	adds	r3, #8
 800716e:	2101      	movs	r1, #1
 8007170:	4618      	mov	r0, r3
 8007172:	f001 fe95 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800717c:	e00f      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800717e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007182:	3328      	adds	r3, #40	; 0x28
 8007184:	2101      	movs	r1, #1
 8007186:	4618      	mov	r0, r3
 8007188:	f001 ff3c 	bl	8009004 <RCCEx_PLL3_Config>
 800718c:	4603      	mov	r3, r0
 800718e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007192:	e004      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800719a:	e000      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800719c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071a6:	4bbf      	ldr	r3, [pc, #764]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b4:	4abb      	ldr	r2, [pc, #748]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071b6:	430b      	orrs	r3, r1
 80071b8:	6553      	str	r3, [r2, #84]	; 0x54
 80071ba:	e003      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f002 0302 	and.w	r3, r2, #2
 80071d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071d4:	2300      	movs	r3, #0
 80071d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80071de:	460b      	mov	r3, r1
 80071e0:	4313      	orrs	r3, r2
 80071e2:	d041      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ea:	2b05      	cmp	r3, #5
 80071ec:	d824      	bhi.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007241 	.word	0x08007241
 80071f8:	0800720d 	.word	0x0800720d
 80071fc:	08007223 	.word	0x08007223
 8007200:	08007241 	.word	0x08007241
 8007204:	08007241 	.word	0x08007241
 8007208:	08007241 	.word	0x08007241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007210:	3308      	adds	r3, #8
 8007212:	2101      	movs	r1, #1
 8007214:	4618      	mov	r0, r3
 8007216:	f001 fe43 	bl	8008ea0 <RCCEx_PLL2_Config>
 800721a:	4603      	mov	r3, r0
 800721c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007220:	e00f      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007226:	3328      	adds	r3, #40	; 0x28
 8007228:	2101      	movs	r1, #1
 800722a:	4618      	mov	r0, r3
 800722c:	f001 feea 	bl	8009004 <RCCEx_PLL3_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007236:	e004      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800723e:	e000      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800724a:	4b96      	ldr	r3, [pc, #600]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	f023 0107 	bic.w	r1, r3, #7
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007258:	4a92      	ldr	r2, [pc, #584]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6553      	str	r3, [r2, #84]	; 0x54
 800725e:	e003      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800726c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007270:	f002 0304 	and.w	r3, r2, #4
 8007274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007278:	2300      	movs	r3, #0
 800727a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800727e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007282:	460b      	mov	r3, r1
 8007284:	4313      	orrs	r3, r2
 8007286:	d044      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007290:	2b05      	cmp	r3, #5
 8007292:	d825      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007294:	a201      	add	r2, pc, #4	; (adr r2, 800729c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072e9 	.word	0x080072e9
 80072a0:	080072b5 	.word	0x080072b5
 80072a4:	080072cb 	.word	0x080072cb
 80072a8:	080072e9 	.word	0x080072e9
 80072ac:	080072e9 	.word	0x080072e9
 80072b0:	080072e9 	.word	0x080072e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b8:	3308      	adds	r3, #8
 80072ba:	2101      	movs	r1, #1
 80072bc:	4618      	mov	r0, r3
 80072be:	f001 fdef 	bl	8008ea0 <RCCEx_PLL2_Config>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072c8:	e00f      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ce:	3328      	adds	r3, #40	; 0x28
 80072d0:	2101      	movs	r1, #1
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 fe96 	bl	8009004 <RCCEx_PLL3_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80072de:	e004      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072e6:	e000      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80072e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072f2:	4b6c      	ldr	r3, [pc, #432]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f6:	f023 0107 	bic.w	r1, r3, #7
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007302:	4a68      	ldr	r2, [pc, #416]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007304:	430b      	orrs	r3, r1
 8007306:	6593      	str	r3, [r2, #88]	; 0x58
 8007308:	e003      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800730e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	f002 0320 	and.w	r3, r2, #32
 800731e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800732c:	460b      	mov	r3, r1
 800732e:	4313      	orrs	r3, r2
 8007330:	d055      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800733e:	d033      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007344:	d82c      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800734a:	d02f      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007350:	d826      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007356:	d02b      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007358:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800735c:	d820      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800735e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007362:	d012      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007368:	d81a      	bhi.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d022      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800736e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007372:	d115      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007378:	3308      	adds	r3, #8
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fd8f 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007388:	e015      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738e:	3328      	adds	r3, #40	; 0x28
 8007390:	2102      	movs	r1, #2
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fe36 	bl	8009004 <RCCEx_PLL3_Config>
 8007398:	4603      	mov	r3, r0
 800739a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800739e:	e00a      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073a6:	e006      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073a8:	bf00      	nop
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073ac:	bf00      	nop
 80073ae:	e002      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073b0:	bf00      	nop
 80073b2:	e000      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80073b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10b      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073be:	4b39      	ldr	r3, [pc, #228]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	4a35      	ldr	r2, [pc, #212]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	6553      	str	r3, [r2, #84]	; 0x54
 80073d4:	e003      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80073ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073ee:	2300      	movs	r3, #0
 80073f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80073f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4313      	orrs	r3, r2
 80073fc:	d058      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80073fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007406:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800740a:	d033      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800740c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007410:	d82c      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007416:	d02f      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800741c:	d826      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800741e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007422:	d02b      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007428:	d820      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800742a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800742e:	d012      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007434:	d81a      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d022      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743e:	d115      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007444:	3308      	adds	r3, #8
 8007446:	2100      	movs	r1, #0
 8007448:	4618      	mov	r0, r3
 800744a:	f001 fd29 	bl	8008ea0 <RCCEx_PLL2_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007454:	e015      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800745a:	3328      	adds	r3, #40	; 0x28
 800745c:	2102      	movs	r1, #2
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fdd0 	bl	8009004 <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800746a:	e00a      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007472:	e006      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007474:	bf00      	nop
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007478:	bf00      	nop
 800747a:	e002      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10e      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800748a:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800748c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800749a:	4a02      	ldr	r2, [pc, #8]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800749c:	430b      	orrs	r3, r1
 800749e:	6593      	str	r3, [r2, #88]	; 0x58
 80074a0:	e006      	b.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80074a2:	bf00      	nop
 80074a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80074bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074c0:	2300      	movs	r3, #0
 80074c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80074ca:	460b      	mov	r3, r1
 80074cc:	4313      	orrs	r3, r2
 80074ce:	d055      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80074d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074dc:	d033      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80074de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80074e2:	d82c      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e8:	d02f      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	d826      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074f4:	d02b      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80074f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80074fa:	d820      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80074fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007500:	d012      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007506:	d81a      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d022      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800750c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007510:	d115      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007516:	3308      	adds	r3, #8
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f001 fcc0 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007526:	e015      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752c:	3328      	adds	r3, #40	; 0x28
 800752e:	2102      	movs	r1, #2
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fd67 	bl	8009004 <RCCEx_PLL3_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800753c:	e00a      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007544:	e006      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007546:	bf00      	nop
 8007548:	e004      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800754a:	bf00      	nop
 800754c:	e002      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800754e:	bf00      	nop
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800755c:	4ba1      	ldr	r3, [pc, #644]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800755e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007560:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800756c:	4a9d      	ldr	r2, [pc, #628]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800756e:	430b      	orrs	r3, r1
 8007570:	6593      	str	r3, [r2, #88]	; 0x58
 8007572:	e003      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800757c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f002 0308 	and.w	r3, r2, #8
 8007588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800758c:	2300      	movs	r3, #0
 800758e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007592:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007596:	460b      	mov	r3, r1
 8007598:	4313      	orrs	r3, r2
 800759a:	d01e      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a8:	d10c      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ae:	3328      	adds	r3, #40	; 0x28
 80075b0:	2102      	movs	r1, #2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fd26 	bl	8009004 <RCCEx_PLL3_Config>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80075c4:	4b87      	ldr	r3, [pc, #540]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075d4:	4a83      	ldr	r2, [pc, #524]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f002 0310 	and.w	r3, r2, #16
 80075e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80075f4:	460b      	mov	r3, r1
 80075f6:	4313      	orrs	r3, r2
 80075f8:	d01e      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007606:	d10c      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800760c:	3328      	adds	r3, #40	; 0x28
 800760e:	2102      	movs	r1, #2
 8007610:	4618      	mov	r0, r3
 8007612:	f001 fcf7 	bl	8009004 <RCCEx_PLL3_Config>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007622:	4b70      	ldr	r3, [pc, #448]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800762e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007632:	4a6c      	ldr	r2, [pc, #432]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007634:	430b      	orrs	r3, r1
 8007636:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007648:	2300      	movs	r3, #0
 800764a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800764e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007652:	460b      	mov	r3, r1
 8007654:	4313      	orrs	r3, r2
 8007656:	d03e      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007664:	d022      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800766a:	d81b      	bhi.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007674:	d00b      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007676:	e015      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767c:	3308      	adds	r3, #8
 800767e:	2100      	movs	r1, #0
 8007680:	4618      	mov	r0, r3
 8007682:	f001 fc0d 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800768c:	e00f      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800768e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007692:	3328      	adds	r3, #40	; 0x28
 8007694:	2102      	movs	r1, #2
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fcb4 	bl	8009004 <RCCEx_PLL3_Config>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076a2:	e004      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076aa:	e000      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80076ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076b6:	4b4b      	ldr	r3, [pc, #300]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80076be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076c6:	4a47      	ldr	r2, [pc, #284]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076c8:	430b      	orrs	r3, r1
 80076ca:	6593      	str	r3, [r2, #88]	; 0x58
 80076cc:	e003      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80076e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80076e4:	2300      	movs	r3, #0
 80076e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80076ec:	460b      	mov	r3, r1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	d03b      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80076fe:	d01f      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007704:	d818      	bhi.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770a:	d003      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800770c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007710:	d007      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007712:	e011      	b.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007714:	4b33      	ldr	r3, [pc, #204]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	4a32      	ldr	r2, [pc, #200]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800771a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800771e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007720:	e00f      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007726:	3328      	adds	r3, #40	; 0x28
 8007728:	2101      	movs	r1, #1
 800772a:	4618      	mov	r0, r3
 800772c:	f001 fc6a 	bl	8009004 <RCCEx_PLL3_Config>
 8007730:	4603      	mov	r3, r0
 8007732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007736:	e004      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800773e:	e000      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10b      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800774a:	4b26      	ldr	r3, [pc, #152]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775a:	4a22      	ldr	r2, [pc, #136]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800775c:	430b      	orrs	r3, r1
 800775e:	6553      	str	r3, [r2, #84]	; 0x54
 8007760:	e003      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800776a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007776:	673b      	str	r3, [r7, #112]	; 0x70
 8007778:	2300      	movs	r3, #0
 800777a:	677b      	str	r3, [r7, #116]	; 0x74
 800777c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d034      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d007      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007796:	e011      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007798:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	4a11      	ldr	r2, [pc, #68]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800779e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077a4:	e00e      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077aa:	3308      	adds	r3, #8
 80077ac:	2102      	movs	r1, #2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f001 fb76 	bl	8008ea0 <RCCEx_PLL2_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077ba:	e003      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10d      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077da:	4a02      	ldr	r2, [pc, #8]	; (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077dc:	430b      	orrs	r3, r1
 80077de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077e0:	e006      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80077e2:	bf00      	nop
 80077e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80077fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80077fe:	2300      	movs	r3, #0
 8007800:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007802:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007806:	460b      	mov	r3, r1
 8007808:	4313      	orrs	r3, r2
 800780a:	d00c      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007810:	3328      	adds	r3, #40	; 0x28
 8007812:	2102      	movs	r1, #2
 8007814:	4618      	mov	r0, r3
 8007816:	f001 fbf5 	bl	8009004 <RCCEx_PLL3_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007832:	663b      	str	r3, [r7, #96]	; 0x60
 8007834:	2300      	movs	r3, #0
 8007836:	667b      	str	r3, [r7, #100]	; 0x64
 8007838:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800783c:	460b      	mov	r3, r1
 800783e:	4313      	orrs	r3, r2
 8007840:	d038      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800784a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800784e:	d018      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007854:	d811      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800785a:	d014      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800785c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007860:	d80b      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d011      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786a:	d106      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786c:	4bc3      	ldr	r3, [pc, #780]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	4ac2      	ldr	r2, [pc, #776]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007878:	e008      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007880:	e004      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800788a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800788c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007890:	2b00      	cmp	r3, #0
 8007892:	d10b      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007894:	4bb9      	ldr	r3, [pc, #740]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007898:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800789c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078a4:	4ab5      	ldr	r2, [pc, #724]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078a6:	430b      	orrs	r3, r1
 80078a8:	6553      	str	r3, [r2, #84]	; 0x54
 80078aa:	e003      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80078c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80078c2:	2300      	movs	r3, #0
 80078c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80078ca:	460b      	mov	r3, r1
 80078cc:	4313      	orrs	r3, r2
 80078ce:	d009      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078d0:	4baa      	ldr	r3, [pc, #680]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078de:	4aa7      	ldr	r2, [pc, #668]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80078f0:	653b      	str	r3, [r7, #80]	; 0x50
 80078f2:	2300      	movs	r3, #0
 80078f4:	657b      	str	r3, [r7, #84]	; 0x54
 80078f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80078fa:	460b      	mov	r3, r1
 80078fc:	4313      	orrs	r3, r2
 80078fe:	d00a      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007900:	4b9e      	ldr	r3, [pc, #632]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007910:	4a9a      	ldr	r2, [pc, #616]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007912:	430b      	orrs	r3, r1
 8007914:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007922:	64bb      	str	r3, [r7, #72]	; 0x48
 8007924:	2300      	movs	r3, #0
 8007926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007928:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800792c:	460b      	mov	r3, r1
 800792e:	4313      	orrs	r3, r2
 8007930:	d009      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007932:	4b92      	ldr	r3, [pc, #584]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007936:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800793a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007940:	4a8e      	ldr	r2, [pc, #568]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007942:	430b      	orrs	r3, r1
 8007944:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007952:	643b      	str	r3, [r7, #64]	; 0x40
 8007954:	2300      	movs	r3, #0
 8007956:	647b      	str	r3, [r7, #68]	; 0x44
 8007958:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800795c:	460b      	mov	r3, r1
 800795e:	4313      	orrs	r3, r2
 8007960:	d00e      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007962:	4b86      	ldr	r3, [pc, #536]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	4a85      	ldr	r2, [pc, #532]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800796c:	6113      	str	r3, [r2, #16]
 800796e:	4b83      	ldr	r3, [pc, #524]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007970:	6919      	ldr	r1, [r3, #16]
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007976:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800797a:	4a80      	ldr	r2, [pc, #512]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800797c:	430b      	orrs	r3, r1
 800797e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007988:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800798c:	63bb      	str	r3, [r7, #56]	; 0x38
 800798e:	2300      	movs	r3, #0
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007992:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007996:	460b      	mov	r3, r1
 8007998:	4313      	orrs	r3, r2
 800799a:	d009      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800799c:	4b77      	ldr	r3, [pc, #476]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800799e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	4a74      	ldr	r2, [pc, #464]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ac:	430b      	orrs	r3, r1
 80079ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80079bc:	633b      	str	r3, [r7, #48]	; 0x30
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
 80079c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80079c6:	460b      	mov	r3, r1
 80079c8:	4313      	orrs	r3, r2
 80079ca:	d00a      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079cc:	4b6b      	ldr	r3, [pc, #428]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079dc:	4a67      	ldr	r2, [pc, #412]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079de:	430b      	orrs	r3, r1
 80079e0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	2100      	movs	r1, #0
 80079ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80079f8:	460b      	mov	r3, r1
 80079fa:	4313      	orrs	r3, r2
 80079fc:	d011      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a02:	3308      	adds	r3, #8
 8007a04:	2100      	movs	r1, #0
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 fa4a 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	6239      	str	r1, [r7, #32]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
 8007a34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	d011      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a42:	3308      	adds	r3, #8
 8007a44:	2101      	movs	r1, #1
 8007a46:	4618      	mov	r0, r3
 8007a48:	f001 fa2a 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	61b9      	str	r1, [r7, #24]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	d011      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a82:	3308      	adds	r3, #8
 8007a84:	2102      	movs	r1, #2
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 fa0a 	bl	8008ea0 <RCCEx_PLL2_Config>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6139      	str	r1, [r7, #16]
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d011      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac2:	3328      	adds	r3, #40	; 0x28
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 fa9c 	bl	8009004 <RCCEx_PLL3_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	2100      	movs	r1, #0
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007af8:	460b      	mov	r3, r1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	d011      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b02:	3328      	adds	r3, #40	; 0x28
 8007b04:	2101      	movs	r1, #1
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 fa7c 	bl	8009004 <RCCEx_PLL3_Config>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	607b      	str	r3, [r7, #4]
 8007b34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	d011      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b42:	3328      	adds	r3, #40	; 0x28
 8007b44:	2102      	movs	r1, #2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f001 fa5c 	bl	8009004 <RCCEx_PLL3_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007b62:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8007b76:	46bd      	mov	sp, r7
 8007b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b7c:	58024400 	.word	0x58024400

08007b80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b090      	sub	sp, #64	; 0x40
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b8e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007b92:	430b      	orrs	r3, r1
 8007b94:	f040 8094 	bne.w	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007b98:	4b9e      	ldr	r3, [pc, #632]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	f200 8087 	bhi.w	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bc5 	.word	0x08007bc5
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007c15 	.word	0x08007c15
 8007bbc:	08007cb1 	.word	0x08007cb1
 8007bc0:	08007c3d 	.word	0x08007c3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bc4:	4b93      	ldr	r3, [pc, #588]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bd0:	d108      	bne.n	8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f001 f810 	bl	8008bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007be0:	f000 bd45 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007be8:	f000 bd41 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bec:	4b89      	ldr	r3, [pc, #548]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf8:	d108      	bne.n	8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bfa:	f107 0318 	add.w	r3, r7, #24
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fd54 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c08:	f000 bd31 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c10:	f000 bd2d 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c14:	4b7f      	ldr	r3, [pc, #508]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c20:	d108      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 fe94 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c30:	f000 bd1d 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c38:	f000 bd19 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c3c:	4b75      	ldr	r3, [pc, #468]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c46:	4b73      	ldr	r3, [pc, #460]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d10c      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c58:	4b6e      	ldr	r3, [pc, #440]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	08db      	lsrs	r3, r3, #3
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	4a6d      	ldr	r2, [pc, #436]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007c64:	fa22 f303 	lsr.w	r3, r2, r3
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c6a:	e01f      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c6c:	4b69      	ldr	r3, [pc, #420]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c78:	d106      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c80:	d102      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c82:	4b66      	ldr	r3, [pc, #408]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c86:	e011      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c88:	4b62      	ldr	r3, [pc, #392]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c94:	d106      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9c:	d102      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c9e:	4b60      	ldr	r3, [pc, #384]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca2:	e003      	b.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ca8:	f000 bce1 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007cac:	f000 bcdf 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007cb0:	4b5c      	ldr	r3, [pc, #368]	; (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cb4:	f000 bcdb 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cbc:	f000 bcd7 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007cc8:	430b      	orrs	r3, r1
 8007cca:	f040 80ad 	bne.w	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007cce:	4b51      	ldr	r3, [pc, #324]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007cd6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cde:	d056      	beq.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce6:	f200 8090 	bhi.w	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2bc0      	cmp	r3, #192	; 0xc0
 8007cee:	f000 8088 	beq.w	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	2bc0      	cmp	r3, #192	; 0xc0
 8007cf6:	f200 8088 	bhi.w	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	2b80      	cmp	r3, #128	; 0x80
 8007cfe:	d032      	beq.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	2b80      	cmp	r3, #128	; 0x80
 8007d04:	f200 8081 	bhi.w	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	2b40      	cmp	r3, #64	; 0x40
 8007d12:	d014      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007d14:	e079      	b.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d16:	4b3f      	ldr	r3, [pc, #252]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d22:	d108      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f000 ff67 	bl	8008bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d32:	f000 bc9c 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d3a:	f000 bc98 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d3e:	4b35      	ldr	r3, [pc, #212]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d4a:	d108      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d4c:	f107 0318 	add.w	r3, r7, #24
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fcab 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d5a:	f000 bc88 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d62:	f000 bc84 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d66:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d72:	d108      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d74:	f107 030c 	add.w	r3, r7, #12
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fdeb 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d82:	f000 bc74 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d8a:	f000 bc70 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d8e:	4b21      	ldr	r3, [pc, #132]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d10c      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007daa:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	08db      	lsrs	r3, r3, #3
 8007db0:	f003 0303 	and.w	r3, r3, #3
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007db6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dbc:	e01f      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dbe:	4b15      	ldr	r3, [pc, #84]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dca:	d106      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dd2:	d102      	bne.n	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007dd4:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd8:	e011      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dda:	4b0e      	ldr	r3, [pc, #56]	; (8007e14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de6:	d106      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dee:	d102      	bne.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007df0:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	e003      	b.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007dfa:	f000 bc38 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007dfe:	f000 bc36 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e06:	f000 bc32 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e0e:	f000 bc2e 	b.w	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007e12:	bf00      	nop
 8007e14:	58024400 	.word	0x58024400
 8007e18:	03d09000 	.word	0x03d09000
 8007e1c:	003d0900 	.word	0x003d0900
 8007e20:	007a1200 	.word	0x007a1200
 8007e24:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007e30:	430b      	orrs	r3, r1
 8007e32:	f040 809c 	bne.w	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007e36:	4b9e      	ldr	r3, [pc, #632]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007e3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e46:	d054      	beq.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e4e:	f200 808b 	bhi.w	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e58:	f000 8083 	beq.w	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e62:	f200 8081 	bhi.w	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e6c:	d02f      	beq.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e74:	d878      	bhi.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d004      	beq.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e82:	d012      	beq.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007e84:	e070      	b.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e86:	4b8a      	ldr	r3, [pc, #552]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e92:	d107      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f000 feaf 	bl	8008bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea2:	e3e4      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ea8:	e3e1      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eaa:	4b81      	ldr	r3, [pc, #516]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eb6:	d107      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb8:	f107 0318 	add.w	r3, r7, #24
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fbf5 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ec6:	e3d2      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ecc:	e3cf      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ece:	4b78      	ldr	r3, [pc, #480]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eda:	d107      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007edc:	f107 030c 	add.w	r3, r7, #12
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 fd37 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eea:	e3c0      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ef0:	e3bd      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ef2:	4b6f      	ldr	r3, [pc, #444]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007efc:	4b6c      	ldr	r3, [pc, #432]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d10c      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f0e:	4b68      	ldr	r3, [pc, #416]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	08db      	lsrs	r3, r3, #3
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	4a66      	ldr	r2, [pc, #408]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f20:	e01e      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f22:	4b63      	ldr	r3, [pc, #396]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f2e:	d106      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f36:	d102      	bne.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f38:	4b5f      	ldr	r3, [pc, #380]	; (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f3c:	e010      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f3e:	4b5c      	ldr	r3, [pc, #368]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f4a:	d106      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f52:	d102      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f54:	4b59      	ldr	r3, [pc, #356]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f58:	e002      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f5e:	e386      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007f60:	e385      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f62:	4b57      	ldr	r3, [pc, #348]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f66:	e382      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f6c:	e37f      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f72:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007f76:	430b      	orrs	r3, r1
 8007f78:	f040 80a7 	bne.w	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f7c:	4b4c      	ldr	r3, [pc, #304]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f84:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f8c:	d055      	beq.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f94:	f200 8096 	bhi.w	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f9e:	f000 8084 	beq.w	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fa8:	f200 808c 	bhi.w	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fb2:	d030      	beq.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fba:	f200 8083 	bhi.w	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fca:	d012      	beq.n	8007ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007fcc:	e07a      	b.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fce:	4b38      	ldr	r3, [pc, #224]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fda:	d107      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fe0b 	bl	8008bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fea:	e340      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff0:	e33d      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ff2:	4b2f      	ldr	r3, [pc, #188]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ffe:	d107      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008000:	f107 0318 	add.w	r3, r7, #24
 8008004:	4618      	mov	r0, r3
 8008006:	f000 fb51 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800800e:	e32e      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008010:	2300      	movs	r3, #0
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008014:	e32b      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008016:	4b26      	ldr	r3, [pc, #152]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800801e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008022:	d107      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008024:	f107 030c 	add.w	r3, r7, #12
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fc93 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008032:	e31c      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008038:	e319      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800803a:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800803c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008042:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008044:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b04      	cmp	r3, #4
 800804e:	d10c      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	2b00      	cmp	r3, #0
 8008054:	d109      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008056:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	08db      	lsrs	r3, r3, #3
 800805c:	f003 0303 	and.w	r3, r3, #3
 8008060:	4a14      	ldr	r2, [pc, #80]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008062:	fa22 f303 	lsr.w	r3, r2, r3
 8008066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008068:	e01e      	b.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800806a:	4b11      	ldr	r3, [pc, #68]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008076:	d106      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800807e:	d102      	bne.n	8008086 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008080:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008084:	e010      	b.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008092:	d106      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800809a:	d102      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800809c:	4b07      	ldr	r3, [pc, #28]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a0:	e002      	b.n	80080a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80080a6:	e2e2      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080a8:	e2e1      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080ae:	e2de      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080b0:	58024400 	.word	0x58024400
 80080b4:	03d09000 	.word	0x03d09000
 80080b8:	003d0900 	.word	0x003d0900
 80080bc:	007a1200 	.word	0x007a1200
 80080c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c8:	e2d1      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80080ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80080d2:	430b      	orrs	r3, r1
 80080d4:	f040 809c 	bne.w	8008210 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80080d8:	4b93      	ldr	r3, [pc, #588]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80080e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080e8:	d054      	beq.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f0:	f200 808b 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080fa:	f000 8083 	beq.w	8008204 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008104:	f200 8081 	bhi.w	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810e:	d02f      	beq.n	8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008116:	d878      	bhi.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	2b00      	cmp	r3, #0
 800811c:	d004      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008124:	d012      	beq.n	800814c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008126:	e070      	b.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008128:	4b7f      	ldr	r3, [pc, #508]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008134:	d107      	bne.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813a:	4618      	mov	r0, r3
 800813c:	f000 fd5e 	bl	8008bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008144:	e293      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800814a:	e290      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800814c:	4b76      	ldr	r3, [pc, #472]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008158:	d107      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800815a:	f107 0318 	add.w	r3, r7, #24
 800815e:	4618      	mov	r0, r3
 8008160:	f000 faa4 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008168:	e281      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800816e:	e27e      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008170:	4b6d      	ldr	r3, [pc, #436]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800817c:	d107      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817e:	f107 030c 	add.w	r3, r7, #12
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fbe6 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800818c:	e26f      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008192:	e26c      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008194:	4b64      	ldr	r3, [pc, #400]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800819c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800819e:	4b62      	ldr	r3, [pc, #392]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0304 	and.w	r3, r3, #4
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d10c      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80081aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d109      	bne.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081b0:	4b5d      	ldr	r3, [pc, #372]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	08db      	lsrs	r3, r3, #3
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	4a5c      	ldr	r2, [pc, #368]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80081bc:	fa22 f303 	lsr.w	r3, r2, r3
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c2:	e01e      	b.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081c4:	4b58      	ldr	r3, [pc, #352]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d0:	d106      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80081d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081d8:	d102      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081da:	4b55      	ldr	r3, [pc, #340]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081de:	e010      	b.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081e0:	4b51      	ldr	r3, [pc, #324]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ec:	d106      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f4:	d102      	bne.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081f6:	4b4f      	ldr	r3, [pc, #316]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081fa:	e002      	b.n	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081fc:	2300      	movs	r3, #0
 80081fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008200:	e235      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008202:	e234      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008204:	4b4c      	ldr	r3, [pc, #304]	; (8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008208:	e231      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800820e:	e22e      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008214:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008218:	430b      	orrs	r3, r1
 800821a:	f040 808f 	bne.w	800833c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800821e:	4b42      	ldr	r3, [pc, #264]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008222:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008226:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800822e:	d06b      	beq.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008236:	d874      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800823e:	d056      	beq.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008246:	d86c      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800824e:	d03b      	beq.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008256:	d864      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800825e:	d021      	beq.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008266:	d85c      	bhi.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	2b00      	cmp	r3, #0
 800826c:	d004      	beq.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800826e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008274:	d004      	beq.n	8008280 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008276:	e054      	b.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008278:	f7fe fa4c 	bl	8006714 <HAL_RCC_GetPCLK1Freq>
 800827c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800827e:	e1f6      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008280:	4b29      	ldr	r3, [pc, #164]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800828c:	d107      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828e:	f107 0318 	add.w	r3, r7, #24
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fa0a 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800829c:	e1e7      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a2:	e1e4      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082a4:	4b20      	ldr	r3, [pc, #128]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082b0:	d107      	bne.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b2:	f107 030c 	add.w	r3, r7, #12
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fb4c 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082c0:	e1d5      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082c6:	e1d2      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80082c8:	4b17      	ldr	r3, [pc, #92]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d109      	bne.n	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082d4:	4b14      	ldr	r3, [pc, #80]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	08db      	lsrs	r3, r3, #3
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	4a13      	ldr	r2, [pc, #76]	; (800832c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082e6:	e1c2      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ec:	e1bf      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80082ee:	4b0e      	ldr	r3, [pc, #56]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fa:	d102      	bne.n	8008302 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80082fc:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008300:	e1b5      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008306:	e1b2      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008308:	4b07      	ldr	r3, [pc, #28]	; (8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008314:	d102      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008316:	4b07      	ldr	r3, [pc, #28]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800831a:	e1a8      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	e1a5      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008326:	e1a2      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008328:	58024400 	.word	0x58024400
 800832c:	03d09000 	.word	0x03d09000
 8008330:	003d0900 	.word	0x003d0900
 8008334:	007a1200 	.word	0x007a1200
 8008338:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800833c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008340:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008344:	430b      	orrs	r3, r1
 8008346:	d173      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008348:	4b9c      	ldr	r3, [pc, #624]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008350:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008358:	d02f      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008360:	d863      	bhi.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	2b00      	cmp	r3, #0
 8008366:	d004      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836e:	d012      	beq.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008370:	e05b      	b.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008372:	4b92      	ldr	r3, [pc, #584]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800837a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800837e:	d107      	bne.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008380:	f107 0318 	add.w	r3, r7, #24
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f991 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800838e:	e16e      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008394:	e16b      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008396:	4b89      	ldr	r3, [pc, #548]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800839e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a2:	d107      	bne.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083a4:	f107 030c 	add.w	r3, r7, #12
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 fad3 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083b2:	e15c      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083b8:	e159      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ba:	4b80      	ldr	r3, [pc, #512]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083c4:	4b7d      	ldr	r3, [pc, #500]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d10c      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80083d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d109      	bne.n	80083ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083d6:	4b79      	ldr	r3, [pc, #484]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	4a77      	ldr	r2, [pc, #476]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80083e2:	fa22 f303 	lsr.w	r3, r2, r3
 80083e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e8:	e01e      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083ea:	4b74      	ldr	r3, [pc, #464]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083f6:	d106      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80083f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083fe:	d102      	bne.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008400:	4b70      	ldr	r3, [pc, #448]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008404:	e010      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008406:	4b6d      	ldr	r3, [pc, #436]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008412:	d106      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800841a:	d102      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800841c:	4b6a      	ldr	r3, [pc, #424]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008420:	e002      	b.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008426:	e122      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008428:	e121      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800842e:	e11e      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008434:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008438:	430b      	orrs	r3, r1
 800843a:	d133      	bne.n	80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800843c:	4b5f      	ldr	r3, [pc, #380]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800843e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008444:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	2b00      	cmp	r3, #0
 800844a:	d004      	beq.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008452:	d012      	beq.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008454:	e023      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008456:	4b59      	ldr	r3, [pc, #356]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008462:	d107      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008468:	4618      	mov	r0, r3
 800846a:	f000 fbc7 	bl	8008bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008472:	e0fc      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008478:	e0f9      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800847a:	4b50      	ldr	r3, [pc, #320]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008486:	d107      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008488:	f107 0318 	add.w	r3, r7, #24
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f90d 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008496:	e0ea      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800849c:	e0e7      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a2:	e0e4      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80084a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80084ac:	430b      	orrs	r3, r1
 80084ae:	f040 808d 	bne.w	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80084b2:	4b42      	ldr	r3, [pc, #264]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80084b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084c2:	d06b      	beq.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084ca:	d874      	bhi.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d2:	d056      	beq.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084da:	d86c      	bhi.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084e2:	d03b      	beq.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084ea:	d864      	bhi.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084f2:	d021      	beq.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084fa:	d85c      	bhi.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80084fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008508:	d004      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800850a:	e054      	b.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800850c:	f000 f8b8 	bl	8008680 <HAL_RCCEx_GetD3PCLK1Freq>
 8008510:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008512:	e0ac      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008514:	4b29      	ldr	r3, [pc, #164]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800851c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008520:	d107      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008522:	f107 0318 	add.w	r3, r7, #24
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f8c0 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008530:	e09d      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008536:	e09a      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008538:	4b20      	ldr	r3, [pc, #128]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008544:	d107      	bne.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008546:	f107 030c 	add.w	r3, r7, #12
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fa02 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008554:	e08b      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855a:	e088      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800855c:	4b17      	ldr	r3, [pc, #92]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b04      	cmp	r3, #4
 8008566:	d109      	bne.n	800857c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008568:	4b14      	ldr	r3, [pc, #80]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	08db      	lsrs	r3, r3, #3
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008574:	fa22 f303 	lsr.w	r3, r2, r3
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800857a:	e078      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800857c:	2300      	movs	r3, #0
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008580:	e075      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800858e:	d102      	bne.n	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008594:	e06b      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008596:	2300      	movs	r3, #0
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800859a:	e068      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a8:	d102      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ae:	e05e      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b4:	e05b      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80085b6:	2300      	movs	r3, #0
 80085b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085ba:	e058      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085bc:	58024400 	.word	0x58024400
 80085c0:	03d09000 	.word	0x03d09000
 80085c4:	003d0900 	.word	0x003d0900
 80085c8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80085cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80085d4:	430b      	orrs	r3, r1
 80085d6:	d148      	bne.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80085d8:	4b27      	ldr	r3, [pc, #156]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80085da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085e8:	d02a      	beq.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085f0:	d838      	bhi.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085fe:	d00d      	beq.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008600:	e030      	b.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008602:	4b1d      	ldr	r3, [pc, #116]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800860e:	d102      	bne.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008610:	4b1a      	ldr	r3, [pc, #104]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008614:	e02b      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861a:	e028      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800861c:	4b16      	ldr	r3, [pc, #88]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008628:	d107      	bne.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800862a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fae4 	bl	8008bfc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008638:	e019      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800863e:	e016      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008640:	4b0d      	ldr	r3, [pc, #52]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864c:	d107      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864e:	f107 0318 	add.w	r3, r7, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f82a 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800865c:	e007      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008662:	e004      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008664:	2300      	movs	r3, #0
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008668:	e001      	b.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800866e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008670:	4618      	mov	r0, r3
 8008672:	3740      	adds	r7, #64	; 0x40
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	58024400 	.word	0x58024400
 800867c:	007a1200 	.word	0x007a1200

08008680 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008684:	f7fe f816 	bl	80066b4 <HAL_RCC_GetHCLKFreq>
 8008688:	4602      	mov	r2, r0
 800868a:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	091b      	lsrs	r3, r3, #4
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	4904      	ldr	r1, [pc, #16]	; (80086a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008696:	5ccb      	ldrb	r3, [r1, r3]
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	58024400 	.word	0x58024400
 80086a8:	0800b4b4 	.word	0x0800b4b4

080086ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b089      	sub	sp, #36	; 0x24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086b4:	4ba1      	ldr	r3, [pc, #644]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	f003 0303 	and.w	r3, r3, #3
 80086bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80086be:	4b9f      	ldr	r3, [pc, #636]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	0b1b      	lsrs	r3, r3, #12
 80086c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80086ca:	4b9c      	ldr	r3, [pc, #624]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	091b      	lsrs	r3, r3, #4
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80086d6:	4b99      	ldr	r3, [pc, #612]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086da:	08db      	lsrs	r3, r3, #3
 80086dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 8111 	beq.w	800891c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	f000 8083 	beq.w	8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	2b02      	cmp	r3, #2
 8008706:	f200 80a1 	bhi.w	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d056      	beq.n	80087c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008716:	e099      	b.n	800884c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008718:	4b88      	ldr	r3, [pc, #544]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0320 	and.w	r3, r3, #32
 8008720:	2b00      	cmp	r3, #0
 8008722:	d02d      	beq.n	8008780 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008724:	4b85      	ldr	r3, [pc, #532]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	08db      	lsrs	r3, r3, #3
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	4a84      	ldr	r2, [pc, #528]	; (8008940 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008730:	fa22 f303 	lsr.w	r3, r2, r3
 8008734:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	ee07 3a90 	vmov	s15, r3
 800873c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800874e:	4b7b      	ldr	r3, [pc, #492]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800875e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008762:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800876a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800876e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800877a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800877e:	e087      	b.n	8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008948 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800878e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008792:	4b6a      	ldr	r3, [pc, #424]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087c2:	e065      	b.n	8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800894c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087d6:	4b59      	ldr	r3, [pc, #356]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087de:	ee07 3a90 	vmov	s15, r3
 80087e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008806:	e043      	b.n	8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008812:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008950 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b48      	ldr	r3, [pc, #288]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a03 	vldr	s12, [r7, #12]
 800882e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800884a:	e021      	b.n	8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800894c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	4b37      	ldr	r3, [pc, #220]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008872:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008944 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800888e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008890:	4b2a      	ldr	r3, [pc, #168]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	0a5b      	lsrs	r3, r3, #9
 8008896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b6:	ee17 2a90 	vmov	r2, s15
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80088be:	4b1f      	ldr	r3, [pc, #124]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	0c1b      	lsrs	r3, r3, #16
 80088c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80088dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e4:	ee17 2a90 	vmov	r2, s15
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80088ec:	4b13      	ldr	r3, [pc, #76]	; (800893c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f0:	0e1b      	lsrs	r3, r3, #24
 80088f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008906:	edd7 6a07 	vldr	s13, [r7, #28]
 800890a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800890e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008912:	ee17 2a90 	vmov	r2, s15
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800891a:	e008      	b.n	800892e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	609a      	str	r2, [r3, #8]
}
 800892e:	bf00      	nop
 8008930:	3724      	adds	r7, #36	; 0x24
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	58024400 	.word	0x58024400
 8008940:	03d09000 	.word	0x03d09000
 8008944:	46000000 	.word	0x46000000
 8008948:	4c742400 	.word	0x4c742400
 800894c:	4a742400 	.word	0x4a742400
 8008950:	4af42400 	.word	0x4af42400

08008954 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008954:	b480      	push	{r7}
 8008956:	b089      	sub	sp, #36	; 0x24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800895c:	4ba1      	ldr	r3, [pc, #644]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	f003 0303 	and.w	r3, r3, #3
 8008964:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008966:	4b9f      	ldr	r3, [pc, #636]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	0d1b      	lsrs	r3, r3, #20
 800896c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008970:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008972:	4b9c      	ldr	r3, [pc, #624]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800897e:	4b99      	ldr	r3, [pc, #612]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	fb02 f303 	mul.w	r3, r2, r3
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008996:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8111 	beq.w	8008bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	f000 8083 	beq.w	8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	f200 80a1 	bhi.w	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d056      	beq.n	8008a6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80089be:	e099      	b.n	8008af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c0:	4b88      	ldr	r3, [pc, #544]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0320 	and.w	r3, r3, #32
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d02d      	beq.n	8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089cc:	4b85      	ldr	r3, [pc, #532]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	08db      	lsrs	r3, r3, #3
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	4a84      	ldr	r2, [pc, #528]	; (8008be8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80089d8:	fa22 f303 	lsr.w	r3, r2, r3
 80089dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	ee07 3a90 	vmov	s15, r3
 80089e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089f6:	4b7b      	ldr	r3, [pc, #492]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a26:	e087      	b.n	8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a3a:	4b6a      	ldr	r3, [pc, #424]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a42:	ee07 3a90 	vmov	s15, r3
 8008a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a6a:	e065      	b.n	8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a7e:	4b59      	ldr	r3, [pc, #356]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a86:	ee07 3a90 	vmov	s15, r3
 8008a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008aae:	e043      	b.n	8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ac2:	4b48      	ldr	r3, [pc, #288]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aca:	ee07 3a90 	vmov	s15, r3
 8008ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ad6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008af2:	e021      	b.n	8008b38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b06:	4b37      	ldr	r3, [pc, #220]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008b38:	4b2a      	ldr	r3, [pc, #168]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	0a5b      	lsrs	r3, r3, #9
 8008b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b5e:	ee17 2a90 	vmov	r2, s15
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b66:	4b1f      	ldr	r3, [pc, #124]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6a:	0c1b      	lsrs	r3, r3, #16
 8008b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b70:	ee07 3a90 	vmov	s15, r3
 8008b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b8c:	ee17 2a90 	vmov	r2, s15
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b94:	4b13      	ldr	r3, [pc, #76]	; (8008be4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	0e1b      	lsrs	r3, r3, #24
 8008b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bba:	ee17 2a90 	vmov	r2, s15
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	609a      	str	r2, [r3, #8]
}
 8008bd6:	bf00      	nop
 8008bd8:	3724      	adds	r7, #36	; 0x24
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	58024400 	.word	0x58024400
 8008be8:	03d09000 	.word	0x03d09000
 8008bec:	46000000 	.word	0x46000000
 8008bf0:	4c742400 	.word	0x4c742400
 8008bf4:	4a742400 	.word	0x4a742400
 8008bf8:	4af42400 	.word	0x4af42400

08008bfc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	; 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c04:	4ba0      	ldr	r3, [pc, #640]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008c0e:	4b9e      	ldr	r3, [pc, #632]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	091b      	lsrs	r3, r3, #4
 8008c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008c1a:	4b9b      	ldr	r3, [pc, #620]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c24:	4b98      	ldr	r3, [pc, #608]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c28:	08db      	lsrs	r3, r3, #3
 8008c2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	fb02 f303 	mul.w	r3, r2, r3
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 8111 	beq.w	8008e6a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	f000 8083 	beq.w	8008d56 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	f200 80a1 	bhi.w	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d003      	beq.n	8008c66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d056      	beq.n	8008d12 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c64:	e099      	b.n	8008d9a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c66:	4b88      	ldr	r3, [pc, #544]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0320 	and.w	r3, r3, #32
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d02d      	beq.n	8008cce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c72:	4b85      	ldr	r3, [pc, #532]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	08db      	lsrs	r3, r3, #3
 8008c78:	f003 0303 	and.w	r3, r3, #3
 8008c7c:	4a83      	ldr	r2, [pc, #524]	; (8008e8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	ee07 3a90 	vmov	s15, r3
 8008c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9c:	4b7a      	ldr	r3, [pc, #488]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cac:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008e90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008ccc:	e087      	b.n	8008dde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	ee07 3a90 	vmov	s15, r3
 8008cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce0:	4b69      	ldr	r3, [pc, #420]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce8:	ee07 3a90 	vmov	s15, r3
 8008cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008e90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d10:	e065      	b.n	8008dde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008e98 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d24:	4b58      	ldr	r3, [pc, #352]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d38:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008e90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d54:	e043      	b.n	8008dde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	ee07 3a90 	vmov	s15, r3
 8008d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d60:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d68:	4b47      	ldr	r3, [pc, #284]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d70:	ee07 3a90 	vmov	s15, r3
 8008d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008e90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d98:	e021      	b.n	8008dde <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	ee07 3a90 	vmov	s15, r3
 8008da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008e94 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dac:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db4:	ee07 3a90 	vmov	s15, r3
 8008db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008e90 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ddc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008dde:	4b2a      	ldr	r3, [pc, #168]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	0a5b      	lsrs	r3, r3, #9
 8008de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e04:	ee17 2a90 	vmov	r2, s15
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	0c1b      	lsrs	r3, r3, #16
 8008e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e32:	ee17 2a90 	vmov	r2, s15
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	0e1b      	lsrs	r3, r3, #24
 8008e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e44:	ee07 3a90 	vmov	s15, r3
 8008e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e60:	ee17 2a90 	vmov	r2, s15
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e68:	e008      	b.n	8008e7c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	609a      	str	r2, [r3, #8]
}
 8008e7c:	bf00      	nop
 8008e7e:	3724      	adds	r7, #36	; 0x24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	58024400 	.word	0x58024400
 8008e8c:	03d09000 	.word	0x03d09000
 8008e90:	46000000 	.word	0x46000000
 8008e94:	4c742400 	.word	0x4c742400
 8008e98:	4a742400 	.word	0x4a742400
 8008e9c:	4af42400 	.word	0x4af42400

08008ea0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008eae:	4b53      	ldr	r3, [pc, #332]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d101      	bne.n	8008ebe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e099      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008ebe:	4b4f      	ldr	r3, [pc, #316]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a4e      	ldr	r2, [pc, #312]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ec4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eca:	f7f8 fbeb 	bl	80016a4 <HAL_GetTick>
 8008ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ed0:	e008      	b.n	8008ee4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008ed2:	f7f8 fbe7 	bl	80016a4 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d901      	bls.n	8008ee4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e086      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ee4:	4b45      	ldr	r3, [pc, #276]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f0      	bne.n	8008ed2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ef0:	4b42      	ldr	r3, [pc, #264]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	031b      	lsls	r3, r3, #12
 8008efe:	493f      	ldr	r1, [pc, #252]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	628b      	str	r3, [r1, #40]	; 0x28
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	025b      	lsls	r3, r3, #9
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	041b      	lsls	r3, r3, #16
 8008f22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	061b      	lsls	r3, r3, #24
 8008f30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f34:	4931      	ldr	r1, [pc, #196]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f3a:	4b30      	ldr	r3, [pc, #192]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	492d      	ldr	r1, [pc, #180]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f4c:	4b2b      	ldr	r3, [pc, #172]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	f023 0220 	bic.w	r2, r3, #32
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	4928      	ldr	r1, [pc, #160]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f5e:	4b27      	ldr	r3, [pc, #156]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	4a26      	ldr	r2, [pc, #152]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f64:	f023 0310 	bic.w	r3, r3, #16
 8008f68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f6a:	4b24      	ldr	r3, [pc, #144]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f6e:	4b24      	ldr	r3, [pc, #144]	; (8009000 <RCCEx_PLL2_Config+0x160>)
 8008f70:	4013      	ands	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	69d2      	ldr	r2, [r2, #28]
 8008f76:	00d2      	lsls	r2, r2, #3
 8008f78:	4920      	ldr	r1, [pc, #128]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f7e:	4b1f      	ldr	r3, [pc, #124]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	4a1e      	ldr	r2, [pc, #120]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f84:	f043 0310 	orr.w	r3, r3, #16
 8008f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f90:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	4a19      	ldr	r2, [pc, #100]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f9c:	e00f      	b.n	8008fbe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d106      	bne.n	8008fb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008fa4:	4b15      	ldr	r3, [pc, #84]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	4a14      	ldr	r2, [pc, #80]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008faa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fb0:	e005      	b.n	8008fbe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008fb2:	4b12      	ldr	r3, [pc, #72]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	4a11      	ldr	r2, [pc, #68]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a0e      	ldr	r2, [pc, #56]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fca:	f7f8 fb6b 	bl	80016a4 <HAL_GetTick>
 8008fce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fd0:	e008      	b.n	8008fe4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008fd2:	f7f8 fb67 	bl	80016a4 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d901      	bls.n	8008fe4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e006      	b.n	8008ff2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fe4:	4b05      	ldr	r3, [pc, #20]	; (8008ffc <RCCEx_PLL2_Config+0x15c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	58024400 	.word	0x58024400
 8009000:	ffff0007 	.word	0xffff0007

08009004 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009012:	4b53      	ldr	r3, [pc, #332]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d101      	bne.n	8009022 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e099      	b.n	8009156 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009022:	4b4f      	ldr	r3, [pc, #316]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a4e      	ldr	r2, [pc, #312]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800902c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800902e:	f7f8 fb39 	bl	80016a4 <HAL_GetTick>
 8009032:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009034:	e008      	b.n	8009048 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009036:	f7f8 fb35 	bl	80016a4 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e086      	b.n	8009156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009048:	4b45      	ldr	r3, [pc, #276]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f0      	bne.n	8009036 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009054:	4b42      	ldr	r3, [pc, #264]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009058:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	051b      	lsls	r3, r3, #20
 8009062:	493f      	ldr	r1, [pc, #252]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009064:	4313      	orrs	r3, r2
 8009066:	628b      	str	r3, [r1, #40]	; 0x28
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	3b01      	subs	r3, #1
 800906e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	025b      	lsls	r3, r3, #9
 800907a:	b29b      	uxth	r3, r3
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	3b01      	subs	r3, #1
 8009084:	041b      	lsls	r3, r3, #16
 8009086:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800908a:	431a      	orrs	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	3b01      	subs	r3, #1
 8009092:	061b      	lsls	r3, r3, #24
 8009094:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009098:	4931      	ldr	r1, [pc, #196]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800909e:	4b30      	ldr	r3, [pc, #192]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	492d      	ldr	r1, [pc, #180]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80090b0:	4b2b      	ldr	r3, [pc, #172]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	4928      	ldr	r1, [pc, #160]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80090c2:	4b27      	ldr	r3, [pc, #156]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	4a26      	ldr	r2, [pc, #152]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090ce:	4b24      	ldr	r3, [pc, #144]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d2:	4b24      	ldr	r3, [pc, #144]	; (8009164 <RCCEx_PLL3_Config+0x160>)
 80090d4:	4013      	ands	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	69d2      	ldr	r2, [r2, #28]
 80090da:	00d2      	lsls	r2, r2, #3
 80090dc:	4920      	ldr	r1, [pc, #128]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090e2:	4b1f      	ldr	r3, [pc, #124]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	4a1e      	ldr	r2, [pc, #120]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090f4:	4b1a      	ldr	r3, [pc, #104]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	4a19      	ldr	r2, [pc, #100]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 80090fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009100:	e00f      	b.n	8009122 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d106      	bne.n	8009116 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	4a14      	ldr	r2, [pc, #80]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 800910e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009112:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009114:	e005      	b.n	8009122 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009116:	4b12      	ldr	r3, [pc, #72]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	4a11      	ldr	r2, [pc, #68]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 800911c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009120:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009122:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a0e      	ldr	r2, [pc, #56]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 8009128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800912c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800912e:	f7f8 fab9 	bl	80016a4 <HAL_GetTick>
 8009132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009134:	e008      	b.n	8009148 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009136:	f7f8 fab5 	bl	80016a4 <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	2b02      	cmp	r3, #2
 8009142:	d901      	bls.n	8009148 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	e006      	b.n	8009156 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <RCCEx_PLL3_Config+0x15c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0f0      	beq.n	8009136 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	58024400 	.word	0x58024400
 8009164:	ffff0007 	.word	0xffff0007

08009168 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d071      	beq.n	800925e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7f8 f84a 	bl	8001228 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2202      	movs	r2, #2
 8009198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f003 0310 	and.w	r3, r3, #16
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	d050      	beq.n	800924c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	22ca      	movs	r2, #202	; 0xca
 80091b0:	625a      	str	r2, [r3, #36]	; 0x24
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2253      	movs	r2, #83	; 0x53
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa4a 	bl	8009654 <RTC_EnterInitMode>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d124      	bne.n	8009214 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6899      	ldr	r1, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	4b24      	ldr	r3, [pc, #144]	; (8009268 <HAL_RTC_Init+0x100>)
 80091d6:	400b      	ands	r3, r1
 80091d8:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6899      	ldr	r1, [r3, #8]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	431a      	orrs	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	0419      	lsls	r1, r3, #16
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68da      	ldr	r2, [r3, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fa56 	bl	80096bc <RTC_ExitInitMode>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d113      	bne.n	8009242 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0203 	bic.w	r2, r2, #3
 8009228:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	22ff      	movs	r2, #255	; 0xff
 8009248:	625a      	str	r2, [r3, #36]	; 0x24
 800924a:	e001      	b.n	8009250 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	ff8fffbf 	.word	0xff8fffbf

0800926c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800926c:	b590      	push	{r4, r7, lr}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_RTC_SetTime+0x1a>
 8009282:	2302      	movs	r3, #2
 8009284:	e089      	b.n	800939a <HAL_RTC_SetTime+0x12e>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2202      	movs	r2, #2
 8009292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	22ca      	movs	r2, #202	; 0xca
 800929c:	625a      	str	r2, [r3, #36]	; 0x24
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2253      	movs	r2, #83	; 0x53
 80092a4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 f9d4 	bl	8009654 <RTC_EnterInitMode>
 80092ac:	4603      	mov	r3, r0
 80092ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80092b0:	7cfb      	ldrb	r3, [r7, #19]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d161      	bne.n	800937a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d126      	bne.n	800930a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 fa2f 	bl	8009738 <RTC_ByteToBcd2>
 80092da:	4603      	mov	r3, r0
 80092dc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fa28 	bl	8009738 <RTC_ByteToBcd2>
 80092e8:	4603      	mov	r3, r0
 80092ea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80092ec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	789b      	ldrb	r3, [r3, #2]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fa20 	bl	8009738 <RTC_ByteToBcd2>
 80092f8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092fa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	78db      	ldrb	r3, [r3, #3]
 8009302:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009304:	4313      	orrs	r3, r2
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	e018      	b.n	800933c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d102      	bne.n	800931e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2200      	movs	r2, #0
 800931c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	785b      	ldrb	r3, [r3, #1]
 8009328:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800932a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009330:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	78db      	ldrb	r3, [r3, #3]
 8009336:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	6979      	ldr	r1, [r7, #20]
 8009342:	4b18      	ldr	r3, [pc, #96]	; (80093a4 <HAL_RTC_SetTime+0x138>)
 8009344:	400b      	ands	r3, r1
 8009346:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689a      	ldr	r2, [r3, #8]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009356:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6899      	ldr	r1, [r3, #8]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	68da      	ldr	r2, [r3, #12]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	431a      	orrs	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f9a3 	bl	80096bc <RTC_ExitInitMode>
 8009376:	4603      	mov	r3, r0
 8009378:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	22ff      	movs	r2, #255	; 0xff
 8009380:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009382:	7cfb      	ldrb	r3, [r7, #19]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009398:	7cfb      	ldrb	r3, [r7, #19]
}
 800939a:	4618      	mov	r0, r3
 800939c:	371c      	adds	r7, #28
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd90      	pop	{r4, r7, pc}
 80093a2:	bf00      	nop
 80093a4:	007f7f7f 	.word	0x007f7f7f

080093a8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b22      	ldr	r3, [pc, #136]	; (800945c <HAL_RTC_GetTime+0xb4>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	0c1b      	lsrs	r3, r3, #16
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009400:	b2da      	uxtb	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	0d9b      	lsrs	r3, r3, #22
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 0301 	and.w	r3, r3, #1
 8009410:	b2da      	uxtb	r2, r3
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d11a      	bne.n	8009452 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 f9a9 	bl	8009778 <RTC_Bcd2ToByte>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	785b      	ldrb	r3, [r3, #1]
 8009432:	4618      	mov	r0, r3
 8009434:	f000 f9a0 	bl	8009778 <RTC_Bcd2ToByte>
 8009438:	4603      	mov	r3, r0
 800943a:	461a      	mov	r2, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	789b      	ldrb	r3, [r3, #2]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 f997 	bl	8009778 <RTC_Bcd2ToByte>
 800944a:	4603      	mov	r3, r0
 800944c:	461a      	mov	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	007f7f7f 	.word	0x007f7f7f

08009460 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009460:	b590      	push	{r4, r7, lr}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_RTC_SetDate+0x1a>
 8009476:	2302      	movs	r3, #2
 8009478:	e073      	b.n	8009562 <HAL_RTC_SetDate+0x102>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2202      	movs	r2, #2
 8009486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10e      	bne.n	80094ae <HAL_RTC_SetDate+0x4e>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	785b      	ldrb	r3, [r3, #1]
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	d008      	beq.n	80094ae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	785b      	ldrb	r3, [r3, #1]
 80094a0:	f023 0310 	bic.w	r3, r3, #16
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	330a      	adds	r3, #10
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d11c      	bne.n	80094ee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	78db      	ldrb	r3, [r3, #3]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 f93d 	bl	8009738 <RTC_ByteToBcd2>
 80094be:	4603      	mov	r3, r0
 80094c0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 f936 	bl	8009738 <RTC_ByteToBcd2>
 80094cc:	4603      	mov	r3, r0
 80094ce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094d0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	789b      	ldrb	r3, [r3, #2]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 f92e 	bl	8009738 <RTC_ByteToBcd2>
 80094dc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80094de:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094e8:	4313      	orrs	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	e00e      	b.n	800950c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	78db      	ldrb	r3, [r3, #3]
 80094f2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	785b      	ldrb	r3, [r3, #1]
 80094f8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80094fa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009500:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009508:	4313      	orrs	r3, r2
 800950a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	22ca      	movs	r2, #202	; 0xca
 8009512:	625a      	str	r2, [r3, #36]	; 0x24
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2253      	movs	r2, #83	; 0x53
 800951a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f899 	bl	8009654 <RTC_EnterInitMode>
 8009522:	4603      	mov	r3, r0
 8009524:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009526:	7cfb      	ldrb	r3, [r7, #19]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d10a      	bne.n	8009542 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	6979      	ldr	r1, [r7, #20]
 8009532:	4b0e      	ldr	r3, [pc, #56]	; (800956c <HAL_RTC_SetDate+0x10c>)
 8009534:	400b      	ands	r3, r1
 8009536:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f8bf 	bl	80096bc <RTC_ExitInitMode>
 800953e:	4603      	mov	r3, r0
 8009540:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	22ff      	movs	r2, #255	; 0xff
 8009548:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800954a:	7cfb      	ldrb	r3, [r7, #19]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d103      	bne.n	8009558 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009560:	7cfb      	ldrb	r3, [r7, #19]


}
 8009562:	4618      	mov	r0, r3
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	bd90      	pop	{r4, r7, pc}
 800956a:	bf00      	nop
 800956c:	00ffff3f 	.word	0x00ffff3f

08009570 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	4b21      	ldr	r3, [pc, #132]	; (8009608 <HAL_RTC_GetDate+0x98>)
 8009584:	4013      	ands	r3, r2
 8009586:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	0c1b      	lsrs	r3, r3, #16
 800958c:	b2da      	uxtb	r2, r3
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	b2db      	uxtb	r3, r3
 8009598:	f003 031f 	and.w	r3, r3, #31
 800959c:	b2da      	uxtb	r2, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	0b5b      	lsrs	r3, r3, #13
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d11a      	bne.n	80095fc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	78db      	ldrb	r3, [r3, #3]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f8d4 	bl	8009778 <RTC_Bcd2ToByte>
 80095d0:	4603      	mov	r3, r0
 80095d2:	461a      	mov	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 f8cb 	bl	8009778 <RTC_Bcd2ToByte>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	789b      	ldrb	r3, [r3, #2]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 f8c2 	bl	8009778 <RTC_Bcd2ToByte>
 80095f4:	4603      	mov	r3, r0
 80095f6:	461a      	mov	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3718      	adds	r7, #24
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	00ffff3f 	.word	0x00ffff3f

0800960c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a0d      	ldr	r2, [pc, #52]	; (8009650 <HAL_RTC_WaitForSynchro+0x44>)
 800961a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800961c:	f7f8 f842 	bl	80016a4 <HAL_GetTick>
 8009620:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009622:	e009      	b.n	8009638 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009624:	f7f8 f83e 	bl	80016a4 <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009632:	d901      	bls.n	8009638 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e007      	b.n	8009648 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d0ee      	beq.n	8009624 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	0003ff5f 	.word	0x0003ff5f

08009654 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d120      	bne.n	80096b0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f04f 32ff 	mov.w	r2, #4294967295
 8009676:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009678:	f7f8 f814 	bl	80016a4 <HAL_GetTick>
 800967c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800967e:	e00d      	b.n	800969c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009680:	f7f8 f810 	bl	80016a4 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800968e:	d905      	bls.n	800969c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2203      	movs	r2, #3
 8009698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <RTC_EnterInitMode+0x5c>
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d1e7      	bne.n	8009680 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80096b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80096c8:	4b1a      	ldr	r3, [pc, #104]	; (8009734 <RTC_ExitInitMode+0x78>)
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	4a19      	ldr	r2, [pc, #100]	; (8009734 <RTC_ExitInitMode+0x78>)
 80096ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80096d4:	4b17      	ldr	r3, [pc, #92]	; (8009734 <RTC_ExitInitMode+0x78>)
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10c      	bne.n	80096fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff ff93 	bl	800960c <HAL_RTC_WaitForSynchro>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01e      	beq.n	800972a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2203      	movs	r2, #3
 80096f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	73fb      	strb	r3, [r7, #15]
 80096f8:	e017      	b.n	800972a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096fa:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <RTC_ExitInitMode+0x78>)
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	4a0d      	ldr	r2, [pc, #52]	; (8009734 <RTC_ExitInitMode+0x78>)
 8009700:	f023 0320 	bic.w	r3, r3, #32
 8009704:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f7ff ff80 	bl	800960c <HAL_RTC_WaitForSynchro>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d005      	beq.n	800971e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2203      	movs	r2, #3
 8009716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800971e:	4b05      	ldr	r3, [pc, #20]	; (8009734 <RTC_ExitInitMode+0x78>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	4a04      	ldr	r2, [pc, #16]	; (8009734 <RTC_ExitInitMode+0x78>)
 8009724:	f043 0320 	orr.w	r3, r3, #32
 8009728:	6093      	str	r3, [r2, #8]
  }

  return status;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	58004000 	.word	0x58004000

08009738 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009742:	2300      	movs	r3, #0
 8009744:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8009746:	79fb      	ldrb	r3, [r7, #7]
 8009748:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800974a:	e005      	b.n	8009758 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3301      	adds	r3, #1
 8009750:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	3b0a      	subs	r3, #10
 8009756:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	2b09      	cmp	r3, #9
 800975c:	d8f6      	bhi.n	800974c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	b2da      	uxtb	r2, r3
 8009766:	7afb      	ldrb	r3, [r7, #11]
 8009768:	4313      	orrs	r3, r2
 800976a:	b2db      	uxtb	r3, r3
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009782:	79fb      	ldrb	r3, [r7, #7]
 8009784:	091b      	lsrs	r3, r3, #4
 8009786:	b2db      	uxtb	r3, r3
 8009788:	461a      	mov	r2, r3
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	4413      	add	r3, r2
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	b2da      	uxtb	r2, r3
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	4413      	add	r3, r2
 800979e:	b2db      	uxtb	r3, r3
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d101      	bne.n	80097c4 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80097c0:	2302      	movs	r3, #2
 80097c2:	e034      	b.n	800982e <HAL_RTCEx_SetCalibrationOutPut+0x82>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	22ca      	movs	r2, #202	; 0xca
 80097da:	625a      	str	r2, [r3, #36]	; 0x24
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2253      	movs	r2, #83	; 0x53
 80097e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	689a      	ldr	r2, [r3, #8]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80097f2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6899      	ldr	r1, [r3, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	430a      	orrs	r2, r1
 8009802:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009812:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	22ff      	movs	r2, #255	; 0xff
 800981a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b082      	sub	sp, #8
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e042      	b.n	80098d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7f7 fd42 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2224      	movs	r2, #36	; 0x24
 8009868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f022 0201 	bic.w	r2, r2, #1
 800987a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f8bb 	bl	80099f8 <UART_SetConfig>
 8009882:	4603      	mov	r3, r0
 8009884:	2b01      	cmp	r3, #1
 8009886:	d101      	bne.n	800988c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e022      	b.n	80098d2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fe17 	bl	800a4c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0201 	orr.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fe9e 	bl	800a60c <UART_CheckIdleState>
 80098d0:	4603      	mov	r3, r0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b08a      	sub	sp, #40	; 0x28
 80098de:	af02      	add	r7, sp, #8
 80098e0:	60f8      	str	r0, [r7, #12]
 80098e2:	60b9      	str	r1, [r7, #8]
 80098e4:	603b      	str	r3, [r7, #0]
 80098e6:	4613      	mov	r3, r2
 80098e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f0:	2b20      	cmp	r3, #32
 80098f2:	d17b      	bne.n	80099ec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <HAL_UART_Transmit+0x26>
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e074      	b.n	80099ee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2221      	movs	r2, #33	; 0x21
 8009910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009914:	f7f7 fec6 	bl	80016a4 <HAL_GetTick>
 8009918:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	88fa      	ldrh	r2, [r7, #6]
 800991e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	88fa      	ldrh	r2, [r7, #6]
 8009926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009932:	d108      	bne.n	8009946 <HAL_UART_Transmit+0x6c>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	61bb      	str	r3, [r7, #24]
 8009944:	e003      	b.n	800994e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800994e:	e030      	b.n	80099b2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2200      	movs	r2, #0
 8009958:	2180      	movs	r1, #128	; 0x80
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 ff00 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d005      	beq.n	8009972 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2220      	movs	r2, #32
 800996a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e03d      	b.n	80099ee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009972:	69fb      	ldr	r3, [r7, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10b      	bne.n	8009990 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009986:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	3302      	adds	r3, #2
 800998c:	61bb      	str	r3, [r7, #24]
 800998e:	e007      	b.n	80099a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	781a      	ldrb	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	3301      	adds	r3, #1
 800999e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	3b01      	subs	r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1c8      	bne.n	8009950 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2200      	movs	r2, #0
 80099c6:	2140      	movs	r1, #64	; 0x40
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fec9 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e006      	b.n	80099ee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80099e8:	2300      	movs	r3, #0
 80099ea:	e000      	b.n	80099ee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80099ec:	2302      	movs	r3, #2
  }
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
	...

080099f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099fc:	b092      	sub	sp, #72	; 0x48
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	689a      	ldr	r2, [r3, #8]
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	431a      	orrs	r2, r3
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	431a      	orrs	r2, r3
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	4bbe      	ldr	r3, [pc, #760]	; (8009d20 <UART_SetConfig+0x328>)
 8009a28:	4013      	ands	r3, r2
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	6812      	ldr	r2, [r2, #0]
 8009a2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a30:	430b      	orrs	r3, r1
 8009a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4ab3      	ldr	r2, [pc, #716]	; (8009d24 <UART_SetConfig+0x32c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a60:	4313      	orrs	r3, r2
 8009a62:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	4baf      	ldr	r3, [pc, #700]	; (8009d28 <UART_SetConfig+0x330>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a74:	430b      	orrs	r3, r1
 8009a76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7e:	f023 010f 	bic.w	r1, r3, #15
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4aa6      	ldr	r2, [pc, #664]	; (8009d2c <UART_SetConfig+0x334>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d177      	bne.n	8009b88 <UART_SetConfig+0x190>
 8009a98:	4ba5      	ldr	r3, [pc, #660]	; (8009d30 <UART_SetConfig+0x338>)
 8009a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aa0:	2b28      	cmp	r3, #40	; 0x28
 8009aa2:	d86d      	bhi.n	8009b80 <UART_SetConfig+0x188>
 8009aa4:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <UART_SetConfig+0xb4>)
 8009aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aaa:	bf00      	nop
 8009aac:	08009b51 	.word	0x08009b51
 8009ab0:	08009b81 	.word	0x08009b81
 8009ab4:	08009b81 	.word	0x08009b81
 8009ab8:	08009b81 	.word	0x08009b81
 8009abc:	08009b81 	.word	0x08009b81
 8009ac0:	08009b81 	.word	0x08009b81
 8009ac4:	08009b81 	.word	0x08009b81
 8009ac8:	08009b81 	.word	0x08009b81
 8009acc:	08009b59 	.word	0x08009b59
 8009ad0:	08009b81 	.word	0x08009b81
 8009ad4:	08009b81 	.word	0x08009b81
 8009ad8:	08009b81 	.word	0x08009b81
 8009adc:	08009b81 	.word	0x08009b81
 8009ae0:	08009b81 	.word	0x08009b81
 8009ae4:	08009b81 	.word	0x08009b81
 8009ae8:	08009b81 	.word	0x08009b81
 8009aec:	08009b61 	.word	0x08009b61
 8009af0:	08009b81 	.word	0x08009b81
 8009af4:	08009b81 	.word	0x08009b81
 8009af8:	08009b81 	.word	0x08009b81
 8009afc:	08009b81 	.word	0x08009b81
 8009b00:	08009b81 	.word	0x08009b81
 8009b04:	08009b81 	.word	0x08009b81
 8009b08:	08009b81 	.word	0x08009b81
 8009b0c:	08009b69 	.word	0x08009b69
 8009b10:	08009b81 	.word	0x08009b81
 8009b14:	08009b81 	.word	0x08009b81
 8009b18:	08009b81 	.word	0x08009b81
 8009b1c:	08009b81 	.word	0x08009b81
 8009b20:	08009b81 	.word	0x08009b81
 8009b24:	08009b81 	.word	0x08009b81
 8009b28:	08009b81 	.word	0x08009b81
 8009b2c:	08009b71 	.word	0x08009b71
 8009b30:	08009b81 	.word	0x08009b81
 8009b34:	08009b81 	.word	0x08009b81
 8009b38:	08009b81 	.word	0x08009b81
 8009b3c:	08009b81 	.word	0x08009b81
 8009b40:	08009b81 	.word	0x08009b81
 8009b44:	08009b81 	.word	0x08009b81
 8009b48:	08009b81 	.word	0x08009b81
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	2301      	movs	r3, #1
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e222      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e21e      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009b60:	2308      	movs	r3, #8
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e21a      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e216      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009b70:	2320      	movs	r3, #32
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e212      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009b78:	2340      	movs	r3, #64	; 0x40
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e20e      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009b80:	2380      	movs	r3, #128	; 0x80
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e20a      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a69      	ldr	r2, [pc, #420]	; (8009d34 <UART_SetConfig+0x33c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d130      	bne.n	8009bf4 <UART_SetConfig+0x1fc>
 8009b92:	4b67      	ldr	r3, [pc, #412]	; (8009d30 <UART_SetConfig+0x338>)
 8009b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	d826      	bhi.n	8009bec <UART_SetConfig+0x1f4>
 8009b9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <UART_SetConfig+0x1ac>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009bbd 	.word	0x08009bbd
 8009ba8:	08009bc5 	.word	0x08009bc5
 8009bac:	08009bcd 	.word	0x08009bcd
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009bdd 	.word	0x08009bdd
 8009bb8:	08009be5 	.word	0x08009be5
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e1ec      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bca:	e1e8      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e1e4      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e1e0      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e1dc      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009be4:	2340      	movs	r3, #64	; 0x40
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e1d8      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009bec:	2380      	movs	r3, #128	; 0x80
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e1d4      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a4f      	ldr	r2, [pc, #316]	; (8009d38 <UART_SetConfig+0x340>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d130      	bne.n	8009c60 <UART_SetConfig+0x268>
 8009bfe:	4b4c      	ldr	r3, [pc, #304]	; (8009d30 <UART_SetConfig+0x338>)
 8009c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d826      	bhi.n	8009c58 <UART_SetConfig+0x260>
 8009c0a:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <UART_SetConfig+0x218>)
 8009c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c10:	08009c29 	.word	0x08009c29
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c39 	.word	0x08009c39
 8009c1c:	08009c41 	.word	0x08009c41
 8009c20:	08009c49 	.word	0x08009c49
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e1b6      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c30:	2304      	movs	r3, #4
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e1b2      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c38:	2308      	movs	r3, #8
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e1ae      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c40:	2310      	movs	r3, #16
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e1aa      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e1a6      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c50:	2340      	movs	r3, #64	; 0x40
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e1a2      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c58:	2380      	movs	r3, #128	; 0x80
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e19e      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a35      	ldr	r2, [pc, #212]	; (8009d3c <UART_SetConfig+0x344>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d130      	bne.n	8009ccc <UART_SetConfig+0x2d4>
 8009c6a:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <UART_SetConfig+0x338>)
 8009c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b05      	cmp	r3, #5
 8009c74:	d826      	bhi.n	8009cc4 <UART_SetConfig+0x2cc>
 8009c76:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <UART_SetConfig+0x284>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009c95 	.word	0x08009c95
 8009c80:	08009c9d 	.word	0x08009c9d
 8009c84:	08009ca5 	.word	0x08009ca5
 8009c88:	08009cad 	.word	0x08009cad
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009cbd 	.word	0x08009cbd
 8009c94:	2300      	movs	r3, #0
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e180      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca2:	e17c      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009caa:	e178      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009cac:	2310      	movs	r3, #16
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb2:	e174      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cba:	e170      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009cbc:	2340      	movs	r3, #64	; 0x40
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e16c      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009cc4:	2380      	movs	r3, #128	; 0x80
 8009cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cca:	e168      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a1b      	ldr	r2, [pc, #108]	; (8009d40 <UART_SetConfig+0x348>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d142      	bne.n	8009d5c <UART_SetConfig+0x364>
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <UART_SetConfig+0x338>)
 8009cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d838      	bhi.n	8009d54 <UART_SetConfig+0x35c>
 8009ce2:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <UART_SetConfig+0x2f0>)
 8009ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce8:	08009d01 	.word	0x08009d01
 8009cec:	08009d09 	.word	0x08009d09
 8009cf0:	08009d11 	.word	0x08009d11
 8009cf4:	08009d19 	.word	0x08009d19
 8009cf8:	08009d45 	.word	0x08009d45
 8009cfc:	08009d4d 	.word	0x08009d4d
 8009d00:	2300      	movs	r3, #0
 8009d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d06:	e14a      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009d08:	2304      	movs	r3, #4
 8009d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d0e:	e146      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009d10:	2308      	movs	r3, #8
 8009d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d16:	e142      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009d18:	2310      	movs	r3, #16
 8009d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d1e:	e13e      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009d20:	cfff69f3 	.word	0xcfff69f3
 8009d24:	58000c00 	.word	0x58000c00
 8009d28:	11fff4ff 	.word	0x11fff4ff
 8009d2c:	40011000 	.word	0x40011000
 8009d30:	58024400 	.word	0x58024400
 8009d34:	40004400 	.word	0x40004400
 8009d38:	40004800 	.word	0x40004800
 8009d3c:	40004c00 	.word	0x40004c00
 8009d40:	40005000 	.word	0x40005000
 8009d44:	2320      	movs	r3, #32
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e128      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009d4c:	2340      	movs	r3, #64	; 0x40
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e124      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009d54:	2380      	movs	r3, #128	; 0x80
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e120      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4acb      	ldr	r2, [pc, #812]	; (800a090 <UART_SetConfig+0x698>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d176      	bne.n	8009e54 <UART_SetConfig+0x45c>
 8009d66:	4bcb      	ldr	r3, [pc, #812]	; (800a094 <UART_SetConfig+0x69c>)
 8009d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d6e:	2b28      	cmp	r3, #40	; 0x28
 8009d70:	d86c      	bhi.n	8009e4c <UART_SetConfig+0x454>
 8009d72:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x380>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009e1d 	.word	0x08009e1d
 8009d7c:	08009e4d 	.word	0x08009e4d
 8009d80:	08009e4d 	.word	0x08009e4d
 8009d84:	08009e4d 	.word	0x08009e4d
 8009d88:	08009e4d 	.word	0x08009e4d
 8009d8c:	08009e4d 	.word	0x08009e4d
 8009d90:	08009e4d 	.word	0x08009e4d
 8009d94:	08009e4d 	.word	0x08009e4d
 8009d98:	08009e25 	.word	0x08009e25
 8009d9c:	08009e4d 	.word	0x08009e4d
 8009da0:	08009e4d 	.word	0x08009e4d
 8009da4:	08009e4d 	.word	0x08009e4d
 8009da8:	08009e4d 	.word	0x08009e4d
 8009dac:	08009e4d 	.word	0x08009e4d
 8009db0:	08009e4d 	.word	0x08009e4d
 8009db4:	08009e4d 	.word	0x08009e4d
 8009db8:	08009e2d 	.word	0x08009e2d
 8009dbc:	08009e4d 	.word	0x08009e4d
 8009dc0:	08009e4d 	.word	0x08009e4d
 8009dc4:	08009e4d 	.word	0x08009e4d
 8009dc8:	08009e4d 	.word	0x08009e4d
 8009dcc:	08009e4d 	.word	0x08009e4d
 8009dd0:	08009e4d 	.word	0x08009e4d
 8009dd4:	08009e4d 	.word	0x08009e4d
 8009dd8:	08009e35 	.word	0x08009e35
 8009ddc:	08009e4d 	.word	0x08009e4d
 8009de0:	08009e4d 	.word	0x08009e4d
 8009de4:	08009e4d 	.word	0x08009e4d
 8009de8:	08009e4d 	.word	0x08009e4d
 8009dec:	08009e4d 	.word	0x08009e4d
 8009df0:	08009e4d 	.word	0x08009e4d
 8009df4:	08009e4d 	.word	0x08009e4d
 8009df8:	08009e3d 	.word	0x08009e3d
 8009dfc:	08009e4d 	.word	0x08009e4d
 8009e00:	08009e4d 	.word	0x08009e4d
 8009e04:	08009e4d 	.word	0x08009e4d
 8009e08:	08009e4d 	.word	0x08009e4d
 8009e0c:	08009e4d 	.word	0x08009e4d
 8009e10:	08009e4d 	.word	0x08009e4d
 8009e14:	08009e4d 	.word	0x08009e4d
 8009e18:	08009e45 	.word	0x08009e45
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e0bc      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e24:	2304      	movs	r3, #4
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e0b8      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e0b4      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e34:	2310      	movs	r3, #16
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e0b0      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e3c:	2320      	movs	r3, #32
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e0ac      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e44:	2340      	movs	r3, #64	; 0x40
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e0a8      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e4c:	2380      	movs	r3, #128	; 0x80
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e0a4      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a8f      	ldr	r2, [pc, #572]	; (800a098 <UART_SetConfig+0x6a0>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d130      	bne.n	8009ec0 <UART_SetConfig+0x4c8>
 8009e5e:	4b8d      	ldr	r3, [pc, #564]	; (800a094 <UART_SetConfig+0x69c>)
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d826      	bhi.n	8009eb8 <UART_SetConfig+0x4c0>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <UART_SetConfig+0x478>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009e91 	.word	0x08009e91
 8009e78:	08009e99 	.word	0x08009e99
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8e:	e086      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e90:	2304      	movs	r3, #4
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e082      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e07e      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e07a      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e076      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e072      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e06e      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a75      	ldr	r2, [pc, #468]	; (800a09c <UART_SetConfig+0x6a4>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d130      	bne.n	8009f2c <UART_SetConfig+0x534>
 8009eca:	4b72      	ldr	r3, [pc, #456]	; (800a094 <UART_SetConfig+0x69c>)
 8009ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d826      	bhi.n	8009f24 <UART_SetConfig+0x52c>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0x4e4>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009ef5 	.word	0x08009ef5
 8009ee0:	08009efd 	.word	0x08009efd
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f0d 	.word	0x08009f0d
 8009eec:	08009f15 	.word	0x08009f15
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e050      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e04c      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e048      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e044      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f14:	2320      	movs	r3, #32
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e040      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f1c:	2340      	movs	r3, #64	; 0x40
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e03c      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f24:	2380      	movs	r3, #128	; 0x80
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e038      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a5b      	ldr	r2, [pc, #364]	; (800a0a0 <UART_SetConfig+0x6a8>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d130      	bne.n	8009f98 <UART_SetConfig+0x5a0>
 8009f36:	4b57      	ldr	r3, [pc, #348]	; (800a094 <UART_SetConfig+0x69c>)
 8009f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	2b05      	cmp	r3, #5
 8009f40:	d826      	bhi.n	8009f90 <UART_SetConfig+0x598>
 8009f42:	a201      	add	r2, pc, #4	; (adr r2, 8009f48 <UART_SetConfig+0x550>)
 8009f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f48:	08009f61 	.word	0x08009f61
 8009f4c:	08009f69 	.word	0x08009f69
 8009f50:	08009f71 	.word	0x08009f71
 8009f54:	08009f79 	.word	0x08009f79
 8009f58:	08009f81 	.word	0x08009f81
 8009f5c:	08009f89 	.word	0x08009f89
 8009f60:	2302      	movs	r3, #2
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f66:	e01a      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f68:	2304      	movs	r3, #4
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e016      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f70:	2308      	movs	r3, #8
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f76:	e012      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f78:	2310      	movs	r3, #16
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7e:	e00e      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f80:	2320      	movs	r3, #32
 8009f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f86:	e00a      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f88:	2340      	movs	r3, #64	; 0x40
 8009f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8e:	e006      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f90:	2380      	movs	r3, #128	; 0x80
 8009f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f96:	e002      	b.n	8009f9e <UART_SetConfig+0x5a6>
 8009f98:	2380      	movs	r3, #128	; 0x80
 8009f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a3f      	ldr	r2, [pc, #252]	; (800a0a0 <UART_SetConfig+0x6a8>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	f040 80f8 	bne.w	800a19a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009faa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	dc46      	bgt.n	800a040 <UART_SetConfig+0x648>
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	f2c0 8082 	blt.w	800a0bc <UART_SetConfig+0x6c4>
 8009fb8:	3b02      	subs	r3, #2
 8009fba:	2b1e      	cmp	r3, #30
 8009fbc:	d87e      	bhi.n	800a0bc <UART_SetConfig+0x6c4>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <UART_SetConfig+0x5cc>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	0800a047 	.word	0x0800a047
 8009fc8:	0800a0bd 	.word	0x0800a0bd
 8009fcc:	0800a04f 	.word	0x0800a04f
 8009fd0:	0800a0bd 	.word	0x0800a0bd
 8009fd4:	0800a0bd 	.word	0x0800a0bd
 8009fd8:	0800a0bd 	.word	0x0800a0bd
 8009fdc:	0800a05f 	.word	0x0800a05f
 8009fe0:	0800a0bd 	.word	0x0800a0bd
 8009fe4:	0800a0bd 	.word	0x0800a0bd
 8009fe8:	0800a0bd 	.word	0x0800a0bd
 8009fec:	0800a0bd 	.word	0x0800a0bd
 8009ff0:	0800a0bd 	.word	0x0800a0bd
 8009ff4:	0800a0bd 	.word	0x0800a0bd
 8009ff8:	0800a0bd 	.word	0x0800a0bd
 8009ffc:	0800a06f 	.word	0x0800a06f
 800a000:	0800a0bd 	.word	0x0800a0bd
 800a004:	0800a0bd 	.word	0x0800a0bd
 800a008:	0800a0bd 	.word	0x0800a0bd
 800a00c:	0800a0bd 	.word	0x0800a0bd
 800a010:	0800a0bd 	.word	0x0800a0bd
 800a014:	0800a0bd 	.word	0x0800a0bd
 800a018:	0800a0bd 	.word	0x0800a0bd
 800a01c:	0800a0bd 	.word	0x0800a0bd
 800a020:	0800a0bd 	.word	0x0800a0bd
 800a024:	0800a0bd 	.word	0x0800a0bd
 800a028:	0800a0bd 	.word	0x0800a0bd
 800a02c:	0800a0bd 	.word	0x0800a0bd
 800a030:	0800a0bd 	.word	0x0800a0bd
 800a034:	0800a0bd 	.word	0x0800a0bd
 800a038:	0800a0bd 	.word	0x0800a0bd
 800a03c:	0800a0af 	.word	0x0800a0af
 800a040:	2b40      	cmp	r3, #64	; 0x40
 800a042:	d037      	beq.n	800a0b4 <UART_SetConfig+0x6bc>
 800a044:	e03a      	b.n	800a0bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a046:	f7fe fb1b 	bl	8008680 <HAL_RCCEx_GetD3PCLK1Freq>
 800a04a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a04c:	e03c      	b.n	800a0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a04e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe fb2a 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a05c:	e034      	b.n	800a0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a05e:	f107 0318 	add.w	r3, r7, #24
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fc76 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a06c:	e02c      	b.n	800a0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a06e:	4b09      	ldr	r3, [pc, #36]	; (800a094 <UART_SetConfig+0x69c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 0320 	and.w	r3, r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	d016      	beq.n	800a0a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a07a:	4b06      	ldr	r3, [pc, #24]	; (800a094 <UART_SetConfig+0x69c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	08db      	lsrs	r3, r3, #3
 800a080:	f003 0303 	and.w	r3, r3, #3
 800a084:	4a07      	ldr	r2, [pc, #28]	; (800a0a4 <UART_SetConfig+0x6ac>)
 800a086:	fa22 f303 	lsr.w	r3, r2, r3
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a08c:	e01c      	b.n	800a0c8 <UART_SetConfig+0x6d0>
 800a08e:	bf00      	nop
 800a090:	40011400 	.word	0x40011400
 800a094:	58024400 	.word	0x58024400
 800a098:	40007800 	.word	0x40007800
 800a09c:	40007c00 	.word	0x40007c00
 800a0a0:	58000c00 	.word	0x58000c00
 800a0a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a0a8:	4b9d      	ldr	r3, [pc, #628]	; (800a320 <UART_SetConfig+0x928>)
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ac:	e00c      	b.n	800a0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0ae:	4b9d      	ldr	r3, [pc, #628]	; (800a324 <UART_SetConfig+0x92c>)
 800a0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b2:	e009      	b.n	800a0c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ba:	e005      	b.n	800a0c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 81de 	beq.w	800a48c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	4a94      	ldr	r2, [pc, #592]	; (800a328 <UART_SetConfig+0x930>)
 800a0d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	4413      	add	r3, r2
 800a0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d305      	bcc.n	800a100 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d903      	bls.n	800a108 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a106:	e1c1      	b.n	800a48c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10a:	2200      	movs	r2, #0
 800a10c:	60bb      	str	r3, [r7, #8]
 800a10e:	60fa      	str	r2, [r7, #12]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	4a84      	ldr	r2, [pc, #528]	; (800a328 <UART_SetConfig+0x930>)
 800a116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	2200      	movs	r2, #0
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a12a:	f7f6 f931 	bl	8000390 <__aeabi_uldivmod>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4610      	mov	r0, r2
 800a134:	4619      	mov	r1, r3
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	020b      	lsls	r3, r1, #8
 800a140:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a144:	0202      	lsls	r2, r0, #8
 800a146:	6979      	ldr	r1, [r7, #20]
 800a148:	6849      	ldr	r1, [r1, #4]
 800a14a:	0849      	lsrs	r1, r1, #1
 800a14c:	2000      	movs	r0, #0
 800a14e:	460c      	mov	r4, r1
 800a150:	4605      	mov	r5, r0
 800a152:	eb12 0804 	adds.w	r8, r2, r4
 800a156:	eb43 0905 	adc.w	r9, r3, r5
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	469a      	mov	sl, r3
 800a162:	4693      	mov	fp, r2
 800a164:	4652      	mov	r2, sl
 800a166:	465b      	mov	r3, fp
 800a168:	4640      	mov	r0, r8
 800a16a:	4649      	mov	r1, r9
 800a16c:	f7f6 f910 	bl	8000390 <__aeabi_uldivmod>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4613      	mov	r3, r2
 800a176:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a17e:	d308      	bcc.n	800a192 <UART_SetConfig+0x79a>
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a186:	d204      	bcs.n	800a192 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a18e:	60da      	str	r2, [r3, #12]
 800a190:	e17c      	b.n	800a48c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a198:	e178      	b.n	800a48c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1a2:	f040 80c5 	bne.w	800a330 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a1a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a1aa:	2b20      	cmp	r3, #32
 800a1ac:	dc48      	bgt.n	800a240 <UART_SetConfig+0x848>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	db7b      	blt.n	800a2aa <UART_SetConfig+0x8b2>
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d879      	bhi.n	800a2aa <UART_SetConfig+0x8b2>
 800a1b6:	a201      	add	r2, pc, #4	; (adr r2, 800a1bc <UART_SetConfig+0x7c4>)
 800a1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1bc:	0800a247 	.word	0x0800a247
 800a1c0:	0800a24f 	.word	0x0800a24f
 800a1c4:	0800a2ab 	.word	0x0800a2ab
 800a1c8:	0800a2ab 	.word	0x0800a2ab
 800a1cc:	0800a257 	.word	0x0800a257
 800a1d0:	0800a2ab 	.word	0x0800a2ab
 800a1d4:	0800a2ab 	.word	0x0800a2ab
 800a1d8:	0800a2ab 	.word	0x0800a2ab
 800a1dc:	0800a267 	.word	0x0800a267
 800a1e0:	0800a2ab 	.word	0x0800a2ab
 800a1e4:	0800a2ab 	.word	0x0800a2ab
 800a1e8:	0800a2ab 	.word	0x0800a2ab
 800a1ec:	0800a2ab 	.word	0x0800a2ab
 800a1f0:	0800a2ab 	.word	0x0800a2ab
 800a1f4:	0800a2ab 	.word	0x0800a2ab
 800a1f8:	0800a2ab 	.word	0x0800a2ab
 800a1fc:	0800a277 	.word	0x0800a277
 800a200:	0800a2ab 	.word	0x0800a2ab
 800a204:	0800a2ab 	.word	0x0800a2ab
 800a208:	0800a2ab 	.word	0x0800a2ab
 800a20c:	0800a2ab 	.word	0x0800a2ab
 800a210:	0800a2ab 	.word	0x0800a2ab
 800a214:	0800a2ab 	.word	0x0800a2ab
 800a218:	0800a2ab 	.word	0x0800a2ab
 800a21c:	0800a2ab 	.word	0x0800a2ab
 800a220:	0800a2ab 	.word	0x0800a2ab
 800a224:	0800a2ab 	.word	0x0800a2ab
 800a228:	0800a2ab 	.word	0x0800a2ab
 800a22c:	0800a2ab 	.word	0x0800a2ab
 800a230:	0800a2ab 	.word	0x0800a2ab
 800a234:	0800a2ab 	.word	0x0800a2ab
 800a238:	0800a2ab 	.word	0x0800a2ab
 800a23c:	0800a29d 	.word	0x0800a29d
 800a240:	2b40      	cmp	r3, #64	; 0x40
 800a242:	d02e      	beq.n	800a2a2 <UART_SetConfig+0x8aa>
 800a244:	e031      	b.n	800a2aa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a246:	f7fc fa65 	bl	8006714 <HAL_RCC_GetPCLK1Freq>
 800a24a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a24c:	e033      	b.n	800a2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a24e:	f7fc fa77 	bl	8006740 <HAL_RCC_GetPCLK2Freq>
 800a252:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a254:	e02f      	b.n	800a2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe fa26 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a264:	e027      	b.n	800a2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a266:	f107 0318 	add.w	r3, r7, #24
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe fb72 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a274:	e01f      	b.n	800a2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a276:	4b2d      	ldr	r3, [pc, #180]	; (800a32c <UART_SetConfig+0x934>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a282:	4b2a      	ldr	r3, [pc, #168]	; (800a32c <UART_SetConfig+0x934>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	08db      	lsrs	r3, r3, #3
 800a288:	f003 0303 	and.w	r3, r3, #3
 800a28c:	4a24      	ldr	r2, [pc, #144]	; (800a320 <UART_SetConfig+0x928>)
 800a28e:	fa22 f303 	lsr.w	r3, r2, r3
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a294:	e00f      	b.n	800a2b6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a296:	4b22      	ldr	r3, [pc, #136]	; (800a320 <UART_SetConfig+0x928>)
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a29a:	e00c      	b.n	800a2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a29c:	4b21      	ldr	r3, [pc, #132]	; (800a324 <UART_SetConfig+0x92c>)
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a0:	e009      	b.n	800a2b6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2a8:	e005      	b.n	800a2b6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a2b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 80e7 	beq.w	800a48c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	4a19      	ldr	r2, [pc, #100]	; (800a328 <UART_SetConfig+0x930>)
 800a2c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2d0:	005a      	lsls	r2, r3, #1
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	085b      	lsrs	r3, r3, #1
 800a2d8:	441a      	add	r2, r3
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	2b0f      	cmp	r3, #15
 800a2e8:	d916      	bls.n	800a318 <UART_SetConfig+0x920>
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f0:	d212      	bcs.n	800a318 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	f023 030f 	bic.w	r3, r3, #15
 800a2fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	085b      	lsrs	r3, r3, #1
 800a300:	b29b      	uxth	r3, r3
 800a302:	f003 0307 	and.w	r3, r3, #7
 800a306:	b29a      	uxth	r2, r3
 800a308:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a30a:	4313      	orrs	r3, r2
 800a30c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a314:	60da      	str	r2, [r3, #12]
 800a316:	e0b9      	b.n	800a48c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a31e:	e0b5      	b.n	800a48c <UART_SetConfig+0xa94>
 800a320:	03d09000 	.word	0x03d09000
 800a324:	003d0900 	.word	0x003d0900
 800a328:	0800b4cc 	.word	0x0800b4cc
 800a32c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a330:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a334:	2b20      	cmp	r3, #32
 800a336:	dc49      	bgt.n	800a3cc <UART_SetConfig+0x9d4>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	db7c      	blt.n	800a436 <UART_SetConfig+0xa3e>
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d87a      	bhi.n	800a436 <UART_SetConfig+0xa3e>
 800a340:	a201      	add	r2, pc, #4	; (adr r2, 800a348 <UART_SetConfig+0x950>)
 800a342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a346:	bf00      	nop
 800a348:	0800a3d3 	.word	0x0800a3d3
 800a34c:	0800a3db 	.word	0x0800a3db
 800a350:	0800a437 	.word	0x0800a437
 800a354:	0800a437 	.word	0x0800a437
 800a358:	0800a3e3 	.word	0x0800a3e3
 800a35c:	0800a437 	.word	0x0800a437
 800a360:	0800a437 	.word	0x0800a437
 800a364:	0800a437 	.word	0x0800a437
 800a368:	0800a3f3 	.word	0x0800a3f3
 800a36c:	0800a437 	.word	0x0800a437
 800a370:	0800a437 	.word	0x0800a437
 800a374:	0800a437 	.word	0x0800a437
 800a378:	0800a437 	.word	0x0800a437
 800a37c:	0800a437 	.word	0x0800a437
 800a380:	0800a437 	.word	0x0800a437
 800a384:	0800a437 	.word	0x0800a437
 800a388:	0800a403 	.word	0x0800a403
 800a38c:	0800a437 	.word	0x0800a437
 800a390:	0800a437 	.word	0x0800a437
 800a394:	0800a437 	.word	0x0800a437
 800a398:	0800a437 	.word	0x0800a437
 800a39c:	0800a437 	.word	0x0800a437
 800a3a0:	0800a437 	.word	0x0800a437
 800a3a4:	0800a437 	.word	0x0800a437
 800a3a8:	0800a437 	.word	0x0800a437
 800a3ac:	0800a437 	.word	0x0800a437
 800a3b0:	0800a437 	.word	0x0800a437
 800a3b4:	0800a437 	.word	0x0800a437
 800a3b8:	0800a437 	.word	0x0800a437
 800a3bc:	0800a437 	.word	0x0800a437
 800a3c0:	0800a437 	.word	0x0800a437
 800a3c4:	0800a437 	.word	0x0800a437
 800a3c8:	0800a429 	.word	0x0800a429
 800a3cc:	2b40      	cmp	r3, #64	; 0x40
 800a3ce:	d02e      	beq.n	800a42e <UART_SetConfig+0xa36>
 800a3d0:	e031      	b.n	800a436 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3d2:	f7fc f99f 	bl	8006714 <HAL_RCC_GetPCLK1Freq>
 800a3d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3d8:	e033      	b.n	800a442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3da:	f7fc f9b1 	bl	8006740 <HAL_RCC_GetPCLK2Freq>
 800a3de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3e0:	e02f      	b.n	800a442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe f960 	bl	80086ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3f0:	e027      	b.n	800a442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3f2:	f107 0318 	add.w	r3, r7, #24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe faac 	bl	8008954 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a400:	e01f      	b.n	800a442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a402:	4b2d      	ldr	r3, [pc, #180]	; (800a4b8 <UART_SetConfig+0xac0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0320 	and.w	r3, r3, #32
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d009      	beq.n	800a422 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a40e:	4b2a      	ldr	r3, [pc, #168]	; (800a4b8 <UART_SetConfig+0xac0>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	08db      	lsrs	r3, r3, #3
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	4a28      	ldr	r2, [pc, #160]	; (800a4bc <UART_SetConfig+0xac4>)
 800a41a:	fa22 f303 	lsr.w	r3, r2, r3
 800a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a420:	e00f      	b.n	800a442 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a422:	4b26      	ldr	r3, [pc, #152]	; (800a4bc <UART_SetConfig+0xac4>)
 800a424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a426:	e00c      	b.n	800a442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a428:	4b25      	ldr	r3, [pc, #148]	; (800a4c0 <UART_SetConfig+0xac8>)
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a42c:	e009      	b.n	800a442 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a42e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a434:	e005      	b.n	800a442 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a440:	bf00      	nop
    }

    if (pclk != 0U)
 800a442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d021      	beq.n	800a48c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	4a1d      	ldr	r2, [pc, #116]	; (800a4c4 <UART_SetConfig+0xacc>)
 800a44e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a452:	461a      	mov	r2, r3
 800a454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a456:	fbb3 f2f2 	udiv	r2, r3, r2
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	085b      	lsrs	r3, r3, #1
 800a460:	441a      	add	r2, r3
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	fbb2 f3f3 	udiv	r3, r2, r3
 800a46a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	2b0f      	cmp	r3, #15
 800a470:	d909      	bls.n	800a486 <UART_SetConfig+0xa8e>
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a478:	d205      	bcs.n	800a486 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60da      	str	r2, [r3, #12]
 800a484:	e002      	b.n	800a48c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	2201      	movs	r2, #1
 800a490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2201      	movs	r2, #1
 800a498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a4a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3748      	adds	r7, #72	; 0x48
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a4b6:	bf00      	nop
 800a4b8:	58024400 	.word	0x58024400
 800a4bc:	03d09000 	.word	0x03d09000
 800a4c0:	003d0900 	.word	0x003d0900
 800a4c4:	0800b4cc 	.word	0x0800b4cc

0800a4c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	f003 0302 	and.w	r3, r3, #2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57e:	f003 0320 	and.w	r3, r3, #32
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01a      	beq.n	800a5de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5c6:	d10a      	bne.n	800a5de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00a      	beq.n	800a600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	605a      	str	r2, [r3, #4]
  }
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b098      	sub	sp, #96	; 0x60
 800a610:	af02      	add	r7, sp, #8
 800a612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a61c:	f7f7 f842 	bl	80016a4 <HAL_GetTick>
 800a620:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d12f      	bne.n	800a690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a638:	2200      	movs	r2, #0
 800a63a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f88e 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d022      	beq.n	800a690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a652:	e853 3f00 	ldrex	r3, [r3]
 800a656:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a65e:	653b      	str	r3, [r7, #80]	; 0x50
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	461a      	mov	r2, r3
 800a666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a668:	647b      	str	r3, [r7, #68]	; 0x44
 800a66a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a66e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a670:	e841 2300 	strex	r3, r2, [r1]
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1e6      	bne.n	800a64a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2220      	movs	r2, #32
 800a680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e063      	b.n	800a758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d149      	bne.n	800a732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a69e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f857 	bl	800a760 <UART_WaitOnFlagUntilTimeout>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d03c      	beq.n	800a732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	623b      	str	r3, [r7, #32]
   return(result);
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d6:	633b      	str	r3, [r7, #48]	; 0x30
 800a6d8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e6      	bne.n	800a6b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3308      	adds	r3, #8
 800a6f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f023 0301 	bic.w	r3, r3, #1
 800a700:	64bb      	str	r3, [r7, #72]	; 0x48
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3308      	adds	r3, #8
 800a708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a70a:	61fa      	str	r2, [r7, #28]
 800a70c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	617b      	str	r3, [r7, #20]
   return(result);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e5      	bne.n	800a6ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2220      	movs	r2, #32
 800a722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e012      	b.n	800a758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2220      	movs	r2, #32
 800a736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2220      	movs	r2, #32
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3758      	adds	r7, #88	; 0x58
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	4613      	mov	r3, r2
 800a76e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a770:	e049      	b.n	800a806 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a778:	d045      	beq.n	800a806 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a77a:	f7f6 ff93 	bl	80016a4 <HAL_GetTick>
 800a77e:	4602      	mov	r2, r0
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	429a      	cmp	r2, r3
 800a788:	d302      	bcc.n	800a790 <UART_WaitOnFlagUntilTimeout+0x30>
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e048      	b.n	800a826 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0304 	and.w	r3, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d031      	beq.n	800a806 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	69db      	ldr	r3, [r3, #28]
 800a7a8:	f003 0308 	and.w	r3, r3, #8
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d110      	bne.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2208      	movs	r2, #8
 800a7b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 f839 	bl	800a830 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2208      	movs	r2, #8
 800a7c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e029      	b.n	800a826 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	69db      	ldr	r3, [r3, #28]
 800a7d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7e0:	d111      	bne.n	800a806 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 f81f 	bl	800a830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e00f      	b.n	800a826 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	69da      	ldr	r2, [r3, #28]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	4013      	ands	r3, r2
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	429a      	cmp	r2, r3
 800a814:	bf0c      	ite	eq
 800a816:	2301      	moveq	r3, #1
 800a818:	2300      	movne	r3, #0
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	429a      	cmp	r2, r3
 800a822:	d0a6      	beq.n	800a772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
	...

0800a830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b095      	sub	sp, #84	; 0x54
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a84c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a856:	643b      	str	r3, [r7, #64]	; 0x40
 800a858:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a85c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e6      	bne.n	800a838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3308      	adds	r3, #8
 800a870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	61fb      	str	r3, [r7, #28]
   return(result);
 800a87a:	69fa      	ldr	r2, [r7, #28]
 800a87c:	4b1e      	ldr	r3, [pc, #120]	; (800a8f8 <UART_EndRxTransfer+0xc8>)
 800a87e:	4013      	ands	r3, r2
 800a880:	64bb      	str	r3, [r7, #72]	; 0x48
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a88a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a88c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a88e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a892:	e841 2300 	strex	r3, r2, [r1]
 800a896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1e5      	bne.n	800a86a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d118      	bne.n	800a8d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	e853 3f00 	ldrex	r3, [r3]
 800a8b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f023 0310 	bic.w	r3, r3, #16
 800a8ba:	647b      	str	r3, [r7, #68]	; 0x44
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c4:	61bb      	str	r3, [r7, #24]
 800a8c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c8:	6979      	ldr	r1, [r7, #20]
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	e841 2300 	strex	r3, r2, [r1]
 800a8d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e6      	bne.n	800a8a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2220      	movs	r2, #32
 800a8dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a8ec:	bf00      	nop
 800a8ee:	3754      	adds	r7, #84	; 0x54
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	effffffe 	.word	0xeffffffe

0800a8fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d101      	bne.n	800a912 <HAL_UARTEx_DisableFifoMode+0x16>
 800a90e:	2302      	movs	r3, #2
 800a910:	e027      	b.n	800a962 <HAL_UARTEx_DisableFifoMode+0x66>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2224      	movs	r2, #36	; 0x24
 800a91e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 0201 	bic.w	r2, r2, #1
 800a938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2220      	movs	r2, #32
 800a954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a982:	2302      	movs	r3, #2
 800a984:	e02d      	b.n	800a9e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2224      	movs	r2, #36	; 0x24
 800a992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f022 0201 	bic.w	r2, r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f850 	bl	800aa68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d101      	bne.n	800aa02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	e02d      	b.n	800aa5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2224      	movs	r2, #36	; 0x24
 800aa0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 0201 	bic.w	r2, r2, #1
 800aa28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 f812 	bl	800aa68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d108      	bne.n	800aa8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa88:	e031      	b.n	800aaee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa8a:	2310      	movs	r3, #16
 800aa8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa8e:	2310      	movs	r3, #16
 800aa90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	0e5b      	lsrs	r3, r3, #25
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	0f5b      	lsrs	r3, r3, #29
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	f003 0307 	and.w	r3, r3, #7
 800aab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	7b3a      	ldrb	r2, [r7, #12]
 800aab6:	4911      	ldr	r1, [pc, #68]	; (800aafc <UARTEx_SetNbDataToProcess+0x94>)
 800aab8:	5c8a      	ldrb	r2, [r1, r2]
 800aaba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aabe:	7b3a      	ldrb	r2, [r7, #12]
 800aac0:	490f      	ldr	r1, [pc, #60]	; (800ab00 <UARTEx_SetNbDataToProcess+0x98>)
 800aac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aac4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	7b7a      	ldrb	r2, [r7, #13]
 800aad4:	4909      	ldr	r1, [pc, #36]	; (800aafc <UARTEx_SetNbDataToProcess+0x94>)
 800aad6:	5c8a      	ldrb	r2, [r1, r2]
 800aad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aadc:	7b7a      	ldrb	r2, [r7, #13]
 800aade:	4908      	ldr	r1, [pc, #32]	; (800ab00 <UARTEx_SetNbDataToProcess+0x98>)
 800aae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aae2:	fb93 f3f2 	sdiv	r3, r3, r2
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aaee:	bf00      	nop
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	0800b4e4 	.word	0x0800b4e4
 800ab00:	0800b4ec 	.word	0x0800b4ec

0800ab04 <_vsniprintf_r>:
 800ab04:	b530      	push	{r4, r5, lr}
 800ab06:	4614      	mov	r4, r2
 800ab08:	2c00      	cmp	r4, #0
 800ab0a:	b09b      	sub	sp, #108	; 0x6c
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	461a      	mov	r2, r3
 800ab10:	da05      	bge.n	800ab1e <_vsniprintf_r+0x1a>
 800ab12:	238b      	movs	r3, #139	; 0x8b
 800ab14:	6003      	str	r3, [r0, #0]
 800ab16:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1a:	b01b      	add	sp, #108	; 0x6c
 800ab1c:	bd30      	pop	{r4, r5, pc}
 800ab1e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab22:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab26:	bf14      	ite	ne
 800ab28:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab2c:	4623      	moveq	r3, r4
 800ab2e:	9302      	str	r3, [sp, #8]
 800ab30:	9305      	str	r3, [sp, #20]
 800ab32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab36:	9100      	str	r1, [sp, #0]
 800ab38:	9104      	str	r1, [sp, #16]
 800ab3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab3e:	4669      	mov	r1, sp
 800ab40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab42:	f000 f99f 	bl	800ae84 <_svfiprintf_r>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	bfbc      	itt	lt
 800ab4a:	238b      	movlt	r3, #139	; 0x8b
 800ab4c:	602b      	strlt	r3, [r5, #0]
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	d0e3      	beq.n	800ab1a <_vsniprintf_r+0x16>
 800ab52:	9b00      	ldr	r3, [sp, #0]
 800ab54:	2200      	movs	r2, #0
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	e7df      	b.n	800ab1a <_vsniprintf_r+0x16>
	...

0800ab5c <vsniprintf>:
 800ab5c:	b507      	push	{r0, r1, r2, lr}
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	4613      	mov	r3, r2
 800ab62:	460a      	mov	r2, r1
 800ab64:	4601      	mov	r1, r0
 800ab66:	4803      	ldr	r0, [pc, #12]	; (800ab74 <vsniprintf+0x18>)
 800ab68:	6800      	ldr	r0, [r0, #0]
 800ab6a:	f7ff ffcb 	bl	800ab04 <_vsniprintf_r>
 800ab6e:	b003      	add	sp, #12
 800ab70:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab74:	2400005c 	.word	0x2400005c

0800ab78 <memset>:
 800ab78:	4402      	add	r2, r0
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d100      	bne.n	800ab82 <memset+0xa>
 800ab80:	4770      	bx	lr
 800ab82:	f803 1b01 	strb.w	r1, [r3], #1
 800ab86:	e7f9      	b.n	800ab7c <memset+0x4>

0800ab88 <__errno>:
 800ab88:	4b01      	ldr	r3, [pc, #4]	; (800ab90 <__errno+0x8>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	2400005c 	.word	0x2400005c

0800ab94 <__libc_init_array>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	4d0d      	ldr	r5, [pc, #52]	; (800abcc <__libc_init_array+0x38>)
 800ab98:	4c0d      	ldr	r4, [pc, #52]	; (800abd0 <__libc_init_array+0x3c>)
 800ab9a:	1b64      	subs	r4, r4, r5
 800ab9c:	10a4      	asrs	r4, r4, #2
 800ab9e:	2600      	movs	r6, #0
 800aba0:	42a6      	cmp	r6, r4
 800aba2:	d109      	bne.n	800abb8 <__libc_init_array+0x24>
 800aba4:	4d0b      	ldr	r5, [pc, #44]	; (800abd4 <__libc_init_array+0x40>)
 800aba6:	4c0c      	ldr	r4, [pc, #48]	; (800abd8 <__libc_init_array+0x44>)
 800aba8:	f000 fc6a 	bl	800b480 <_init>
 800abac:	1b64      	subs	r4, r4, r5
 800abae:	10a4      	asrs	r4, r4, #2
 800abb0:	2600      	movs	r6, #0
 800abb2:	42a6      	cmp	r6, r4
 800abb4:	d105      	bne.n	800abc2 <__libc_init_array+0x2e>
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abbc:	4798      	blx	r3
 800abbe:	3601      	adds	r6, #1
 800abc0:	e7ee      	b.n	800aba0 <__libc_init_array+0xc>
 800abc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc6:	4798      	blx	r3
 800abc8:	3601      	adds	r6, #1
 800abca:	e7f2      	b.n	800abb2 <__libc_init_array+0x1e>
 800abcc:	0800b530 	.word	0x0800b530
 800abd0:	0800b530 	.word	0x0800b530
 800abd4:	0800b530 	.word	0x0800b530
 800abd8:	0800b534 	.word	0x0800b534

0800abdc <__retarget_lock_acquire_recursive>:
 800abdc:	4770      	bx	lr

0800abde <__retarget_lock_release_recursive>:
 800abde:	4770      	bx	lr

0800abe0 <_free_r>:
 800abe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abe2:	2900      	cmp	r1, #0
 800abe4:	d044      	beq.n	800ac70 <_free_r+0x90>
 800abe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abea:	9001      	str	r0, [sp, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	f1a1 0404 	sub.w	r4, r1, #4
 800abf2:	bfb8      	it	lt
 800abf4:	18e4      	addlt	r4, r4, r3
 800abf6:	f000 f8df 	bl	800adb8 <__malloc_lock>
 800abfa:	4a1e      	ldr	r2, [pc, #120]	; (800ac74 <_free_r+0x94>)
 800abfc:	9801      	ldr	r0, [sp, #4]
 800abfe:	6813      	ldr	r3, [r2, #0]
 800ac00:	b933      	cbnz	r3, 800ac10 <_free_r+0x30>
 800ac02:	6063      	str	r3, [r4, #4]
 800ac04:	6014      	str	r4, [r2, #0]
 800ac06:	b003      	add	sp, #12
 800ac08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac0c:	f000 b8da 	b.w	800adc4 <__malloc_unlock>
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	d908      	bls.n	800ac26 <_free_r+0x46>
 800ac14:	6825      	ldr	r5, [r4, #0]
 800ac16:	1961      	adds	r1, r4, r5
 800ac18:	428b      	cmp	r3, r1
 800ac1a:	bf01      	itttt	eq
 800ac1c:	6819      	ldreq	r1, [r3, #0]
 800ac1e:	685b      	ldreq	r3, [r3, #4]
 800ac20:	1949      	addeq	r1, r1, r5
 800ac22:	6021      	streq	r1, [r4, #0]
 800ac24:	e7ed      	b.n	800ac02 <_free_r+0x22>
 800ac26:	461a      	mov	r2, r3
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	b10b      	cbz	r3, 800ac30 <_free_r+0x50>
 800ac2c:	42a3      	cmp	r3, r4
 800ac2e:	d9fa      	bls.n	800ac26 <_free_r+0x46>
 800ac30:	6811      	ldr	r1, [r2, #0]
 800ac32:	1855      	adds	r5, r2, r1
 800ac34:	42a5      	cmp	r5, r4
 800ac36:	d10b      	bne.n	800ac50 <_free_r+0x70>
 800ac38:	6824      	ldr	r4, [r4, #0]
 800ac3a:	4421      	add	r1, r4
 800ac3c:	1854      	adds	r4, r2, r1
 800ac3e:	42a3      	cmp	r3, r4
 800ac40:	6011      	str	r1, [r2, #0]
 800ac42:	d1e0      	bne.n	800ac06 <_free_r+0x26>
 800ac44:	681c      	ldr	r4, [r3, #0]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	6053      	str	r3, [r2, #4]
 800ac4a:	440c      	add	r4, r1
 800ac4c:	6014      	str	r4, [r2, #0]
 800ac4e:	e7da      	b.n	800ac06 <_free_r+0x26>
 800ac50:	d902      	bls.n	800ac58 <_free_r+0x78>
 800ac52:	230c      	movs	r3, #12
 800ac54:	6003      	str	r3, [r0, #0]
 800ac56:	e7d6      	b.n	800ac06 <_free_r+0x26>
 800ac58:	6825      	ldr	r5, [r4, #0]
 800ac5a:	1961      	adds	r1, r4, r5
 800ac5c:	428b      	cmp	r3, r1
 800ac5e:	bf04      	itt	eq
 800ac60:	6819      	ldreq	r1, [r3, #0]
 800ac62:	685b      	ldreq	r3, [r3, #4]
 800ac64:	6063      	str	r3, [r4, #4]
 800ac66:	bf04      	itt	eq
 800ac68:	1949      	addeq	r1, r1, r5
 800ac6a:	6021      	streq	r1, [r4, #0]
 800ac6c:	6054      	str	r4, [r2, #4]
 800ac6e:	e7ca      	b.n	800ac06 <_free_r+0x26>
 800ac70:	b003      	add	sp, #12
 800ac72:	bd30      	pop	{r4, r5, pc}
 800ac74:	24002404 	.word	0x24002404

0800ac78 <sbrk_aligned>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	4e0e      	ldr	r6, [pc, #56]	; (800acb4 <sbrk_aligned+0x3c>)
 800ac7c:	460c      	mov	r4, r1
 800ac7e:	6831      	ldr	r1, [r6, #0]
 800ac80:	4605      	mov	r5, r0
 800ac82:	b911      	cbnz	r1, 800ac8a <sbrk_aligned+0x12>
 800ac84:	f000 fba6 	bl	800b3d4 <_sbrk_r>
 800ac88:	6030      	str	r0, [r6, #0]
 800ac8a:	4621      	mov	r1, r4
 800ac8c:	4628      	mov	r0, r5
 800ac8e:	f000 fba1 	bl	800b3d4 <_sbrk_r>
 800ac92:	1c43      	adds	r3, r0, #1
 800ac94:	d00a      	beq.n	800acac <sbrk_aligned+0x34>
 800ac96:	1cc4      	adds	r4, r0, #3
 800ac98:	f024 0403 	bic.w	r4, r4, #3
 800ac9c:	42a0      	cmp	r0, r4
 800ac9e:	d007      	beq.n	800acb0 <sbrk_aligned+0x38>
 800aca0:	1a21      	subs	r1, r4, r0
 800aca2:	4628      	mov	r0, r5
 800aca4:	f000 fb96 	bl	800b3d4 <_sbrk_r>
 800aca8:	3001      	adds	r0, #1
 800acaa:	d101      	bne.n	800acb0 <sbrk_aligned+0x38>
 800acac:	f04f 34ff 	mov.w	r4, #4294967295
 800acb0:	4620      	mov	r0, r4
 800acb2:	bd70      	pop	{r4, r5, r6, pc}
 800acb4:	24002408 	.word	0x24002408

0800acb8 <_malloc_r>:
 800acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	1ccd      	adds	r5, r1, #3
 800acbe:	f025 0503 	bic.w	r5, r5, #3
 800acc2:	3508      	adds	r5, #8
 800acc4:	2d0c      	cmp	r5, #12
 800acc6:	bf38      	it	cc
 800acc8:	250c      	movcc	r5, #12
 800acca:	2d00      	cmp	r5, #0
 800accc:	4607      	mov	r7, r0
 800acce:	db01      	blt.n	800acd4 <_malloc_r+0x1c>
 800acd0:	42a9      	cmp	r1, r5
 800acd2:	d905      	bls.n	800ace0 <_malloc_r+0x28>
 800acd4:	230c      	movs	r3, #12
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	2600      	movs	r6, #0
 800acda:	4630      	mov	r0, r6
 800acdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ace0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800adb4 <_malloc_r+0xfc>
 800ace4:	f000 f868 	bl	800adb8 <__malloc_lock>
 800ace8:	f8d8 3000 	ldr.w	r3, [r8]
 800acec:	461c      	mov	r4, r3
 800acee:	bb5c      	cbnz	r4, 800ad48 <_malloc_r+0x90>
 800acf0:	4629      	mov	r1, r5
 800acf2:	4638      	mov	r0, r7
 800acf4:	f7ff ffc0 	bl	800ac78 <sbrk_aligned>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	4604      	mov	r4, r0
 800acfc:	d155      	bne.n	800adaa <_malloc_r+0xf2>
 800acfe:	f8d8 4000 	ldr.w	r4, [r8]
 800ad02:	4626      	mov	r6, r4
 800ad04:	2e00      	cmp	r6, #0
 800ad06:	d145      	bne.n	800ad94 <_malloc_r+0xdc>
 800ad08:	2c00      	cmp	r4, #0
 800ad0a:	d048      	beq.n	800ad9e <_malloc_r+0xe6>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4638      	mov	r0, r7
 800ad12:	eb04 0903 	add.w	r9, r4, r3
 800ad16:	f000 fb5d 	bl	800b3d4 <_sbrk_r>
 800ad1a:	4581      	cmp	r9, r0
 800ad1c:	d13f      	bne.n	800ad9e <_malloc_r+0xe6>
 800ad1e:	6821      	ldr	r1, [r4, #0]
 800ad20:	1a6d      	subs	r5, r5, r1
 800ad22:	4629      	mov	r1, r5
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff ffa7 	bl	800ac78 <sbrk_aligned>
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	d037      	beq.n	800ad9e <_malloc_r+0xe6>
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	442b      	add	r3, r5
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	f8d8 3000 	ldr.w	r3, [r8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d038      	beq.n	800adae <_malloc_r+0xf6>
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	42a2      	cmp	r2, r4
 800ad40:	d12b      	bne.n	800ad9a <_malloc_r+0xe2>
 800ad42:	2200      	movs	r2, #0
 800ad44:	605a      	str	r2, [r3, #4]
 800ad46:	e00f      	b.n	800ad68 <_malloc_r+0xb0>
 800ad48:	6822      	ldr	r2, [r4, #0]
 800ad4a:	1b52      	subs	r2, r2, r5
 800ad4c:	d41f      	bmi.n	800ad8e <_malloc_r+0xd6>
 800ad4e:	2a0b      	cmp	r2, #11
 800ad50:	d917      	bls.n	800ad82 <_malloc_r+0xca>
 800ad52:	1961      	adds	r1, r4, r5
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	6025      	str	r5, [r4, #0]
 800ad58:	bf18      	it	ne
 800ad5a:	6059      	strne	r1, [r3, #4]
 800ad5c:	6863      	ldr	r3, [r4, #4]
 800ad5e:	bf08      	it	eq
 800ad60:	f8c8 1000 	streq.w	r1, [r8]
 800ad64:	5162      	str	r2, [r4, r5]
 800ad66:	604b      	str	r3, [r1, #4]
 800ad68:	4638      	mov	r0, r7
 800ad6a:	f104 060b 	add.w	r6, r4, #11
 800ad6e:	f000 f829 	bl	800adc4 <__malloc_unlock>
 800ad72:	f026 0607 	bic.w	r6, r6, #7
 800ad76:	1d23      	adds	r3, r4, #4
 800ad78:	1af2      	subs	r2, r6, r3
 800ad7a:	d0ae      	beq.n	800acda <_malloc_r+0x22>
 800ad7c:	1b9b      	subs	r3, r3, r6
 800ad7e:	50a3      	str	r3, [r4, r2]
 800ad80:	e7ab      	b.n	800acda <_malloc_r+0x22>
 800ad82:	42a3      	cmp	r3, r4
 800ad84:	6862      	ldr	r2, [r4, #4]
 800ad86:	d1dd      	bne.n	800ad44 <_malloc_r+0x8c>
 800ad88:	f8c8 2000 	str.w	r2, [r8]
 800ad8c:	e7ec      	b.n	800ad68 <_malloc_r+0xb0>
 800ad8e:	4623      	mov	r3, r4
 800ad90:	6864      	ldr	r4, [r4, #4]
 800ad92:	e7ac      	b.n	800acee <_malloc_r+0x36>
 800ad94:	4634      	mov	r4, r6
 800ad96:	6876      	ldr	r6, [r6, #4]
 800ad98:	e7b4      	b.n	800ad04 <_malloc_r+0x4c>
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	e7cc      	b.n	800ad38 <_malloc_r+0x80>
 800ad9e:	230c      	movs	r3, #12
 800ada0:	603b      	str	r3, [r7, #0]
 800ada2:	4638      	mov	r0, r7
 800ada4:	f000 f80e 	bl	800adc4 <__malloc_unlock>
 800ada8:	e797      	b.n	800acda <_malloc_r+0x22>
 800adaa:	6025      	str	r5, [r4, #0]
 800adac:	e7dc      	b.n	800ad68 <_malloc_r+0xb0>
 800adae:	605b      	str	r3, [r3, #4]
 800adb0:	deff      	udf	#255	; 0xff
 800adb2:	bf00      	nop
 800adb4:	24002404 	.word	0x24002404

0800adb8 <__malloc_lock>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__malloc_lock+0x8>)
 800adba:	f7ff bf0f 	b.w	800abdc <__retarget_lock_acquire_recursive>
 800adbe:	bf00      	nop
 800adc0:	24002400 	.word	0x24002400

0800adc4 <__malloc_unlock>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__malloc_unlock+0x8>)
 800adc6:	f7ff bf0a 	b.w	800abde <__retarget_lock_release_recursive>
 800adca:	bf00      	nop
 800adcc:	24002400 	.word	0x24002400

0800add0 <__ssputs_r>:
 800add0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add4:	688e      	ldr	r6, [r1, #8]
 800add6:	461f      	mov	r7, r3
 800add8:	42be      	cmp	r6, r7
 800adda:	680b      	ldr	r3, [r1, #0]
 800addc:	4682      	mov	sl, r0
 800adde:	460c      	mov	r4, r1
 800ade0:	4690      	mov	r8, r2
 800ade2:	d82c      	bhi.n	800ae3e <__ssputs_r+0x6e>
 800ade4:	898a      	ldrh	r2, [r1, #12]
 800ade6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adea:	d026      	beq.n	800ae3a <__ssputs_r+0x6a>
 800adec:	6965      	ldr	r5, [r4, #20]
 800adee:	6909      	ldr	r1, [r1, #16]
 800adf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adf4:	eba3 0901 	sub.w	r9, r3, r1
 800adf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adfc:	1c7b      	adds	r3, r7, #1
 800adfe:	444b      	add	r3, r9
 800ae00:	106d      	asrs	r5, r5, #1
 800ae02:	429d      	cmp	r5, r3
 800ae04:	bf38      	it	cc
 800ae06:	461d      	movcc	r5, r3
 800ae08:	0553      	lsls	r3, r2, #21
 800ae0a:	d527      	bpl.n	800ae5c <__ssputs_r+0x8c>
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	f7ff ff53 	bl	800acb8 <_malloc_r>
 800ae12:	4606      	mov	r6, r0
 800ae14:	b360      	cbz	r0, 800ae70 <__ssputs_r+0xa0>
 800ae16:	6921      	ldr	r1, [r4, #16]
 800ae18:	464a      	mov	r2, r9
 800ae1a:	f000 faeb 	bl	800b3f4 <memcpy>
 800ae1e:	89a3      	ldrh	r3, [r4, #12]
 800ae20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	6126      	str	r6, [r4, #16]
 800ae2c:	6165      	str	r5, [r4, #20]
 800ae2e:	444e      	add	r6, r9
 800ae30:	eba5 0509 	sub.w	r5, r5, r9
 800ae34:	6026      	str	r6, [r4, #0]
 800ae36:	60a5      	str	r5, [r4, #8]
 800ae38:	463e      	mov	r6, r7
 800ae3a:	42be      	cmp	r6, r7
 800ae3c:	d900      	bls.n	800ae40 <__ssputs_r+0x70>
 800ae3e:	463e      	mov	r6, r7
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	4632      	mov	r2, r6
 800ae44:	4641      	mov	r1, r8
 800ae46:	f000 faab 	bl	800b3a0 <memmove>
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	1b9b      	subs	r3, r3, r6
 800ae4e:	60a3      	str	r3, [r4, #8]
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	4433      	add	r3, r6
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	2000      	movs	r0, #0
 800ae58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5c:	462a      	mov	r2, r5
 800ae5e:	f000 fad7 	bl	800b410 <_realloc_r>
 800ae62:	4606      	mov	r6, r0
 800ae64:	2800      	cmp	r0, #0
 800ae66:	d1e0      	bne.n	800ae2a <__ssputs_r+0x5a>
 800ae68:	6921      	ldr	r1, [r4, #16]
 800ae6a:	4650      	mov	r0, sl
 800ae6c:	f7ff feb8 	bl	800abe0 <_free_r>
 800ae70:	230c      	movs	r3, #12
 800ae72:	f8ca 3000 	str.w	r3, [sl]
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7c:	81a3      	strh	r3, [r4, #12]
 800ae7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae82:	e7e9      	b.n	800ae58 <__ssputs_r+0x88>

0800ae84 <_svfiprintf_r>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	4698      	mov	r8, r3
 800ae8a:	898b      	ldrh	r3, [r1, #12]
 800ae8c:	061b      	lsls	r3, r3, #24
 800ae8e:	b09d      	sub	sp, #116	; 0x74
 800ae90:	4607      	mov	r7, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	4614      	mov	r4, r2
 800ae96:	d50e      	bpl.n	800aeb6 <_svfiprintf_r+0x32>
 800ae98:	690b      	ldr	r3, [r1, #16]
 800ae9a:	b963      	cbnz	r3, 800aeb6 <_svfiprintf_r+0x32>
 800ae9c:	2140      	movs	r1, #64	; 0x40
 800ae9e:	f7ff ff0b 	bl	800acb8 <_malloc_r>
 800aea2:	6028      	str	r0, [r5, #0]
 800aea4:	6128      	str	r0, [r5, #16]
 800aea6:	b920      	cbnz	r0, 800aeb2 <_svfiprintf_r+0x2e>
 800aea8:	230c      	movs	r3, #12
 800aeaa:	603b      	str	r3, [r7, #0]
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	e0d0      	b.n	800b054 <_svfiprintf_r+0x1d0>
 800aeb2:	2340      	movs	r3, #64	; 0x40
 800aeb4:	616b      	str	r3, [r5, #20]
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeba:	2320      	movs	r3, #32
 800aebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aec0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec4:	2330      	movs	r3, #48	; 0x30
 800aec6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b06c <_svfiprintf_r+0x1e8>
 800aeca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aece:	f04f 0901 	mov.w	r9, #1
 800aed2:	4623      	mov	r3, r4
 800aed4:	469a      	mov	sl, r3
 800aed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeda:	b10a      	cbz	r2, 800aee0 <_svfiprintf_r+0x5c>
 800aedc:	2a25      	cmp	r2, #37	; 0x25
 800aede:	d1f9      	bne.n	800aed4 <_svfiprintf_r+0x50>
 800aee0:	ebba 0b04 	subs.w	fp, sl, r4
 800aee4:	d00b      	beq.n	800aefe <_svfiprintf_r+0x7a>
 800aee6:	465b      	mov	r3, fp
 800aee8:	4622      	mov	r2, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	4638      	mov	r0, r7
 800aeee:	f7ff ff6f 	bl	800add0 <__ssputs_r>
 800aef2:	3001      	adds	r0, #1
 800aef4:	f000 80a9 	beq.w	800b04a <_svfiprintf_r+0x1c6>
 800aef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aefa:	445a      	add	r2, fp
 800aefc:	9209      	str	r2, [sp, #36]	; 0x24
 800aefe:	f89a 3000 	ldrb.w	r3, [sl]
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 80a1 	beq.w	800b04a <_svfiprintf_r+0x1c6>
 800af08:	2300      	movs	r3, #0
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295
 800af0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af12:	f10a 0a01 	add.w	sl, sl, #1
 800af16:	9304      	str	r3, [sp, #16]
 800af18:	9307      	str	r3, [sp, #28]
 800af1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af1e:	931a      	str	r3, [sp, #104]	; 0x68
 800af20:	4654      	mov	r4, sl
 800af22:	2205      	movs	r2, #5
 800af24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af28:	4850      	ldr	r0, [pc, #320]	; (800b06c <_svfiprintf_r+0x1e8>)
 800af2a:	f7f5 f9e1 	bl	80002f0 <memchr>
 800af2e:	9a04      	ldr	r2, [sp, #16]
 800af30:	b9d8      	cbnz	r0, 800af6a <_svfiprintf_r+0xe6>
 800af32:	06d0      	lsls	r0, r2, #27
 800af34:	bf44      	itt	mi
 800af36:	2320      	movmi	r3, #32
 800af38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af3c:	0711      	lsls	r1, r2, #28
 800af3e:	bf44      	itt	mi
 800af40:	232b      	movmi	r3, #43	; 0x2b
 800af42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af46:	f89a 3000 	ldrb.w	r3, [sl]
 800af4a:	2b2a      	cmp	r3, #42	; 0x2a
 800af4c:	d015      	beq.n	800af7a <_svfiprintf_r+0xf6>
 800af4e:	9a07      	ldr	r2, [sp, #28]
 800af50:	4654      	mov	r4, sl
 800af52:	2000      	movs	r0, #0
 800af54:	f04f 0c0a 	mov.w	ip, #10
 800af58:	4621      	mov	r1, r4
 800af5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5e:	3b30      	subs	r3, #48	; 0x30
 800af60:	2b09      	cmp	r3, #9
 800af62:	d94d      	bls.n	800b000 <_svfiprintf_r+0x17c>
 800af64:	b1b0      	cbz	r0, 800af94 <_svfiprintf_r+0x110>
 800af66:	9207      	str	r2, [sp, #28]
 800af68:	e014      	b.n	800af94 <_svfiprintf_r+0x110>
 800af6a:	eba0 0308 	sub.w	r3, r0, r8
 800af6e:	fa09 f303 	lsl.w	r3, r9, r3
 800af72:	4313      	orrs	r3, r2
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	46a2      	mov	sl, r4
 800af78:	e7d2      	b.n	800af20 <_svfiprintf_r+0x9c>
 800af7a:	9b03      	ldr	r3, [sp, #12]
 800af7c:	1d19      	adds	r1, r3, #4
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	9103      	str	r1, [sp, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	bfbb      	ittet	lt
 800af86:	425b      	neglt	r3, r3
 800af88:	f042 0202 	orrlt.w	r2, r2, #2
 800af8c:	9307      	strge	r3, [sp, #28]
 800af8e:	9307      	strlt	r3, [sp, #28]
 800af90:	bfb8      	it	lt
 800af92:	9204      	strlt	r2, [sp, #16]
 800af94:	7823      	ldrb	r3, [r4, #0]
 800af96:	2b2e      	cmp	r3, #46	; 0x2e
 800af98:	d10c      	bne.n	800afb4 <_svfiprintf_r+0x130>
 800af9a:	7863      	ldrb	r3, [r4, #1]
 800af9c:	2b2a      	cmp	r3, #42	; 0x2a
 800af9e:	d134      	bne.n	800b00a <_svfiprintf_r+0x186>
 800afa0:	9b03      	ldr	r3, [sp, #12]
 800afa2:	1d1a      	adds	r2, r3, #4
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	9203      	str	r2, [sp, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	bfb8      	it	lt
 800afac:	f04f 33ff 	movlt.w	r3, #4294967295
 800afb0:	3402      	adds	r4, #2
 800afb2:	9305      	str	r3, [sp, #20]
 800afb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b07c <_svfiprintf_r+0x1f8>
 800afb8:	7821      	ldrb	r1, [r4, #0]
 800afba:	2203      	movs	r2, #3
 800afbc:	4650      	mov	r0, sl
 800afbe:	f7f5 f997 	bl	80002f0 <memchr>
 800afc2:	b138      	cbz	r0, 800afd4 <_svfiprintf_r+0x150>
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	eba0 000a 	sub.w	r0, r0, sl
 800afca:	2240      	movs	r2, #64	; 0x40
 800afcc:	4082      	lsls	r2, r0
 800afce:	4313      	orrs	r3, r2
 800afd0:	3401      	adds	r4, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd8:	4825      	ldr	r0, [pc, #148]	; (800b070 <_svfiprintf_r+0x1ec>)
 800afda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afde:	2206      	movs	r2, #6
 800afe0:	f7f5 f986 	bl	80002f0 <memchr>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d038      	beq.n	800b05a <_svfiprintf_r+0x1d6>
 800afe8:	4b22      	ldr	r3, [pc, #136]	; (800b074 <_svfiprintf_r+0x1f0>)
 800afea:	bb1b      	cbnz	r3, 800b034 <_svfiprintf_r+0x1b0>
 800afec:	9b03      	ldr	r3, [sp, #12]
 800afee:	3307      	adds	r3, #7
 800aff0:	f023 0307 	bic.w	r3, r3, #7
 800aff4:	3308      	adds	r3, #8
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affa:	4433      	add	r3, r6
 800affc:	9309      	str	r3, [sp, #36]	; 0x24
 800affe:	e768      	b.n	800aed2 <_svfiprintf_r+0x4e>
 800b000:	fb0c 3202 	mla	r2, ip, r2, r3
 800b004:	460c      	mov	r4, r1
 800b006:	2001      	movs	r0, #1
 800b008:	e7a6      	b.n	800af58 <_svfiprintf_r+0xd4>
 800b00a:	2300      	movs	r3, #0
 800b00c:	3401      	adds	r4, #1
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	4619      	mov	r1, r3
 800b012:	f04f 0c0a 	mov.w	ip, #10
 800b016:	4620      	mov	r0, r4
 800b018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b01c:	3a30      	subs	r2, #48	; 0x30
 800b01e:	2a09      	cmp	r2, #9
 800b020:	d903      	bls.n	800b02a <_svfiprintf_r+0x1a6>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0c6      	beq.n	800afb4 <_svfiprintf_r+0x130>
 800b026:	9105      	str	r1, [sp, #20]
 800b028:	e7c4      	b.n	800afb4 <_svfiprintf_r+0x130>
 800b02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02e:	4604      	mov	r4, r0
 800b030:	2301      	movs	r3, #1
 800b032:	e7f0      	b.n	800b016 <_svfiprintf_r+0x192>
 800b034:	ab03      	add	r3, sp, #12
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	462a      	mov	r2, r5
 800b03a:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <_svfiprintf_r+0x1f4>)
 800b03c:	a904      	add	r1, sp, #16
 800b03e:	4638      	mov	r0, r7
 800b040:	f3af 8000 	nop.w
 800b044:	1c42      	adds	r2, r0, #1
 800b046:	4606      	mov	r6, r0
 800b048:	d1d6      	bne.n	800aff8 <_svfiprintf_r+0x174>
 800b04a:	89ab      	ldrh	r3, [r5, #12]
 800b04c:	065b      	lsls	r3, r3, #25
 800b04e:	f53f af2d 	bmi.w	800aeac <_svfiprintf_r+0x28>
 800b052:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b054:	b01d      	add	sp, #116	; 0x74
 800b056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05a:	ab03      	add	r3, sp, #12
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	462a      	mov	r2, r5
 800b060:	4b05      	ldr	r3, [pc, #20]	; (800b078 <_svfiprintf_r+0x1f4>)
 800b062:	a904      	add	r1, sp, #16
 800b064:	4638      	mov	r0, r7
 800b066:	f000 f879 	bl	800b15c <_printf_i>
 800b06a:	e7eb      	b.n	800b044 <_svfiprintf_r+0x1c0>
 800b06c:	0800b4f4 	.word	0x0800b4f4
 800b070:	0800b4fe 	.word	0x0800b4fe
 800b074:	00000000 	.word	0x00000000
 800b078:	0800add1 	.word	0x0800add1
 800b07c:	0800b4fa 	.word	0x0800b4fa

0800b080 <_printf_common>:
 800b080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b084:	4616      	mov	r6, r2
 800b086:	4699      	mov	r9, r3
 800b088:	688a      	ldr	r2, [r1, #8]
 800b08a:	690b      	ldr	r3, [r1, #16]
 800b08c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b090:	4293      	cmp	r3, r2
 800b092:	bfb8      	it	lt
 800b094:	4613      	movlt	r3, r2
 800b096:	6033      	str	r3, [r6, #0]
 800b098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b09c:	4607      	mov	r7, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	b10a      	cbz	r2, 800b0a6 <_printf_common+0x26>
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	6033      	str	r3, [r6, #0]
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	0699      	lsls	r1, r3, #26
 800b0aa:	bf42      	ittt	mi
 800b0ac:	6833      	ldrmi	r3, [r6, #0]
 800b0ae:	3302      	addmi	r3, #2
 800b0b0:	6033      	strmi	r3, [r6, #0]
 800b0b2:	6825      	ldr	r5, [r4, #0]
 800b0b4:	f015 0506 	ands.w	r5, r5, #6
 800b0b8:	d106      	bne.n	800b0c8 <_printf_common+0x48>
 800b0ba:	f104 0a19 	add.w	sl, r4, #25
 800b0be:	68e3      	ldr	r3, [r4, #12]
 800b0c0:	6832      	ldr	r2, [r6, #0]
 800b0c2:	1a9b      	subs	r3, r3, r2
 800b0c4:	42ab      	cmp	r3, r5
 800b0c6:	dc26      	bgt.n	800b116 <_printf_common+0x96>
 800b0c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0cc:	1e13      	subs	r3, r2, #0
 800b0ce:	6822      	ldr	r2, [r4, #0]
 800b0d0:	bf18      	it	ne
 800b0d2:	2301      	movne	r3, #1
 800b0d4:	0692      	lsls	r2, r2, #26
 800b0d6:	d42b      	bmi.n	800b130 <_printf_common+0xb0>
 800b0d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0dc:	4649      	mov	r1, r9
 800b0de:	4638      	mov	r0, r7
 800b0e0:	47c0      	blx	r8
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	d01e      	beq.n	800b124 <_printf_common+0xa4>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	6922      	ldr	r2, [r4, #16]
 800b0ea:	f003 0306 	and.w	r3, r3, #6
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	bf02      	ittt	eq
 800b0f2:	68e5      	ldreq	r5, [r4, #12]
 800b0f4:	6833      	ldreq	r3, [r6, #0]
 800b0f6:	1aed      	subeq	r5, r5, r3
 800b0f8:	68a3      	ldr	r3, [r4, #8]
 800b0fa:	bf0c      	ite	eq
 800b0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b100:	2500      	movne	r5, #0
 800b102:	4293      	cmp	r3, r2
 800b104:	bfc4      	itt	gt
 800b106:	1a9b      	subgt	r3, r3, r2
 800b108:	18ed      	addgt	r5, r5, r3
 800b10a:	2600      	movs	r6, #0
 800b10c:	341a      	adds	r4, #26
 800b10e:	42b5      	cmp	r5, r6
 800b110:	d11a      	bne.n	800b148 <_printf_common+0xc8>
 800b112:	2000      	movs	r0, #0
 800b114:	e008      	b.n	800b128 <_printf_common+0xa8>
 800b116:	2301      	movs	r3, #1
 800b118:	4652      	mov	r2, sl
 800b11a:	4649      	mov	r1, r9
 800b11c:	4638      	mov	r0, r7
 800b11e:	47c0      	blx	r8
 800b120:	3001      	adds	r0, #1
 800b122:	d103      	bne.n	800b12c <_printf_common+0xac>
 800b124:	f04f 30ff 	mov.w	r0, #4294967295
 800b128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b12c:	3501      	adds	r5, #1
 800b12e:	e7c6      	b.n	800b0be <_printf_common+0x3e>
 800b130:	18e1      	adds	r1, r4, r3
 800b132:	1c5a      	adds	r2, r3, #1
 800b134:	2030      	movs	r0, #48	; 0x30
 800b136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b13a:	4422      	add	r2, r4
 800b13c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b144:	3302      	adds	r3, #2
 800b146:	e7c7      	b.n	800b0d8 <_printf_common+0x58>
 800b148:	2301      	movs	r3, #1
 800b14a:	4622      	mov	r2, r4
 800b14c:	4649      	mov	r1, r9
 800b14e:	4638      	mov	r0, r7
 800b150:	47c0      	blx	r8
 800b152:	3001      	adds	r0, #1
 800b154:	d0e6      	beq.n	800b124 <_printf_common+0xa4>
 800b156:	3601      	adds	r6, #1
 800b158:	e7d9      	b.n	800b10e <_printf_common+0x8e>
	...

0800b15c <_printf_i>:
 800b15c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b160:	7e0f      	ldrb	r7, [r1, #24]
 800b162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b164:	2f78      	cmp	r7, #120	; 0x78
 800b166:	4691      	mov	r9, r2
 800b168:	4680      	mov	r8, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	469a      	mov	sl, r3
 800b16e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b172:	d807      	bhi.n	800b184 <_printf_i+0x28>
 800b174:	2f62      	cmp	r7, #98	; 0x62
 800b176:	d80a      	bhi.n	800b18e <_printf_i+0x32>
 800b178:	2f00      	cmp	r7, #0
 800b17a:	f000 80d4 	beq.w	800b326 <_printf_i+0x1ca>
 800b17e:	2f58      	cmp	r7, #88	; 0x58
 800b180:	f000 80c0 	beq.w	800b304 <_printf_i+0x1a8>
 800b184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b18c:	e03a      	b.n	800b204 <_printf_i+0xa8>
 800b18e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b192:	2b15      	cmp	r3, #21
 800b194:	d8f6      	bhi.n	800b184 <_printf_i+0x28>
 800b196:	a101      	add	r1, pc, #4	; (adr r1, 800b19c <_printf_i+0x40>)
 800b198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b19c:	0800b1f5 	.word	0x0800b1f5
 800b1a0:	0800b209 	.word	0x0800b209
 800b1a4:	0800b185 	.word	0x0800b185
 800b1a8:	0800b185 	.word	0x0800b185
 800b1ac:	0800b185 	.word	0x0800b185
 800b1b0:	0800b185 	.word	0x0800b185
 800b1b4:	0800b209 	.word	0x0800b209
 800b1b8:	0800b185 	.word	0x0800b185
 800b1bc:	0800b185 	.word	0x0800b185
 800b1c0:	0800b185 	.word	0x0800b185
 800b1c4:	0800b185 	.word	0x0800b185
 800b1c8:	0800b30d 	.word	0x0800b30d
 800b1cc:	0800b235 	.word	0x0800b235
 800b1d0:	0800b2c7 	.word	0x0800b2c7
 800b1d4:	0800b185 	.word	0x0800b185
 800b1d8:	0800b185 	.word	0x0800b185
 800b1dc:	0800b32f 	.word	0x0800b32f
 800b1e0:	0800b185 	.word	0x0800b185
 800b1e4:	0800b235 	.word	0x0800b235
 800b1e8:	0800b185 	.word	0x0800b185
 800b1ec:	0800b185 	.word	0x0800b185
 800b1f0:	0800b2cf 	.word	0x0800b2cf
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	1d1a      	adds	r2, r3, #4
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	602a      	str	r2, [r5, #0]
 800b1fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b204:	2301      	movs	r3, #1
 800b206:	e09f      	b.n	800b348 <_printf_i+0x1ec>
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	682b      	ldr	r3, [r5, #0]
 800b20c:	0607      	lsls	r7, r0, #24
 800b20e:	f103 0104 	add.w	r1, r3, #4
 800b212:	6029      	str	r1, [r5, #0]
 800b214:	d501      	bpl.n	800b21a <_printf_i+0xbe>
 800b216:	681e      	ldr	r6, [r3, #0]
 800b218:	e003      	b.n	800b222 <_printf_i+0xc6>
 800b21a:	0646      	lsls	r6, r0, #25
 800b21c:	d5fb      	bpl.n	800b216 <_printf_i+0xba>
 800b21e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b222:	2e00      	cmp	r6, #0
 800b224:	da03      	bge.n	800b22e <_printf_i+0xd2>
 800b226:	232d      	movs	r3, #45	; 0x2d
 800b228:	4276      	negs	r6, r6
 800b22a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b22e:	485a      	ldr	r0, [pc, #360]	; (800b398 <_printf_i+0x23c>)
 800b230:	230a      	movs	r3, #10
 800b232:	e012      	b.n	800b25a <_printf_i+0xfe>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	6820      	ldr	r0, [r4, #0]
 800b238:	1d19      	adds	r1, r3, #4
 800b23a:	6029      	str	r1, [r5, #0]
 800b23c:	0605      	lsls	r5, r0, #24
 800b23e:	d501      	bpl.n	800b244 <_printf_i+0xe8>
 800b240:	681e      	ldr	r6, [r3, #0]
 800b242:	e002      	b.n	800b24a <_printf_i+0xee>
 800b244:	0641      	lsls	r1, r0, #25
 800b246:	d5fb      	bpl.n	800b240 <_printf_i+0xe4>
 800b248:	881e      	ldrh	r6, [r3, #0]
 800b24a:	4853      	ldr	r0, [pc, #332]	; (800b398 <_printf_i+0x23c>)
 800b24c:	2f6f      	cmp	r7, #111	; 0x6f
 800b24e:	bf0c      	ite	eq
 800b250:	2308      	moveq	r3, #8
 800b252:	230a      	movne	r3, #10
 800b254:	2100      	movs	r1, #0
 800b256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b25a:	6865      	ldr	r5, [r4, #4]
 800b25c:	60a5      	str	r5, [r4, #8]
 800b25e:	2d00      	cmp	r5, #0
 800b260:	bfa2      	ittt	ge
 800b262:	6821      	ldrge	r1, [r4, #0]
 800b264:	f021 0104 	bicge.w	r1, r1, #4
 800b268:	6021      	strge	r1, [r4, #0]
 800b26a:	b90e      	cbnz	r6, 800b270 <_printf_i+0x114>
 800b26c:	2d00      	cmp	r5, #0
 800b26e:	d04b      	beq.n	800b308 <_printf_i+0x1ac>
 800b270:	4615      	mov	r5, r2
 800b272:	fbb6 f1f3 	udiv	r1, r6, r3
 800b276:	fb03 6711 	mls	r7, r3, r1, r6
 800b27a:	5dc7      	ldrb	r7, [r0, r7]
 800b27c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b280:	4637      	mov	r7, r6
 800b282:	42bb      	cmp	r3, r7
 800b284:	460e      	mov	r6, r1
 800b286:	d9f4      	bls.n	800b272 <_printf_i+0x116>
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d10b      	bne.n	800b2a4 <_printf_i+0x148>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	07de      	lsls	r6, r3, #31
 800b290:	d508      	bpl.n	800b2a4 <_printf_i+0x148>
 800b292:	6923      	ldr	r3, [r4, #16]
 800b294:	6861      	ldr	r1, [r4, #4]
 800b296:	4299      	cmp	r1, r3
 800b298:	bfde      	ittt	le
 800b29a:	2330      	movle	r3, #48	; 0x30
 800b29c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2a4:	1b52      	subs	r2, r2, r5
 800b2a6:	6122      	str	r2, [r4, #16]
 800b2a8:	f8cd a000 	str.w	sl, [sp]
 800b2ac:	464b      	mov	r3, r9
 800b2ae:	aa03      	add	r2, sp, #12
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	f7ff fee4 	bl	800b080 <_printf_common>
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d14a      	bne.n	800b352 <_printf_i+0x1f6>
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	b004      	add	sp, #16
 800b2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	f043 0320 	orr.w	r3, r3, #32
 800b2cc:	6023      	str	r3, [r4, #0]
 800b2ce:	4833      	ldr	r0, [pc, #204]	; (800b39c <_printf_i+0x240>)
 800b2d0:	2778      	movs	r7, #120	; 0x78
 800b2d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	6829      	ldr	r1, [r5, #0]
 800b2da:	061f      	lsls	r7, r3, #24
 800b2dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2e0:	d402      	bmi.n	800b2e8 <_printf_i+0x18c>
 800b2e2:	065f      	lsls	r7, r3, #25
 800b2e4:	bf48      	it	mi
 800b2e6:	b2b6      	uxthmi	r6, r6
 800b2e8:	07df      	lsls	r7, r3, #31
 800b2ea:	bf48      	it	mi
 800b2ec:	f043 0320 	orrmi.w	r3, r3, #32
 800b2f0:	6029      	str	r1, [r5, #0]
 800b2f2:	bf48      	it	mi
 800b2f4:	6023      	strmi	r3, [r4, #0]
 800b2f6:	b91e      	cbnz	r6, 800b300 <_printf_i+0x1a4>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	f023 0320 	bic.w	r3, r3, #32
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	2310      	movs	r3, #16
 800b302:	e7a7      	b.n	800b254 <_printf_i+0xf8>
 800b304:	4824      	ldr	r0, [pc, #144]	; (800b398 <_printf_i+0x23c>)
 800b306:	e7e4      	b.n	800b2d2 <_printf_i+0x176>
 800b308:	4615      	mov	r5, r2
 800b30a:	e7bd      	b.n	800b288 <_printf_i+0x12c>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	6826      	ldr	r6, [r4, #0]
 800b310:	6961      	ldr	r1, [r4, #20]
 800b312:	1d18      	adds	r0, r3, #4
 800b314:	6028      	str	r0, [r5, #0]
 800b316:	0635      	lsls	r5, r6, #24
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	d501      	bpl.n	800b320 <_printf_i+0x1c4>
 800b31c:	6019      	str	r1, [r3, #0]
 800b31e:	e002      	b.n	800b326 <_printf_i+0x1ca>
 800b320:	0670      	lsls	r0, r6, #25
 800b322:	d5fb      	bpl.n	800b31c <_printf_i+0x1c0>
 800b324:	8019      	strh	r1, [r3, #0]
 800b326:	2300      	movs	r3, #0
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	4615      	mov	r5, r2
 800b32c:	e7bc      	b.n	800b2a8 <_printf_i+0x14c>
 800b32e:	682b      	ldr	r3, [r5, #0]
 800b330:	1d1a      	adds	r2, r3, #4
 800b332:	602a      	str	r2, [r5, #0]
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	6862      	ldr	r2, [r4, #4]
 800b338:	2100      	movs	r1, #0
 800b33a:	4628      	mov	r0, r5
 800b33c:	f7f4 ffd8 	bl	80002f0 <memchr>
 800b340:	b108      	cbz	r0, 800b346 <_printf_i+0x1ea>
 800b342:	1b40      	subs	r0, r0, r5
 800b344:	6060      	str	r0, [r4, #4]
 800b346:	6863      	ldr	r3, [r4, #4]
 800b348:	6123      	str	r3, [r4, #16]
 800b34a:	2300      	movs	r3, #0
 800b34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b350:	e7aa      	b.n	800b2a8 <_printf_i+0x14c>
 800b352:	6923      	ldr	r3, [r4, #16]
 800b354:	462a      	mov	r2, r5
 800b356:	4649      	mov	r1, r9
 800b358:	4640      	mov	r0, r8
 800b35a:	47d0      	blx	sl
 800b35c:	3001      	adds	r0, #1
 800b35e:	d0ad      	beq.n	800b2bc <_printf_i+0x160>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	079b      	lsls	r3, r3, #30
 800b364:	d413      	bmi.n	800b38e <_printf_i+0x232>
 800b366:	68e0      	ldr	r0, [r4, #12]
 800b368:	9b03      	ldr	r3, [sp, #12]
 800b36a:	4298      	cmp	r0, r3
 800b36c:	bfb8      	it	lt
 800b36e:	4618      	movlt	r0, r3
 800b370:	e7a6      	b.n	800b2c0 <_printf_i+0x164>
 800b372:	2301      	movs	r3, #1
 800b374:	4632      	mov	r2, r6
 800b376:	4649      	mov	r1, r9
 800b378:	4640      	mov	r0, r8
 800b37a:	47d0      	blx	sl
 800b37c:	3001      	adds	r0, #1
 800b37e:	d09d      	beq.n	800b2bc <_printf_i+0x160>
 800b380:	3501      	adds	r5, #1
 800b382:	68e3      	ldr	r3, [r4, #12]
 800b384:	9903      	ldr	r1, [sp, #12]
 800b386:	1a5b      	subs	r3, r3, r1
 800b388:	42ab      	cmp	r3, r5
 800b38a:	dcf2      	bgt.n	800b372 <_printf_i+0x216>
 800b38c:	e7eb      	b.n	800b366 <_printf_i+0x20a>
 800b38e:	2500      	movs	r5, #0
 800b390:	f104 0619 	add.w	r6, r4, #25
 800b394:	e7f5      	b.n	800b382 <_printf_i+0x226>
 800b396:	bf00      	nop
 800b398:	0800b505 	.word	0x0800b505
 800b39c:	0800b516 	.word	0x0800b516

0800b3a0 <memmove>:
 800b3a0:	4288      	cmp	r0, r1
 800b3a2:	b510      	push	{r4, lr}
 800b3a4:	eb01 0402 	add.w	r4, r1, r2
 800b3a8:	d902      	bls.n	800b3b0 <memmove+0x10>
 800b3aa:	4284      	cmp	r4, r0
 800b3ac:	4623      	mov	r3, r4
 800b3ae:	d807      	bhi.n	800b3c0 <memmove+0x20>
 800b3b0:	1e43      	subs	r3, r0, #1
 800b3b2:	42a1      	cmp	r1, r4
 800b3b4:	d008      	beq.n	800b3c8 <memmove+0x28>
 800b3b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3be:	e7f8      	b.n	800b3b2 <memmove+0x12>
 800b3c0:	4402      	add	r2, r0
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	428a      	cmp	r2, r1
 800b3c6:	d100      	bne.n	800b3ca <memmove+0x2a>
 800b3c8:	bd10      	pop	{r4, pc}
 800b3ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3d2:	e7f7      	b.n	800b3c4 <memmove+0x24>

0800b3d4 <_sbrk_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4d06      	ldr	r5, [pc, #24]	; (800b3f0 <_sbrk_r+0x1c>)
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	602b      	str	r3, [r5, #0]
 800b3e0:	f7f6 f87a 	bl	80014d8 <_sbrk>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	d102      	bne.n	800b3ee <_sbrk_r+0x1a>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	b103      	cbz	r3, 800b3ee <_sbrk_r+0x1a>
 800b3ec:	6023      	str	r3, [r4, #0]
 800b3ee:	bd38      	pop	{r3, r4, r5, pc}
 800b3f0:	240023fc 	.word	0x240023fc

0800b3f4 <memcpy>:
 800b3f4:	440a      	add	r2, r1
 800b3f6:	4291      	cmp	r1, r2
 800b3f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3fc:	d100      	bne.n	800b400 <memcpy+0xc>
 800b3fe:	4770      	bx	lr
 800b400:	b510      	push	{r4, lr}
 800b402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b40a:	4291      	cmp	r1, r2
 800b40c:	d1f9      	bne.n	800b402 <memcpy+0xe>
 800b40e:	bd10      	pop	{r4, pc}

0800b410 <_realloc_r>:
 800b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b414:	4680      	mov	r8, r0
 800b416:	4614      	mov	r4, r2
 800b418:	460e      	mov	r6, r1
 800b41a:	b921      	cbnz	r1, 800b426 <_realloc_r+0x16>
 800b41c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	4611      	mov	r1, r2
 800b422:	f7ff bc49 	b.w	800acb8 <_malloc_r>
 800b426:	b92a      	cbnz	r2, 800b434 <_realloc_r+0x24>
 800b428:	f7ff fbda 	bl	800abe0 <_free_r>
 800b42c:	4625      	mov	r5, r4
 800b42e:	4628      	mov	r0, r5
 800b430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b434:	f000 f81b 	bl	800b46e <_malloc_usable_size_r>
 800b438:	4284      	cmp	r4, r0
 800b43a:	4607      	mov	r7, r0
 800b43c:	d802      	bhi.n	800b444 <_realloc_r+0x34>
 800b43e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b442:	d812      	bhi.n	800b46a <_realloc_r+0x5a>
 800b444:	4621      	mov	r1, r4
 800b446:	4640      	mov	r0, r8
 800b448:	f7ff fc36 	bl	800acb8 <_malloc_r>
 800b44c:	4605      	mov	r5, r0
 800b44e:	2800      	cmp	r0, #0
 800b450:	d0ed      	beq.n	800b42e <_realloc_r+0x1e>
 800b452:	42bc      	cmp	r4, r7
 800b454:	4622      	mov	r2, r4
 800b456:	4631      	mov	r1, r6
 800b458:	bf28      	it	cs
 800b45a:	463a      	movcs	r2, r7
 800b45c:	f7ff ffca 	bl	800b3f4 <memcpy>
 800b460:	4631      	mov	r1, r6
 800b462:	4640      	mov	r0, r8
 800b464:	f7ff fbbc 	bl	800abe0 <_free_r>
 800b468:	e7e1      	b.n	800b42e <_realloc_r+0x1e>
 800b46a:	4635      	mov	r5, r6
 800b46c:	e7df      	b.n	800b42e <_realloc_r+0x1e>

0800b46e <_malloc_usable_size_r>:
 800b46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b472:	1f18      	subs	r0, r3, #4
 800b474:	2b00      	cmp	r3, #0
 800b476:	bfbc      	itt	lt
 800b478:	580b      	ldrlt	r3, [r1, r0]
 800b47a:	18c0      	addlt	r0, r0, r3
 800b47c:	4770      	bx	lr
	...

0800b480 <_init>:
 800b480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b482:	bf00      	nop
 800b484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b486:	bc08      	pop	{r3}
 800b488:	469e      	mov	lr, r3
 800b48a:	4770      	bx	lr

0800b48c <_fini>:
 800b48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48e:	bf00      	nop
 800b490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b492:	bc08      	pop	{r3}
 800b494:	469e      	mov	lr, r3
 800b496:	4770      	bx	lr
