
STM32H745_ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800e990  0800e990  0001e990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea38  0800ea38  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea40  0800ea40  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea40  0800ea40  0001ea40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea44  0800ea44  0001ea44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800ea48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  0800eaa8  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  0800eb08  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000028d0  24000120  0800eb68  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240029f0  0800eb68  000229f0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 15 .debug_info   000224cc  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000039ae  00000000  00000000  0004265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017a8  00000000  00000000  00046010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001250  00000000  00000000  000477b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003e4b9  00000000  00000000  00048a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00020121  00000000  00000000  00086ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0019cd6d  00000000  00000000  000a6fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006b8c  00000000  00000000  00243d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  0024a8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e978 	.word	0x0800e978

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800e978 	.word	0x0800e978

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <myprintf2>:
  _write(0, (char*)buffer,len);
  //HAL_USART_Transmit(&husart2, (uint8_t*)buffer, len, -1);

}

void myprintf2(const char *fmt, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  static char buffer[100];
  va_list args;
  va_start(args, fmt);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	2164      	movs	r1, #100	; 0x64
 80007cc:	480b      	ldr	r0, [pc, #44]	; (80007fc <myprintf2+0x44>)
 80007ce:	f00d fc41 	bl	800e054 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <myprintf2+0x44>)
 80007d4:	f7ff fd84 	bl	80002e0 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	607b      	str	r3, [r7, #4]
//  _write(0, (char*)buffer,len);
  HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, -1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f04f 33ff 	mov.w	r3, #4294967295
 80007e4:	4905      	ldr	r1, [pc, #20]	; (80007fc <myprintf2+0x44>)
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <myprintf2+0x48>)
 80007e8:	f00a fd25 	bl	800b236 <HAL_UART_Transmit>

}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f6:	b004      	add	sp, #16
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24002834 	.word	0x24002834
 8000800:	24002278 	.word	0x24002278

08000804 <HAL_UART_RxCpltCallback>:
#endif

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <HAL_UART_RxCpltCallback+0x44>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d110      	bne.n	8000836 <HAL_UART_RxCpltCallback+0x32>
	{
		if(uart3_raw[0] == 'a')
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_UART_RxCpltCallback+0x48>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b61      	cmp	r3, #97	; 0x61
 800081a:	d102      	bne.n	8000822 <HAL_UART_RxCpltCallback+0x1e>
		{
			rx_flagA = 1;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_UART_RxCpltCallback+0x4c>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		if(uart3_raw[0] == 'b')
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_UART_RxCpltCallback+0x48>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b62      	cmp	r3, #98	; 0x62
 8000828:	d102      	bne.n	8000830 <HAL_UART_RxCpltCallback+0x2c>
		{
			rx_flagB = 1;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_UART_RxCpltCallback+0x50>)
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
			//HAL_UART_Receive_IT(&huart2, uart2_raw, 1);
		}

		rx_flagG = 1;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_UART_RxCpltCallback+0x54>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <HAL_UART_RxCpltCallback+0x48>)
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <HAL_UART_RxCpltCallback+0x44>)
 800083c:	f00a fd8a 	bl	800b354 <HAL_UART_Receive_IT>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	24002278 	.word	0x24002278
 800084c:	2400281c 	.word	0x2400281c
 8000850:	24002828 	.word	0x24002828
 8000854:	2400282c 	.word	0x2400282c
 8000858:	24002830 	.word	0x24002830

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef _time;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000866:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000868:	bf00      	nop
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <main+0x118>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000872:	2b00      	cmp	r3, #0
 8000874:	d004      	beq.n	8000880 <main+0x24>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	1e5a      	subs	r2, r3, #1
 800087a:	61fa      	str	r2, [r7, #28]
 800087c:	2b00      	cmp	r3, #0
 800087e:	dcf4      	bgt.n	800086a <main+0xe>
  if ( timeout < 0 )
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da01      	bge.n	800088a <main+0x2e>
  {
  Error_Handler();
 8000886:	f000 fbcb 	bl	8001020 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088a:	f000 ff7d 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f88b 	bl	80009a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000892:	4b38      	ldr	r3, [pc, #224]	; (8000974 <main+0x118>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000898:	4a36      	ldr	r2, [pc, #216]	; (8000974 <main+0x118>)
 800089a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <main+0x118>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f006 fb07 	bl	8006ec4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008b6:	2100      	movs	r1, #0
 80008b8:	2000      	movs	r0, #0
 80008ba:	f006 fb1d 	bl	8006ef8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c2:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008c4:	bf00      	nop
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <main+0x118>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d104      	bne.n	80008dc <main+0x80>
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	1e5a      	subs	r2, r3, #1
 80008d6:	61fa      	str	r2, [r7, #28]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dcf4      	bgt.n	80008c6 <main+0x6a>
if ( timeout < 0 )
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	da01      	bge.n	80008e6 <main+0x8a>
{
Error_Handler();
 80008e2:	f000 fb9d 	bl	8001020 <Error_Handler>
  //SWD_Init();
  //write(0,"Hello",5);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f000 fab5 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ea:	f000 fa93 	bl	8000e14 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008ee:	f000 fa13 	bl	8000d18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008f2:	f000 fa5d 	bl	8000db0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80008f6:	f000 f8d3 	bl	8000aa0 <MX_ADC1_Init>
  MX_ETH_Init();
 80008fa:	f000 f95b 	bl	8000bb4 <MX_ETH_Init>
  MX_RTC_Init();
 80008fe:	f000 f9a5 	bl	8000c4c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  myprintf2("Starting .. \r\n");
 8000902:	481d      	ldr	r0, [pc, #116]	; (8000978 <main+0x11c>)
 8000904:	f7ff ff58 	bl	80007b8 <myprintf2>

  HAL_UART_Receive_IT(&huart3, uart3_raw, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	491c      	ldr	r1, [pc, #112]	; (800097c <main+0x120>)
 800090c:	481c      	ldr	r0, [pc, #112]	; (8000980 <main+0x124>)
 800090e:	f00a fd21 	bl	800b354 <HAL_UART_Receive_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adraw, 2);
 8000912:	2202      	movs	r2, #2
 8000914:	491b      	ldr	r1, [pc, #108]	; (8000984 <main+0x128>)
 8000916:	481c      	ldr	r0, [pc, #112]	; (8000988 <main+0x12c>)
 8000918:	f001 fbb6 	bl	8002088 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(rx_flagG == 1)
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <main+0x130>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d1fb      	bne.n	800091c <main+0xc0>
	  {
		  rx_flagG = 0;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <main+0x130>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
		  myprintf2("Serial Received ... \r\n");
 800092a:	4819      	ldr	r0, [pc, #100]	; (8000990 <main+0x134>)
 800092c:	f7ff ff44 	bl	80007b8 <myprintf2>

		  if(flag_buffer_complete == 1)
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <main+0x138>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d1f1      	bne.n	800091c <main+0xc0>
		  {
			  if(rx_flagA == 1)
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <main+0x13c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d108      	bne.n	8000952 <main+0xf6>
			  {
				  printBuffers(buffer1, buffer2, 1000);
 8000940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000944:	4915      	ldr	r1, [pc, #84]	; (800099c <main+0x140>)
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <main+0x144>)
 8000948:	f000 fb42 	bl	8000fd0 <printBuffers>
				  rx_flagA = 0;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <main+0x13c>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
			  }
			  HAL_Delay(5000);
 8000952:	f241 3088 	movw	r0, #5000	; 0x1388
 8000956:	f000 ffa9 	bl	80018ac <HAL_Delay>
			  flag_buffer_complete = 0;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <main+0x138>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
			  b_shot  = HAL_GetTick();
 8000960:	f000 ff98 	bl	8001894 <HAL_GetTick>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <main+0x148>)
 800096a:	601a      	str	r2, [r3, #0]
			  MX_DMA_Init();
 800096c:	f000 fa52 	bl	8000e14 <MX_DMA_Init>
	  if(rx_flagG == 1)
 8000970:	e7d4      	b.n	800091c <main+0xc0>
 8000972:	bf00      	nop
 8000974:	58024400 	.word	0x58024400
 8000978:	0800e990 	.word	0x0800e990
 800097c:	2400281c 	.word	0x2400281c
 8000980:	24002278 	.word	0x24002278
 8000984:	24002818 	.word	0x24002818
 8000988:	240020c8 	.word	0x240020c8
 800098c:	24002830 	.word	0x24002830
 8000990:	0800e9a0 	.word	0x0800e9a0
 8000994:	2400208c 	.word	0x2400208c
 8000998:	24002828 	.word	0x24002828
 800099c:	240010dc 	.word	0x240010dc
 80009a0:	2400013c 	.word	0x2400013c
 80009a4:	24002088 	.word	0x24002088

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	; 0x70
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	224c      	movs	r2, #76	; 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00d fb5a 	bl	800e070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2220      	movs	r2, #32
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00d fb54 	bl	800e070 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f006 fbf1 	bl	80071b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <SystemClock_Config+0xf0>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a30      	ldr	r2, [pc, #192]	; (8000a98 <SystemClock_Config+0xf0>)
 80009d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <SystemClock_Config+0xf0>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <SystemClock_Config+0xf4>)
 80009ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ec:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <SystemClock_Config+0xf4>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009f4:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <SystemClock_Config+0xf4>)
 80009f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a00:	bf00      	nop
 8000a02:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <SystemClock_Config+0xf0>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a0e:	d1f8      	bne.n	8000a02 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a10:	2309      	movs	r3, #9
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	2302      	movs	r3, #2
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a2a:	2378      	movs	r3, #120	; 0x78
 8000a2c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f006 fc1a 	bl	8007284 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a56:	f000 fae3 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	233f      	movs	r3, #63	; 0x3f
 8000a5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a66:	2308      	movs	r3, #8
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a6a:	2340      	movs	r3, #64	; 0x40
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a6e:	2340      	movs	r3, #64	; 0x40
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 f859 	bl	8007b38 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a8c:	f000 fac8 	bl	8001020 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3770      	adds	r7, #112	; 0x70
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	58024800 	.word	0x58024800
 8000a9c:	58000400 	.word	0x58000400

08000aa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
 8000ac0:	615a      	str	r2, [r3, #20]
 8000ac2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac4:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000ac6:	4a38      	ldr	r2, [pc, #224]	; (8000ba8 <MX_ADC1_Init+0x108>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aca:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad0:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ad6:	4b33      	ldr	r3, [pc, #204]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000ade:	2204      	movs	r2, #4
 8000ae0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ae2:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b08:	2203      	movs	r2, #3
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b22:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b24:	f001 f90e 	bl	8001d44 <HAL_ADC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000b2e:	f000 fa77 	bl	8001020 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b3e:	f002 fb91 	bl	8003264 <HAL_ADCEx_MultiModeConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000b48:	f000 fa6a 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_ADC1_Init+0x10c>)
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b50:	2306      	movs	r3, #6
 8000b52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b70:	f001 fda6 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b7a:	f000 fa51 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_ADC1_Init+0x110>)
 8000b80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b82:	230c      	movs	r3, #12
 8000b84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC1_Init+0x104>)
 8000b8c:	f001 fd98 	bl	80026c0 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000b96:	f000 fa43 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240020c8 	.word	0x240020c8
 8000ba8:	40022000 	.word	0x40022000
 8000bac:	4fb80000 	.word	0x4fb80000
 8000bb0:	4b840000 	.word	0x4b840000

08000bb4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_ETH_Init+0x80>)
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <MX_ETH_Init+0x84>)
 8000bbc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_ETH_Init+0x88>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_ETH_Init+0x88>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_ETH_Init+0x88>)
 8000bcc:	22e1      	movs	r2, #225	; 0xe1
 8000bce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_ETH_Init+0x88>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_ETH_Init+0x88>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_ETH_Init+0x88>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_ETH_Init+0x80>)
 8000be4:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <MX_ETH_Init+0x88>)
 8000be6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000be8:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_ETH_Init+0x80>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_ETH_Init+0x80>)
 8000bf0:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <MX_ETH_Init+0x8c>)
 8000bf2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_ETH_Init+0x80>)
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <MX_ETH_Init+0x90>)
 8000bf8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_ETH_Init+0x80>)
 8000bfc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c00:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c02:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_ETH_Init+0x80>)
 8000c04:	f005 fb8a 	bl	800631c <HAL_ETH_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c0e:	f000 fa07 	bl	8001020 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c12:	2238      	movs	r2, #56	; 0x38
 8000c14:	2100      	movs	r1, #0
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_ETH_Init+0x94>)
 8000c18:	f00d fa2a 	bl	800e070 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_ETH_Init+0x94>)
 8000c1e:	2221      	movs	r2, #33	; 0x21
 8000c20:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_ETH_Init+0x94>)
 8000c24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c28:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_ETH_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	240021a4 	.word	0x240021a4
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	24002898 	.word	0x24002898
 8000c40:	240000c0 	.word	0x240000c0
 8000c44:	24000060 	.word	0x24000060
 8000c48:	24002090 	.word	0x24002090

08000c4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c66:	4a2b      	ldr	r2, [pc, #172]	; (8000d14 <MX_RTC_Init+0xc8>)
 8000c68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c72:	227f      	movs	r2, #127	; 0x7f
 8000c74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c78:	22ff      	movs	r2, #255	; 0xff
 8000c7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c94:	481e      	ldr	r0, [pc, #120]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000c96:	f009 ffd9 	bl	800ac4c <HAL_RTC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f9be 	bl	8001020 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4814      	ldr	r0, [pc, #80]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000cc0:	f00a f846 	bl	800ad50 <HAL_RTC_SetTime>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000cca:	f000 f9a9 	bl	8001020 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480a      	ldr	r0, [pc, #40]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000ce6:	f00a f8d1 	bl	800ae8c <HAL_RTC_SetDate>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000cf0:	f000 f996 	bl	8001020 <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000cf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_RTC_Init+0xc4>)
 8000cfa:	f00a fa05 	bl	800b108 <HAL_RTCEx_SetCalibrationOutPut>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8000d04:	f000 f98c 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	24002254 	.word	0x24002254
 8000d14:	58004000 	.word	0x58004000

08000d18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <MX_USART3_UART_Init+0x94>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d60:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d62:	f00a fa18 	bl	800b196 <HAL_UART_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d6c:	f000 f958 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d70:	2100      	movs	r1, #0
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d74:	f00c fd6d 	bl	800d852 <HAL_UARTEx_SetTxFifoThreshold>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d7e:	f000 f94f 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d86:	f00c fda2 	bl	800d8ce <HAL_UARTEx_SetRxFifoThreshold>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d90:	f000 f946 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_USART3_UART_Init+0x90>)
 8000d96:	f00c fd23 	bl	800d7e0 <HAL_UARTEx_DisableFifoMode>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000da0:	f000 f93e 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	24002278 	.word	0x24002278
 8000dac:	40004800 	.word	0x40004800

08000db0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000db8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dbc:	2209      	movs	r2, #9
 8000dbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df8:	f006 f892 	bl	8006f20 <HAL_PCD_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e02:	f000 f90d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2400230c 	.word	0x2400230c
 8000e10:	40080000 	.word	0x40080000

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <MX_DMA_Init+0x3c>)
 8000e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <MX_DMA_Init+0x3c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_DMA_Init+0x3c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	200b      	movs	r0, #11
 8000e3e:	f002 fbee 	bl	800361e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e42:	200b      	movs	r0, #11
 8000e44:	f002 fc05 	bl	8003652 <HAL_NVIC_EnableIRQ>

}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	58024400 	.word	0x58024400

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e62:	f043 0304 	orr.w	r3, r3, #4
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_GPIO_Init+0xc8>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0e:	bf00      	nop
 8000f10:	371c      	adds	r7, #28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	58024400 	.word	0x58024400

08000f20 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
		//HAL_ADC_Stop(&hadc2);
    	//HAL_ADCEx_MultiModeStop_DMA(&hdma_adc1);
    }
    */

	if( HAL_GetTick() > (b_shot + 1000))
 8000f28:	f000 fcb4 	bl	8001894 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d90d      	bls.n	8000f56 <HAL_ADC_ConvCpltCallback+0x36>
	{
		b_shot  = HAL_GetTick();
 8000f3a:	f000 fcab 	bl	8001894 <HAL_GetTick>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000f44:	601a      	str	r2, [r3, #0]
		//HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
		rateB = rateA;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0x98>)
 8000f4c:	6013      	str	r3, [r2, #0]
		rateA = 0;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e004      	b.n	8000f60 <HAL_ADC_ConvCpltCallback+0x40>
	}
	else
	{
		rateA++;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f5e:	6013      	str	r3, [r2, #0]
	}

    if(gidxA < BFR_SIZE)
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f68:	da15      	bge.n	8000f96 <HAL_ADC_ConvCpltCallback+0x76>
    {
    	buffer1[gidxA] = adraw[0]; // (ADC_DualModeVal[0] >> 16);
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f6c:	881a      	ldrh	r2, [r3, #0]
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	buffer2[gidxA] = adraw[1]; // (ADC_DualModeVal[1] >> 16);
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f7c:	885a      	ldrh	r2, [r3, #2]
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	gidxA++;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f92:	6013      	str	r3, [r2, #0]
    {
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
    	flag_buffer_complete = 1;
    	gidxA = 0;
    }
}
 8000f94:	e008      	b.n	8000fa8 <HAL_ADC_ConvCpltCallback+0x88>
    	HAL_NVIC_DisableIRQ(DMA1_Stream0_IRQn);
 8000f96:	200b      	movs	r0, #11
 8000f98:	f002 fb69 	bl	800366e <HAL_NVIC_DisableIRQ>
    	flag_buffer_complete = 1;
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_ADC_ConvCpltCallback+0xac>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
    	gidxA = 0;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_ADC_ConvCpltCallback+0x9c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	24002088 	.word	0x24002088
 8000fb4:	24002080 	.word	0x24002080
 8000fb8:	24002084 	.word	0x24002084
 8000fbc:	2400207c 	.word	0x2400207c
 8000fc0:	24002818 	.word	0x24002818
 8000fc4:	2400013c 	.word	0x2400013c
 8000fc8:	240010dc 	.word	0x240010dc
 8000fcc:	2400208c 	.word	0x2400208c

08000fd0 <printBuffers>:


}

void printBuffers(uint32_t *bfr1, uint32_t *bfr2, int size)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
	int lidx = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

	for(lidx=0;lidx < size; lidx++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e010      	b.n	8001008 <printBuffers+0x38>
	{
		myprintf2("%d, %d\r\n", bfr1[lidx], bfr2[lidx]);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4413      	add	r3, r2
 8000fee:	6819      	ldr	r1, [r3, #0]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <printBuffers+0x4c>)
 8000ffe:	f7ff fbdb 	bl	80007b8 <myprintf2>
	for(lidx=0;lidx < size; lidx++)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	dbea      	blt.n	8000fe6 <printBuffers+0x16>
	}
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0800e9b8 	.word	0x0800e9b8

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_MspInit+0x30>)
 8001034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001038:	4a08      	ldr	r2, [pc, #32]	; (800105c <HAL_MspInit+0x30>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	58024400 	.word	0x58024400

08001060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0bc      	sub	sp, #240	; 0xf0
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00c fff5 	bl	800e070 <memset>
  if(hadc->Instance==ADC1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a50      	ldr	r2, [pc, #320]	; (80011cc <HAL_ADC_MspInit+0x16c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	f040 8099 	bne.w	80011c4 <HAL_ADC_MspInit+0x164>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 8001094:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001098:	4a4d      	ldr	r2, [pc, #308]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 80010a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 21;
 80010c0:	2315      	movs	r3, #21
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 80010c4:	2305      	movs	r3, #5
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010d0:	23c0      	movs	r3, #192	; 0xc0
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010d4:	2320      	movs	r3, #32
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 7168;
 80010d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f007 f8b1 	bl	8008250 <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_ADC_MspInit+0x98>
    {
      Error_Handler();
 80010f4:	f7ff ff94 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010f8:	4b35      	ldr	r3, [pc, #212]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 80010fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010fe:	4a34      	ldr	r2, [pc, #208]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 800110a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b2e      	ldr	r3, [pc, #184]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a2c      	ldr	r2, [pc, #176]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_ADC_MspInit+0x170>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    PA5     ------> ADC1_INP19
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001134:	2330      	movs	r3, #48	; 0x30
 8001136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800114a:	4619      	mov	r1, r3
 800114c:	4821      	ldr	r0, [pc, #132]	; (80011d4 <HAL_ADC_MspInit+0x174>)
 800114e:	f005 fd09 	bl	8006b64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 8001154:	4a21      	ldr	r2, [pc, #132]	; (80011dc <HAL_ADC_MspInit+0x17c>)
 8001156:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 800115a:	2209      	movs	r2, #9
 800115c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 800116c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001170:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 8001174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001178:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 800117c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001180:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 8001184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001188:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 800118c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001198:	480f      	ldr	r0, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 800119a:	f002 fa83 	bl	80036a4 <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_ADC_MspInit+0x148>
    {
      Error_Handler();
 80011a4:	f7ff ff3c 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <HAL_ADC_MspInit+0x178>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	2012      	movs	r0, #18
 80011ba:	f002 fa30 	bl	800361e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011be:	2012      	movs	r0, #18
 80011c0:	f002 fa47 	bl	8003652 <HAL_NVIC_EnableIRQ>
    // HAL_NVIC_EnableIRQ(ADC_IRQn);

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	37f0      	adds	r7, #240	; 0xf0
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40022000 	.word	0x40022000
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58020000 	.word	0x58020000
 80011d8:	2400212c 	.word	0x2400212c
 80011dc:	40020010 	.word	0x40020010

080011e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a59      	ldr	r2, [pc, #356]	; (8001364 <HAL_ETH_MspInit+0x184>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	f040 80ab 	bne.w	800135a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001204:	4b58      	ldr	r3, [pc, #352]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800120a:	4a57      	ldr	r2, [pc, #348]	; (8001368 <HAL_ETH_MspInit+0x188>)
 800120c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001210:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001214:	4b54      	ldr	r3, [pc, #336]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001216:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121e:	623b      	str	r3, [r7, #32]
 8001220:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001222:	4b51      	ldr	r3, [pc, #324]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_ETH_MspInit+0x188>)
 800122a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001232:	4b4d      	ldr	r3, [pc, #308]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001234:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001240:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001242:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001246:	4a48      	ldr	r2, [pc, #288]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800124c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001250:	4b45      	ldr	r3, [pc, #276]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001252:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b42      	ldr	r3, [pc, #264]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001264:	4a40      	ldr	r2, [pc, #256]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800126e:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <HAL_ETH_MspInit+0x188>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	4a39      	ldr	r2, [pc, #228]	; (8001368 <HAL_ETH_MspInit+0x188>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_ETH_MspInit+0x188>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <HAL_ETH_MspInit+0x188>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a31      	ldr	r2, [pc, #196]	; (8001368 <HAL_ETH_MspInit+0x188>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <HAL_ETH_MspInit+0x188>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <HAL_ETH_MspInit+0x188>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	4a2a      	ldr	r2, [pc, #168]	; (8001368 <HAL_ETH_MspInit+0x188>)
 80012c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_ETH_MspInit+0x188>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012d6:	2332      	movs	r3, #50	; 0x32
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e6:	230b      	movs	r3, #11
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	481e      	ldr	r0, [pc, #120]	; (800136c <HAL_ETH_MspInit+0x18c>)
 80012f2:	f005 fc37 	bl	8006b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012f6:	2386      	movs	r3, #134	; 0x86
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001306:	230b      	movs	r3, #11
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4817      	ldr	r0, [pc, #92]	; (8001370 <HAL_ETH_MspInit+0x190>)
 8001312:	f005 fc27 	bl	8006b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001328:	230b      	movs	r3, #11
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	4810      	ldr	r0, [pc, #64]	; (8001374 <HAL_ETH_MspInit+0x194>)
 8001334:	f005 fc16 	bl	8006b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001338:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001346:	2300      	movs	r3, #0
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800134a:	230b      	movs	r3, #11
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001352:	4619      	mov	r1, r3
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <HAL_ETH_MspInit+0x198>)
 8001356:	f005 fc05 	bl	8006b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3738      	adds	r7, #56	; 0x38
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40028000 	.word	0x40028000
 8001368:	58024400 	.word	0x58024400
 800136c:	58020800 	.word	0x58020800
 8001370:	58020000 	.word	0x58020000
 8001374:	58020400 	.word	0x58020400
 8001378:	58021800 	.word	0x58021800

0800137c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ba      	sub	sp, #232	; 0xe8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	22c0      	movs	r2, #192	; 0xc0
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00c fe67 	bl	800e070 <memset>
  if(hrtc->Instance==RTC)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <HAL_RTC_MspInit+0xb4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d13d      	bne.n	8001428 <HAL_RTC_MspInit+0xac>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013ac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4618      	mov	r0, r3
 80013c6:	f006 ff43 	bl	8008250 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 80013d0:	f7ff fe26 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013d4:	4b17      	ldr	r3, [pc, #92]	; (8001434 <HAL_RTC_MspInit+0xb8>)
 80013d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <HAL_RTC_MspInit+0xb8>)
 80013da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013de:	6713      	str	r3, [r2, #112]	; 0x70

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_RTC_MspInit+0xb8>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <HAL_RTC_MspInit+0xb8>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_RTC_MspInit+0xb8>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013fe:	2304      	movs	r3, #4
 8001400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <HAL_RTC_MspInit+0xbc>)
 8001424:	f005 fb9e 	bl	8006b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001428:	bf00      	nop
 800142a:	37e8      	adds	r7, #232	; 0xe8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58004000 	.word	0x58004000
 8001434:	58024400 	.word	0x58024400
 8001438:	58020400 	.word	0x58020400

0800143c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0ba      	sub	sp, #232	; 0xe8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	22c0      	movs	r2, #192	; 0xc0
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f00c fe07 	bl	800e070 <memset>
  if(huart->Instance==USART3)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a2b      	ldr	r2, [pc, #172]	; (8001514 <HAL_UART_MspInit+0xd8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d14e      	bne.n	800150a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800146c:	f04f 0202 	mov.w	r2, #2
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4618      	mov	r0, r3
 8001484:	f006 fee4 	bl	8008250 <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800148e:	f7ff fdc7 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_UART_MspInit+0xdc>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_UART_MspInit+0xdc>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014a2:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <HAL_UART_MspInit+0xdc>)
 80014a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_UART_MspInit+0xdc>)
 80014b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <HAL_UART_MspInit+0xdc>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_MspInit+0xdc>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e8:	2307      	movs	r3, #7
 80014ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4809      	ldr	r0, [pc, #36]	; (800151c <HAL_UART_MspInit+0xe0>)
 80014f6:	f005 fb35 	bl	8006b64 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2027      	movs	r0, #39	; 0x27
 8001500:	f002 f88d 	bl	800361e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001504:	2027      	movs	r0, #39	; 0x27
 8001506:	f002 f8a4 	bl	8003652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	37e8      	adds	r7, #232	; 0xe8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40004800 	.word	0x40004800
 8001518:	58024400 	.word	0x58024400
 800151c:	58020c00 	.word	0x58020c00

08001520 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0ba      	sub	sp, #232	; 0xe8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	22c0      	movs	r2, #192	; 0xc0
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f00c fd95 	bl	800e070 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a38      	ldr	r2, [pc, #224]	; (800162c <HAL_PCD_MspInit+0x10c>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d169      	bne.n	8001624 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001550:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001560:	2312      	movs	r3, #18
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001564:	2302      	movs	r3, #2
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001568:	2303      	movs	r3, #3
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001570:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001574:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001576:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800157a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800157c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f006 fe61 	bl	8008250 <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001594:	f7ff fd44 	bl	8001020 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001598:	f005 fe64 	bl	8007264 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_PCD_MspInit+0x110>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <HAL_PCD_MspInit+0x110>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_PCD_MspInit+0x110>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80015ba:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80015be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80015d4:	230a      	movs	r3, #10
 80015d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015de:	4619      	mov	r1, r3
 80015e0:	4814      	ldr	r0, [pc, #80]	; (8001634 <HAL_PCD_MspInit+0x114>)
 80015e2:	f005 fabf 	bl	8006b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <HAL_PCD_MspInit+0x114>)
 8001602:	f005 faaf 	bl	8006b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_PCD_MspInit+0x110>)
 8001608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800160c:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_PCD_MspInit+0x110>)
 800160e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001612:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_PCD_MspInit+0x110>)
 8001618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800161c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	37e8      	adds	r7, #232	; 0xe8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40080000 	.word	0x40080000
 8001630:	58024400 	.word	0x58024400
 8001634:	58020000 	.word	0x58020000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <MemManage_Handler+0x4>

0800164a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler+0x4>

08001656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001684:	f000 f8f2 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Stream0_IRQHandler+0x10>)
 8001692:	f003 fb31 	bl	8004cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2400212c 	.word	0x2400212c

080016a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <ADC_IRQHandler+0x10>)
 80016a6:	f000 fdb3 	bl	8002210 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	240020c8 	.word	0x240020c8

080016b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <USART3_IRQHandler+0x10>)
 80016ba:	f009 fe97 	bl	800b3ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24002278 	.word	0x24002278

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f00c fcc2 	bl	800e080 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	24080000 	.word	0x24080000
 8001728:	00000400 	.word	0x00000400
 800172c:	240028a0 	.word	0x240028a0
 8001730:	240029f0 	.word	0x240029f0

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	; 800176c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001738:	f7fe ffa8 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f00c fc93 	bl	800e08c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7ff f879 	bl	800085c <main>
  bx  lr
 800176a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001774:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001778:	0800ea48 	.word	0x0800ea48
  ldr r2, =_sbss
 800177c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001780:	240029f0 	.word	0x240029f0

08001784 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC3_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178e:	2003      	movs	r0, #3
 8001790:	f001 ff3a 	bl	8003608 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001794:	f006 fb86 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_Init+0x68>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	0a1b      	lsrs	r3, r3, #8
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	4913      	ldr	r1, [pc, #76]	; (80017f4 <HAL_Init+0x6c>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	f003 031f 	and.w	r3, r3, #31
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
 80017b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_Init+0x68>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_Init+0x6c>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_Init+0x70>)
 80017ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_Init+0x74>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f814 	bl	8001800 <HAL_InitTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e002      	b.n	80017e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017e2:	f7ff fc23 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	0800e9c4 	.word	0x0800e9c4
 80017f8:	24000004 	.word	0x24000004
 80017fc:	24000000 	.word	0x24000000

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_InitTick+0x60>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e021      	b.n	8001858 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_InitTick+0x64>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <HAL_InitTick+0x60>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f001 ff2d 	bl	800368a <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f001 fee9 	bl	800361e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x68>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2400000c 	.word	0x2400000c
 8001864:	24000000 	.word	0x24000000
 8001868:	24000008 	.word	0x24000008

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2400000c 	.word	0x2400000c
 8001890:	240028a4 	.word	0x240028a4

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	240028a4 	.word	0x240028a4

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2400000c 	.word	0x2400000c

080018f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_GetREVID+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0c1b      	lsrs	r3, r3, #16
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	5c001000 	.word	0x5c001000

0800190c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800191c:	4904      	ldr	r1, [pc, #16]	; (8001930 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	609a      	str	r2, [r3, #8]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800199c:	b480      	push	{r7}
 800199e:	b087      	sub	sp, #28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
 80019a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3360      	adds	r3, #96	; 0x60
 80019ae:	461a      	mov	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	431a      	orrs	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	611a      	str	r2, [r3, #16]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b087      	sub	sp, #28
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3360      	adds	r3, #96	; 0x60
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]
  }
}
 8001a38:	bf00      	nop
 8001a3a:	371c      	adds	r7, #28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b087      	sub	sp, #28
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3330      	adds	r3, #48	; 0x30
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	0a1b      	lsrs	r3, r3, #8
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	4413      	add	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	211f      	movs	r1, #31
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0e9b      	lsrs	r3, r3, #26
 8001aa2:	f003 011f 	and.w	r1, r3, #31
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f023 0203 	bic.w	r2, r3, #3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b087      	sub	sp, #28
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3314      	adds	r3, #20
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	0e5b      	lsrs	r3, r3, #25
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	4413      	add	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	0d1b      	lsrs	r3, r3, #20
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2107      	movs	r1, #7
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	401a      	ands	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	0d1b      	lsrs	r3, r3, #20
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	431a      	orrs	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0318 	and.w	r3, r3, #24
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b92:	431a      	orrs	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	000fffff 	.word	0x000fffff

08001bac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6093      	str	r3, [r2, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	5fffffc0 	.word	0x5fffffc0

08001c08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	6fffffc0 	.word	0x6fffffc0

08001c58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <LL_ADC_Enable+0x24>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	7fffffc0 	.word	0x7fffffc0

08001ca8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_IsEnabled+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_IsEnabled+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <LL_ADC_REG_StartConversion+0x24>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	f043 0204 	orr.w	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	7fffffc0 	.word	0x7fffffc0

08001cf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d101      	bne.n	8001d10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d101      	bne.n	8001d36 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e18f      	b.n	800207e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff f977 	bl	8001060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff3f 	bl	8001c08 <LL_ADC_IsDeepPowerDownEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff25 	bl	8001be4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff5a 	bl	8001c58 <LL_ADC_IsInternalRegulatorEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d114      	bne.n	8001dd4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff3e 	bl	8001c30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db4:	4b87      	ldr	r3, [pc, #540]	; (8001fd4 <HAL_ADC_Init+0x290>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	4a87      	ldr	r2, [pc, #540]	; (8001fd8 <HAL_ADC_Init+0x294>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dc6:	e002      	b.n	8001dce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff3d 	bl	8001c58 <LL_ADC_IsInternalRegulatorEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f043 0210 	orr.w	r2, r3, #16
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff77 	bl	8001cf8 <LL_ADC_REG_IsConversionOngoing>
 8001e0a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f040 8129 	bne.w	800206c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f040 8125 	bne.w	800206c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e26:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e2a:	f043 0202 	orr.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff36 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d136      	bne.n	8001eb0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a65      	ldr	r2, [pc, #404]	; (8001fdc <HAL_ADC_Init+0x298>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d004      	beq.n	8001e56 <HAL_ADC_Init+0x112>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <HAL_ADC_Init+0x29c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10e      	bne.n	8001e74 <HAL_ADC_Init+0x130>
 8001e56:	4861      	ldr	r0, [pc, #388]	; (8001fdc <HAL_ADC_Init+0x298>)
 8001e58:	f7ff ff26 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	4860      	ldr	r0, [pc, #384]	; (8001fe0 <HAL_ADC_Init+0x29c>)
 8001e60:	f7ff ff22 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4323      	orrs	r3, r4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e008      	b.n	8001e86 <HAL_ADC_Init+0x142>
 8001e74:	485b      	ldr	r0, [pc, #364]	; (8001fe4 <HAL_ADC_Init+0x2a0>)
 8001e76:	f7ff ff17 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d012      	beq.n	8001eb0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a53      	ldr	r2, [pc, #332]	; (8001fdc <HAL_ADC_Init+0x298>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d004      	beq.n	8001e9e <HAL_ADC_Init+0x15a>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a51      	ldr	r2, [pc, #324]	; (8001fe0 <HAL_ADC_Init+0x29c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Init+0x15e>
 8001e9e:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <HAL_ADC_Init+0x2a4>)
 8001ea0:	e000      	b.n	8001ea4 <HAL_ADC_Init+0x160>
 8001ea2:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_ADC_Init+0x2a8>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	f7ff fd42 	bl	8001934 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001eb0:	f7ff fd20 	bl	80018f4 <HAL_GetREVID>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d914      	bls.n	8001ee8 <HAL_ADC_Init+0x1a4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d110      	bne.n	8001ee8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7d5b      	ldrb	r3, [r3, #21]
 8001eca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ed0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ed6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7f1b      	ldrb	r3, [r3, #28]
 8001edc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ede:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee0:	f043 030c 	orr.w	r3, r3, #12
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	e00d      	b.n	8001f04 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7d5b      	ldrb	r3, [r3, #21]
 8001eec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ef2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ef8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7f1b      	ldrb	r3, [r3, #28]
 8001efe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7f1b      	ldrb	r3, [r3, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	045b      	lsls	r3, r3, #17
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_ADC_Init+0x2ac>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	69b9      	ldr	r1, [r7, #24]
 8001f46:	430b      	orrs	r3, r1
 8001f48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fed2 	bl	8001cf8 <LL_ADC_REG_IsConversionOngoing>
 8001f54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fedf 	bl	8001d1e <LL_ADC_INJ_IsConversionOngoing>
 8001f60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d15f      	bne.n	8002028 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d15c      	bne.n	8002028 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	7d1b      	ldrb	r3, [r3, #20]
 8001f72:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <HAL_ADC_Init+0x2b0>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d130      	bne.n	8001ffc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_ADC_Init+0x2b4>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	0411      	lsls	r1, r2, #16
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	e01c      	b.n	800200c <HAL_ADC_Init+0x2c8>
 8001fd2:	bf00      	nop
 8001fd4:	24000000 	.word	0x24000000
 8001fd8:	053e2d63 	.word	0x053e2d63
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40022100 	.word	0x40022100
 8001fe4:	58026000 	.word	0x58026000
 8001fe8:	40022300 	.word	0x40022300
 8001fec:	58026300 	.word	0x58026300
 8001ff0:	fff0c003 	.word	0xfff0c003
 8001ff4:	ffffbffc 	.word	0xffffbffc
 8001ff8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 ffba 	bl	8002f9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10c      	bne.n	800204a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f023 010f 	bic.w	r1, r3, #15
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	1e5a      	subs	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
 8002048:	e007      	b.n	800205a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 020f 	bic.w	r2, r2, #15
 8002058:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
 800206a:	e007      	b.n	800207c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	f043 0210 	orr.w	r2, r3, #16
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800207c:	7ffb      	ldrb	r3, [r7, #31]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd90      	pop	{r4, r7, pc}
 8002086:	bf00      	nop

08002088 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <HAL_ADC_Start_DMA+0x168>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d004      	beq.n	80020a8 <HAL_ADC_Start_DMA+0x20>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_ADC_Start_DMA+0x16c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_Start_DMA+0x24>
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_ADC_Start_DMA+0x170>)
 80020aa:	e000      	b.n	80020ae <HAL_ADC_Start_DMA+0x26>
 80020ac:	4b53      	ldr	r3, [pc, #332]	; (80021fc <HAL_ADC_Start_DMA+0x174>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fd7c 	bl	8001bac <LL_ADC_GetMultimode>
 80020b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fe1c 	bl	8001cf8 <LL_ADC_REG_IsConversionOngoing>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 808c 	bne.w	80021e0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Start_DMA+0x4e>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e087      	b.n	80021e6 <HAL_ADC_Start_DMA+0x15e>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d002      	beq.n	80020f0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	d170      	bne.n	80021d2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fe35 	bl	8002d60 <ADC_Enable>
 80020f6:	4603      	mov	r3, r0
 80020f8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d163      	bne.n	80021c8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002104:	4b3e      	ldr	r3, [pc, #248]	; (8002200 <HAL_ADC_Start_DMA+0x178>)
 8002106:	4013      	ands	r3, r2
 8002108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a37      	ldr	r2, [pc, #220]	; (80021f4 <HAL_ADC_Start_DMA+0x16c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d002      	beq.n	8002120 <HAL_ADC_Start_DMA+0x98>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	e000      	b.n	8002122 <HAL_ADC_Start_DMA+0x9a>
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_ADC_Start_DMA+0x168>)
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	4293      	cmp	r3, r2
 8002128:	d002      	beq.n	8002130 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d006      	beq.n	8002156 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f023 0206 	bic.w	r2, r3, #6
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	659a      	str	r2, [r3, #88]	; 0x58
 8002154:	e002      	b.n	800215c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_ADC_Start_DMA+0x17c>)
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_ADC_Start_DMA+0x180>)
 800216a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	4a26      	ldr	r2, [pc, #152]	; (800220c <HAL_ADC_Start_DMA+0x184>)
 8002172:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	221c      	movs	r2, #28
 800217a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0210 	orr.w	r2, r2, #16
 8002192:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f7ff fc8f 	bl	8001ac2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3340      	adds	r3, #64	; 0x40
 80021ae:	4619      	mov	r1, r3
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f001 fdd2 	bl	8003d5c <HAL_DMA_Start_IT>
 80021b8:	4603      	mov	r3, r0
 80021ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fd85 	bl	8001cd0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80021c6:	e00d      	b.n	80021e4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80021d0:	e008      	b.n	80021e4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80021de:	e001      	b.n	80021e4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
 80021e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40022100 	.word	0x40022100
 80021f8:	40022300 	.word	0x40022300
 80021fc:	58026300 	.word	0x58026300
 8002200:	fffff0fe 	.word	0xfffff0fe
 8002204:	08002e75 	.word	0x08002e75
 8002208:	08002f4d 	.word	0x08002f4d
 800220c:	08002f69 	.word	0x08002f69

08002210 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a87      	ldr	r2, [pc, #540]	; (8002450 <HAL_ADC_IRQHandler+0x240>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d004      	beq.n	8002240 <HAL_ADC_IRQHandler+0x30>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a86      	ldr	r2, [pc, #536]	; (8002454 <HAL_ADC_IRQHandler+0x244>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d101      	bne.n	8002244 <HAL_ADC_IRQHandler+0x34>
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <HAL_ADC_IRQHandler+0x248>)
 8002242:	e000      	b.n	8002246 <HAL_ADC_IRQHandler+0x36>
 8002244:	4b85      	ldr	r3, [pc, #532]	; (800245c <HAL_ADC_IRQHandler+0x24c>)
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fcb0 	bl	8001bac <LL_ADC_GetMultimode>
 800224c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d017      	beq.n	8002288 <HAL_ADC_IRQHandler+0x78>
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d012      	beq.n	8002288 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d105      	bne.n	800227a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 ffe8 	bl	8003250 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2202      	movs	r2, #2
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_ADC_IRQHandler+0x8c>
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d10a      	bne.n	80022b2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8083 	beq.w	80023ae <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d07d      	beq.n	80023ae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fbb8 	bl	8001a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d062      	beq.n	80023a0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a5d      	ldr	r2, [pc, #372]	; (8002454 <HAL_ADC_IRQHandler+0x244>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d002      	beq.n	80022ea <HAL_ADC_IRQHandler+0xda>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	e000      	b.n	80022ec <HAL_ADC_IRQHandler+0xdc>
 80022ea:	4b59      	ldr	r3, [pc, #356]	; (8002450 <HAL_ADC_IRQHandler+0x240>)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d008      	beq.n	8002306 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d002      	beq.n	8002306 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b09      	cmp	r3, #9
 8002304:	d104      	bne.n	8002310 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	e00c      	b.n	800232a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a4f      	ldr	r2, [pc, #316]	; (8002454 <HAL_ADC_IRQHandler+0x244>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d002      	beq.n	8002320 <HAL_ADC_IRQHandler+0x110>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e000      	b.n	8002322 <HAL_ADC_IRQHandler+0x112>
 8002320:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <HAL_ADC_IRQHandler+0x240>)
 8002322:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d135      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d12e      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fcd6 	bl	8001cf8 <LL_ADC_REG_IsConversionOngoing>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11a      	bne.n	8002388 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 020c 	bic.w	r2, r2, #12
 8002360:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d112      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	655a      	str	r2, [r3, #84]	; 0x54
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7fe fdbd 	bl	8000f20 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	220c      	movs	r2, #12
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_ADC_IRQHandler+0x1b2>
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80a0 	beq.w	800250e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 809a 	beq.w	800250e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d105      	bne.n	80023f2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fb76 	bl	8001ae8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80023fc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fb1e 	bl	8001a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002408:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a11      	ldr	r2, [pc, #68]	; (8002454 <HAL_ADC_IRQHandler+0x244>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d002      	beq.n	800241a <HAL_ADC_IRQHandler+0x20a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	e000      	b.n	800241c <HAL_ADC_IRQHandler+0x20c>
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_ADC_IRQHandler+0x240>)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	4293      	cmp	r3, r2
 8002422:	d008      	beq.n	8002436 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b06      	cmp	r3, #6
 800242e:	d002      	beq.n	8002436 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b07      	cmp	r3, #7
 8002434:	d104      	bne.n	8002440 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e014      	b.n	800246a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a03      	ldr	r2, [pc, #12]	; (8002454 <HAL_ADC_IRQHandler+0x244>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00a      	beq.n	8002460 <HAL_ADC_IRQHandler+0x250>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	e008      	b.n	8002462 <HAL_ADC_IRQHandler+0x252>
 8002450:	40022000 	.word	0x40022000
 8002454:	40022100 	.word	0x40022100
 8002458:	40022300 	.word	0x40022300
 800245c:	58026300 	.word	0x58026300
 8002460:	4b84      	ldr	r3, [pc, #528]	; (8002674 <HAL_ADC_IRQHandler+0x464>)
 8002462:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d047      	beq.n	8002500 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_ADC_IRQHandler+0x27a>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d03f      	beq.n	8002500 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	d13a      	bne.n	8002500 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d133      	bne.n	8002500 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d12e      	bne.n	8002500 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fc39 	bl	8001d1e <LL_ADC_INJ_IsConversionOngoing>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d11a      	bne.n	80024e8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024c0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d112      	bne.n	8002500 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
 80024e6:	e00b      	b.n	8002500 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f043 0210 	orr.w	r2, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fe7d 	bl	8003200 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2260      	movs	r2, #96	; 0x60
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b00      	cmp	r3, #0
 8002516:	d011      	beq.n	800253c <HAL_ADC_IRQHandler+0x32c>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f8b2 	bl	8002698 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d012      	beq.n	800256c <HAL_ADC_IRQHandler+0x35c>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fe63 	bl	8003228 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <HAL_ADC_IRQHandler+0x38c>
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fe55 	bl	800323c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d043      	beq.n	800262e <HAL_ADC_IRQHandler+0x41e>
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03e      	beq.n	800262e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80025b8:	2301      	movs	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e021      	b.n	8002602 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	; (8002674 <HAL_ADC_IRQHandler+0x464>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_ADC_IRQHandler+0x3c8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_ADC_IRQHandler+0x468>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_IRQHandler+0x3cc>
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_ADC_IRQHandler+0x46c>)
 80025da:	e000      	b.n	80025de <HAL_ADC_IRQHandler+0x3ce>
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_ADC_IRQHandler+0x470>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff faf2 	bl	8001bc8 <LL_ADC_GetMultiDMATransfer>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80025ea:	2301      	movs	r3, #1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	e008      	b.n	8002602 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80025fe:	2301      	movs	r3, #1
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10e      	bne.n	8002626 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	f043 0202 	orr.w	r2, r3, #2
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f843 	bl	80026ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2210      	movs	r2, #16
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d018      	beq.n	800266a <HAL_ADC_IRQHandler+0x45a>
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263e:	2b00      	cmp	r3, #0
 8002640:	d013      	beq.n	800266a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002646:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	f043 0208 	orr.w	r2, r3, #8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002662:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fdd5 	bl	8003214 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	40022100 	.word	0x40022100
 800267c:	40022300 	.word	0x40022300
 8002680:	58026300 	.word	0x58026300

08002684 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b0a1      	sub	sp, #132	; 0x84
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a9d      	ldr	r2, [pc, #628]	; (8002950 <HAL_ADC_ConfigChannel+0x290>)
 80026da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x2a>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e321      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x66e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fafe 	bl	8001cf8 <LL_ADC_REG_IsConversionOngoing>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8306 	bne.w	8002d10 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800270c:	2b00      	cmp	r3, #0
 800270e:	d108      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x62>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	2201      	movs	r2, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	e016      	b.n	8002750 <HAL_ADC_ConfigChannel+0x90>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002732:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e003      	b.n	8002746 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800273e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2201      	movs	r2, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	69d1      	ldr	r1, [r2, #28]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	430b      	orrs	r3, r1
 800275c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6859      	ldr	r1, [r3, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f7ff f97d 	bl	8001a6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fabf 	bl	8001cf8 <LL_ADC_REG_IsConversionOngoing>
 800277a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff facc 	bl	8001d1e <LL_ADC_INJ_IsConversionOngoing>
 8002786:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80b3 	bne.w	80028f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 80af 	bne.w	80028f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f7ff f9b2 	bl	8001b0e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_ADC_ConfigChannel+0x294>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80027b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b6:	d10b      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x110>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	e01d      	b.n	800280c <HAL_ADC_ConfigChannel+0x14c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10b      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x136>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	e00a      	b.n	800280c <HAL_ADC_ConfigChannel+0x14c>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d027      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6919      	ldr	r1, [r3, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002824:	f7ff f8ba 	bl	800199c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	7e5b      	ldrb	r3, [r3, #25]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d102      	bne.n	800283e <HAL_ADC_ConfigChannel+0x17e>
 8002838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800283c:	e000      	b.n	8002840 <HAL_ADC_ConfigChannel+0x180>
 800283e:	2300      	movs	r3, #0
 8002840:	461a      	mov	r2, r3
 8002842:	f7ff f8e4 	bl	8001a0e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7e1b      	ldrb	r3, [r3, #24]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d102      	bne.n	800285c <HAL_ADC_ConfigChannel+0x19c>
 8002856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800285a:	e000      	b.n	800285e <HAL_ADC_ConfigChannel+0x19e>
 800285c:	2300      	movs	r3, #0
 800285e:	461a      	mov	r2, r3
 8002860:	f7ff f8bc 	bl	80019dc <LL_ADC_SetDataRightShift>
 8002864:	e047      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	069b      	lsls	r3, r3, #26
 8002876:	429a      	cmp	r2, r3
 8002878:	d107      	bne.n	800288a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002888:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002890:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	069b      	lsls	r3, r3, #26
 800289a:	429a      	cmp	r2, r3
 800289c:	d107      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	429a      	cmp	r2, r3
 80028c0:	d107      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	069b      	lsls	r3, r3, #26
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d107      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f9d4 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 820d 	bne.w	8002d22 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	461a      	mov	r2, r3
 8002916:	f7ff f925 	bl	8001b64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_ADC_ConfigChannel+0x290>)
 8002920:	4293      	cmp	r3, r2
 8002922:	f040 8133 	bne.w	8002b8c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002932:	2b00      	cmp	r3, #0
 8002934:	d110      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x298>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2b09      	cmp	r3, #9
 8002944:	bf94      	ite	ls
 8002946:	2301      	movls	r3, #1
 8002948:	2300      	movhi	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e01e      	b.n	800298c <HAL_ADC_ConfigChannel+0x2cc>
 800294e:	bf00      	nop
 8002950:	47ff0000 	.word	0x47ff0000
 8002954:	5c001000 	.word	0x5c001000
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002968:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800296a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002970:	2320      	movs	r3, #32
 8002972:	e003      	b.n	800297c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002976:	fab3 f383 	clz	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3301      	adds	r3, #1
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	2b09      	cmp	r3, #9
 8002984:	bf94      	ite	ls
 8002986:	2301      	movls	r3, #1
 8002988:	2300      	movhi	r3, #0
 800298a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800298c:	2b00      	cmp	r3, #0
 800298e:	d079      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002998:	2b00      	cmp	r3, #0
 800299a:	d107      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x2ec>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	3301      	adds	r3, #1
 80029a4:	069b      	lsls	r3, r3, #26
 80029a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029aa:	e015      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x318>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80029ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80029be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80029c4:	2320      	movs	r3, #32
 80029c6:	e003      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80029c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	3301      	adds	r3, #1
 80029d2:	069b      	lsls	r3, r3, #26
 80029d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x338>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	3301      	adds	r3, #1
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2101      	movs	r1, #1
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	e017      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x368>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e003      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	ea42 0103 	orr.w	r1, r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x38e>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	051b      	lsls	r3, r3, #20
 8002a4c:	e018      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x3c0>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a80:	430b      	orrs	r3, r1
 8002a82:	e07e      	b.n	8002b82 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x3e0>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	3301      	adds	r3, #1
 8002a98:	069b      	lsls	r3, r3, #26
 8002a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9e:	e015      	b.n	8002acc <HAL_ADC_ConfigChannel+0x40c>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	fa93 f3a3 	rbit	r3, r3
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ab8:	2320      	movs	r3, #32
 8002aba:	e003      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	069b      	lsls	r3, r3, #26
 8002ac8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x42c>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	e017      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x45c>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	61bb      	str	r3, [r7, #24]
  return result;
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e003      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	ea42 0103 	orr.w	r1, r2, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x488>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4613      	mov	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b1e      	subs	r3, #30
 8002b40:	051b      	lsls	r3, r3, #20
 8002b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b46:	e01b      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x4c0>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	60fb      	str	r3, [r7, #12]
  return result;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	3b1e      	subs	r3, #30
 8002b7a:	051b      	lsls	r3, r3, #20
 8002b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b80:	430b      	orrs	r3, r1
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7fe ffc1 	bl	8001b0e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f280 80c6 	bge.w	8002d22 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_ADC_ConfigChannel+0x678>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d004      	beq.n	8002baa <HAL_ADC_ConfigChannel+0x4ea>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a65      	ldr	r2, [pc, #404]	; (8002d3c <HAL_ADC_ConfigChannel+0x67c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x4ee>
 8002baa:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_ADC_ConfigChannel+0x680>)
 8002bac:	e000      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x4f0>
 8002bae:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_ADC_ConfigChannel+0x684>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fee5 	bl	8001980 <LL_ADC_GetCommonPathInternalCh>
 8002bb6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a5e      	ldr	r2, [pc, #376]	; (8002d38 <HAL_ADC_ConfigChannel+0x678>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d004      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x50c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a5d      	ldr	r2, [pc, #372]	; (8002d3c <HAL_ADC_ConfigChannel+0x67c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10e      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x52a>
 8002bcc:	485a      	ldr	r0, [pc, #360]	; (8002d38 <HAL_ADC_ConfigChannel+0x678>)
 8002bce:	f7ff f86b 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4859      	ldr	r0, [pc, #356]	; (8002d3c <HAL_ADC_ConfigChannel+0x67c>)
 8002bd6:	f7ff f867 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	4323      	orrs	r3, r4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	e008      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x53c>
 8002bea:	4857      	ldr	r0, [pc, #348]	; (8002d48 <HAL_ADC_ConfigChannel+0x688>)
 8002bec:	f7ff f85c 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d07d      	beq.n	8002cfc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a51      	ldr	r2, [pc, #324]	; (8002d4c <HAL_ADC_ConfigChannel+0x68c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d130      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x5ac>
 8002c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d12b      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_ADC_ConfigChannel+0x688>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	f040 8081 	bne.w	8002d22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a44      	ldr	r2, [pc, #272]	; (8002d38 <HAL_ADC_ConfigChannel+0x678>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0x574>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a43      	ldr	r2, [pc, #268]	; (8002d3c <HAL_ADC_ConfigChannel+0x67c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x578>
 8002c34:	4a42      	ldr	r2, [pc, #264]	; (8002d40 <HAL_ADC_ConfigChannel+0x680>)
 8002c36:	e000      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x57a>
 8002c38:	4a42      	ldr	r2, [pc, #264]	; (8002d44 <HAL_ADC_ConfigChannel+0x684>)
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7fe fe89 	bl	800195a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_ADC_ConfigChannel+0x690>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <HAL_ADC_ConfigChannel+0x694>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	3301      	adds	r3, #1
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c5c:	e002      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f9      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c6a:	e05a      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a39      	ldr	r2, [pc, #228]	; (8002d58 <HAL_ADC_ConfigChannel+0x698>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d11e      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x5f4>
 8002c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d119      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a30      	ldr	r2, [pc, #192]	; (8002d48 <HAL_ADC_ConfigChannel+0x688>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d14b      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <HAL_ADC_ConfigChannel+0x678>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_ADC_ConfigChannel+0x5de>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a28      	ldr	r2, [pc, #160]	; (8002d3c <HAL_ADC_ConfigChannel+0x67c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x5e2>
 8002c9e:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_ADC_ConfigChannel+0x680>)
 8002ca0:	e000      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x5e4>
 8002ca2:	4a28      	ldr	r2, [pc, #160]	; (8002d44 <HAL_ADC_ConfigChannel+0x684>)
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f7fe fe54 	bl	800195a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cb2:	e036      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <HAL_ADC_ConfigChannel+0x69c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d131      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d12c      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <HAL_ADC_ConfigChannel+0x688>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d127      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_ADC_ConfigChannel+0x678>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_ADC_ConfigChannel+0x626>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <HAL_ADC_ConfigChannel+0x67c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x62a>
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <HAL_ADC_ConfigChannel+0x680>)
 8002ce8:	e000      	b.n	8002cec <HAL_ADC_ConfigChannel+0x62c>
 8002cea:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_ADC_ConfigChannel+0x684>)
 8002cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f7fe fe30 	bl	800195a <LL_ADC_SetCommonPathInternalCh>
 8002cfa:	e012      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d0e:	e008      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3784      	adds	r7, #132	; 0x84
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40022100 	.word	0x40022100
 8002d40:	40022300 	.word	0x40022300
 8002d44:	58026300 	.word	0x58026300
 8002d48:	58026000 	.word	0x58026000
 8002d4c:	cb840000 	.word	0xcb840000
 8002d50:	24000000 	.word	0x24000000
 8002d54:	053e2d63 	.word	0x053e2d63
 8002d58:	c7520000 	.word	0xc7520000
 8002d5c:	cfb80000 	.word	0xcfb80000

08002d60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe ff9b 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d16e      	bne.n	8002e56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <ADC_Enable+0x100>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00d      	beq.n	8002da2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f043 0210 	orr.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e05a      	b.n	8002e58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe ff6a 	bl	8001c80 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002dac:	f7fe fd72 	bl	8001894 <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <ADC_Enable+0x104>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <ADC_Enable+0x66>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <ADC_Enable+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <ADC_Enable+0x6a>
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <ADC_Enable+0x10c>)
 8002dc8:	e000      	b.n	8002dcc <ADC_Enable+0x6c>
 8002dca:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <ADC_Enable+0x110>)
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe feed 	bl	8001bac <LL_ADC_GetMultimode>
 8002dd2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <ADC_Enable+0x108>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d002      	beq.n	8002de4 <ADC_Enable+0x84>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	e000      	b.n	8002de6 <ADC_Enable+0x86>
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <ADC_Enable+0x104>)
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02c      	beq.n	8002e48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d130      	bne.n	8002e56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002df4:	e028      	b.n	8002e48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe ff54 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe ff38 	bl	8001c80 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e10:	f7fe fd40 	bl	8001894 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d914      	bls.n	8002e48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d00d      	beq.n	8002e48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0210 	orr.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f043 0201 	orr.w	r2, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d1cf      	bne.n	8002df6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	8000003f 	.word	0x8000003f
 8002e64:	40022000 	.word	0x40022000
 8002e68:	40022100 	.word	0x40022100
 8002e6c:	40022300 	.word	0x40022300
 8002e70:	58026300 	.word	0x58026300

08002e74 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d14b      	bne.n	8002f26 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d021      	beq.n	8002eec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fdc9 	bl	8001a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d032      	beq.n	8002f1e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d12b      	bne.n	8002f1e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11f      	bne.n	8002f1e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
 8002eea:	e018      	b.n	8002f1e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d111      	bne.n	8002f1e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7fd fffe 	bl	8000f20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f24:	e00e      	b.n	8002f44 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff fbba 	bl	80026ac <HAL_ADC_ErrorCallback>
}
 8002f38:	e004      	b.n	8002f44 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fb92 	bl	8002684 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f86:	f043 0204 	orr.w	r2, r3, #4
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff fb8c 	bl	80026ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a7a      	ldr	r2, [pc, #488]	; (8003194 <ADC_ConfigureBoostMode+0x1f8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <ADC_ConfigureBoostMode+0x1c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a79      	ldr	r2, [pc, #484]	; (8003198 <ADC_ConfigureBoostMode+0x1fc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d109      	bne.n	8002fcc <ADC_ConfigureBoostMode+0x30>
 8002fb8:	4b78      	ldr	r3, [pc, #480]	; (800319c <ADC_ConfigureBoostMode+0x200>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e008      	b.n	8002fde <ADC_ConfigureBoostMode+0x42>
 8002fcc:	4b74      	ldr	r3, [pc, #464]	; (80031a0 <ADC_ConfigureBoostMode+0x204>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01c      	beq.n	800301c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002fe2:	f005 f8d9 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 8002fe6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ff0:	d010      	beq.n	8003014 <ADC_ConfigureBoostMode+0x78>
 8002ff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ff6:	d873      	bhi.n	80030e0 <ADC_ConfigureBoostMode+0x144>
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d002      	beq.n	8003004 <ADC_ConfigureBoostMode+0x68>
 8002ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003002:	d16d      	bne.n	80030e0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	0c1b      	lsrs	r3, r3, #16
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003010:	60fb      	str	r3, [r7, #12]
        break;
 8003012:	e068      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	60fb      	str	r3, [r7, #12]
        break;
 800301a:	e064      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800301c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	f006 fb1e 	bl	8009664 <HAL_RCCEx_GetPeriphCLKFreq>
 8003028:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003032:	d051      	beq.n	80030d8 <ADC_ConfigureBoostMode+0x13c>
 8003034:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003038:	d854      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 800303a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800303e:	d047      	beq.n	80030d0 <ADC_ConfigureBoostMode+0x134>
 8003040:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003044:	d84e      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 8003046:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800304a:	d03d      	beq.n	80030c8 <ADC_ConfigureBoostMode+0x12c>
 800304c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003050:	d848      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 8003052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003056:	d033      	beq.n	80030c0 <ADC_ConfigureBoostMode+0x124>
 8003058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800305c:	d842      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 800305e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003062:	d029      	beq.n	80030b8 <ADC_ConfigureBoostMode+0x11c>
 8003064:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003068:	d83c      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 800306a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800306e:	d01a      	beq.n	80030a6 <ADC_ConfigureBoostMode+0x10a>
 8003070:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003074:	d836      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 8003076:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800307a:	d014      	beq.n	80030a6 <ADC_ConfigureBoostMode+0x10a>
 800307c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003080:	d830      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 8003082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003086:	d00e      	beq.n	80030a6 <ADC_ConfigureBoostMode+0x10a>
 8003088:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308c:	d82a      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 800308e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003092:	d008      	beq.n	80030a6 <ADC_ConfigureBoostMode+0x10a>
 8003094:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003098:	d824      	bhi.n	80030e4 <ADC_ConfigureBoostMode+0x148>
 800309a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309e:	d002      	beq.n	80030a6 <ADC_ConfigureBoostMode+0x10a>
 80030a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030a4:	d11e      	bne.n	80030e4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0c9b      	lsrs	r3, r3, #18
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	60fb      	str	r3, [r7, #12]
        break;
 80030b6:	e016      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
        break;
 80030be:	e012      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	60fb      	str	r3, [r7, #12]
        break;
 80030c6:	e00e      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	099b      	lsrs	r3, r3, #6
 80030cc:	60fb      	str	r3, [r7, #12]
        break;
 80030ce:	e00a      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	09db      	lsrs	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
        break;
 80030d6:	e006      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	60fb      	str	r3, [r7, #12]
        break;
 80030de:	e002      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80030e4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80030e6:	f7fe fc05 	bl	80018f4 <HAL_GetREVID>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d815      	bhi.n	8003120 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a2b      	ldr	r2, [pc, #172]	; (80031a4 <ADC_ConfigureBoostMode+0x208>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d908      	bls.n	800310e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800310c:	e03e      	b.n	800318c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	e035      	b.n	800318c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <ADC_ConfigureBoostMode+0x20c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d808      	bhi.n	8003140 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	e025      	b.n	800318c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <ADC_ConfigureBoostMode+0x210>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d80a      	bhi.n	800315e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800315a:	609a      	str	r2, [r3, #8]
}
 800315c:	e016      	b.n	800318c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <ADC_ConfigureBoostMode+0x214>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d80a      	bhi.n	800317c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	609a      	str	r2, [r3, #8]
}
 800317a:	e007      	b.n	800318c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800318a:	609a      	str	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40022000 	.word	0x40022000
 8003198:	40022100 	.word	0x40022100
 800319c:	40022300 	.word	0x40022300
 80031a0:	58026300 	.word	0x58026300
 80031a4:	01312d00 	.word	0x01312d00
 80031a8:	005f5e10 	.word	0x005f5e10
 80031ac:	00bebc20 	.word	0x00bebc20
 80031b0:	017d7840 	.word	0x017d7840

080031b4 <LL_ADC_IsEnabled>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <LL_ADC_IsEnabled+0x18>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_ADC_IsEnabled+0x1a>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_REG_IsConversionOngoing>:
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b09f      	sub	sp, #124	; 0x7c
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e0be      	b.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800328e:	2300      	movs	r3, #0
 8003290:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5c      	ldr	r2, [pc, #368]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d102      	bne.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800329c:	4b5b      	ldr	r3, [pc, #364]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	e001      	b.n	80032a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e09d      	b.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff87 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 80032cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ff81 	bl	80031da <LL_ADC_REG_IsConversionOngoing>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d17f      	bne.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d17c      	bne.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a47      	ldr	r2, [pc, #284]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a46      	ldr	r2, [pc, #280]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80032f8:	4b45      	ldr	r3, [pc, #276]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80032fa:	e000      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80032fc:	4b45      	ldr	r3, [pc, #276]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80032fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d039      	beq.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	431a      	orrs	r2, r3
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a3a      	ldr	r2, [pc, #232]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d004      	beq.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a38      	ldr	r2, [pc, #224]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10e      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800332e:	4836      	ldr	r0, [pc, #216]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003330:	f7ff ff40 	bl	80031b4 <LL_ADC_IsEnabled>
 8003334:	4604      	mov	r4, r0
 8003336:	4835      	ldr	r0, [pc, #212]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003338:	f7ff ff3c 	bl	80031b4 <LL_ADC_IsEnabled>
 800333c:	4603      	mov	r3, r0
 800333e:	4323      	orrs	r3, r4
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	e008      	b.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800334c:	4832      	ldr	r0, [pc, #200]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800334e:	f7ff ff31 	bl	80031b4 <LL_ADC_IsEnabled>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d047      	beq.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003368:	4013      	ands	r3, r2
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	6811      	ldr	r1, [r2, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	6892      	ldr	r2, [r2, #8]
 8003372:	430a      	orrs	r2, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003378:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800337a:	e03a      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800337c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003386:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10e      	bne.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800339c:	481a      	ldr	r0, [pc, #104]	; (8003408 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800339e:	f7ff ff09 	bl	80031b4 <LL_ADC_IsEnabled>
 80033a2:	4604      	mov	r4, r0
 80033a4:	4819      	ldr	r0, [pc, #100]	; (800340c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033a6:	f7ff ff05 	bl	80031b4 <LL_ADC_IsEnabled>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4323      	orrs	r3, r4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	bf0c      	ite	eq
 80033b2:	2301      	moveq	r3, #1
 80033b4:	2300      	movne	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e008      	b.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80033ba:	4817      	ldr	r0, [pc, #92]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80033bc:	f7ff fefa 	bl	80031b4 <LL_ADC_IsEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033da:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033dc:	e009      	b.n	80033f2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	f043 0220 	orr.w	r2, r3, #32
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033f0:	e000      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80033fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003400:	4618      	mov	r0, r3
 8003402:	377c      	adds	r7, #124	; 0x7c
 8003404:	46bd      	mov	sp, r7
 8003406:	bd90      	pop	{r4, r7, pc}
 8003408:	40022000 	.word	0x40022000
 800340c:	40022100 	.word	0x40022100
 8003410:	40022300 	.word	0x40022300
 8003414:	58026300 	.word	0x58026300
 8003418:	58026000 	.word	0x58026000
 800341c:	fffff0e0 	.word	0xfffff0e0

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <__NVIC_SetPriorityGrouping+0x40>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 800344a:	4313      	orrs	r3, r2
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	; (8003460 <__NVIC_SetPriorityGrouping+0x40>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	05fa0000 	.word	0x05fa0000

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db12      	blt.n	80034f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	490a      	ldr	r1, [pc, #40]	; (8003504 <__NVIC_DisableIRQ+0x44>)
 80034da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	3320      	adds	r3, #32
 80034e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034ec:	f3bf 8f4f 	dsb	sy
}
 80034f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034f2:	f3bf 8f6f 	isb	sy
}
 80034f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100

08003508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0a      	blt.n	8003532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	490c      	ldr	r1, [pc, #48]	; (8003554 <__NVIC_SetPriority+0x4c>)
 8003522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	440b      	add	r3, r1
 800352c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003530:	e00a      	b.n	8003548 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <__NVIC_SetPriority+0x50>)
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3b04      	subs	r3, #4
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	440b      	add	r3, r1
 8003546:	761a      	strb	r2, [r3, #24]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355c:	b480      	push	{r7}
 800355e:	b089      	sub	sp, #36	; 0x24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f1c3 0307 	rsb	r3, r3, #7
 8003576:	2b04      	cmp	r3, #4
 8003578:	bf28      	it	cs
 800357a:	2304      	movcs	r3, #4
 800357c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3304      	adds	r3, #4
 8003582:	2b06      	cmp	r3, #6
 8003584:	d902      	bls.n	800358c <NVIC_EncodePriority+0x30>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3b03      	subs	r3, #3
 800358a:	e000      	b.n	800358e <NVIC_EncodePriority+0x32>
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	401a      	ands	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035a4:	f04f 31ff 	mov.w	r1, #4294967295
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43d9      	mvns	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	4313      	orrs	r3, r2
         );
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035d4:	d301      	bcc.n	80035da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035d6:	2301      	movs	r3, #1
 80035d8:	e00f      	b.n	80035fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <SysTick_Config+0x40>)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3b01      	subs	r3, #1
 80035e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035e2:	210f      	movs	r1, #15
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	f7ff ff8e 	bl	8003508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035ec:	4b05      	ldr	r3, [pc, #20]	; (8003604 <SysTick_Config+0x40>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <SysTick_Config+0x40>)
 80035f4:	2207      	movs	r2, #7
 80035f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	e000e010 	.word	0xe000e010

08003608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ff05 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	4603      	mov	r3, r0
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800362c:	f7ff ff1c 	bl	8003468 <__NVIC_GetPriorityGrouping>
 8003630:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7ff ff90 	bl	800355c <NVIC_EncodePriority>
 800363c:	4602      	mov	r2, r0
 800363e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff ff5f 	bl	8003508 <__NVIC_SetPriority>
}
 800364a:	bf00      	nop
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff0f 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	4603      	mov	r3, r0
 8003676:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff1f 	bl	80034c0 <__NVIC_DisableIRQ>
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ff96 	bl	80035c4 <SysTick_Config>
 8003698:	4603      	mov	r3, r0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80036ac:	f7fe f8f2 	bl	8001894 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e316      	b.n	8003cea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_DMA_Init+0x1b8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d04a      	beq.n	800375c <HAL_DMA_Init+0xb8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a65      	ldr	r2, [pc, #404]	; (8003860 <HAL_DMA_Init+0x1bc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d045      	beq.n	800375c <HAL_DMA_Init+0xb8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a63      	ldr	r2, [pc, #396]	; (8003864 <HAL_DMA_Init+0x1c0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d040      	beq.n	800375c <HAL_DMA_Init+0xb8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a62      	ldr	r2, [pc, #392]	; (8003868 <HAL_DMA_Init+0x1c4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d03b      	beq.n	800375c <HAL_DMA_Init+0xb8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a60      	ldr	r2, [pc, #384]	; (800386c <HAL_DMA_Init+0x1c8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d036      	beq.n	800375c <HAL_DMA_Init+0xb8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5f      	ldr	r2, [pc, #380]	; (8003870 <HAL_DMA_Init+0x1cc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d031      	beq.n	800375c <HAL_DMA_Init+0xb8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a5d      	ldr	r2, [pc, #372]	; (8003874 <HAL_DMA_Init+0x1d0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02c      	beq.n	800375c <HAL_DMA_Init+0xb8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <HAL_DMA_Init+0x1d4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d027      	beq.n	800375c <HAL_DMA_Init+0xb8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a5a      	ldr	r2, [pc, #360]	; (800387c <HAL_DMA_Init+0x1d8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d022      	beq.n	800375c <HAL_DMA_Init+0xb8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a59      	ldr	r2, [pc, #356]	; (8003880 <HAL_DMA_Init+0x1dc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d01d      	beq.n	800375c <HAL_DMA_Init+0xb8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a57      	ldr	r2, [pc, #348]	; (8003884 <HAL_DMA_Init+0x1e0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <HAL_DMA_Init+0xb8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a56      	ldr	r2, [pc, #344]	; (8003888 <HAL_DMA_Init+0x1e4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d013      	beq.n	800375c <HAL_DMA_Init+0xb8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a54      	ldr	r2, [pc, #336]	; (800388c <HAL_DMA_Init+0x1e8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_DMA_Init+0xb8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a53      	ldr	r2, [pc, #332]	; (8003890 <HAL_DMA_Init+0x1ec>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_DMA_Init+0xb8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a51      	ldr	r2, [pc, #324]	; (8003894 <HAL_DMA_Init+0x1f0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_DMA_Init+0xb8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a50      	ldr	r2, [pc, #320]	; (8003898 <HAL_DMA_Init+0x1f4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <HAL_DMA_Init+0xbc>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_DMA_Init+0xbe>
 8003760:	2300      	movs	r3, #0
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 813b 	beq.w	80039de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a37      	ldr	r2, [pc, #220]	; (800385c <HAL_DMA_Init+0x1b8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d04a      	beq.n	8003818 <HAL_DMA_Init+0x174>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a36      	ldr	r2, [pc, #216]	; (8003860 <HAL_DMA_Init+0x1bc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d045      	beq.n	8003818 <HAL_DMA_Init+0x174>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a34      	ldr	r2, [pc, #208]	; (8003864 <HAL_DMA_Init+0x1c0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d040      	beq.n	8003818 <HAL_DMA_Init+0x174>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a33      	ldr	r2, [pc, #204]	; (8003868 <HAL_DMA_Init+0x1c4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d03b      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a31      	ldr	r2, [pc, #196]	; (800386c <HAL_DMA_Init+0x1c8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d036      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a30      	ldr	r2, [pc, #192]	; (8003870 <HAL_DMA_Init+0x1cc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d031      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <HAL_DMA_Init+0x1d0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02c      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_DMA_Init+0x1d4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d027      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2b      	ldr	r2, [pc, #172]	; (800387c <HAL_DMA_Init+0x1d8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d022      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a2a      	ldr	r2, [pc, #168]	; (8003880 <HAL_DMA_Init+0x1dc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d01d      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a28      	ldr	r2, [pc, #160]	; (8003884 <HAL_DMA_Init+0x1e0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d018      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a27      	ldr	r2, [pc, #156]	; (8003888 <HAL_DMA_Init+0x1e4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a25      	ldr	r2, [pc, #148]	; (800388c <HAL_DMA_Init+0x1e8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00e      	beq.n	8003818 <HAL_DMA_Init+0x174>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a24      	ldr	r2, [pc, #144]	; (8003890 <HAL_DMA_Init+0x1ec>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d009      	beq.n	8003818 <HAL_DMA_Init+0x174>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a22      	ldr	r2, [pc, #136]	; (8003894 <HAL_DMA_Init+0x1f0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d004      	beq.n	8003818 <HAL_DMA_Init+0x174>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a21      	ldr	r2, [pc, #132]	; (8003898 <HAL_DMA_Init+0x1f4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d108      	bne.n	800382a <HAL_DMA_Init+0x186>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e007      	b.n	800383a <HAL_DMA_Init+0x196>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800383a:	e02f      	b.n	800389c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383c:	f7fe f82a 	bl	8001894 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b05      	cmp	r3, #5
 8003848:	d928      	bls.n	800389c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2203      	movs	r2, #3
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e246      	b.n	8003cea <HAL_DMA_Init+0x646>
 800385c:	40020010 	.word	0x40020010
 8003860:	40020028 	.word	0x40020028
 8003864:	40020040 	.word	0x40020040
 8003868:	40020058 	.word	0x40020058
 800386c:	40020070 	.word	0x40020070
 8003870:	40020088 	.word	0x40020088
 8003874:	400200a0 	.word	0x400200a0
 8003878:	400200b8 	.word	0x400200b8
 800387c:	40020410 	.word	0x40020410
 8003880:	40020428 	.word	0x40020428
 8003884:	40020440 	.word	0x40020440
 8003888:	40020458 	.word	0x40020458
 800388c:	40020470 	.word	0x40020470
 8003890:	40020488 	.word	0x40020488
 8003894:	400204a0 	.word	0x400204a0
 8003898:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1c8      	bne.n	800383c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <HAL_DMA_Init+0x420>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80038c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d107      	bne.n	8003900 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	4313      	orrs	r3, r2
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003900:	4b71      	ldr	r3, [pc, #452]	; (8003ac8 <HAL_DMA_Init+0x424>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b71      	ldr	r3, [pc, #452]	; (8003acc <HAL_DMA_Init+0x428>)
 8003906:	4013      	ands	r3, r2
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390c:	d328      	bcc.n	8003960 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b28      	cmp	r3, #40	; 0x28
 8003914:	d903      	bls.n	800391e <HAL_DMA_Init+0x27a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b2e      	cmp	r3, #46	; 0x2e
 800391c:	d917      	bls.n	800394e <HAL_DMA_Init+0x2aa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b3e      	cmp	r3, #62	; 0x3e
 8003924:	d903      	bls.n	800392e <HAL_DMA_Init+0x28a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b42      	cmp	r3, #66	; 0x42
 800392c:	d90f      	bls.n	800394e <HAL_DMA_Init+0x2aa>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b46      	cmp	r3, #70	; 0x46
 8003934:	d903      	bls.n	800393e <HAL_DMA_Init+0x29a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b48      	cmp	r3, #72	; 0x48
 800393c:	d907      	bls.n	800394e <HAL_DMA_Init+0x2aa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b4e      	cmp	r3, #78	; 0x4e
 8003944:	d905      	bls.n	8003952 <HAL_DMA_Init+0x2ae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b52      	cmp	r3, #82	; 0x52
 800394c:	d801      	bhi.n	8003952 <HAL_DMA_Init+0x2ae>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_DMA_Init+0x2b0>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800395e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0307 	bic.w	r3, r3, #7
 8003976:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b04      	cmp	r3, #4
 8003988:	d117      	bne.n	80039ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f002 fb33 	bl	8006008 <DMA_CheckFifoParam>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2240      	movs	r2, #64	; 0x40
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e197      	b.n	8003cea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f002 fa6e 	bl	8005ea4 <DMA_CalcBaseAndBitshift>
 80039c8:	4603      	mov	r3, r0
 80039ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	223f      	movs	r2, #63	; 0x3f
 80039d6:	409a      	lsls	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	e0cd      	b.n	8003b7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a3b      	ldr	r2, [pc, #236]	; (8003ad0 <HAL_DMA_Init+0x42c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_DMA_Init+0x38a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a39      	ldr	r2, [pc, #228]	; (8003ad4 <HAL_DMA_Init+0x430>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01d      	beq.n	8003a2e <HAL_DMA_Init+0x38a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a38      	ldr	r2, [pc, #224]	; (8003ad8 <HAL_DMA_Init+0x434>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_DMA_Init+0x38a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a36      	ldr	r2, [pc, #216]	; (8003adc <HAL_DMA_Init+0x438>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_DMA_Init+0x38a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a35      	ldr	r2, [pc, #212]	; (8003ae0 <HAL_DMA_Init+0x43c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_Init+0x38a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a33      	ldr	r2, [pc, #204]	; (8003ae4 <HAL_DMA_Init+0x440>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_DMA_Init+0x38a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a32      	ldr	r2, [pc, #200]	; (8003ae8 <HAL_DMA_Init+0x444>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_DMA_Init+0x38a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a30      	ldr	r2, [pc, #192]	; (8003aec <HAL_DMA_Init+0x448>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_DMA_Init+0x38e>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_DMA_Init+0x390>
 8003a32:	2300      	movs	r3, #0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8097 	beq.w	8003b68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a24      	ldr	r2, [pc, #144]	; (8003ad0 <HAL_DMA_Init+0x42c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d021      	beq.n	8003a88 <HAL_DMA_Init+0x3e4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_DMA_Init+0x430>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01c      	beq.n	8003a88 <HAL_DMA_Init+0x3e4>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_DMA_Init+0x434>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d017      	beq.n	8003a88 <HAL_DMA_Init+0x3e4>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_DMA_Init+0x438>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d012      	beq.n	8003a88 <HAL_DMA_Init+0x3e4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_DMA_Init+0x43c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00d      	beq.n	8003a88 <HAL_DMA_Init+0x3e4>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_DMA_Init+0x440>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d008      	beq.n	8003a88 <HAL_DMA_Init+0x3e4>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	; (8003ae8 <HAL_DMA_Init+0x444>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d003      	beq.n	8003a88 <HAL_DMA_Init+0x3e4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_DMA_Init+0x448>)
 8003a86:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <HAL_DMA_Init+0x44c>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d021      	beq.n	8003af4 <HAL_DMA_Init+0x450>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d102      	bne.n	8003abe <HAL_DMA_Init+0x41a>
 8003ab8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003abc:	e01b      	b.n	8003af6 <HAL_DMA_Init+0x452>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e019      	b.n	8003af6 <HAL_DMA_Init+0x452>
 8003ac2:	bf00      	nop
 8003ac4:	fe10803f 	.word	0xfe10803f
 8003ac8:	5c001000 	.word	0x5c001000
 8003acc:	ffff0000 	.word	0xffff0000
 8003ad0:	58025408 	.word	0x58025408
 8003ad4:	5802541c 	.word	0x5802541c
 8003ad8:	58025430 	.word	0x58025430
 8003adc:	58025444 	.word	0x58025444
 8003ae0:	58025458 	.word	0x58025458
 8003ae4:	5802546c 	.word	0x5802546c
 8003ae8:	58025480 	.word	0x58025480
 8003aec:	58025494 	.word	0x58025494
 8003af0:	fffe000f 	.word	0xfffe000f
 8003af4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003b24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b6e      	ldr	r3, [pc, #440]	; (8003cf4 <HAL_DMA_Init+0x650>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	4a6e      	ldr	r2, [pc, #440]	; (8003cf8 <HAL_DMA_Init+0x654>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f002 f9a9 	bl	8005ea4 <DMA_CalcBaseAndBitshift>
 8003b52:	4603      	mov	r3, r0
 8003b54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2201      	movs	r2, #1
 8003b60:	409a      	lsls	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	e008      	b.n	8003b7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2240      	movs	r2, #64	; 0x40
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2203      	movs	r2, #3
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0b7      	b.n	8003cea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a5f      	ldr	r2, [pc, #380]	; (8003cfc <HAL_DMA_Init+0x658>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d072      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5d      	ldr	r2, [pc, #372]	; (8003d00 <HAL_DMA_Init+0x65c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d06d      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5c      	ldr	r2, [pc, #368]	; (8003d04 <HAL_DMA_Init+0x660>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d068      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5a      	ldr	r2, [pc, #360]	; (8003d08 <HAL_DMA_Init+0x664>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d063      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a59      	ldr	r2, [pc, #356]	; (8003d0c <HAL_DMA_Init+0x668>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d05e      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a57      	ldr	r2, [pc, #348]	; (8003d10 <HAL_DMA_Init+0x66c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d059      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a56      	ldr	r2, [pc, #344]	; (8003d14 <HAL_DMA_Init+0x670>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d054      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a54      	ldr	r2, [pc, #336]	; (8003d18 <HAL_DMA_Init+0x674>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d04f      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a53      	ldr	r2, [pc, #332]	; (8003d1c <HAL_DMA_Init+0x678>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d04a      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a51      	ldr	r2, [pc, #324]	; (8003d20 <HAL_DMA_Init+0x67c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d045      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <HAL_DMA_Init+0x680>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d040      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a4e      	ldr	r2, [pc, #312]	; (8003d28 <HAL_DMA_Init+0x684>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d03b      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a4d      	ldr	r2, [pc, #308]	; (8003d2c <HAL_DMA_Init+0x688>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d036      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a4b      	ldr	r2, [pc, #300]	; (8003d30 <HAL_DMA_Init+0x68c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d031      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a4a      	ldr	r2, [pc, #296]	; (8003d34 <HAL_DMA_Init+0x690>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d02c      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a48      	ldr	r2, [pc, #288]	; (8003d38 <HAL_DMA_Init+0x694>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d027      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a47      	ldr	r2, [pc, #284]	; (8003d3c <HAL_DMA_Init+0x698>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a45      	ldr	r2, [pc, #276]	; (8003d40 <HAL_DMA_Init+0x69c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d01d      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a44      	ldr	r2, [pc, #272]	; (8003d44 <HAL_DMA_Init+0x6a0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d018      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a42      	ldr	r2, [pc, #264]	; (8003d48 <HAL_DMA_Init+0x6a4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a41      	ldr	r2, [pc, #260]	; (8003d4c <HAL_DMA_Init+0x6a8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3f      	ldr	r2, [pc, #252]	; (8003d50 <HAL_DMA_Init+0x6ac>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d009      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3e      	ldr	r2, [pc, #248]	; (8003d54 <HAL_DMA_Init+0x6b0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_DMA_Init+0x5c6>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3c      	ldr	r2, [pc, #240]	; (8003d58 <HAL_DMA_Init+0x6b4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <HAL_DMA_Init+0x5ca>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <HAL_DMA_Init+0x5cc>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d032      	beq.n	8003cda <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f002 fa43 	bl	8006100 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b80      	cmp	r3, #128	; 0x80
 8003c80:	d102      	bne.n	8003c88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_DMA_Init+0x624>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d80c      	bhi.n	8003cc8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f002 fac0 	bl	8006234 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	e008      	b.n	8003cda <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	a7fdabf8 	.word	0xa7fdabf8
 8003cf8:	cccccccd 	.word	0xcccccccd
 8003cfc:	40020010 	.word	0x40020010
 8003d00:	40020028 	.word	0x40020028
 8003d04:	40020040 	.word	0x40020040
 8003d08:	40020058 	.word	0x40020058
 8003d0c:	40020070 	.word	0x40020070
 8003d10:	40020088 	.word	0x40020088
 8003d14:	400200a0 	.word	0x400200a0
 8003d18:	400200b8 	.word	0x400200b8
 8003d1c:	40020410 	.word	0x40020410
 8003d20:	40020428 	.word	0x40020428
 8003d24:	40020440 	.word	0x40020440
 8003d28:	40020458 	.word	0x40020458
 8003d2c:	40020470 	.word	0x40020470
 8003d30:	40020488 	.word	0x40020488
 8003d34:	400204a0 	.word	0x400204a0
 8003d38:	400204b8 	.word	0x400204b8
 8003d3c:	58025408 	.word	0x58025408
 8003d40:	5802541c 	.word	0x5802541c
 8003d44:	58025430 	.word	0x58025430
 8003d48:	58025444 	.word	0x58025444
 8003d4c:	58025458 	.word	0x58025458
 8003d50:	5802546c 	.word	0x5802546c
 8003d54:	58025480 	.word	0x58025480
 8003d58:	58025494 	.word	0x58025494

08003d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e226      	b.n	80041c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_DMA_Start_IT+0x2a>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e21f      	b.n	80041c6 <HAL_DMA_Start_IT+0x46a>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	f040 820a 	bne.w	80041b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a68      	ldr	r2, [pc, #416]	; (8003f50 <HAL_DMA_Start_IT+0x1f4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d04a      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a66      	ldr	r2, [pc, #408]	; (8003f54 <HAL_DMA_Start_IT+0x1f8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d045      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a65      	ldr	r2, [pc, #404]	; (8003f58 <HAL_DMA_Start_IT+0x1fc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d040      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a63      	ldr	r2, [pc, #396]	; (8003f5c <HAL_DMA_Start_IT+0x200>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d03b      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a62      	ldr	r2, [pc, #392]	; (8003f60 <HAL_DMA_Start_IT+0x204>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d036      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a60      	ldr	r2, [pc, #384]	; (8003f64 <HAL_DMA_Start_IT+0x208>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d031      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a5f      	ldr	r2, [pc, #380]	; (8003f68 <HAL_DMA_Start_IT+0x20c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d02c      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a5d      	ldr	r2, [pc, #372]	; (8003f6c <HAL_DMA_Start_IT+0x210>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d027      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a5c      	ldr	r2, [pc, #368]	; (8003f70 <HAL_DMA_Start_IT+0x214>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d022      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a5a      	ldr	r2, [pc, #360]	; (8003f74 <HAL_DMA_Start_IT+0x218>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01d      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a59      	ldr	r2, [pc, #356]	; (8003f78 <HAL_DMA_Start_IT+0x21c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a57      	ldr	r2, [pc, #348]	; (8003f7c <HAL_DMA_Start_IT+0x220>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a56      	ldr	r2, [pc, #344]	; (8003f80 <HAL_DMA_Start_IT+0x224>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a54      	ldr	r2, [pc, #336]	; (8003f84 <HAL_DMA_Start_IT+0x228>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a53      	ldr	r2, [pc, #332]	; (8003f88 <HAL_DMA_Start_IT+0x22c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_DMA_Start_IT+0xee>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a51      	ldr	r2, [pc, #324]	; (8003f8c <HAL_DMA_Start_IT+0x230>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <HAL_DMA_Start_IT+0x100>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e007      	b.n	8003e6c <HAL_DMA_Start_IT+0x110>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f001 fe6a 	bl	8005b4c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a34      	ldr	r2, [pc, #208]	; (8003f50 <HAL_DMA_Start_IT+0x1f4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d04a      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a33      	ldr	r2, [pc, #204]	; (8003f54 <HAL_DMA_Start_IT+0x1f8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d045      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a31      	ldr	r2, [pc, #196]	; (8003f58 <HAL_DMA_Start_IT+0x1fc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d040      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <HAL_DMA_Start_IT+0x200>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d03b      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <HAL_DMA_Start_IT+0x204>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d036      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <HAL_DMA_Start_IT+0x208>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d031      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	; (8003f68 <HAL_DMA_Start_IT+0x20c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02c      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_DMA_Start_IT+0x210>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d027      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a28      	ldr	r2, [pc, #160]	; (8003f70 <HAL_DMA_Start_IT+0x214>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d022      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <HAL_DMA_Start_IT+0x218>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d01d      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <HAL_DMA_Start_IT+0x21c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <HAL_DMA_Start_IT+0x220>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <HAL_DMA_Start_IT+0x224>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a21      	ldr	r2, [pc, #132]	; (8003f84 <HAL_DMA_Start_IT+0x228>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_DMA_Start_IT+0x22c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_DMA_Start_IT+0x1bc>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_DMA_Start_IT+0x230>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_DMA_Start_IT+0x1c0>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_DMA_Start_IT+0x1c2>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d036      	beq.n	8003f90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 021e 	bic.w	r2, r3, #30
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0216 	orr.w	r2, r2, #22
 8003f34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d03e      	beq.n	8003fbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0208 	orr.w	r2, r2, #8
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	e035      	b.n	8003fbc <HAL_DMA_Start_IT+0x260>
 8003f50:	40020010 	.word	0x40020010
 8003f54:	40020028 	.word	0x40020028
 8003f58:	40020040 	.word	0x40020040
 8003f5c:	40020058 	.word	0x40020058
 8003f60:	40020070 	.word	0x40020070
 8003f64:	40020088 	.word	0x40020088
 8003f68:	400200a0 	.word	0x400200a0
 8003f6c:	400200b8 	.word	0x400200b8
 8003f70:	40020410 	.word	0x40020410
 8003f74:	40020428 	.word	0x40020428
 8003f78:	40020440 	.word	0x40020440
 8003f7c:	40020458 	.word	0x40020458
 8003f80:	40020470 	.word	0x40020470
 8003f84:	40020488 	.word	0x40020488
 8003f88:	400204a0 	.word	0x400204a0
 8003f8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f023 020e 	bic.w	r2, r3, #14
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 020a 	orr.w	r2, r2, #10
 8003fa2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0204 	orr.w	r2, r2, #4
 8003fba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a83      	ldr	r2, [pc, #524]	; (80041d0 <HAL_DMA_Start_IT+0x474>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d072      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a82      	ldr	r2, [pc, #520]	; (80041d4 <HAL_DMA_Start_IT+0x478>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d06d      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a80      	ldr	r2, [pc, #512]	; (80041d8 <HAL_DMA_Start_IT+0x47c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d068      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7f      	ldr	r2, [pc, #508]	; (80041dc <HAL_DMA_Start_IT+0x480>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d063      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a7d      	ldr	r2, [pc, #500]	; (80041e0 <HAL_DMA_Start_IT+0x484>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d05e      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a7c      	ldr	r2, [pc, #496]	; (80041e4 <HAL_DMA_Start_IT+0x488>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d059      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <HAL_DMA_Start_IT+0x48c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d054      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a79      	ldr	r2, [pc, #484]	; (80041ec <HAL_DMA_Start_IT+0x490>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d04f      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a77      	ldr	r2, [pc, #476]	; (80041f0 <HAL_DMA_Start_IT+0x494>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d04a      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a76      	ldr	r2, [pc, #472]	; (80041f4 <HAL_DMA_Start_IT+0x498>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d045      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a74      	ldr	r2, [pc, #464]	; (80041f8 <HAL_DMA_Start_IT+0x49c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d040      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a73      	ldr	r2, [pc, #460]	; (80041fc <HAL_DMA_Start_IT+0x4a0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d03b      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a71      	ldr	r2, [pc, #452]	; (8004200 <HAL_DMA_Start_IT+0x4a4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d036      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a70      	ldr	r2, [pc, #448]	; (8004204 <HAL_DMA_Start_IT+0x4a8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d031      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_DMA_Start_IT+0x4ac>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6d      	ldr	r2, [pc, #436]	; (800420c <HAL_DMA_Start_IT+0x4b0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d027      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6b      	ldr	r2, [pc, #428]	; (8004210 <HAL_DMA_Start_IT+0x4b4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d022      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6a      	ldr	r2, [pc, #424]	; (8004214 <HAL_DMA_Start_IT+0x4b8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d01d      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a68      	ldr	r2, [pc, #416]	; (8004218 <HAL_DMA_Start_IT+0x4bc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a67      	ldr	r2, [pc, #412]	; (800421c <HAL_DMA_Start_IT+0x4c0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d013      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a65      	ldr	r2, [pc, #404]	; (8004220 <HAL_DMA_Start_IT+0x4c4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a64      	ldr	r2, [pc, #400]	; (8004224 <HAL_DMA_Start_IT+0x4c8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a62      	ldr	r2, [pc, #392]	; (8004228 <HAL_DMA_Start_IT+0x4cc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_DMA_Start_IT+0x350>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a61      	ldr	r2, [pc, #388]	; (800422c <HAL_DMA_Start_IT+0x4d0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d101      	bne.n	80040b0 <HAL_DMA_Start_IT+0x354>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_DMA_Start_IT+0x356>
 80040b0:	2300      	movs	r3, #0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d007      	beq.n	80040d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a37      	ldr	r2, [pc, #220]	; (80041d0 <HAL_DMA_Start_IT+0x474>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d04a      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a36      	ldr	r2, [pc, #216]	; (80041d4 <HAL_DMA_Start_IT+0x478>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d045      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a34      	ldr	r2, [pc, #208]	; (80041d8 <HAL_DMA_Start_IT+0x47c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d040      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a33      	ldr	r2, [pc, #204]	; (80041dc <HAL_DMA_Start_IT+0x480>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d03b      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_DMA_Start_IT+0x484>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d036      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <HAL_DMA_Start_IT+0x488>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d031      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2e      	ldr	r2, [pc, #184]	; (80041e8 <HAL_DMA_Start_IT+0x48c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02c      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a2d      	ldr	r2, [pc, #180]	; (80041ec <HAL_DMA_Start_IT+0x490>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d027      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_DMA_Start_IT+0x494>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d022      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2a      	ldr	r2, [pc, #168]	; (80041f4 <HAL_DMA_Start_IT+0x498>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01d      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <HAL_DMA_Start_IT+0x49c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a27      	ldr	r2, [pc, #156]	; (80041fc <HAL_DMA_Start_IT+0x4a0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <HAL_DMA_Start_IT+0x4a4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a24      	ldr	r2, [pc, #144]	; (8004204 <HAL_DMA_Start_IT+0x4a8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a22      	ldr	r2, [pc, #136]	; (8004208 <HAL_DMA_Start_IT+0x4ac>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_DMA_Start_IT+0x430>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_DMA_Start_IT+0x4b0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d108      	bne.n	800419e <HAL_DMA_Start_IT+0x442>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e012      	b.n	80041c4 <HAL_DMA_Start_IT+0x468>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e009      	b.n	80041c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40020010 	.word	0x40020010
 80041d4:	40020028 	.word	0x40020028
 80041d8:	40020040 	.word	0x40020040
 80041dc:	40020058 	.word	0x40020058
 80041e0:	40020070 	.word	0x40020070
 80041e4:	40020088 	.word	0x40020088
 80041e8:	400200a0 	.word	0x400200a0
 80041ec:	400200b8 	.word	0x400200b8
 80041f0:	40020410 	.word	0x40020410
 80041f4:	40020428 	.word	0x40020428
 80041f8:	40020440 	.word	0x40020440
 80041fc:	40020458 	.word	0x40020458
 8004200:	40020470 	.word	0x40020470
 8004204:	40020488 	.word	0x40020488
 8004208:	400204a0 	.word	0x400204a0
 800420c:	400204b8 	.word	0x400204b8
 8004210:	58025408 	.word	0x58025408
 8004214:	5802541c 	.word	0x5802541c
 8004218:	58025430 	.word	0x58025430
 800421c:	58025444 	.word	0x58025444
 8004220:	58025458 	.word	0x58025458
 8004224:	5802546c 	.word	0x5802546c
 8004228:	58025480 	.word	0x58025480
 800422c:	58025494 	.word	0x58025494

08004230 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004238:	f7fd fb2c 	bl	8001894 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e2dc      	b.n	8004802 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d008      	beq.n	8004266 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e2cd      	b.n	8004802 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a76      	ldr	r2, [pc, #472]	; (8004444 <HAL_DMA_Abort+0x214>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d04a      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_DMA_Abort+0x218>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d045      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a73      	ldr	r2, [pc, #460]	; (800444c <HAL_DMA_Abort+0x21c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d040      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a71      	ldr	r2, [pc, #452]	; (8004450 <HAL_DMA_Abort+0x220>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d03b      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a70      	ldr	r2, [pc, #448]	; (8004454 <HAL_DMA_Abort+0x224>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d036      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6e      	ldr	r2, [pc, #440]	; (8004458 <HAL_DMA_Abort+0x228>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d031      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6d      	ldr	r2, [pc, #436]	; (800445c <HAL_DMA_Abort+0x22c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d02c      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a6b      	ldr	r2, [pc, #428]	; (8004460 <HAL_DMA_Abort+0x230>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d027      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6a      	ldr	r2, [pc, #424]	; (8004464 <HAL_DMA_Abort+0x234>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a68      	ldr	r2, [pc, #416]	; (8004468 <HAL_DMA_Abort+0x238>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d01d      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a67      	ldr	r2, [pc, #412]	; (800446c <HAL_DMA_Abort+0x23c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a65      	ldr	r2, [pc, #404]	; (8004470 <HAL_DMA_Abort+0x240>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a64      	ldr	r2, [pc, #400]	; (8004474 <HAL_DMA_Abort+0x244>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a62      	ldr	r2, [pc, #392]	; (8004478 <HAL_DMA_Abort+0x248>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a61      	ldr	r2, [pc, #388]	; (800447c <HAL_DMA_Abort+0x24c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_DMA_Abort+0xd6>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5f      	ldr	r2, [pc, #380]	; (8004480 <HAL_DMA_Abort+0x250>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d101      	bne.n	800430a <HAL_DMA_Abort+0xda>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_DMA_Abort+0xdc>
 800430a:	2300      	movs	r3, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 021e 	bic.w	r2, r2, #30
 800431e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695a      	ldr	r2, [r3, #20]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800432e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e00a      	b.n	800434e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 020e 	bic.w	r2, r2, #14
 8004346:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a3c      	ldr	r2, [pc, #240]	; (8004444 <HAL_DMA_Abort+0x214>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d072      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a3a      	ldr	r2, [pc, #232]	; (8004448 <HAL_DMA_Abort+0x218>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d06d      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a39      	ldr	r2, [pc, #228]	; (800444c <HAL_DMA_Abort+0x21c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d068      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a37      	ldr	r2, [pc, #220]	; (8004450 <HAL_DMA_Abort+0x220>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d063      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a36      	ldr	r2, [pc, #216]	; (8004454 <HAL_DMA_Abort+0x224>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d05e      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a34      	ldr	r2, [pc, #208]	; (8004458 <HAL_DMA_Abort+0x228>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d059      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a33      	ldr	r2, [pc, #204]	; (800445c <HAL_DMA_Abort+0x22c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d054      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a31      	ldr	r2, [pc, #196]	; (8004460 <HAL_DMA_Abort+0x230>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d04f      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_DMA_Abort+0x234>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d04a      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a2e      	ldr	r2, [pc, #184]	; (8004468 <HAL_DMA_Abort+0x238>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d045      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_DMA_Abort+0x23c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d040      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <HAL_DMA_Abort+0x240>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d03b      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <HAL_DMA_Abort+0x244>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d036      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a28      	ldr	r2, [pc, #160]	; (8004478 <HAL_DMA_Abort+0x248>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d031      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a27      	ldr	r2, [pc, #156]	; (800447c <HAL_DMA_Abort+0x24c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d02c      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a25      	ldr	r2, [pc, #148]	; (8004480 <HAL_DMA_Abort+0x250>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d027      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a24      	ldr	r2, [pc, #144]	; (8004484 <HAL_DMA_Abort+0x254>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d022      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_DMA_Abort+0x258>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01d      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a21      	ldr	r2, [pc, #132]	; (800448c <HAL_DMA_Abort+0x25c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d018      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <HAL_DMA_Abort+0x260>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <HAL_DMA_Abort+0x264>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00e      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1c      	ldr	r2, [pc, #112]	; (8004498 <HAL_DMA_Abort+0x268>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d009      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_DMA_Abort+0x26c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d004      	beq.n	800443e <HAL_DMA_Abort+0x20e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <HAL_DMA_Abort+0x270>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d132      	bne.n	80044a4 <HAL_DMA_Abort+0x274>
 800443e:	2301      	movs	r3, #1
 8004440:	e031      	b.n	80044a6 <HAL_DMA_Abort+0x276>
 8004442:	bf00      	nop
 8004444:	40020010 	.word	0x40020010
 8004448:	40020028 	.word	0x40020028
 800444c:	40020040 	.word	0x40020040
 8004450:	40020058 	.word	0x40020058
 8004454:	40020070 	.word	0x40020070
 8004458:	40020088 	.word	0x40020088
 800445c:	400200a0 	.word	0x400200a0
 8004460:	400200b8 	.word	0x400200b8
 8004464:	40020410 	.word	0x40020410
 8004468:	40020428 	.word	0x40020428
 800446c:	40020440 	.word	0x40020440
 8004470:	40020458 	.word	0x40020458
 8004474:	40020470 	.word	0x40020470
 8004478:	40020488 	.word	0x40020488
 800447c:	400204a0 	.word	0x400204a0
 8004480:	400204b8 	.word	0x400204b8
 8004484:	58025408 	.word	0x58025408
 8004488:	5802541c 	.word	0x5802541c
 800448c:	58025430 	.word	0x58025430
 8004490:	58025444 	.word	0x58025444
 8004494:	58025458 	.word	0x58025458
 8004498:	5802546c 	.word	0x5802546c
 800449c:	58025480 	.word	0x58025480
 80044a0:	58025494 	.word	0x58025494
 80044a4:	2300      	movs	r3, #0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6d      	ldr	r2, [pc, #436]	; (8004674 <HAL_DMA_Abort+0x444>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04a      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6b      	ldr	r2, [pc, #428]	; (8004678 <HAL_DMA_Abort+0x448>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d045      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a6a      	ldr	r2, [pc, #424]	; (800467c <HAL_DMA_Abort+0x44c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d040      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a68      	ldr	r2, [pc, #416]	; (8004680 <HAL_DMA_Abort+0x450>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d03b      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a67      	ldr	r2, [pc, #412]	; (8004684 <HAL_DMA_Abort+0x454>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d036      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a65      	ldr	r2, [pc, #404]	; (8004688 <HAL_DMA_Abort+0x458>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d031      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a64      	ldr	r2, [pc, #400]	; (800468c <HAL_DMA_Abort+0x45c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02c      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a62      	ldr	r2, [pc, #392]	; (8004690 <HAL_DMA_Abort+0x460>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d027      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a61      	ldr	r2, [pc, #388]	; (8004694 <HAL_DMA_Abort+0x464>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5f      	ldr	r2, [pc, #380]	; (8004698 <HAL_DMA_Abort+0x468>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01d      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5e      	ldr	r2, [pc, #376]	; (800469c <HAL_DMA_Abort+0x46c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5c      	ldr	r2, [pc, #368]	; (80046a0 <HAL_DMA_Abort+0x470>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a5b      	ldr	r2, [pc, #364]	; (80046a4 <HAL_DMA_Abort+0x474>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a59      	ldr	r2, [pc, #356]	; (80046a8 <HAL_DMA_Abort+0x478>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_DMA_Abort+0x47c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_DMA_Abort+0x32a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a56      	ldr	r2, [pc, #344]	; (80046b0 <HAL_DMA_Abort+0x480>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d108      	bne.n	800456c <HAL_DMA_Abort+0x33c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e007      	b.n	800457c <HAL_DMA_Abort+0x34c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800457c:	e013      	b.n	80045a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800457e:	f7fd f989 	bl	8001894 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b05      	cmp	r3, #5
 800458a:	d90c      	bls.n	80045a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2203      	movs	r2, #3
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e12d      	b.n	8004802 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e5      	bne.n	800457e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a2f      	ldr	r2, [pc, #188]	; (8004674 <HAL_DMA_Abort+0x444>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d04a      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <HAL_DMA_Abort+0x448>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d045      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a2c      	ldr	r2, [pc, #176]	; (800467c <HAL_DMA_Abort+0x44c>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d040      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <HAL_DMA_Abort+0x450>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d03b      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a29      	ldr	r2, [pc, #164]	; (8004684 <HAL_DMA_Abort+0x454>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d036      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a27      	ldr	r2, [pc, #156]	; (8004688 <HAL_DMA_Abort+0x458>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d031      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a26      	ldr	r2, [pc, #152]	; (800468c <HAL_DMA_Abort+0x45c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d02c      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a24      	ldr	r2, [pc, #144]	; (8004690 <HAL_DMA_Abort+0x460>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d027      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a23      	ldr	r2, [pc, #140]	; (8004694 <HAL_DMA_Abort+0x464>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a21      	ldr	r2, [pc, #132]	; (8004698 <HAL_DMA_Abort+0x468>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d01d      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_DMA_Abort+0x46c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <HAL_DMA_Abort+0x470>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_DMA_Abort+0x474>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1b      	ldr	r2, [pc, #108]	; (80046a8 <HAL_DMA_Abort+0x478>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <HAL_DMA_Abort+0x47c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_DMA_Abort+0x422>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_DMA_Abort+0x480>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_DMA_Abort+0x426>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <HAL_DMA_Abort+0x428>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02b      	beq.n	80046b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	223f      	movs	r2, #63	; 0x3f
 800466c:	409a      	lsls	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	609a      	str	r2, [r3, #8]
 8004672:	e02a      	b.n	80046ca <HAL_DMA_Abort+0x49a>
 8004674:	40020010 	.word	0x40020010
 8004678:	40020028 	.word	0x40020028
 800467c:	40020040 	.word	0x40020040
 8004680:	40020058 	.word	0x40020058
 8004684:	40020070 	.word	0x40020070
 8004688:	40020088 	.word	0x40020088
 800468c:	400200a0 	.word	0x400200a0
 8004690:	400200b8 	.word	0x400200b8
 8004694:	40020410 	.word	0x40020410
 8004698:	40020428 	.word	0x40020428
 800469c:	40020440 	.word	0x40020440
 80046a0:	40020458 	.word	0x40020458
 80046a4:	40020470 	.word	0x40020470
 80046a8:	40020488 	.word	0x40020488
 80046ac:	400204a0 	.word	0x400204a0
 80046b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2201      	movs	r2, #1
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4f      	ldr	r2, [pc, #316]	; (800480c <HAL_DMA_Abort+0x5dc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d072      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a4d      	ldr	r2, [pc, #308]	; (8004810 <HAL_DMA_Abort+0x5e0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d06d      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a4c      	ldr	r2, [pc, #304]	; (8004814 <HAL_DMA_Abort+0x5e4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d068      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a4a      	ldr	r2, [pc, #296]	; (8004818 <HAL_DMA_Abort+0x5e8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d063      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a49      	ldr	r2, [pc, #292]	; (800481c <HAL_DMA_Abort+0x5ec>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d05e      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a47      	ldr	r2, [pc, #284]	; (8004820 <HAL_DMA_Abort+0x5f0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d059      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a46      	ldr	r2, [pc, #280]	; (8004824 <HAL_DMA_Abort+0x5f4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d054      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a44      	ldr	r2, [pc, #272]	; (8004828 <HAL_DMA_Abort+0x5f8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d04f      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a43      	ldr	r2, [pc, #268]	; (800482c <HAL_DMA_Abort+0x5fc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d04a      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a41      	ldr	r2, [pc, #260]	; (8004830 <HAL_DMA_Abort+0x600>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d045      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a40      	ldr	r2, [pc, #256]	; (8004834 <HAL_DMA_Abort+0x604>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d040      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a3e      	ldr	r2, [pc, #248]	; (8004838 <HAL_DMA_Abort+0x608>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d03b      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a3d      	ldr	r2, [pc, #244]	; (800483c <HAL_DMA_Abort+0x60c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d036      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3b      	ldr	r2, [pc, #236]	; (8004840 <HAL_DMA_Abort+0x610>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d031      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3a      	ldr	r2, [pc, #232]	; (8004844 <HAL_DMA_Abort+0x614>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d02c      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a38      	ldr	r2, [pc, #224]	; (8004848 <HAL_DMA_Abort+0x618>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d027      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a37      	ldr	r2, [pc, #220]	; (800484c <HAL_DMA_Abort+0x61c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a35      	ldr	r2, [pc, #212]	; (8004850 <HAL_DMA_Abort+0x620>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a34      	ldr	r2, [pc, #208]	; (8004854 <HAL_DMA_Abort+0x624>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a32      	ldr	r2, [pc, #200]	; (8004858 <HAL_DMA_Abort+0x628>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a31      	ldr	r2, [pc, #196]	; (800485c <HAL_DMA_Abort+0x62c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2f      	ldr	r2, [pc, #188]	; (8004860 <HAL_DMA_Abort+0x630>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a2e      	ldr	r2, [pc, #184]	; (8004864 <HAL_DMA_Abort+0x634>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_DMA_Abort+0x58a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a2c      	ldr	r2, [pc, #176]	; (8004868 <HAL_DMA_Abort+0x638>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_DMA_Abort+0x58e>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_DMA_Abort+0x590>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40020010 	.word	0x40020010
 8004810:	40020028 	.word	0x40020028
 8004814:	40020040 	.word	0x40020040
 8004818:	40020058 	.word	0x40020058
 800481c:	40020070 	.word	0x40020070
 8004820:	40020088 	.word	0x40020088
 8004824:	400200a0 	.word	0x400200a0
 8004828:	400200b8 	.word	0x400200b8
 800482c:	40020410 	.word	0x40020410
 8004830:	40020428 	.word	0x40020428
 8004834:	40020440 	.word	0x40020440
 8004838:	40020458 	.word	0x40020458
 800483c:	40020470 	.word	0x40020470
 8004840:	40020488 	.word	0x40020488
 8004844:	400204a0 	.word	0x400204a0
 8004848:	400204b8 	.word	0x400204b8
 800484c:	58025408 	.word	0x58025408
 8004850:	5802541c 	.word	0x5802541c
 8004854:	58025430 	.word	0x58025430
 8004858:	58025444 	.word	0x58025444
 800485c:	58025458 	.word	0x58025458
 8004860:	5802546c 	.word	0x5802546c
 8004864:	58025480 	.word	0x58025480
 8004868:	58025494 	.word	0x58025494

0800486c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e237      	b.n	8004cee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d004      	beq.n	8004894 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e22c      	b.n	8004cee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a5c      	ldr	r2, [pc, #368]	; (8004a0c <HAL_DMA_Abort_IT+0x1a0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5b      	ldr	r2, [pc, #364]	; (8004a10 <HAL_DMA_Abort_IT+0x1a4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a59      	ldr	r2, [pc, #356]	; (8004a14 <HAL_DMA_Abort_IT+0x1a8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_DMA_Abort_IT+0x1ac>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a56      	ldr	r2, [pc, #344]	; (8004a1c <HAL_DMA_Abort_IT+0x1b0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a55      	ldr	r2, [pc, #340]	; (8004a20 <HAL_DMA_Abort_IT+0x1b4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a53      	ldr	r2, [pc, #332]	; (8004a24 <HAL_DMA_Abort_IT+0x1b8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <HAL_DMA_Abort_IT+0x1bc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a50      	ldr	r2, [pc, #320]	; (8004a2c <HAL_DMA_Abort_IT+0x1c0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4f      	ldr	r2, [pc, #316]	; (8004a30 <HAL_DMA_Abort_IT+0x1c4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a4d      	ldr	r2, [pc, #308]	; (8004a34 <HAL_DMA_Abort_IT+0x1c8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a4c      	ldr	r2, [pc, #304]	; (8004a38 <HAL_DMA_Abort_IT+0x1cc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a4a      	ldr	r2, [pc, #296]	; (8004a3c <HAL_DMA_Abort_IT+0x1d0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a49      	ldr	r2, [pc, #292]	; (8004a40 <HAL_DMA_Abort_IT+0x1d4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a47      	ldr	r2, [pc, #284]	; (8004a44 <HAL_DMA_Abort_IT+0x1d8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_DMA_Abort_IT+0xc8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a46      	ldr	r2, [pc, #280]	; (8004a48 <HAL_DMA_Abort_IT+0x1dc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_DMA_Abort_IT+0xcc>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_DMA_Abort_IT+0xce>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8086 	beq.w	8004a4c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2204      	movs	r2, #4
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2f      	ldr	r2, [pc, #188]	; (8004a0c <HAL_DMA_Abort_IT+0x1a0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d04a      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2e      	ldr	r2, [pc, #184]	; (8004a10 <HAL_DMA_Abort_IT+0x1a4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d045      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <HAL_DMA_Abort_IT+0x1a8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d040      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <HAL_DMA_Abort_IT+0x1ac>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d03b      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <HAL_DMA_Abort_IT+0x1b0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d036      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a28      	ldr	r2, [pc, #160]	; (8004a20 <HAL_DMA_Abort_IT+0x1b4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d031      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <HAL_DMA_Abort_IT+0x1b8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02c      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <HAL_DMA_Abort_IT+0x1bc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d027      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a23      	ldr	r2, [pc, #140]	; (8004a2c <HAL_DMA_Abort_IT+0x1c0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <HAL_DMA_Abort_IT+0x1c4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d01d      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <HAL_DMA_Abort_IT+0x1c8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <HAL_DMA_Abort_IT+0x1cc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <HAL_DMA_Abort_IT+0x1d0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <HAL_DMA_Abort_IT+0x1d4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <HAL_DMA_Abort_IT+0x1d8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x17c>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <HAL_DMA_Abort_IT+0x1dc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <HAL_DMA_Abort_IT+0x18e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e178      	b.n	8004cec <HAL_DMA_Abort_IT+0x480>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e16f      	b.n	8004cec <HAL_DMA_Abort_IT+0x480>
 8004a0c:	40020010 	.word	0x40020010
 8004a10:	40020028 	.word	0x40020028
 8004a14:	40020040 	.word	0x40020040
 8004a18:	40020058 	.word	0x40020058
 8004a1c:	40020070 	.word	0x40020070
 8004a20:	40020088 	.word	0x40020088
 8004a24:	400200a0 	.word	0x400200a0
 8004a28:	400200b8 	.word	0x400200b8
 8004a2c:	40020410 	.word	0x40020410
 8004a30:	40020428 	.word	0x40020428
 8004a34:	40020440 	.word	0x40020440
 8004a38:	40020458 	.word	0x40020458
 8004a3c:	40020470 	.word	0x40020470
 8004a40:	40020488 	.word	0x40020488
 8004a44:	400204a0 	.word	0x400204a0
 8004a48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 020e 	bic.w	r2, r2, #14
 8004a5a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a6c      	ldr	r2, [pc, #432]	; (8004c14 <HAL_DMA_Abort_IT+0x3a8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d04a      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6b      	ldr	r2, [pc, #428]	; (8004c18 <HAL_DMA_Abort_IT+0x3ac>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d045      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a69      	ldr	r2, [pc, #420]	; (8004c1c <HAL_DMA_Abort_IT+0x3b0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d040      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a68      	ldr	r2, [pc, #416]	; (8004c20 <HAL_DMA_Abort_IT+0x3b4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d03b      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a66      	ldr	r2, [pc, #408]	; (8004c24 <HAL_DMA_Abort_IT+0x3b8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d036      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a65      	ldr	r2, [pc, #404]	; (8004c28 <HAL_DMA_Abort_IT+0x3bc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d031      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a63      	ldr	r2, [pc, #396]	; (8004c2c <HAL_DMA_Abort_IT+0x3c0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d02c      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a62      	ldr	r2, [pc, #392]	; (8004c30 <HAL_DMA_Abort_IT+0x3c4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d027      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a60      	ldr	r2, [pc, #384]	; (8004c34 <HAL_DMA_Abort_IT+0x3c8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d022      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a5f      	ldr	r2, [pc, #380]	; (8004c38 <HAL_DMA_Abort_IT+0x3cc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d01d      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a5d      	ldr	r2, [pc, #372]	; (8004c3c <HAL_DMA_Abort_IT+0x3d0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d018      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a5c      	ldr	r2, [pc, #368]	; (8004c40 <HAL_DMA_Abort_IT+0x3d4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a5a      	ldr	r2, [pc, #360]	; (8004c44 <HAL_DMA_Abort_IT+0x3d8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00e      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a59      	ldr	r2, [pc, #356]	; (8004c48 <HAL_DMA_Abort_IT+0x3dc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a57      	ldr	r2, [pc, #348]	; (8004c4c <HAL_DMA_Abort_IT+0x3e0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_DMA_Abort_IT+0x290>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a56      	ldr	r2, [pc, #344]	; (8004c50 <HAL_DMA_Abort_IT+0x3e4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d108      	bne.n	8004b0e <HAL_DMA_Abort_IT+0x2a2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e007      	b.n	8004b1e <HAL_DMA_Abort_IT+0x2b2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3c      	ldr	r2, [pc, #240]	; (8004c14 <HAL_DMA_Abort_IT+0x3a8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d072      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3a      	ldr	r2, [pc, #232]	; (8004c18 <HAL_DMA_Abort_IT+0x3ac>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d06d      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a39      	ldr	r2, [pc, #228]	; (8004c1c <HAL_DMA_Abort_IT+0x3b0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d068      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a37      	ldr	r2, [pc, #220]	; (8004c20 <HAL_DMA_Abort_IT+0x3b4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d063      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a36      	ldr	r2, [pc, #216]	; (8004c24 <HAL_DMA_Abort_IT+0x3b8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d05e      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <HAL_DMA_Abort_IT+0x3bc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d059      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a33      	ldr	r2, [pc, #204]	; (8004c2c <HAL_DMA_Abort_IT+0x3c0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d054      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a31      	ldr	r2, [pc, #196]	; (8004c30 <HAL_DMA_Abort_IT+0x3c4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d04f      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a30      	ldr	r2, [pc, #192]	; (8004c34 <HAL_DMA_Abort_IT+0x3c8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d04a      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2e      	ldr	r2, [pc, #184]	; (8004c38 <HAL_DMA_Abort_IT+0x3cc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d045      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <HAL_DMA_Abort_IT+0x3d0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d040      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2b      	ldr	r2, [pc, #172]	; (8004c40 <HAL_DMA_Abort_IT+0x3d4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d03b      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <HAL_DMA_Abort_IT+0x3d8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d036      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a28      	ldr	r2, [pc, #160]	; (8004c48 <HAL_DMA_Abort_IT+0x3dc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d031      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <HAL_DMA_Abort_IT+0x3e0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d02c      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a25      	ldr	r2, [pc, #148]	; (8004c50 <HAL_DMA_Abort_IT+0x3e4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d027      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <HAL_DMA_Abort_IT+0x3e8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d022      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a22      	ldr	r2, [pc, #136]	; (8004c58 <HAL_DMA_Abort_IT+0x3ec>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01d      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a21      	ldr	r2, [pc, #132]	; (8004c5c <HAL_DMA_Abort_IT+0x3f0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d018      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	; (8004c60 <HAL_DMA_Abort_IT+0x3f4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1e      	ldr	r2, [pc, #120]	; (8004c64 <HAL_DMA_Abort_IT+0x3f8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	; (8004c68 <HAL_DMA_Abort_IT+0x3fc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_DMA_Abort_IT+0x400>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_DMA_Abort_IT+0x3a2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <HAL_DMA_Abort_IT+0x404>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d132      	bne.n	8004c74 <HAL_DMA_Abort_IT+0x408>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e031      	b.n	8004c76 <HAL_DMA_Abort_IT+0x40a>
 8004c12:	bf00      	nop
 8004c14:	40020010 	.word	0x40020010
 8004c18:	40020028 	.word	0x40020028
 8004c1c:	40020040 	.word	0x40020040
 8004c20:	40020058 	.word	0x40020058
 8004c24:	40020070 	.word	0x40020070
 8004c28:	40020088 	.word	0x40020088
 8004c2c:	400200a0 	.word	0x400200a0
 8004c30:	400200b8 	.word	0x400200b8
 8004c34:	40020410 	.word	0x40020410
 8004c38:	40020428 	.word	0x40020428
 8004c3c:	40020440 	.word	0x40020440
 8004c40:	40020458 	.word	0x40020458
 8004c44:	40020470 	.word	0x40020470
 8004c48:	40020488 	.word	0x40020488
 8004c4c:	400204a0 	.word	0x400204a0
 8004c50:	400204b8 	.word	0x400204b8
 8004c54:	58025408 	.word	0x58025408
 8004c58:	5802541c 	.word	0x5802541c
 8004c5c:	58025430 	.word	0x58025430
 8004c60:	58025444 	.word	0x58025444
 8004c64:	58025458 	.word	0x58025458
 8004c68:	5802546c 	.word	0x5802546c
 8004c6c:	58025480 	.word	0x58025480
 8004c70:	58025494 	.word	0x58025494
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d028      	beq.n	8004ccc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	2201      	movs	r2, #1
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ca8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00c      	beq.n	8004ccc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cc0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004cca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop

08004cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d04:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <HAL_DMA_IRQHandler+0x1ac>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a67      	ldr	r2, [pc, #412]	; (8004ea8 <HAL_DMA_IRQHandler+0x1b0>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a9b      	lsrs	r3, r3, #10
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a5f      	ldr	r2, [pc, #380]	; (8004eac <HAL_DMA_IRQHandler+0x1b4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d04a      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a5d      	ldr	r2, [pc, #372]	; (8004eb0 <HAL_DMA_IRQHandler+0x1b8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d045      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a5c      	ldr	r2, [pc, #368]	; (8004eb4 <HAL_DMA_IRQHandler+0x1bc>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d040      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a5a      	ldr	r2, [pc, #360]	; (8004eb8 <HAL_DMA_IRQHandler+0x1c0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d03b      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a59      	ldr	r2, [pc, #356]	; (8004ebc <HAL_DMA_IRQHandler+0x1c4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d036      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a57      	ldr	r2, [pc, #348]	; (8004ec0 <HAL_DMA_IRQHandler+0x1c8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d031      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a56      	ldr	r2, [pc, #344]	; (8004ec4 <HAL_DMA_IRQHandler+0x1cc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d02c      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a54      	ldr	r2, [pc, #336]	; (8004ec8 <HAL_DMA_IRQHandler+0x1d0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d027      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a53      	ldr	r2, [pc, #332]	; (8004ecc <HAL_DMA_IRQHandler+0x1d4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d022      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a51      	ldr	r2, [pc, #324]	; (8004ed0 <HAL_DMA_IRQHandler+0x1d8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d01d      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a50      	ldr	r2, [pc, #320]	; (8004ed4 <HAL_DMA_IRQHandler+0x1dc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d018      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a4e      	ldr	r2, [pc, #312]	; (8004ed8 <HAL_DMA_IRQHandler+0x1e0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d013      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a4d      	ldr	r2, [pc, #308]	; (8004edc <HAL_DMA_IRQHandler+0x1e4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00e      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a4b      	ldr	r2, [pc, #300]	; (8004ee0 <HAL_DMA_IRQHandler+0x1e8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d009      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a4a      	ldr	r2, [pc, #296]	; (8004ee4 <HAL_DMA_IRQHandler+0x1ec>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <HAL_DMA_IRQHandler+0xd2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a48      	ldr	r2, [pc, #288]	; (8004ee8 <HAL_DMA_IRQHandler+0x1f0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d101      	bne.n	8004dce <HAL_DMA_IRQHandler+0xd6>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <HAL_DMA_IRQHandler+0xd8>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 842b 	beq.w	800562c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2208      	movs	r2, #8
 8004de0:	409a      	lsls	r2, r3
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80a2 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2e      	ldr	r2, [pc, #184]	; (8004eac <HAL_DMA_IRQHandler+0x1b4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d04a      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2d      	ldr	r2, [pc, #180]	; (8004eb0 <HAL_DMA_IRQHandler+0x1b8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d045      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <HAL_DMA_IRQHandler+0x1bc>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d040      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <HAL_DMA_IRQHandler+0x1c0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d03b      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <HAL_DMA_IRQHandler+0x1c4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d036      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <HAL_DMA_IRQHandler+0x1c8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d031      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <HAL_DMA_IRQHandler+0x1cc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02c      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <HAL_DMA_IRQHandler+0x1d0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d027      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <HAL_DMA_IRQHandler+0x1d4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d022      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_DMA_IRQHandler+0x1d8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d01d      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_DMA_IRQHandler+0x1dc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d018      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <HAL_DMA_IRQHandler+0x1e0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d013      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <HAL_DMA_IRQHandler+0x1e4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00e      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <HAL_DMA_IRQHandler+0x1e8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_DMA_IRQHandler+0x1ec>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x194>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_DMA_IRQHandler+0x1f0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d12f      	bne.n	8004eec <HAL_DMA_IRQHandler+0x1f4>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bf14      	ite	ne
 8004e9a:	2301      	movne	r3, #1
 8004e9c:	2300      	moveq	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	e02e      	b.n	8004f00 <HAL_DMA_IRQHandler+0x208>
 8004ea2:	bf00      	nop
 8004ea4:	24000000 	.word	0x24000000
 8004ea8:	1b4e81b5 	.word	0x1b4e81b5
 8004eac:	40020010 	.word	0x40020010
 8004eb0:	40020028 	.word	0x40020028
 8004eb4:	40020040 	.word	0x40020040
 8004eb8:	40020058 	.word	0x40020058
 8004ebc:	40020070 	.word	0x40020070
 8004ec0:	40020088 	.word	0x40020088
 8004ec4:	400200a0 	.word	0x400200a0
 8004ec8:	400200b8 	.word	0x400200b8
 8004ecc:	40020410 	.word	0x40020410
 8004ed0:	40020428 	.word	0x40020428
 8004ed4:	40020440 	.word	0x40020440
 8004ed8:	40020458 	.word	0x40020458
 8004edc:	40020470 	.word	0x40020470
 8004ee0:	40020488 	.word	0x40020488
 8004ee4:	400204a0 	.word	0x400204a0
 8004ee8:	400204b8 	.word	0x400204b8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf14      	ite	ne
 8004efa:	2301      	movne	r3, #1
 8004efc:	2300      	moveq	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d015      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0204 	bic.w	r2, r2, #4
 8004f12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	f003 031f 	and.w	r3, r3, #31
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	409a      	lsls	r2, r3
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	f043 0201 	orr.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d06e      	beq.n	8005024 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a69      	ldr	r2, [pc, #420]	; (80050f0 <HAL_DMA_IRQHandler+0x3f8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d04a      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a67      	ldr	r2, [pc, #412]	; (80050f4 <HAL_DMA_IRQHandler+0x3fc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d045      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a66      	ldr	r2, [pc, #408]	; (80050f8 <HAL_DMA_IRQHandler+0x400>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d040      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a64      	ldr	r2, [pc, #400]	; (80050fc <HAL_DMA_IRQHandler+0x404>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d03b      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a63      	ldr	r2, [pc, #396]	; (8005100 <HAL_DMA_IRQHandler+0x408>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d036      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a61      	ldr	r2, [pc, #388]	; (8005104 <HAL_DMA_IRQHandler+0x40c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d031      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a60      	ldr	r2, [pc, #384]	; (8005108 <HAL_DMA_IRQHandler+0x410>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d02c      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a5e      	ldr	r2, [pc, #376]	; (800510c <HAL_DMA_IRQHandler+0x414>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d027      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a5d      	ldr	r2, [pc, #372]	; (8005110 <HAL_DMA_IRQHandler+0x418>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d022      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5b      	ldr	r2, [pc, #364]	; (8005114 <HAL_DMA_IRQHandler+0x41c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a5a      	ldr	r2, [pc, #360]	; (8005118 <HAL_DMA_IRQHandler+0x420>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d018      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a58      	ldr	r2, [pc, #352]	; (800511c <HAL_DMA_IRQHandler+0x424>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a57      	ldr	r2, [pc, #348]	; (8005120 <HAL_DMA_IRQHandler+0x428>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a55      	ldr	r2, [pc, #340]	; (8005124 <HAL_DMA_IRQHandler+0x42c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a54      	ldr	r2, [pc, #336]	; (8005128 <HAL_DMA_IRQHandler+0x430>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x2ee>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a52      	ldr	r2, [pc, #328]	; (800512c <HAL_DMA_IRQHandler+0x434>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d10a      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x304>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e003      	b.n	8005004 <HAL_DMA_IRQHandler+0x30c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	f043 0202 	orr.w	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2204      	movs	r2, #4
 800502e:	409a      	lsls	r2, r3
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 808f 	beq.w	8005158 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <HAL_DMA_IRQHandler+0x3f8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d04a      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <HAL_DMA_IRQHandler+0x3fc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d045      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <HAL_DMA_IRQHandler+0x400>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d040      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a27      	ldr	r2, [pc, #156]	; (80050fc <HAL_DMA_IRQHandler+0x404>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d03b      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a26      	ldr	r2, [pc, #152]	; (8005100 <HAL_DMA_IRQHandler+0x408>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d036      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a24      	ldr	r2, [pc, #144]	; (8005104 <HAL_DMA_IRQHandler+0x40c>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d031      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a23      	ldr	r2, [pc, #140]	; (8005108 <HAL_DMA_IRQHandler+0x410>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d02c      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a21      	ldr	r2, [pc, #132]	; (800510c <HAL_DMA_IRQHandler+0x414>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d027      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a20      	ldr	r2, [pc, #128]	; (8005110 <HAL_DMA_IRQHandler+0x418>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <HAL_DMA_IRQHandler+0x41c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01d      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1d      	ldr	r2, [pc, #116]	; (8005118 <HAL_DMA_IRQHandler+0x420>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <HAL_DMA_IRQHandler+0x424>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1a      	ldr	r2, [pc, #104]	; (8005120 <HAL_DMA_IRQHandler+0x428>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a18      	ldr	r2, [pc, #96]	; (8005124 <HAL_DMA_IRQHandler+0x42c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <HAL_DMA_IRQHandler+0x430>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_DMA_IRQHandler+0x3e2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <HAL_DMA_IRQHandler+0x434>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d12a      	bne.n	8005130 <HAL_DMA_IRQHandler+0x438>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e023      	b.n	8005138 <HAL_DMA_IRQHandler+0x440>
 80050f0:	40020010 	.word	0x40020010
 80050f4:	40020028 	.word	0x40020028
 80050f8:	40020040 	.word	0x40020040
 80050fc:	40020058 	.word	0x40020058
 8005100:	40020070 	.word	0x40020070
 8005104:	40020088 	.word	0x40020088
 8005108:	400200a0 	.word	0x400200a0
 800510c:	400200b8 	.word	0x400200b8
 8005110:	40020410 	.word	0x40020410
 8005114:	40020428 	.word	0x40020428
 8005118:	40020440 	.word	0x40020440
 800511c:	40020458 	.word	0x40020458
 8005120:	40020470 	.word	0x40020470
 8005124:	40020488 	.word	0x40020488
 8005128:	400204a0 	.word	0x400204a0
 800512c:	400204b8 	.word	0x400204b8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	2204      	movs	r2, #4
 8005146:	409a      	lsls	r2, r3
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f043 0204 	orr.w	r2, r3, #4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2210      	movs	r2, #16
 8005162:	409a      	lsls	r2, r3
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80a6 	beq.w	80052ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a85      	ldr	r2, [pc, #532]	; (8005388 <HAL_DMA_IRQHandler+0x690>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d04a      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a83      	ldr	r2, [pc, #524]	; (800538c <HAL_DMA_IRQHandler+0x694>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d045      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a82      	ldr	r2, [pc, #520]	; (8005390 <HAL_DMA_IRQHandler+0x698>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d040      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a80      	ldr	r2, [pc, #512]	; (8005394 <HAL_DMA_IRQHandler+0x69c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d03b      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7f      	ldr	r2, [pc, #508]	; (8005398 <HAL_DMA_IRQHandler+0x6a0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d036      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a7d      	ldr	r2, [pc, #500]	; (800539c <HAL_DMA_IRQHandler+0x6a4>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d031      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a7c      	ldr	r2, [pc, #496]	; (80053a0 <HAL_DMA_IRQHandler+0x6a8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d02c      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a7a      	ldr	r2, [pc, #488]	; (80053a4 <HAL_DMA_IRQHandler+0x6ac>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d027      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a79      	ldr	r2, [pc, #484]	; (80053a8 <HAL_DMA_IRQHandler+0x6b0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a77      	ldr	r2, [pc, #476]	; (80053ac <HAL_DMA_IRQHandler+0x6b4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01d      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a76      	ldr	r2, [pc, #472]	; (80053b0 <HAL_DMA_IRQHandler+0x6b8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d018      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a74      	ldr	r2, [pc, #464]	; (80053b4 <HAL_DMA_IRQHandler+0x6bc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a73      	ldr	r2, [pc, #460]	; (80053b8 <HAL_DMA_IRQHandler+0x6c0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a71      	ldr	r2, [pc, #452]	; (80053bc <HAL_DMA_IRQHandler+0x6c4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a70      	ldr	r2, [pc, #448]	; (80053c0 <HAL_DMA_IRQHandler+0x6c8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_DMA_IRQHandler+0x516>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a6e      	ldr	r2, [pc, #440]	; (80053c4 <HAL_DMA_IRQHandler+0x6cc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10a      	bne.n	8005224 <HAL_DMA_IRQHandler+0x52c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	e009      	b.n	8005238 <HAL_DMA_IRQHandler+0x540>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d03e      	beq.n	80052ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005240:	f003 031f 	and.w	r3, r3, #31
 8005244:	2210      	movs	r2, #16
 8005246:	409a      	lsls	r2, r3
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d018      	beq.n	800528c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d108      	bne.n	800527a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d024      	beq.n	80052ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
 8005278:	e01f      	b.n	80052ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01b      	beq.n	80052ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	4798      	blx	r3
 800528a:	e016      	b.n	80052ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d107      	bne.n	80052aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0208 	bic.w	r2, r2, #8
 80052a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2220      	movs	r2, #32
 80052c4:	409a      	lsls	r2, r3
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8110 	beq.w	80054f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2c      	ldr	r2, [pc, #176]	; (8005388 <HAL_DMA_IRQHandler+0x690>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d04a      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2b      	ldr	r2, [pc, #172]	; (800538c <HAL_DMA_IRQHandler+0x694>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d045      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a29      	ldr	r2, [pc, #164]	; (8005390 <HAL_DMA_IRQHandler+0x698>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d040      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a28      	ldr	r2, [pc, #160]	; (8005394 <HAL_DMA_IRQHandler+0x69c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03b      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a26      	ldr	r2, [pc, #152]	; (8005398 <HAL_DMA_IRQHandler+0x6a0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d036      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a25      	ldr	r2, [pc, #148]	; (800539c <HAL_DMA_IRQHandler+0x6a4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d031      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a23      	ldr	r2, [pc, #140]	; (80053a0 <HAL_DMA_IRQHandler+0x6a8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02c      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <HAL_DMA_IRQHandler+0x6ac>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d027      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a20      	ldr	r2, [pc, #128]	; (80053a8 <HAL_DMA_IRQHandler+0x6b0>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1f      	ldr	r2, [pc, #124]	; (80053ac <HAL_DMA_IRQHandler+0x6b4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d01d      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <HAL_DMA_IRQHandler+0x6b8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <HAL_DMA_IRQHandler+0x6bc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <HAL_DMA_IRQHandler+0x6c0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_DMA_IRQHandler+0x6c4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <HAL_DMA_IRQHandler+0x6c8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_DMA_IRQHandler+0x678>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <HAL_DMA_IRQHandler+0x6cc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d12b      	bne.n	80053c8 <HAL_DMA_IRQHandler+0x6d0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0310 	and.w	r3, r3, #16
 800537a:	2b00      	cmp	r3, #0
 800537c:	bf14      	ite	ne
 800537e:	2301      	movne	r3, #1
 8005380:	2300      	moveq	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	e02a      	b.n	80053dc <HAL_DMA_IRQHandler+0x6e4>
 8005386:	bf00      	nop
 8005388:	40020010 	.word	0x40020010
 800538c:	40020028 	.word	0x40020028
 8005390:	40020040 	.word	0x40020040
 8005394:	40020058 	.word	0x40020058
 8005398:	40020070 	.word	0x40020070
 800539c:	40020088 	.word	0x40020088
 80053a0:	400200a0 	.word	0x400200a0
 80053a4:	400200b8 	.word	0x400200b8
 80053a8:	40020410 	.word	0x40020410
 80053ac:	40020428 	.word	0x40020428
 80053b0:	40020440 	.word	0x40020440
 80053b4:	40020458 	.word	0x40020458
 80053b8:	40020470 	.word	0x40020470
 80053bc:	40020488 	.word	0x40020488
 80053c0:	400204a0 	.word	0x400204a0
 80053c4:	400204b8 	.word	0x400204b8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bf14      	ite	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	2300      	moveq	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8087 	beq.w	80054f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2220      	movs	r2, #32
 80053ec:	409a      	lsls	r2, r3
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d139      	bne.n	8005472 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0216 	bic.w	r2, r2, #22
 800540c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800541c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d103      	bne.n	800542e <HAL_DMA_IRQHandler+0x736>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0208 	bic.w	r2, r2, #8
 800543c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005442:	f003 031f 	and.w	r3, r3, #31
 8005446:	223f      	movs	r2, #63	; 0x3f
 8005448:	409a      	lsls	r2, r3
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 834a 	beq.w	8005afc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
          }
          return;
 8005470:	e344      	b.n	8005afc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d018      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d108      	bne.n	80054a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	2b00      	cmp	r3, #0
 8005494:	d02c      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
 800549e:	e027      	b.n	80054f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d023      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
 80054b0:	e01e      	b.n	80054f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10f      	bne.n	80054e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0210 	bic.w	r2, r2, #16
 80054ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d003      	beq.n	80054f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8306 	beq.w	8005b06 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8088 	beq.w	8005618 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2204      	movs	r2, #4
 800550c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a7a      	ldr	r2, [pc, #488]	; (8005700 <HAL_DMA_IRQHandler+0xa08>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d04a      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a79      	ldr	r2, [pc, #484]	; (8005704 <HAL_DMA_IRQHandler+0xa0c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d045      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a77      	ldr	r2, [pc, #476]	; (8005708 <HAL_DMA_IRQHandler+0xa10>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d040      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a76      	ldr	r2, [pc, #472]	; (800570c <HAL_DMA_IRQHandler+0xa14>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d03b      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a74      	ldr	r2, [pc, #464]	; (8005710 <HAL_DMA_IRQHandler+0xa18>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d036      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a73      	ldr	r2, [pc, #460]	; (8005714 <HAL_DMA_IRQHandler+0xa1c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d031      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a71      	ldr	r2, [pc, #452]	; (8005718 <HAL_DMA_IRQHandler+0xa20>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d02c      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a70      	ldr	r2, [pc, #448]	; (800571c <HAL_DMA_IRQHandler+0xa24>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d027      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a6e      	ldr	r2, [pc, #440]	; (8005720 <HAL_DMA_IRQHandler+0xa28>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d022      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a6d      	ldr	r2, [pc, #436]	; (8005724 <HAL_DMA_IRQHandler+0xa2c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d01d      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a6b      	ldr	r2, [pc, #428]	; (8005728 <HAL_DMA_IRQHandler+0xa30>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d018      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a6a      	ldr	r2, [pc, #424]	; (800572c <HAL_DMA_IRQHandler+0xa34>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a68      	ldr	r2, [pc, #416]	; (8005730 <HAL_DMA_IRQHandler+0xa38>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00e      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a67      	ldr	r2, [pc, #412]	; (8005734 <HAL_DMA_IRQHandler+0xa3c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d009      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a65      	ldr	r2, [pc, #404]	; (8005738 <HAL_DMA_IRQHandler+0xa40>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x8b8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a64      	ldr	r2, [pc, #400]	; (800573c <HAL_DMA_IRQHandler+0xa44>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d108      	bne.n	80055c2 <HAL_DMA_IRQHandler+0x8ca>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	e007      	b.n	80055d2 <HAL_DMA_IRQHandler+0x8da>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	429a      	cmp	r2, r3
 80055dc:	d307      	bcc.n	80055ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f2      	bne.n	80055d2 <HAL_DMA_IRQHandler+0x8da>
 80055ec:	e000      	b.n	80055f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80055ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2203      	movs	r2, #3
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005606:	e003      	b.n	8005610 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8272 	beq.w	8005b06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
 800562a:	e26c      	b.n	8005b06 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a43      	ldr	r2, [pc, #268]	; (8005740 <HAL_DMA_IRQHandler+0xa48>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d022      	beq.n	800567c <HAL_DMA_IRQHandler+0x984>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a42      	ldr	r2, [pc, #264]	; (8005744 <HAL_DMA_IRQHandler+0xa4c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d01d      	beq.n	800567c <HAL_DMA_IRQHandler+0x984>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a40      	ldr	r2, [pc, #256]	; (8005748 <HAL_DMA_IRQHandler+0xa50>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d018      	beq.n	800567c <HAL_DMA_IRQHandler+0x984>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a3f      	ldr	r2, [pc, #252]	; (800574c <HAL_DMA_IRQHandler+0xa54>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <HAL_DMA_IRQHandler+0x984>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a3d      	ldr	r2, [pc, #244]	; (8005750 <HAL_DMA_IRQHandler+0xa58>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00e      	beq.n	800567c <HAL_DMA_IRQHandler+0x984>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a3c      	ldr	r2, [pc, #240]	; (8005754 <HAL_DMA_IRQHandler+0xa5c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d009      	beq.n	800567c <HAL_DMA_IRQHandler+0x984>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a3a      	ldr	r2, [pc, #232]	; (8005758 <HAL_DMA_IRQHandler+0xa60>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_DMA_IRQHandler+0x984>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a39      	ldr	r2, [pc, #228]	; (800575c <HAL_DMA_IRQHandler+0xa64>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_DMA_IRQHandler+0x988>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_DMA_IRQHandler+0x98a>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 823f 	beq.w	8005b06 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2204      	movs	r2, #4
 800569a:	409a      	lsls	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80cd 	beq.w	8005840 <HAL_DMA_IRQHandler+0xb48>
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80c7 	beq.w	8005840 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2204      	movs	r2, #4
 80056bc:	409a      	lsls	r2, r3
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d049      	beq.n	8005760 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8210 	beq.w	8005b00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056e8:	e20a      	b.n	8005b00 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8206 	beq.w	8005b00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056fc:	e200      	b.n	8005b00 <HAL_DMA_IRQHandler+0xe08>
 80056fe:	bf00      	nop
 8005700:	40020010 	.word	0x40020010
 8005704:	40020028 	.word	0x40020028
 8005708:	40020040 	.word	0x40020040
 800570c:	40020058 	.word	0x40020058
 8005710:	40020070 	.word	0x40020070
 8005714:	40020088 	.word	0x40020088
 8005718:	400200a0 	.word	0x400200a0
 800571c:	400200b8 	.word	0x400200b8
 8005720:	40020410 	.word	0x40020410
 8005724:	40020428 	.word	0x40020428
 8005728:	40020440 	.word	0x40020440
 800572c:	40020458 	.word	0x40020458
 8005730:	40020470 	.word	0x40020470
 8005734:	40020488 	.word	0x40020488
 8005738:	400204a0 	.word	0x400204a0
 800573c:	400204b8 	.word	0x400204b8
 8005740:	58025408 	.word	0x58025408
 8005744:	5802541c 	.word	0x5802541c
 8005748:	58025430 	.word	0x58025430
 800574c:	58025444 	.word	0x58025444
 8005750:	58025458 	.word	0x58025458
 8005754:	5802546c 	.word	0x5802546c
 8005758:	58025480 	.word	0x58025480
 800575c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d160      	bne.n	800582c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a7f      	ldr	r2, [pc, #508]	; (800596c <HAL_DMA_IRQHandler+0xc74>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d04a      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a7d      	ldr	r2, [pc, #500]	; (8005970 <HAL_DMA_IRQHandler+0xc78>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d045      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a7c      	ldr	r2, [pc, #496]	; (8005974 <HAL_DMA_IRQHandler+0xc7c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d040      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a7a      	ldr	r2, [pc, #488]	; (8005978 <HAL_DMA_IRQHandler+0xc80>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d03b      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a79      	ldr	r2, [pc, #484]	; (800597c <HAL_DMA_IRQHandler+0xc84>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d036      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a77      	ldr	r2, [pc, #476]	; (8005980 <HAL_DMA_IRQHandler+0xc88>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d031      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a76      	ldr	r2, [pc, #472]	; (8005984 <HAL_DMA_IRQHandler+0xc8c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d02c      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a74      	ldr	r2, [pc, #464]	; (8005988 <HAL_DMA_IRQHandler+0xc90>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d027      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a73      	ldr	r2, [pc, #460]	; (800598c <HAL_DMA_IRQHandler+0xc94>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a71      	ldr	r2, [pc, #452]	; (8005990 <HAL_DMA_IRQHandler+0xc98>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01d      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a70      	ldr	r2, [pc, #448]	; (8005994 <HAL_DMA_IRQHandler+0xc9c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6e      	ldr	r2, [pc, #440]	; (8005998 <HAL_DMA_IRQHandler+0xca0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a6d      	ldr	r2, [pc, #436]	; (800599c <HAL_DMA_IRQHandler+0xca4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a6b      	ldr	r2, [pc, #428]	; (80059a0 <HAL_DMA_IRQHandler+0xca8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6a      	ldr	r2, [pc, #424]	; (80059a4 <HAL_DMA_IRQHandler+0xcac>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_DMA_IRQHandler+0xb12>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a68      	ldr	r2, [pc, #416]	; (80059a8 <HAL_DMA_IRQHandler+0xcb0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d108      	bne.n	800581c <HAL_DMA_IRQHandler+0xb24>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0208 	bic.w	r2, r2, #8
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e007      	b.n	800582c <HAL_DMA_IRQHandler+0xb34>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8165 	beq.w	8005b00 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800583e:	e15f      	b.n	8005b00 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	2202      	movs	r2, #2
 800584a:	409a      	lsls	r2, r3
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 80c5 	beq.w	80059e0 <HAL_DMA_IRQHandler+0xce8>
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80bf 	beq.w	80059e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2202      	movs	r2, #2
 800586c:	409a      	lsls	r2, r3
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d018      	beq.n	80058ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 813a 	beq.w	8005b04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005898:	e134      	b.n	8005b04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 8130 	beq.w	8005b04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058ac:	e12a      	b.n	8005b04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f040 8089 	bne.w	80059cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2b      	ldr	r2, [pc, #172]	; (800596c <HAL_DMA_IRQHandler+0xc74>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d04a      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a29      	ldr	r2, [pc, #164]	; (8005970 <HAL_DMA_IRQHandler+0xc78>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d045      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a28      	ldr	r2, [pc, #160]	; (8005974 <HAL_DMA_IRQHandler+0xc7c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d040      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a26      	ldr	r2, [pc, #152]	; (8005978 <HAL_DMA_IRQHandler+0xc80>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d03b      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a25      	ldr	r2, [pc, #148]	; (800597c <HAL_DMA_IRQHandler+0xc84>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d036      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <HAL_DMA_IRQHandler+0xc88>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d031      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a22      	ldr	r2, [pc, #136]	; (8005984 <HAL_DMA_IRQHandler+0xc8c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d02c      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a20      	ldr	r2, [pc, #128]	; (8005988 <HAL_DMA_IRQHandler+0xc90>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d027      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1f      	ldr	r2, [pc, #124]	; (800598c <HAL_DMA_IRQHandler+0xc94>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d022      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1d      	ldr	r2, [pc, #116]	; (8005990 <HAL_DMA_IRQHandler+0xc98>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d01d      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <HAL_DMA_IRQHandler+0xc9c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d018      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <HAL_DMA_IRQHandler+0xca0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a19      	ldr	r2, [pc, #100]	; (800599c <HAL_DMA_IRQHandler+0xca4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00e      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a17      	ldr	r2, [pc, #92]	; (80059a0 <HAL_DMA_IRQHandler+0xca8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d009      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <HAL_DMA_IRQHandler+0xcac>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d004      	beq.n	800595a <HAL_DMA_IRQHandler+0xc62>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <HAL_DMA_IRQHandler+0xcb0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d128      	bne.n	80059ac <HAL_DMA_IRQHandler+0xcb4>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0214 	bic.w	r2, r2, #20
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e027      	b.n	80059bc <HAL_DMA_IRQHandler+0xcc4>
 800596c:	40020010 	.word	0x40020010
 8005970:	40020028 	.word	0x40020028
 8005974:	40020040 	.word	0x40020040
 8005978:	40020058 	.word	0x40020058
 800597c:	40020070 	.word	0x40020070
 8005980:	40020088 	.word	0x40020088
 8005984:	400200a0 	.word	0x400200a0
 8005988:	400200b8 	.word	0x400200b8
 800598c:	40020410 	.word	0x40020410
 8005990:	40020428 	.word	0x40020428
 8005994:	40020440 	.word	0x40020440
 8005998:	40020458 	.word	0x40020458
 800599c:	40020470 	.word	0x40020470
 80059a0:	40020488 	.word	0x40020488
 80059a4:	400204a0 	.word	0x400204a0
 80059a8:	400204b8 	.word	0x400204b8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 020a 	bic.w	r2, r2, #10
 80059ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8097 	beq.w	8005b04 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059de:	e091      	b.n	8005b04 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e4:	f003 031f 	and.w	r3, r3, #31
 80059e8:	2208      	movs	r2, #8
 80059ea:	409a      	lsls	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8088 	beq.w	8005b06 <HAL_DMA_IRQHandler+0xe0e>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8082 	beq.w	8005b06 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a41      	ldr	r2, [pc, #260]	; (8005b0c <HAL_DMA_IRQHandler+0xe14>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d04a      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3f      	ldr	r2, [pc, #252]	; (8005b10 <HAL_DMA_IRQHandler+0xe18>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d045      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3e      	ldr	r2, [pc, #248]	; (8005b14 <HAL_DMA_IRQHandler+0xe1c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d040      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a3c      	ldr	r2, [pc, #240]	; (8005b18 <HAL_DMA_IRQHandler+0xe20>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03b      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3b      	ldr	r2, [pc, #236]	; (8005b1c <HAL_DMA_IRQHandler+0xe24>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d036      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a39      	ldr	r2, [pc, #228]	; (8005b20 <HAL_DMA_IRQHandler+0xe28>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d031      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a38      	ldr	r2, [pc, #224]	; (8005b24 <HAL_DMA_IRQHandler+0xe2c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d02c      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a36      	ldr	r2, [pc, #216]	; (8005b28 <HAL_DMA_IRQHandler+0xe30>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d027      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a35      	ldr	r2, [pc, #212]	; (8005b2c <HAL_DMA_IRQHandler+0xe34>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a33      	ldr	r2, [pc, #204]	; (8005b30 <HAL_DMA_IRQHandler+0xe38>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a32      	ldr	r2, [pc, #200]	; (8005b34 <HAL_DMA_IRQHandler+0xe3c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a30      	ldr	r2, [pc, #192]	; (8005b38 <HAL_DMA_IRQHandler+0xe40>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a2f      	ldr	r2, [pc, #188]	; (8005b3c <HAL_DMA_IRQHandler+0xe44>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a2d      	ldr	r2, [pc, #180]	; (8005b40 <HAL_DMA_IRQHandler+0xe48>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a2c      	ldr	r2, [pc, #176]	; (8005b44 <HAL_DMA_IRQHandler+0xe4c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0xdaa>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <HAL_DMA_IRQHandler+0xe50>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <HAL_DMA_IRQHandler+0xdbc>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 021c 	bic.w	r2, r2, #28
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e007      	b.n	8005ac4 <HAL_DMA_IRQHandler+0xdcc>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 020e 	bic.w	r2, r2, #14
 8005ac2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2201      	movs	r2, #1
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
 8005afa:	e004      	b.n	8005b06 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005afc:	bf00      	nop
 8005afe:	e002      	b.n	8005b06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b00:	bf00      	nop
 8005b02:	e000      	b.n	8005b06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b04:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b06:	3728      	adds	r7, #40	; 0x28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8

08005b4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b64:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a7f      	ldr	r2, [pc, #508]	; (8005d68 <DMA_SetConfig+0x21c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d072      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a7d      	ldr	r2, [pc, #500]	; (8005d6c <DMA_SetConfig+0x220>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d06d      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a7c      	ldr	r2, [pc, #496]	; (8005d70 <DMA_SetConfig+0x224>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d068      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a7a      	ldr	r2, [pc, #488]	; (8005d74 <DMA_SetConfig+0x228>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d063      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a79      	ldr	r2, [pc, #484]	; (8005d78 <DMA_SetConfig+0x22c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d05e      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a77      	ldr	r2, [pc, #476]	; (8005d7c <DMA_SetConfig+0x230>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d059      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a76      	ldr	r2, [pc, #472]	; (8005d80 <DMA_SetConfig+0x234>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d054      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a74      	ldr	r2, [pc, #464]	; (8005d84 <DMA_SetConfig+0x238>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d04f      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a73      	ldr	r2, [pc, #460]	; (8005d88 <DMA_SetConfig+0x23c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d04a      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a71      	ldr	r2, [pc, #452]	; (8005d8c <DMA_SetConfig+0x240>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d045      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a70      	ldr	r2, [pc, #448]	; (8005d90 <DMA_SetConfig+0x244>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d040      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6e      	ldr	r2, [pc, #440]	; (8005d94 <DMA_SetConfig+0x248>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d03b      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a6d      	ldr	r2, [pc, #436]	; (8005d98 <DMA_SetConfig+0x24c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d036      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a6b      	ldr	r2, [pc, #428]	; (8005d9c <DMA_SetConfig+0x250>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d031      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6a      	ldr	r2, [pc, #424]	; (8005da0 <DMA_SetConfig+0x254>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d02c      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a68      	ldr	r2, [pc, #416]	; (8005da4 <DMA_SetConfig+0x258>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d027      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a67      	ldr	r2, [pc, #412]	; (8005da8 <DMA_SetConfig+0x25c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d022      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a65      	ldr	r2, [pc, #404]	; (8005dac <DMA_SetConfig+0x260>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01d      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a64      	ldr	r2, [pc, #400]	; (8005db0 <DMA_SetConfig+0x264>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d018      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a62      	ldr	r2, [pc, #392]	; (8005db4 <DMA_SetConfig+0x268>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d013      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a61      	ldr	r2, [pc, #388]	; (8005db8 <DMA_SetConfig+0x26c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00e      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5f      	ldr	r2, [pc, #380]	; (8005dbc <DMA_SetConfig+0x270>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d009      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a5e      	ldr	r2, [pc, #376]	; (8005dc0 <DMA_SetConfig+0x274>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d004      	beq.n	8005c56 <DMA_SetConfig+0x10a>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5c      	ldr	r2, [pc, #368]	; (8005dc4 <DMA_SetConfig+0x278>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <DMA_SetConfig+0x10e>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <DMA_SetConfig+0x110>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a39      	ldr	r2, [pc, #228]	; (8005d68 <DMA_SetConfig+0x21c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d04a      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a38      	ldr	r2, [pc, #224]	; (8005d6c <DMA_SetConfig+0x220>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d045      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a36      	ldr	r2, [pc, #216]	; (8005d70 <DMA_SetConfig+0x224>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d040      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a35      	ldr	r2, [pc, #212]	; (8005d74 <DMA_SetConfig+0x228>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d03b      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a33      	ldr	r2, [pc, #204]	; (8005d78 <DMA_SetConfig+0x22c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d036      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a32      	ldr	r2, [pc, #200]	; (8005d7c <DMA_SetConfig+0x230>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d031      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a30      	ldr	r2, [pc, #192]	; (8005d80 <DMA_SetConfig+0x234>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02c      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <DMA_SetConfig+0x238>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d027      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <DMA_SetConfig+0x23c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <DMA_SetConfig+0x240>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d01d      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a2a      	ldr	r2, [pc, #168]	; (8005d90 <DMA_SetConfig+0x244>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a29      	ldr	r2, [pc, #164]	; (8005d94 <DMA_SetConfig+0x248>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a27      	ldr	r2, [pc, #156]	; (8005d98 <DMA_SetConfig+0x24c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a26      	ldr	r2, [pc, #152]	; (8005d9c <DMA_SetConfig+0x250>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a24      	ldr	r2, [pc, #144]	; (8005da0 <DMA_SetConfig+0x254>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <DMA_SetConfig+0x1d0>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a23      	ldr	r2, [pc, #140]	; (8005da4 <DMA_SetConfig+0x258>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <DMA_SetConfig+0x1d4>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <DMA_SetConfig+0x1d6>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d059      	beq.n	8005dda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	223f      	movs	r2, #63	; 0x3f
 8005d30:	409a      	lsls	r2, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d138      	bne.n	8005dc8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005d66:	e086      	b.n	8005e76 <DMA_SetConfig+0x32a>
 8005d68:	40020010 	.word	0x40020010
 8005d6c:	40020028 	.word	0x40020028
 8005d70:	40020040 	.word	0x40020040
 8005d74:	40020058 	.word	0x40020058
 8005d78:	40020070 	.word	0x40020070
 8005d7c:	40020088 	.word	0x40020088
 8005d80:	400200a0 	.word	0x400200a0
 8005d84:	400200b8 	.word	0x400200b8
 8005d88:	40020410 	.word	0x40020410
 8005d8c:	40020428 	.word	0x40020428
 8005d90:	40020440 	.word	0x40020440
 8005d94:	40020458 	.word	0x40020458
 8005d98:	40020470 	.word	0x40020470
 8005d9c:	40020488 	.word	0x40020488
 8005da0:	400204a0 	.word	0x400204a0
 8005da4:	400204b8 	.word	0x400204b8
 8005da8:	58025408 	.word	0x58025408
 8005dac:	5802541c 	.word	0x5802541c
 8005db0:	58025430 	.word	0x58025430
 8005db4:	58025444 	.word	0x58025444
 8005db8:	58025458 	.word	0x58025458
 8005dbc:	5802546c 	.word	0x5802546c
 8005dc0:	58025480 	.word	0x58025480
 8005dc4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	60da      	str	r2, [r3, #12]
}
 8005dd8:	e04d      	b.n	8005e76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a29      	ldr	r2, [pc, #164]	; (8005e84 <DMA_SetConfig+0x338>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <DMA_SetConfig+0x2de>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a27      	ldr	r2, [pc, #156]	; (8005e88 <DMA_SetConfig+0x33c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01d      	beq.n	8005e2a <DMA_SetConfig+0x2de>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a26      	ldr	r2, [pc, #152]	; (8005e8c <DMA_SetConfig+0x340>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <DMA_SetConfig+0x2de>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <DMA_SetConfig+0x344>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <DMA_SetConfig+0x2de>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a23      	ldr	r2, [pc, #140]	; (8005e94 <DMA_SetConfig+0x348>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <DMA_SetConfig+0x2de>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <DMA_SetConfig+0x34c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <DMA_SetConfig+0x2de>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <DMA_SetConfig+0x350>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <DMA_SetConfig+0x2de>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1e      	ldr	r2, [pc, #120]	; (8005ea0 <DMA_SetConfig+0x354>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d101      	bne.n	8005e2e <DMA_SetConfig+0x2e2>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <DMA_SetConfig+0x2e4>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d020      	beq.n	8005e76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d108      	bne.n	8005e66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	60da      	str	r2, [r3, #12]
}
 8005e64:	e007      	b.n	8005e76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	60da      	str	r2, [r3, #12]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	58025408 	.word	0x58025408
 8005e88:	5802541c 	.word	0x5802541c
 8005e8c:	58025430 	.word	0x58025430
 8005e90:	58025444 	.word	0x58025444
 8005e94:	58025458 	.word	0x58025458
 8005e98:	5802546c 	.word	0x5802546c
 8005e9c:	58025480 	.word	0x58025480
 8005ea0:	58025494 	.word	0x58025494

08005ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a42      	ldr	r2, [pc, #264]	; (8005fbc <DMA_CalcBaseAndBitshift+0x118>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04a      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a41      	ldr	r2, [pc, #260]	; (8005fc0 <DMA_CalcBaseAndBitshift+0x11c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d045      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a3f      	ldr	r2, [pc, #252]	; (8005fc4 <DMA_CalcBaseAndBitshift+0x120>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d040      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a3e      	ldr	r2, [pc, #248]	; (8005fc8 <DMA_CalcBaseAndBitshift+0x124>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d03b      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a3c      	ldr	r2, [pc, #240]	; (8005fcc <DMA_CalcBaseAndBitshift+0x128>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d036      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3b      	ldr	r2, [pc, #236]	; (8005fd0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d031      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a39      	ldr	r2, [pc, #228]	; (8005fd4 <DMA_CalcBaseAndBitshift+0x130>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d02c      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a38      	ldr	r2, [pc, #224]	; (8005fd8 <DMA_CalcBaseAndBitshift+0x134>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d027      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a36      	ldr	r2, [pc, #216]	; (8005fdc <DMA_CalcBaseAndBitshift+0x138>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d022      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a35      	ldr	r2, [pc, #212]	; (8005fe0 <DMA_CalcBaseAndBitshift+0x13c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d01d      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a33      	ldr	r2, [pc, #204]	; (8005fe4 <DMA_CalcBaseAndBitshift+0x140>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d018      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a32      	ldr	r2, [pc, #200]	; (8005fe8 <DMA_CalcBaseAndBitshift+0x144>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d013      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a30      	ldr	r2, [pc, #192]	; (8005fec <DMA_CalcBaseAndBitshift+0x148>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00e      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a2f      	ldr	r2, [pc, #188]	; (8005ff0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d009      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2d      	ldr	r2, [pc, #180]	; (8005ff4 <DMA_CalcBaseAndBitshift+0x150>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d004      	beq.n	8005f4c <DMA_CalcBaseAndBitshift+0xa8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2c      	ldr	r2, [pc, #176]	; (8005ff8 <DMA_CalcBaseAndBitshift+0x154>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d101      	bne.n	8005f50 <DMA_CalcBaseAndBitshift+0xac>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <DMA_CalcBaseAndBitshift+0xae>
 8005f50:	2300      	movs	r3, #0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d024      	beq.n	8005fa0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	3b10      	subs	r3, #16
 8005f5e:	4a27      	ldr	r2, [pc, #156]	; (8005ffc <DMA_CalcBaseAndBitshift+0x158>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	4a24      	ldr	r2, [pc, #144]	; (8006000 <DMA_CalcBaseAndBitshift+0x15c>)
 8005f70:	5cd3      	ldrb	r3, [r2, r3]
 8005f72:	461a      	mov	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d908      	bls.n	8005f90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <DMA_CalcBaseAndBitshift+0x160>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	659a      	str	r2, [r3, #88]	; 0x58
 8005f8e:	e00d      	b.n	8005fac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	4b1b      	ldr	r3, [pc, #108]	; (8006004 <DMA_CalcBaseAndBitshift+0x160>)
 8005f98:	4013      	ands	r3, r2
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f9e:	e005      	b.n	8005fac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr
 8005fbc:	40020010 	.word	0x40020010
 8005fc0:	40020028 	.word	0x40020028
 8005fc4:	40020040 	.word	0x40020040
 8005fc8:	40020058 	.word	0x40020058
 8005fcc:	40020070 	.word	0x40020070
 8005fd0:	40020088 	.word	0x40020088
 8005fd4:	400200a0 	.word	0x400200a0
 8005fd8:	400200b8 	.word	0x400200b8
 8005fdc:	40020410 	.word	0x40020410
 8005fe0:	40020428 	.word	0x40020428
 8005fe4:	40020440 	.word	0x40020440
 8005fe8:	40020458 	.word	0x40020458
 8005fec:	40020470 	.word	0x40020470
 8005ff0:	40020488 	.word	0x40020488
 8005ff4:	400204a0 	.word	0x400204a0
 8005ff8:	400204b8 	.word	0x400204b8
 8005ffc:	aaaaaaab 	.word	0xaaaaaaab
 8006000:	0800e9d4 	.word	0x0800e9d4
 8006004:	fffffc00 	.word	0xfffffc00

08006008 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d120      	bne.n	800605e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	2b03      	cmp	r3, #3
 8006022:	d858      	bhi.n	80060d6 <DMA_CheckFifoParam+0xce>
 8006024:	a201      	add	r2, pc, #4	; (adr r2, 800602c <DMA_CheckFifoParam+0x24>)
 8006026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602a:	bf00      	nop
 800602c:	0800603d 	.word	0x0800603d
 8006030:	0800604f 	.word	0x0800604f
 8006034:	0800603d 	.word	0x0800603d
 8006038:	080060d7 	.word	0x080060d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d048      	beq.n	80060da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800604c:	e045      	b.n	80060da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006056:	d142      	bne.n	80060de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800605c:	e03f      	b.n	80060de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006066:	d123      	bne.n	80060b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	2b03      	cmp	r3, #3
 800606e:	d838      	bhi.n	80060e2 <DMA_CheckFifoParam+0xda>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <DMA_CheckFifoParam+0x70>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	08006089 	.word	0x08006089
 800607c:	0800608f 	.word	0x0800608f
 8006080:	08006089 	.word	0x08006089
 8006084:	080060a1 	.word	0x080060a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
        break;
 800608c:	e030      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d025      	beq.n	80060e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800609e:	e022      	b.n	80060e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060a8:	d11f      	bne.n	80060ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80060ae:	e01c      	b.n	80060ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d902      	bls.n	80060be <DMA_CheckFifoParam+0xb6>
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d003      	beq.n	80060c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80060bc:	e018      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	73fb      	strb	r3, [r7, #15]
        break;
 80060c2:	e015      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00e      	beq.n	80060ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
    break;
 80060d4:	e00b      	b.n	80060ee <DMA_CheckFifoParam+0xe6>
        break;
 80060d6:	bf00      	nop
 80060d8:	e00a      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
        break;
 80060da:	bf00      	nop
 80060dc:	e008      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
        break;
 80060de:	bf00      	nop
 80060e0:	e006      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
        break;
 80060e2:	bf00      	nop
 80060e4:	e004      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
        break;
 80060e6:	bf00      	nop
 80060e8:	e002      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
        break;
 80060ea:	bf00      	nop
 80060ec:	e000      	b.n	80060f0 <DMA_CheckFifoParam+0xe8>
    break;
 80060ee:	bf00      	nop
    }
  }

  return status;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop

08006100 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a38      	ldr	r2, [pc, #224]	; (80061f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a36      	ldr	r2, [pc, #216]	; (80061f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a35      	ldr	r2, [pc, #212]	; (80061fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a33      	ldr	r2, [pc, #204]	; (8006200 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a32      	ldr	r2, [pc, #200]	; (8006204 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a30      	ldr	r2, [pc, #192]	; (8006208 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2f      	ldr	r2, [pc, #188]	; (800620c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d101      	bne.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01a      	beq.n	800619e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	3b08      	subs	r3, #8
 8006170:	4a28      	ldr	r2, [pc, #160]	; (8006214 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4b26      	ldr	r3, [pc, #152]	; (8006218 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800617e:	4413      	add	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a24      	ldr	r2, [pc, #144]	; (800621c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800618c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2201      	movs	r2, #1
 8006196:	409a      	lsls	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800619c:	e024      	b.n	80061e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	3b10      	subs	r3, #16
 80061a6:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80061a8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d806      	bhi.n	80061c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d902      	bls.n	80061c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3308      	adds	r3, #8
 80061c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4b18      	ldr	r3, [pc, #96]	; (800622c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	461a      	mov	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a16      	ldr	r2, [pc, #88]	; (8006230 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80061d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	2201      	movs	r2, #1
 80061e2:	409a      	lsls	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	58025408 	.word	0x58025408
 80061f8:	5802541c 	.word	0x5802541c
 80061fc:	58025430 	.word	0x58025430
 8006200:	58025444 	.word	0x58025444
 8006204:	58025458 	.word	0x58025458
 8006208:	5802546c 	.word	0x5802546c
 800620c:	58025480 	.word	0x58025480
 8006210:	58025494 	.word	0x58025494
 8006214:	cccccccd 	.word	0xcccccccd
 8006218:	16009600 	.word	0x16009600
 800621c:	58025880 	.word	0x58025880
 8006220:	aaaaaaab 	.word	0xaaaaaaab
 8006224:	400204b8 	.word	0x400204b8
 8006228:	4002040f 	.word	0x4002040f
 800622c:	10008200 	.word	0x10008200
 8006230:	40020880 	.word	0x40020880

08006234 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d04a      	beq.n	80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d847      	bhi.n	80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a25      	ldr	r2, [pc, #148]	; (80062ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d022      	beq.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a24      	ldr	r2, [pc, #144]	; (80062f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d01d      	beq.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a22      	ldr	r2, [pc, #136]	; (80062f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d018      	beq.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a21      	ldr	r2, [pc, #132]	; (80062f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a1f      	ldr	r2, [pc, #124]	; (80062fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00e      	beq.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1c      	ldr	r2, [pc, #112]	; (8006304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1b      	ldr	r2, [pc, #108]	; (8006308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d101      	bne.n	80062a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4b17      	ldr	r3, [pc, #92]	; (800630c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a15      	ldr	r2, [pc, #84]	; (8006310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80062bc:	671a      	str	r2, [r3, #112]	; 0x70
 80062be:	e009      	b.n	80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4b14      	ldr	r3, [pc, #80]	; (8006314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	461a      	mov	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a11      	ldr	r2, [pc, #68]	; (8006318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80062d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	2201      	movs	r2, #1
 80062da:	409a      	lsls	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80062e0:	bf00      	nop
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	58025408 	.word	0x58025408
 80062f0:	5802541c 	.word	0x5802541c
 80062f4:	58025430 	.word	0x58025430
 80062f8:	58025444 	.word	0x58025444
 80062fc:	58025458 	.word	0x58025458
 8006300:	5802546c 	.word	0x5802546c
 8006304:	58025480 	.word	0x58025480
 8006308:	58025494 	.word	0x58025494
 800630c:	1600963f 	.word	0x1600963f
 8006310:	58025940 	.word	0x58025940
 8006314:	1000823f 	.word	0x1000823f
 8006318:	40020940 	.word	0x40020940

0800631c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e0cf      	b.n	80064ce <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006334:	2b00      	cmp	r3, #0
 8006336:	d106      	bne.n	8006346 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2223      	movs	r2, #35	; 0x23
 800633c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7fa ff4d 	bl	80011e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006346:	4b64      	ldr	r3, [pc, #400]	; (80064d8 <HAL_ETH_Init+0x1bc>)
 8006348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800634c:	4a62      	ldr	r2, [pc, #392]	; (80064d8 <HAL_ETH_Init+0x1bc>)
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006356:	4b60      	ldr	r3, [pc, #384]	; (80064d8 <HAL_ETH_Init+0x1bc>)
 8006358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	60bb      	str	r3, [r7, #8]
 8006362:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	7a1b      	ldrb	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800636c:	2000      	movs	r0, #0
 800636e:	f7fb facd 	bl	800190c <HAL_SYSCFG_ETHInterfaceSelect>
 8006372:	e003      	b.n	800637c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006374:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006378:	f7fb fac8 	bl	800190c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800637c:	4b57      	ldr	r3, [pc, #348]	; (80064dc <HAL_ETH_Init+0x1c0>)
 800637e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6812      	ldr	r2, [r2, #0]
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006396:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006398:	f7fb fa7c 	bl	8001894 <HAL_GetTick>
 800639c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800639e:	e011      	b.n	80063c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80063a0:	f7fb fa78 	bl	8001894 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80063ae:	d909      	bls.n	80063c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2204      	movs	r2, #4
 80063b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	22e0      	movs	r2, #224	; 0xe0
 80063bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e084      	b.n	80064ce <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e4      	bne.n	80063a0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f886 	bl	80064e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80063dc:	f001 fedc 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4a3f      	ldr	r2, [pc, #252]	; (80064e0 <HAL_ETH_Init+0x1c4>)
 80063e4:	fba2 2303 	umull	r2, r3, r2, r3
 80063e8:	0c9a      	lsrs	r2, r3, #18
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3a01      	subs	r2, #1
 80063f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa71 	bl	80068dc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006402:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006406:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006412:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006416:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	22e0      	movs	r2, #224	; 0xe0
 8006432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e049      	b.n	80064ce <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006442:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006446:	4b27      	ldr	r3, [pc, #156]	; (80064e4 <HAL_ETH_Init+0x1c8>)
 8006448:	4013      	ands	r3, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6952      	ldr	r2, [r2, #20]
 800644e:	0051      	lsls	r1, r2, #1
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	430b      	orrs	r3, r1
 8006456:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800645a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fad9 	bl	8006a16 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb1f 	bl	8006aa8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	3305      	adds	r3, #5
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	021a      	lsls	r2, r3, #8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	3304      	adds	r3, #4
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	3303      	adds	r3, #3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	061a      	lsls	r2, r3, #24
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	3302      	adds	r3, #2
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	3301      	adds	r3, #1
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80064b6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80064b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2210      	movs	r2, #16
 80064c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	58024400 	.word	0x58024400
 80064dc:	58000400 	.word	0x58000400
 80064e0:	431bde83 	.word	0x431bde83
 80064e4:	ffff8001 	.word	0xffff8001

080064e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006500:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006502:	f001 fe49 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 8006506:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a1e      	ldr	r2, [pc, #120]	; (8006584 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d908      	bls.n	8006522 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d804      	bhi.n	8006522 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e027      	b.n	8006572 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d908      	bls.n	800653c <HAL_ETH_SetMDIOClockRange+0x54>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a17      	ldr	r2, [pc, #92]	; (800658c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d204      	bcs.n	800653c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e01a      	b.n	8006572 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d303      	bcc.n	800654c <HAL_ETH_SetMDIOClockRange+0x64>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4a12      	ldr	r2, [pc, #72]	; (8006590 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d911      	bls.n	8006570 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4a10      	ldr	r2, [pc, #64]	; (8006590 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d908      	bls.n	8006566 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a0f      	ldr	r2, [pc, #60]	; (8006594 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d804      	bhi.n	8006566 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e005      	b.n	8006572 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	e000      	b.n	8006572 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006570:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	01312cff 	.word	0x01312cff
 8006588:	02160ebf 	.word	0x02160ebf
 800658c:	03938700 	.word	0x03938700
 8006590:	05f5e0ff 	.word	0x05f5e0ff
 8006594:	08f0d17f 	.word	0x08f0d17f

08006598 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80065aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	791b      	ldrb	r3, [r3, #4]
 80065b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80065b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	7b1b      	ldrb	r3, [r3, #12]
 80065b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80065ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	7b5b      	ldrb	r3, [r3, #13]
 80065c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80065c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	7b9b      	ldrb	r3, [r3, #14]
 80065c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80065ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	7bdb      	ldrb	r3, [r3, #15]
 80065d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80065d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	7c12      	ldrb	r2, [r2, #16]
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d102      	bne.n	80065e2 <ETH_SetMACConfig+0x4a>
 80065dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80065e0:	e000      	b.n	80065e4 <ETH_SetMACConfig+0x4c>
 80065e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80065e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	7c52      	ldrb	r2, [r2, #17]
 80065ea:	2a00      	cmp	r2, #0
 80065ec:	d102      	bne.n	80065f4 <ETH_SetMACConfig+0x5c>
 80065ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065f2:	e000      	b.n	80065f6 <ETH_SetMACConfig+0x5e>
 80065f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80065f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	7c9b      	ldrb	r3, [r3, #18]
 80065fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80065fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006604:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800660a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	7f1b      	ldrb	r3, [r3, #28]
 8006610:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	7f5b      	ldrb	r3, [r3, #29]
 8006618:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800661a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	7f92      	ldrb	r2, [r2, #30]
 8006620:	2a00      	cmp	r2, #0
 8006622:	d102      	bne.n	800662a <ETH_SetMACConfig+0x92>
 8006624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006628:	e000      	b.n	800662c <ETH_SetMACConfig+0x94>
 800662a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800662c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	7fdb      	ldrb	r3, [r3, #31]
 8006632:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006634:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	f892 2020 	ldrb.w	r2, [r2, #32]
 800663c:	2a00      	cmp	r2, #0
 800663e:	d102      	bne.n	8006646 <ETH_SetMACConfig+0xae>
 8006640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006644:	e000      	b.n	8006648 <ETH_SetMACConfig+0xb0>
 8006646:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006648:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800664e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006656:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006658:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4b56      	ldr	r3, [pc, #344]	; (80067c4 <ETH_SetMACConfig+0x22c>)
 800666a:	4013      	ands	r3, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	68f9      	ldr	r1, [r7, #12]
 8006672:	430b      	orrs	r3, r1
 8006674:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006682:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006684:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800668c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800668e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006696:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006698:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80066a0:	2a00      	cmp	r2, #0
 80066a2:	d102      	bne.n	80066aa <ETH_SetMACConfig+0x112>
 80066a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80066a8:	e000      	b.n	80066ac <ETH_SetMACConfig+0x114>
 80066aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80066ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <ETH_SetMACConfig+0x230>)
 80066be:	4013      	ands	r3, r2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	430b      	orrs	r3, r1
 80066c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	4b3a      	ldr	r3, [pc, #232]	; (80067cc <ETH_SetMACConfig+0x234>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	430b      	orrs	r3, r1
 80066ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80066f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80066fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006702:	2a00      	cmp	r2, #0
 8006704:	d101      	bne.n	800670a <ETH_SetMACConfig+0x172>
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	e000      	b.n	800670c <ETH_SetMACConfig+0x174>
 800670a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800670c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006714:	4313      	orrs	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800671e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006722:	4013      	ands	r3, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	68f9      	ldr	r1, [r7, #12]
 800672a:	430b      	orrs	r3, r1
 800672c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006734:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800673c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674a:	f023 0103 	bic.w	r1, r3, #3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	430a      	orrs	r2, r1
 8006756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006762:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800677e:	2a00      	cmp	r2, #0
 8006780:	d101      	bne.n	8006786 <ETH_SetMACConfig+0x1ee>
 8006782:	2240      	movs	r2, #64	; 0x40
 8006784:	e000      	b.n	8006788 <ETH_SetMACConfig+0x1f0>
 8006786:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006788:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006790:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800679a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80067a8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	00048083 	.word	0x00048083
 80067c8:	c0f88000 	.word	0xc0f88000
 80067cc:	fffffef0 	.word	0xfffffef0

080067d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b38      	ldr	r3, [pc, #224]	; (80068c8 <ETH_SetDMAConfig+0xf8>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	6811      	ldr	r1, [r2, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6812      	ldr	r2, [r2, #0]
 80067f0:	430b      	orrs	r3, r1
 80067f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	791b      	ldrb	r3, [r3, #4]
 80067fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006802:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	7b1b      	ldrb	r3, [r3, #12]
 8006808:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <ETH_SetDMAConfig+0xfc>)
 800681a:	4013      	ands	r3, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	68f9      	ldr	r1, [r7, #12]
 8006822:	430b      	orrs	r3, r1
 8006824:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006828:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	7b5b      	ldrb	r3, [r3, #13]
 800682e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006840:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006844:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <ETH_SetDMAConfig+0x100>)
 8006846:	4013      	ands	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6812      	ldr	r2, [r2, #0]
 800684c:	68f9      	ldr	r1, [r7, #12]
 800684e:	430b      	orrs	r3, r1
 8006850:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006854:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	7d1b      	ldrb	r3, [r3, #20]
 8006860:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006862:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	7f5b      	ldrb	r3, [r3, #29]
 8006868:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006876:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800687a:	4b16      	ldr	r3, [pc, #88]	; (80068d4 <ETH_SetDMAConfig+0x104>)
 800687c:	4013      	ands	r3, r2
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	430b      	orrs	r3, r1
 8006886:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800688a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	7f1b      	ldrb	r3, [r3, #28]
 8006892:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068a4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80068a8:	4b0b      	ldr	r3, [pc, #44]	; (80068d8 <ETH_SetDMAConfig+0x108>)
 80068aa:	4013      	ands	r3, r2
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	68f9      	ldr	r1, [r7, #12]
 80068b2:	430b      	orrs	r3, r1
 80068b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068b8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80068bc:	bf00      	nop
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	ffff87fd 	.word	0xffff87fd
 80068cc:	ffff2ffe 	.word	0xffff2ffe
 80068d0:	fffec000 	.word	0xfffec000
 80068d4:	ffc0efef 	.word	0xffc0efef
 80068d8:	7fc0ffff 	.word	0x7fc0ffff

080068dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b0a4      	sub	sp, #144	; 0x90
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80068ea:	2300      	movs	r3, #0
 80068ec:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800690c:	2300      	movs	r3, #0
 800690e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800691c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006924:	2300      	movs	r3, #0
 8006926:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006928:	2300      	movs	r3, #0
 800692a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800692e:	2300      	movs	r3, #0
 8006930:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006934:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006938:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006940:	2300      	movs	r3, #0
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006944:	2301      	movs	r3, #1
 8006946:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800694a:	2300      	movs	r3, #0
 800694c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006950:	2300      	movs	r3, #0
 8006952:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006956:	2300      	movs	r3, #0
 8006958:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800695a:	2300      	movs	r3, #0
 800695c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800695e:	2300      	movs	r3, #0
 8006960:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006962:	2300      	movs	r3, #0
 8006964:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006974:	2320      	movs	r3, #32
 8006976:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006980:	2300      	movs	r3, #0
 8006982:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006986:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800698c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006990:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006992:	2300      	movs	r3, #0
 8006994:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006998:	2302      	movs	r3, #2
 800699a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800699e:	2300      	movs	r3, #0
 80069a0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80069b0:	2301      	movs	r3, #1
 80069b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80069b6:	2300      	movs	r3, #0
 80069b8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80069c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff fde6 	bl	8006598 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80069cc:	2301      	movs	r3, #1
 80069ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80069d0:	2301      	movs	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80069d8:	2300      	movs	r3, #0
 80069da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80069de:	2300      	movs	r3, #0
 80069e0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80069e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80069f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069f4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80069f6:	2300      	movs	r3, #0
 80069f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80069fc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006a02:	f107 0308 	add.w	r3, r7, #8
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff fee1 	bl	80067d0 <ETH_SetDMAConfig>
}
 8006a0e:	bf00      	nop
 8006a10:	3790      	adds	r7, #144	; 0x90
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	e01d      	b.n	8006a60 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68d9      	ldr	r1, [r3, #12]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	4413      	add	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	440b      	add	r3, r1
 8006a34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	3206      	adds	r2, #6
 8006a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d9de      	bls.n	8006a24 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a74:	461a      	mov	r2, r3
 8006a76:	2303      	movs	r3, #3
 8006a78:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a98:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006a9c:	bf00      	nop
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e023      	b.n	8006afe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6919      	ldr	r1, [r3, #16]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4613      	mov	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4413      	add	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	440b      	add	r3, r1
 8006ac6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2200      	movs	r2, #0
 8006ade:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006aec:	68b9      	ldr	r1, [r7, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	3212      	adds	r2, #18
 8006af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d9d8      	bls.n	8006ab6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b52:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
	...

08006b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b72:	4b89      	ldr	r3, [pc, #548]	; (8006d98 <HAL_GPIO_Init+0x234>)
 8006b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b76:	e194      	b.n	8006ea2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	fa01 f303 	lsl.w	r3, r1, r3
 8006b84:	4013      	ands	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8186 	beq.w	8006e9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 0303 	and.w	r3, r3, #3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d005      	beq.n	8006ba8 <HAL_GPIO_Init+0x44>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f003 0303 	and.w	r3, r3, #3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d130      	bne.n	8006c0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bde:	2201      	movs	r2, #1
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	43db      	mvns	r3, r3
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4013      	ands	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	091b      	lsrs	r3, r3, #4
 8006bf4:	f003 0201 	and.w	r2, r3, #1
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d017      	beq.n	8006c46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	2203      	movs	r2, #3
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	43db      	mvns	r3, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d123      	bne.n	8006c9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	08da      	lsrs	r2, r3, #3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3208      	adds	r2, #8
 8006c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	220f      	movs	r2, #15
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4013      	ands	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	fa02 f303 	lsl.w	r3, r2, r3
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	08da      	lsrs	r2, r3, #3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3208      	adds	r2, #8
 8006c94:	69b9      	ldr	r1, [r7, #24]
 8006c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8006caa:	43db      	mvns	r3, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f003 0203 	and.w	r2, r3, #3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 80e0 	beq.w	8006e9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cdc:	4b2f      	ldr	r3, [pc, #188]	; (8006d9c <HAL_GPIO_Init+0x238>)
 8006cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ce2:	4a2e      	ldr	r2, [pc, #184]	; (8006d9c <HAL_GPIO_Init+0x238>)
 8006ce4:	f043 0302 	orr.w	r3, r3, #2
 8006ce8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006cec:	4b2b      	ldr	r3, [pc, #172]	; (8006d9c <HAL_GPIO_Init+0x238>)
 8006cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cfa:	4a29      	ldr	r2, [pc, #164]	; (8006da0 <HAL_GPIO_Init+0x23c>)
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	089b      	lsrs	r3, r3, #2
 8006d00:	3302      	adds	r3, #2
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	220f      	movs	r2, #15
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	43db      	mvns	r3, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a20      	ldr	r2, [pc, #128]	; (8006da4 <HAL_GPIO_Init+0x240>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d052      	beq.n	8006dcc <HAL_GPIO_Init+0x268>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a1f      	ldr	r2, [pc, #124]	; (8006da8 <HAL_GPIO_Init+0x244>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d031      	beq.n	8006d92 <HAL_GPIO_Init+0x22e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a1e      	ldr	r2, [pc, #120]	; (8006dac <HAL_GPIO_Init+0x248>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d02b      	beq.n	8006d8e <HAL_GPIO_Init+0x22a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <HAL_GPIO_Init+0x24c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d025      	beq.n	8006d8a <HAL_GPIO_Init+0x226>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1c      	ldr	r2, [pc, #112]	; (8006db4 <HAL_GPIO_Init+0x250>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <HAL_GPIO_Init+0x222>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1b      	ldr	r2, [pc, #108]	; (8006db8 <HAL_GPIO_Init+0x254>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d019      	beq.n	8006d82 <HAL_GPIO_Init+0x21e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1a      	ldr	r2, [pc, #104]	; (8006dbc <HAL_GPIO_Init+0x258>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d013      	beq.n	8006d7e <HAL_GPIO_Init+0x21a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a19      	ldr	r2, [pc, #100]	; (8006dc0 <HAL_GPIO_Init+0x25c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00d      	beq.n	8006d7a <HAL_GPIO_Init+0x216>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a18      	ldr	r2, [pc, #96]	; (8006dc4 <HAL_GPIO_Init+0x260>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <HAL_GPIO_Init+0x212>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <HAL_GPIO_Init+0x264>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d101      	bne.n	8006d72 <HAL_GPIO_Init+0x20e>
 8006d6e:	2309      	movs	r3, #9
 8006d70:	e02d      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d72:	230a      	movs	r3, #10
 8006d74:	e02b      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d76:	2308      	movs	r3, #8
 8006d78:	e029      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d7a:	2307      	movs	r3, #7
 8006d7c:	e027      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d7e:	2306      	movs	r3, #6
 8006d80:	e025      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d82:	2305      	movs	r3, #5
 8006d84:	e023      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d86:	2304      	movs	r3, #4
 8006d88:	e021      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e01f      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e01d      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e01b      	b.n	8006dce <HAL_GPIO_Init+0x26a>
 8006d96:	bf00      	nop
 8006d98:	58000080 	.word	0x58000080
 8006d9c:	58024400 	.word	0x58024400
 8006da0:	58000400 	.word	0x58000400
 8006da4:	58020000 	.word	0x58020000
 8006da8:	58020400 	.word	0x58020400
 8006dac:	58020800 	.word	0x58020800
 8006db0:	58020c00 	.word	0x58020c00
 8006db4:	58021000 	.word	0x58021000
 8006db8:	58021400 	.word	0x58021400
 8006dbc:	58021800 	.word	0x58021800
 8006dc0:	58021c00 	.word	0x58021c00
 8006dc4:	58022000 	.word	0x58022000
 8006dc8:	58022400 	.word	0x58022400
 8006dcc:	2300      	movs	r3, #0
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	f002 0203 	and.w	r2, r2, #3
 8006dd4:	0092      	lsls	r2, r2, #2
 8006dd6:	4093      	lsls	r3, r2
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006dde:	4938      	ldr	r1, [pc, #224]	; (8006ec0 <HAL_GPIO_Init+0x35c>)
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	089b      	lsrs	r3, r3, #2
 8006de4:	3302      	adds	r3, #2
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	43db      	mvns	r3, r3
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	43db      	mvns	r3, r3
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	4013      	ands	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	43db      	mvns	r3, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f47f ae63 	bne.w	8006b78 <HAL_GPIO_Init+0x14>
  }
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	3724      	adds	r7, #36	; 0x24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	58000400 	.word	0x58000400

08006ec4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <HAL_HSEM_FastTake+0x2c>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	3320      	adds	r3, #32
 8006ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed6:	4a07      	ldr	r2, [pc, #28]	; (8006ef4 <HAL_HSEM_FastTake+0x30>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d101      	bne.n	8006ee0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	e000      	b.n	8006ee2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	58026400 	.word	0x58026400
 8006ef4:	80000300 	.word	0x80000300

08006ef8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006f02:	4906      	ldr	r1, [pc, #24]	; (8006f1c <HAL_HSEM_Release+0x24>)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	58026400 	.word	0x58026400

08006f20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f22:	b08f      	sub	sp, #60	; 0x3c
 8006f24:	af0a      	add	r7, sp, #40	; 0x28
 8006f26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e116      	b.n	8007160 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fa fae7 	bl	8001520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2203      	movs	r2, #3
 8006f56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d102      	bne.n	8006f6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f006 fda7 	bl	800dac4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	687e      	ldr	r6, [r7, #4]
 8006f7e:	466d      	mov	r5, sp
 8006f80:	f106 0410 	add.w	r4, r6, #16
 8006f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f90:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f94:	1d33      	adds	r3, r6, #4
 8006f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f98:	6838      	ldr	r0, [r7, #0]
 8006f9a:	f006 fd25 	bl	800d9e8 <USB_CoreInit>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0d7      	b.n	8007160 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f006 fd95 	bl	800dae6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	73fb      	strb	r3, [r7, #15]
 8006fc0:	e04a      	b.n	8007058 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006fc2:	7bfa      	ldrb	r2, [r7, #15]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	00db      	lsls	r3, r3, #3
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	333d      	adds	r3, #61	; 0x3d
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006fd6:	7bfa      	ldrb	r2, [r7, #15]
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	333c      	adds	r3, #60	; 0x3c
 8006fe6:	7bfa      	ldrb	r2, [r7, #15]
 8006fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006fea:	7bfa      	ldrb	r2, [r7, #15]
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	b298      	uxth	r0, r3
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	3356      	adds	r3, #86	; 0x56
 8006ffe:	4602      	mov	r2, r0
 8007000:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007002:	7bfa      	ldrb	r2, [r7, #15]
 8007004:	6879      	ldr	r1, [r7, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	440b      	add	r3, r1
 8007010:	3340      	adds	r3, #64	; 0x40
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007016:	7bfa      	ldrb	r2, [r7, #15]
 8007018:	6879      	ldr	r1, [r7, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	440b      	add	r3, r1
 8007024:	3344      	adds	r3, #68	; 0x44
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800702a:	7bfa      	ldrb	r2, [r7, #15]
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3348      	adds	r3, #72	; 0x48
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800703e:	7bfa      	ldrb	r2, [r7, #15]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	334c      	adds	r3, #76	; 0x4c
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	3301      	adds	r3, #1
 8007056:	73fb      	strb	r3, [r7, #15]
 8007058:	7bfa      	ldrb	r2, [r7, #15]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d3af      	bcc.n	8006fc2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
 8007066:	e044      	b.n	80070f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800707e:	7bfa      	ldrb	r2, [r7, #15]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007090:	7bfa      	ldrb	r2, [r7, #15]
 8007092:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007094:	7bfa      	ldrb	r2, [r7, #15]
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80070aa:	7bfa      	ldrb	r2, [r7, #15]
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80070c0:	7bfa      	ldrb	r2, [r7, #15]
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80070d6:	7bfa      	ldrb	r2, [r7, #15]
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	3301      	adds	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	7bfa      	ldrb	r2, [r7, #15]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3b5      	bcc.n	8007068 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	687e      	ldr	r6, [r7, #4]
 8007104:	466d      	mov	r5, sp
 8007106:	f106 0410 	add.w	r4, r6, #16
 800710a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800710c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800710e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007112:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007116:	e885 0003 	stmia.w	r5, {r0, r1}
 800711a:	1d33      	adds	r3, r6, #4
 800711c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f006 fd2e 	bl	800db80 <USB_DevInit>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e014      	b.n	8007160 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b01      	cmp	r3, #1
 800714c:	d102      	bne.n	8007154 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f80a 	bl	8007168 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4618      	mov	r0, r3
 800715a:	f006 feec 	bl	800df36 <USB_DevDisconnect>

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007168 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007196:	4b05      	ldr	r3, [pc, #20]	; (80071ac <HAL_PCDEx_ActivateLPM+0x44>)
 8007198:	4313      	orrs	r3, r2
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	10000003 	.word	0x10000003

080071b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80071b8:	4b29      	ldr	r3, [pc, #164]	; (8007260 <HAL_PWREx_ConfigSupply+0xb0>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	2b06      	cmp	r3, #6
 80071c2:	d00a      	beq.n	80071da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071c4:	4b26      	ldr	r3, [pc, #152]	; (8007260 <HAL_PWREx_ConfigSupply+0xb0>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d001      	beq.n	80071d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e040      	b.n	8007258 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e03e      	b.n	8007258 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80071da:	4b21      	ldr	r3, [pc, #132]	; (8007260 <HAL_PWREx_ConfigSupply+0xb0>)
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80071e2:	491f      	ldr	r1, [pc, #124]	; (8007260 <HAL_PWREx_ConfigSupply+0xb0>)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80071ea:	f7fa fb53 	bl	8001894 <HAL_GetTick>
 80071ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80071f0:	e009      	b.n	8007206 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80071f2:	f7fa fb4f 	bl	8001894 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007200:	d901      	bls.n	8007206 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e028      	b.n	8007258 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <HAL_PWREx_ConfigSupply+0xb0>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800720e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007212:	d1ee      	bne.n	80071f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b1e      	cmp	r3, #30
 8007218:	d008      	beq.n	800722c <HAL_PWREx_ConfigSupply+0x7c>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b2e      	cmp	r3, #46	; 0x2e
 800721e:	d005      	beq.n	800722c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b1d      	cmp	r3, #29
 8007224:	d002      	beq.n	800722c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b2d      	cmp	r3, #45	; 0x2d
 800722a:	d114      	bne.n	8007256 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800722c:	f7fa fb32 	bl	8001894 <HAL_GetTick>
 8007230:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007232:	e009      	b.n	8007248 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007234:	f7fa fb2e 	bl	8001894 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007242:	d901      	bls.n	8007248 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e007      	b.n	8007258 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007248:	4b05      	ldr	r3, [pc, #20]	; (8007260 <HAL_PWREx_ConfigSupply+0xb0>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007254:	d1ee      	bne.n	8007234 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	58024800 	.word	0x58024800

08007264 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007268:	4b05      	ldr	r3, [pc, #20]	; (8007280 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4a04      	ldr	r2, [pc, #16]	; (8007280 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800726e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007272:	60d3      	str	r3, [r2, #12]
}
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	58024800 	.word	0x58024800

08007284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	; 0x30
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d102      	bne.n	8007298 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f000 bc48 	b.w	8007b28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8088 	beq.w	80073b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a6:	4b99      	ldr	r3, [pc, #612]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072b0:	4b96      	ldr	r3, [pc, #600]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d007      	beq.n	80072cc <HAL_RCC_OscConfig+0x48>
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	2b18      	cmp	r3, #24
 80072c0:	d111      	bne.n	80072e6 <HAL_RCC_OscConfig+0x62>
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d10c      	bne.n	80072e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072cc:	4b8f      	ldr	r3, [pc, #572]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d06d      	beq.n	80073b4 <HAL_RCC_OscConfig+0x130>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d169      	bne.n	80073b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f000 bc21 	b.w	8007b28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ee:	d106      	bne.n	80072fe <HAL_RCC_OscConfig+0x7a>
 80072f0:	4b86      	ldr	r3, [pc, #536]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a85      	ldr	r2, [pc, #532]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80072f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	e02e      	b.n	800735c <HAL_RCC_OscConfig+0xd8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10c      	bne.n	8007320 <HAL_RCC_OscConfig+0x9c>
 8007306:	4b81      	ldr	r3, [pc, #516]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a80      	ldr	r2, [pc, #512]	; (800750c <HAL_RCC_OscConfig+0x288>)
 800730c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	4b7e      	ldr	r3, [pc, #504]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a7d      	ldr	r2, [pc, #500]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007318:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800731c:	6013      	str	r3, [r2, #0]
 800731e:	e01d      	b.n	800735c <HAL_RCC_OscConfig+0xd8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007328:	d10c      	bne.n	8007344 <HAL_RCC_OscConfig+0xc0>
 800732a:	4b78      	ldr	r3, [pc, #480]	; (800750c <HAL_RCC_OscConfig+0x288>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a77      	ldr	r2, [pc, #476]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	4b75      	ldr	r3, [pc, #468]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a74      	ldr	r2, [pc, #464]	; (800750c <HAL_RCC_OscConfig+0x288>)
 800733c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e00b      	b.n	800735c <HAL_RCC_OscConfig+0xd8>
 8007344:	4b71      	ldr	r3, [pc, #452]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a70      	ldr	r2, [pc, #448]	; (800750c <HAL_RCC_OscConfig+0x288>)
 800734a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	4b6e      	ldr	r3, [pc, #440]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a6d      	ldr	r2, [pc, #436]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800735a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d013      	beq.n	800738c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007364:	f7fa fa96 	bl	8001894 <HAL_GetTick>
 8007368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800736a:	e008      	b.n	800737e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800736c:	f7fa fa92 	bl	8001894 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	2b64      	cmp	r3, #100	; 0x64
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e3d4      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800737e:	4b63      	ldr	r3, [pc, #396]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0f0      	beq.n	800736c <HAL_RCC_OscConfig+0xe8>
 800738a:	e014      	b.n	80073b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738c:	f7fa fa82 	bl	8001894 <HAL_GetTick>
 8007390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007394:	f7fa fa7e 	bl	8001894 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b64      	cmp	r3, #100	; 0x64
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e3c0      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073a6:	4b59      	ldr	r3, [pc, #356]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x110>
 80073b2:	e000      	b.n	80073b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80ca 	beq.w	8007558 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073c4:	4b51      	ldr	r3, [pc, #324]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073ce:	4b4f      	ldr	r3, [pc, #316]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d007      	beq.n	80073ea <HAL_RCC_OscConfig+0x166>
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	2b18      	cmp	r3, #24
 80073de:	d156      	bne.n	800748e <HAL_RCC_OscConfig+0x20a>
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d151      	bne.n	800748e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80073ea:	4b48      	ldr	r3, [pc, #288]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_RCC_OscConfig+0x17e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e392      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007402:	4b42      	ldr	r3, [pc, #264]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 0219 	bic.w	r2, r3, #25
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	493f      	ldr	r1, [pc, #252]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007410:	4313      	orrs	r3, r2
 8007412:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007414:	f7fa fa3e 	bl	8001894 <HAL_GetTick>
 8007418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800741c:	f7fa fa3a 	bl	8001894 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e37c      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800742e:	4b37      	ldr	r3, [pc, #220]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800743a:	f7fa fa5b 	bl	80018f4 <HAL_GetREVID>
 800743e:	4603      	mov	r3, r0
 8007440:	f241 0203 	movw	r2, #4099	; 0x1003
 8007444:	4293      	cmp	r3, r2
 8007446:	d817      	bhi.n	8007478 <HAL_RCC_OscConfig+0x1f4>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	d108      	bne.n	8007462 <HAL_RCC_OscConfig+0x1de>
 8007450:	4b2e      	ldr	r3, [pc, #184]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007458:	4a2c      	ldr	r2, [pc, #176]	; (800750c <HAL_RCC_OscConfig+0x288>)
 800745a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800745e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007460:	e07a      	b.n	8007558 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007462:	4b2a      	ldr	r3, [pc, #168]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	031b      	lsls	r3, r3, #12
 8007470:	4926      	ldr	r1, [pc, #152]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007472:	4313      	orrs	r3, r2
 8007474:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007476:	e06f      	b.n	8007558 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007478:	4b24      	ldr	r3, [pc, #144]	; (800750c <HAL_RCC_OscConfig+0x288>)
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	061b      	lsls	r3, r3, #24
 8007486:	4921      	ldr	r1, [pc, #132]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007488:	4313      	orrs	r3, r2
 800748a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800748c:	e064      	b.n	8007558 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d047      	beq.n	8007526 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007496:	4b1d      	ldr	r3, [pc, #116]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f023 0219 	bic.w	r2, r3, #25
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	491a      	ldr	r1, [pc, #104]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fa f9f4 	bl	8001894 <HAL_GetTick>
 80074ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074b0:	f7fa f9f0 	bl	8001894 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e332      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0304 	and.w	r3, r3, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0f0      	beq.n	80074b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ce:	f7fa fa11 	bl	80018f4 <HAL_GetREVID>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80074d8:	4293      	cmp	r3, r2
 80074da:	d819      	bhi.n	8007510 <HAL_RCC_OscConfig+0x28c>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b40      	cmp	r3, #64	; 0x40
 80074e2:	d108      	bne.n	80074f6 <HAL_RCC_OscConfig+0x272>
 80074e4:	4b09      	ldr	r3, [pc, #36]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80074ec:	4a07      	ldr	r2, [pc, #28]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074f2:	6053      	str	r3, [r2, #4]
 80074f4:	e030      	b.n	8007558 <HAL_RCC_OscConfig+0x2d4>
 80074f6:	4b05      	ldr	r3, [pc, #20]	; (800750c <HAL_RCC_OscConfig+0x288>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	031b      	lsls	r3, r3, #12
 8007504:	4901      	ldr	r1, [pc, #4]	; (800750c <HAL_RCC_OscConfig+0x288>)
 8007506:	4313      	orrs	r3, r2
 8007508:	604b      	str	r3, [r1, #4]
 800750a:	e025      	b.n	8007558 <HAL_RCC_OscConfig+0x2d4>
 800750c:	58024400 	.word	0x58024400
 8007510:	4b9a      	ldr	r3, [pc, #616]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	061b      	lsls	r3, r3, #24
 800751e:	4997      	ldr	r1, [pc, #604]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007520:	4313      	orrs	r3, r2
 8007522:	604b      	str	r3, [r1, #4]
 8007524:	e018      	b.n	8007558 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007526:	4b95      	ldr	r3, [pc, #596]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a94      	ldr	r2, [pc, #592]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800752c:	f023 0301 	bic.w	r3, r3, #1
 8007530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007532:	f7fa f9af 	bl	8001894 <HAL_GetTick>
 8007536:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007538:	e008      	b.n	800754c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800753a:	f7fa f9ab 	bl	8001894 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e2ed      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800754c:	4b8b      	ldr	r3, [pc, #556]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80a9 	beq.w	80076b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007566:	4b85      	ldr	r3, [pc, #532]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800756e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007570:	4b82      	ldr	r3, [pc, #520]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b08      	cmp	r3, #8
 800757a:	d007      	beq.n	800758c <HAL_RCC_OscConfig+0x308>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b18      	cmp	r3, #24
 8007580:	d13a      	bne.n	80075f8 <HAL_RCC_OscConfig+0x374>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d135      	bne.n	80075f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800758c:	4b7b      	ldr	r3, [pc, #492]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d005      	beq.n	80075a4 <HAL_RCC_OscConfig+0x320>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d001      	beq.n	80075a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e2c1      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075a4:	f7fa f9a6 	bl	80018f4 <HAL_GetREVID>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d817      	bhi.n	80075e2 <HAL_RCC_OscConfig+0x35e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d108      	bne.n	80075cc <HAL_RCC_OscConfig+0x348>
 80075ba:	4b70      	ldr	r3, [pc, #448]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80075c2:	4a6e      	ldr	r2, [pc, #440]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80075c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075ca:	e075      	b.n	80076b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075cc:	4b6b      	ldr	r3, [pc, #428]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	069b      	lsls	r3, r3, #26
 80075da:	4968      	ldr	r1, [pc, #416]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075e0:	e06a      	b.n	80076b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075e2:	4b66      	ldr	r3, [pc, #408]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	061b      	lsls	r3, r3, #24
 80075f0:	4962      	ldr	r1, [pc, #392]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075f6:	e05f      	b.n	80076b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d042      	beq.n	8007686 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007600:	4b5e      	ldr	r3, [pc, #376]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a5d      	ldr	r2, [pc, #372]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fa f942 	bl	8001894 <HAL_GetTick>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007614:	f7fa f93e 	bl	8001894 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e280      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007626:	4b55      	ldr	r3, [pc, #340]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007632:	f7fa f95f 	bl	80018f4 <HAL_GetREVID>
 8007636:	4603      	mov	r3, r0
 8007638:	f241 0203 	movw	r2, #4099	; 0x1003
 800763c:	4293      	cmp	r3, r2
 800763e:	d817      	bhi.n	8007670 <HAL_RCC_OscConfig+0x3ec>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	2b20      	cmp	r3, #32
 8007646:	d108      	bne.n	800765a <HAL_RCC_OscConfig+0x3d6>
 8007648:	4b4c      	ldr	r3, [pc, #304]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007650:	4a4a      	ldr	r2, [pc, #296]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007656:	6053      	str	r3, [r2, #4]
 8007658:	e02e      	b.n	80076b8 <HAL_RCC_OscConfig+0x434>
 800765a:	4b48      	ldr	r3, [pc, #288]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	069b      	lsls	r3, r3, #26
 8007668:	4944      	ldr	r1, [pc, #272]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800766a:	4313      	orrs	r3, r2
 800766c:	604b      	str	r3, [r1, #4]
 800766e:	e023      	b.n	80076b8 <HAL_RCC_OscConfig+0x434>
 8007670:	4b42      	ldr	r3, [pc, #264]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	061b      	lsls	r3, r3, #24
 800767e:	493f      	ldr	r1, [pc, #252]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007680:	4313      	orrs	r3, r2
 8007682:	60cb      	str	r3, [r1, #12]
 8007684:	e018      	b.n	80076b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007686:	4b3d      	ldr	r3, [pc, #244]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3c      	ldr	r2, [pc, #240]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800768c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007692:	f7fa f8ff 	bl	8001894 <HAL_GetTick>
 8007696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007698:	e008      	b.n	80076ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800769a:	f7fa f8fb 	bl	8001894 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e23d      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80076ac:	4b33      	ldr	r3, [pc, #204]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f0      	bne.n	800769a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d036      	beq.n	8007732 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d019      	beq.n	8007700 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076cc:	4b2b      	ldr	r3, [pc, #172]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80076ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d0:	4a2a      	ldr	r2, [pc, #168]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d8:	f7fa f8dc 	bl	8001894 <HAL_GetTick>
 80076dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e0:	f7fa f8d8 	bl	8001894 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e21a      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076f2:	4b22      	ldr	r3, [pc, #136]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 80076f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x45c>
 80076fe:	e018      	b.n	8007732 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007700:	4b1e      	ldr	r3, [pc, #120]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007704:	4a1d      	ldr	r2, [pc, #116]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007706:	f023 0301 	bic.w	r3, r3, #1
 800770a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800770c:	f7fa f8c2 	bl	8001894 <HAL_GetTick>
 8007710:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007714:	f7fa f8be 	bl	8001894 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e200      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007726:	4b15      	ldr	r3, [pc, #84]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b00      	cmp	r3, #0
 800773c:	d039      	beq.n	80077b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d01c      	beq.n	8007780 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007746:	4b0d      	ldr	r3, [pc, #52]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a0c      	ldr	r2, [pc, #48]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800774c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007750:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007752:	f7fa f89f 	bl	8001894 <HAL_GetTick>
 8007756:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800775a:	f7fa f89b 	bl	8001894 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e1dd      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800776c:	4b03      	ldr	r3, [pc, #12]	; (800777c <HAL_RCC_OscConfig+0x4f8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <HAL_RCC_OscConfig+0x4d6>
 8007778:	e01b      	b.n	80077b2 <HAL_RCC_OscConfig+0x52e>
 800777a:	bf00      	nop
 800777c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007780:	4b9b      	ldr	r3, [pc, #620]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a9a      	ldr	r2, [pc, #616]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800778c:	f7fa f882 	bl	8001894 <HAL_GetTick>
 8007790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007792:	e008      	b.n	80077a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007794:	f7fa f87e 	bl	8001894 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d901      	bls.n	80077a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e1c0      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80077a6:	4b92      	ldr	r3, [pc, #584]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1f0      	bne.n	8007794 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8081 	beq.w	80078c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077c0:	4b8c      	ldr	r3, [pc, #560]	; (80079f4 <HAL_RCC_OscConfig+0x770>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a8b      	ldr	r2, [pc, #556]	; (80079f4 <HAL_RCC_OscConfig+0x770>)
 80077c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077cc:	f7fa f862 	bl	8001894 <HAL_GetTick>
 80077d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d4:	f7fa f85e 	bl	8001894 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b64      	cmp	r3, #100	; 0x64
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e1a0      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077e6:	4b83      	ldr	r3, [pc, #524]	; (80079f4 <HAL_RCC_OscConfig+0x770>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f0      	beq.n	80077d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d106      	bne.n	8007808 <HAL_RCC_OscConfig+0x584>
 80077fa:	4b7d      	ldr	r3, [pc, #500]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80077fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fe:	4a7c      	ldr	r2, [pc, #496]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	6713      	str	r3, [r2, #112]	; 0x70
 8007806:	e02d      	b.n	8007864 <HAL_RCC_OscConfig+0x5e0>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10c      	bne.n	800782a <HAL_RCC_OscConfig+0x5a6>
 8007810:	4b77      	ldr	r3, [pc, #476]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007814:	4a76      	ldr	r2, [pc, #472]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	6713      	str	r3, [r2, #112]	; 0x70
 800781c:	4b74      	ldr	r3, [pc, #464]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800781e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007820:	4a73      	ldr	r2, [pc, #460]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007822:	f023 0304 	bic.w	r3, r3, #4
 8007826:	6713      	str	r3, [r2, #112]	; 0x70
 8007828:	e01c      	b.n	8007864 <HAL_RCC_OscConfig+0x5e0>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	2b05      	cmp	r3, #5
 8007830:	d10c      	bne.n	800784c <HAL_RCC_OscConfig+0x5c8>
 8007832:	4b6f      	ldr	r3, [pc, #444]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007836:	4a6e      	ldr	r2, [pc, #440]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007838:	f043 0304 	orr.w	r3, r3, #4
 800783c:	6713      	str	r3, [r2, #112]	; 0x70
 800783e:	4b6c      	ldr	r3, [pc, #432]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007842:	4a6b      	ldr	r2, [pc, #428]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007844:	f043 0301 	orr.w	r3, r3, #1
 8007848:	6713      	str	r3, [r2, #112]	; 0x70
 800784a:	e00b      	b.n	8007864 <HAL_RCC_OscConfig+0x5e0>
 800784c:	4b68      	ldr	r3, [pc, #416]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800784e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007850:	4a67      	ldr	r2, [pc, #412]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	6713      	str	r3, [r2, #112]	; 0x70
 8007858:	4b65      	ldr	r3, [pc, #404]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800785a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785c:	4a64      	ldr	r2, [pc, #400]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800785e:	f023 0304 	bic.w	r3, r3, #4
 8007862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d015      	beq.n	8007898 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800786c:	f7fa f812 	bl	8001894 <HAL_GetTick>
 8007870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007872:	e00a      	b.n	800788a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007874:	f7fa f80e 	bl	8001894 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007882:	4293      	cmp	r3, r2
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e14e      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800788a:	4b59      	ldr	r3, [pc, #356]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0ee      	beq.n	8007874 <HAL_RCC_OscConfig+0x5f0>
 8007896:	e014      	b.n	80078c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007898:	f7f9 fffc 	bl	8001894 <HAL_GetTick>
 800789c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800789e:	e00a      	b.n	80078b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a0:	f7f9 fff8 	bl	8001894 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e138      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078b6:	4b4e      	ldr	r3, [pc, #312]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1ee      	bne.n	80078a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 812d 	beq.w	8007b26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80078cc:	4b48      	ldr	r3, [pc, #288]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078d4:	2b18      	cmp	r3, #24
 80078d6:	f000 80bd 	beq.w	8007a54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	2b02      	cmp	r3, #2
 80078e0:	f040 809e 	bne.w	8007a20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a41      	ldr	r2, [pc, #260]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80078ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f0:	f7f9 ffd0 	bl	8001894 <HAL_GetTick>
 80078f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078f8:	f7f9 ffcc 	bl	8001894 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e10e      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800790a:	4b39      	ldr	r3, [pc, #228]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f0      	bne.n	80078f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007916:	4b36      	ldr	r3, [pc, #216]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800791a:	4b37      	ldr	r3, [pc, #220]	; (80079f8 <HAL_RCC_OscConfig+0x774>)
 800791c:	4013      	ands	r3, r2
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007926:	0112      	lsls	r2, r2, #4
 8007928:	430a      	orrs	r2, r1
 800792a:	4931      	ldr	r1, [pc, #196]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800792c:	4313      	orrs	r3, r2
 800792e:	628b      	str	r3, [r1, #40]	; 0x28
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	3b01      	subs	r3, #1
 8007936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793e:	3b01      	subs	r3, #1
 8007940:	025b      	lsls	r3, r3, #9
 8007942:	b29b      	uxth	r3, r3
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	3b01      	subs	r3, #1
 800794c:	041b      	lsls	r3, r3, #16
 800794e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007958:	3b01      	subs	r3, #1
 800795a:	061b      	lsls	r3, r3, #24
 800795c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007960:	4923      	ldr	r1, [pc, #140]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007966:	4b22      	ldr	r3, [pc, #136]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	4a21      	ldr	r2, [pc, #132]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007976:	4b21      	ldr	r3, [pc, #132]	; (80079fc <HAL_RCC_OscConfig+0x778>)
 8007978:	4013      	ands	r3, r2
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800797e:	00d2      	lsls	r2, r2, #3
 8007980:	491b      	ldr	r1, [pc, #108]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007982:	4313      	orrs	r3, r2
 8007984:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007986:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	f023 020c 	bic.w	r2, r3, #12
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	4917      	ldr	r1, [pc, #92]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	f023 0202 	bic.w	r2, r3, #2
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a4:	4912      	ldr	r1, [pc, #72]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	4a10      	ldr	r2, [pc, #64]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	4a0d      	ldr	r2, [pc, #52]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80079ce:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	4a07      	ldr	r2, [pc, #28]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079d4:	f043 0301 	orr.w	r3, r3, #1
 80079d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <HAL_RCC_OscConfig+0x76c>)
 80079e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e6:	f7f9 ff55 	bl	8001894 <HAL_GetTick>
 80079ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079ec:	e011      	b.n	8007a12 <HAL_RCC_OscConfig+0x78e>
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	58024800 	.word	0x58024800
 80079f8:	fffffc0c 	.word	0xfffffc0c
 80079fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a00:	f7f9 ff48 	bl	8001894 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e08a      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a12:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0f0      	beq.n	8007a00 <HAL_RCC_OscConfig+0x77c>
 8007a1e:	e082      	b.n	8007b26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a20:	4b43      	ldr	r3, [pc, #268]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a42      	ldr	r2, [pc, #264]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2c:	f7f9 ff32 	bl	8001894 <HAL_GetTick>
 8007a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a34:	f7f9 ff2e 	bl	8001894 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e070      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a46:	4b3a      	ldr	r3, [pc, #232]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0x7b0>
 8007a52:	e068      	b.n	8007b26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a54:	4b36      	ldr	r3, [pc, #216]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a5a:	4b35      	ldr	r3, [pc, #212]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d031      	beq.n	8007acc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f003 0203 	and.w	r2, r3, #3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d12a      	bne.n	8007acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	091b      	lsrs	r3, r3, #4
 8007a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d122      	bne.n	8007acc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d11a      	bne.n	8007acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	0a5b      	lsrs	r3, r3, #9
 8007a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d111      	bne.n	8007acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	0c1b      	lsrs	r3, r3, #16
 8007aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d108      	bne.n	8007acc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	0e1b      	lsrs	r3, r3, #24
 8007abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d001      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e02b      	b.n	8007b28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad4:	08db      	lsrs	r3, r3, #3
 8007ad6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ada:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d01f      	beq.n	8007b26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	4a11      	ldr	r2, [pc, #68]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007af2:	f7f9 fecf 	bl	8001894 <HAL_GetTick>
 8007af6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007af8:	bf00      	nop
 8007afa:	f7f9 fecb 	bl	8001894 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d0f9      	beq.n	8007afa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007b06:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b0a:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <HAL_RCC_OscConfig+0x8b0>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007b12:	00d2      	lsls	r2, r2, #3
 8007b14:	4906      	ldr	r1, [pc, #24]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	4a04      	ldr	r2, [pc, #16]	; (8007b30 <HAL_RCC_OscConfig+0x8ac>)
 8007b20:	f043 0301 	orr.w	r3, r3, #1
 8007b24:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3730      	adds	r7, #48	; 0x30
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	58024400 	.word	0x58024400
 8007b34:	ffff0007 	.word	0xffff0007

08007b38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e19c      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b4c:	4b8a      	ldr	r3, [pc, #552]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 030f 	and.w	r3, r3, #15
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d910      	bls.n	8007b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5a:	4b87      	ldr	r3, [pc, #540]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f023 020f 	bic.w	r2, r3, #15
 8007b62:	4985      	ldr	r1, [pc, #532]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6a:	4b83      	ldr	r3, [pc, #524]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e184      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d010      	beq.n	8007baa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	4b7b      	ldr	r3, [pc, #492]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d908      	bls.n	8007baa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b98:	4b78      	ldr	r3, [pc, #480]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	4975      	ldr	r1, [pc, #468]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d010      	beq.n	8007bd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	695a      	ldr	r2, [r3, #20]
 8007bba:	4b70      	ldr	r3, [pc, #448]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d908      	bls.n	8007bd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007bc6:	4b6d      	ldr	r3, [pc, #436]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	496a      	ldr	r1, [pc, #424]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d010      	beq.n	8007c06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699a      	ldr	r2, [r3, #24]
 8007be8:	4b64      	ldr	r3, [pc, #400]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007bea:	69db      	ldr	r3, [r3, #28]
 8007bec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d908      	bls.n	8007c06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007bf4:	4b61      	ldr	r3, [pc, #388]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	495e      	ldr	r1, [pc, #376]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0320 	and.w	r3, r3, #32
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d010      	beq.n	8007c34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69da      	ldr	r2, [r3, #28]
 8007c16:	4b59      	ldr	r3, [pc, #356]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d908      	bls.n	8007c34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007c22:	4b56      	ldr	r3, [pc, #344]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	4953      	ldr	r1, [pc, #332]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d010      	beq.n	8007c62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	4b4d      	ldr	r3, [pc, #308]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d908      	bls.n	8007c62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c50:	4b4a      	ldr	r3, [pc, #296]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f023 020f 	bic.w	r2, r3, #15
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	4947      	ldr	r1, [pc, #284]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d055      	beq.n	8007d1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c6e:	4b43      	ldr	r3, [pc, #268]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	4940      	ldr	r1, [pc, #256]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d107      	bne.n	8007c98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c88:	4b3c      	ldr	r3, [pc, #240]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d121      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e0f6      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d107      	bne.n	8007cb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ca0:	4b36      	ldr	r3, [pc, #216]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d115      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e0ea      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d107      	bne.n	8007cc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cb8:	4b30      	ldr	r3, [pc, #192]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d109      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e0de      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cc8:	4b2c      	ldr	r3, [pc, #176]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0d6      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007cd8:	4b28      	ldr	r3, [pc, #160]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	f023 0207 	bic.w	r2, r3, #7
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4925      	ldr	r1, [pc, #148]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cea:	f7f9 fdd3 	bl	8001894 <HAL_GetTick>
 8007cee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cf0:	e00a      	b.n	8007d08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cf2:	f7f9 fdcf 	bl	8001894 <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e0be      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d1eb      	bne.n	8007cf2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d010      	beq.n	8007d48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d208      	bcs.n	8007d48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d36:	4b11      	ldr	r3, [pc, #68]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	f023 020f 	bic.w	r2, r3, #15
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	490e      	ldr	r1, [pc, #56]	; (8007d7c <HAL_RCC_ClockConfig+0x244>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 030f 	and.w	r3, r3, #15
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d214      	bcs.n	8007d80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d56:	4b08      	ldr	r3, [pc, #32]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f023 020f 	bic.w	r2, r3, #15
 8007d5e:	4906      	ldr	r1, [pc, #24]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d66:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <HAL_RCC_ClockConfig+0x240>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d005      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e086      	b.n	8007e86 <HAL_RCC_ClockConfig+0x34e>
 8007d78:	52002000 	.word	0x52002000
 8007d7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d010      	beq.n	8007dae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	4b3f      	ldr	r3, [pc, #252]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d208      	bcs.n	8007dae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d9c:	4b3c      	ldr	r3, [pc, #240]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	4939      	ldr	r1, [pc, #228]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d010      	beq.n	8007ddc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695a      	ldr	r2, [r3, #20]
 8007dbe:	4b34      	ldr	r3, [pc, #208]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d208      	bcs.n	8007ddc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007dca:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	492e      	ldr	r1, [pc, #184]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d010      	beq.n	8007e0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699a      	ldr	r2, [r3, #24]
 8007dec:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d208      	bcs.n	8007e0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007df8:	4b25      	ldr	r3, [pc, #148]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	4922      	ldr	r1, [pc, #136]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007e06:	4313      	orrs	r3, r2
 8007e08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0320 	and.w	r3, r3, #32
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d010      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	69da      	ldr	r2, [r3, #28]
 8007e1a:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d208      	bcs.n	8007e38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e26:	4b1a      	ldr	r3, [pc, #104]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	4917      	ldr	r1, [pc, #92]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007e38:	f000 f834 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	4b14      	ldr	r3, [pc, #80]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	0a1b      	lsrs	r3, r3, #8
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	4912      	ldr	r1, [pc, #72]	; (8007e94 <HAL_RCC_ClockConfig+0x35c>)
 8007e4a:	5ccb      	ldrb	r3, [r1, r3]
 8007e4c:	f003 031f 	and.w	r3, r3, #31
 8007e50:	fa22 f303 	lsr.w	r3, r2, r3
 8007e54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <HAL_RCC_ClockConfig+0x358>)
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	f003 030f 	and.w	r3, r3, #15
 8007e5e:	4a0d      	ldr	r2, [pc, #52]	; (8007e94 <HAL_RCC_ClockConfig+0x35c>)
 8007e60:	5cd3      	ldrb	r3, [r2, r3]
 8007e62:	f003 031f 	and.w	r3, r3, #31
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6c:	4a0a      	ldr	r2, [pc, #40]	; (8007e98 <HAL_RCC_ClockConfig+0x360>)
 8007e6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <HAL_RCC_ClockConfig+0x364>)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_RCC_ClockConfig+0x368>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7f9 fcc0 	bl	8001800 <HAL_InitTick>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	58024400 	.word	0x58024400
 8007e94:	0800e9c4 	.word	0x0800e9c4
 8007e98:	24000004 	.word	0x24000004
 8007e9c:	24000000 	.word	0x24000000
 8007ea0:	24000008 	.word	0x24000008

08007ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	; 0x24
 8007ea8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007eaa:	4bb3      	ldr	r3, [pc, #716]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eb2:	2b18      	cmp	r3, #24
 8007eb4:	f200 8155 	bhi.w	8008162 <HAL_RCC_GetSysClockFreq+0x2be>
 8007eb8:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007f25 	.word	0x08007f25
 8007ec4:	08008163 	.word	0x08008163
 8007ec8:	08008163 	.word	0x08008163
 8007ecc:	08008163 	.word	0x08008163
 8007ed0:	08008163 	.word	0x08008163
 8007ed4:	08008163 	.word	0x08008163
 8007ed8:	08008163 	.word	0x08008163
 8007edc:	08008163 	.word	0x08008163
 8007ee0:	08007f4b 	.word	0x08007f4b
 8007ee4:	08008163 	.word	0x08008163
 8007ee8:	08008163 	.word	0x08008163
 8007eec:	08008163 	.word	0x08008163
 8007ef0:	08008163 	.word	0x08008163
 8007ef4:	08008163 	.word	0x08008163
 8007ef8:	08008163 	.word	0x08008163
 8007efc:	08008163 	.word	0x08008163
 8007f00:	08007f51 	.word	0x08007f51
 8007f04:	08008163 	.word	0x08008163
 8007f08:	08008163 	.word	0x08008163
 8007f0c:	08008163 	.word	0x08008163
 8007f10:	08008163 	.word	0x08008163
 8007f14:	08008163 	.word	0x08008163
 8007f18:	08008163 	.word	0x08008163
 8007f1c:	08008163 	.word	0x08008163
 8007f20:	08007f57 	.word	0x08007f57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f24:	4b94      	ldr	r3, [pc, #592]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f30:	4b91      	ldr	r3, [pc, #580]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	08db      	lsrs	r3, r3, #3
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	4a90      	ldr	r2, [pc, #576]	; (800817c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007f42:	e111      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007f44:	4b8d      	ldr	r3, [pc, #564]	; (800817c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f46:	61bb      	str	r3, [r7, #24]
      break;
 8007f48:	e10e      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007f4a:	4b8d      	ldr	r3, [pc, #564]	; (8008180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f4c:	61bb      	str	r3, [r7, #24]
      break;
 8007f4e:	e10b      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007f50:	4b8c      	ldr	r3, [pc, #560]	; (8008184 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007f52:	61bb      	str	r3, [r7, #24]
      break;
 8007f54:	e108      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f56:	4b88      	ldr	r3, [pc, #544]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007f60:	4b85      	ldr	r3, [pc, #532]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f64:	091b      	lsrs	r3, r3, #4
 8007f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f6c:	4b82      	ldr	r3, [pc, #520]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007f76:	4b80      	ldr	r3, [pc, #512]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f7a:	08db      	lsrs	r3, r3, #3
 8007f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	ee07 3a90 	vmov	s15, r3
 8007f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 80e1 	beq.w	800815c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	f000 8083 	beq.w	80080a8 <HAL_RCC_GetSysClockFreq+0x204>
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	f200 80a1 	bhi.w	80080ec <HAL_RCC_GetSysClockFreq+0x248>
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_RCC_GetSysClockFreq+0x114>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d056      	beq.n	8008064 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007fb6:	e099      	b.n	80080ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007fb8:	4b6f      	ldr	r3, [pc, #444]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d02d      	beq.n	8008020 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007fc4:	4b6c      	ldr	r3, [pc, #432]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	08db      	lsrs	r3, r3, #3
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	4a6b      	ldr	r2, [pc, #428]	; (800817c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	ee07 3a90 	vmov	s15, r3
 8007fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	ee07 3a90 	vmov	s15, r3
 8007fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fee:	4b62      	ldr	r3, [pc, #392]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008002:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800801e:	e087      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800818c <HAL_RCC_GetSysClockFreq+0x2e8>
 800802e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008032:	4b51      	ldr	r3, [pc, #324]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008042:	ed97 6a02 	vldr	s12, [r7, #8]
 8008046:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800804a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008062:	e065      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008190 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008076:	4b40      	ldr	r3, [pc, #256]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008086:	ed97 6a02 	vldr	s12, [r7, #8]
 800808a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800808e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080a6:	e043      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008194 <HAL_RCC_GetSysClockFreq+0x2f0>
 80080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ba:	4b2f      	ldr	r3, [pc, #188]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80080ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008188 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80080ea:	e021      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008190 <HAL_RCC_GetSysClockFreq+0x2ec>
 80080fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080fe:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008106:	ee07 3a90 	vmov	s15, r3
 800810a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800810e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008112:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800811e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800812e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008130:	4b11      	ldr	r3, [pc, #68]	; (8008178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	0a5b      	lsrs	r3, r3, #9
 8008136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800813a:	3301      	adds	r3, #1
 800813c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	ee07 3a90 	vmov	s15, r3
 8008144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008148:	edd7 6a07 	vldr	s13, [r7, #28]
 800814c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008154:	ee17 3a90 	vmov	r3, s15
 8008158:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800815a:	e005      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	61bb      	str	r3, [r7, #24]
      break;
 8008160:	e002      	b.n	8008168 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008164:	61bb      	str	r3, [r7, #24]
      break;
 8008166:	bf00      	nop
  }

  return sysclockfreq;
 8008168:	69bb      	ldr	r3, [r7, #24]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3724      	adds	r7, #36	; 0x24
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	58024400 	.word	0x58024400
 800817c:	03d09000 	.word	0x03d09000
 8008180:	003d0900 	.word	0x003d0900
 8008184:	007a1200 	.word	0x007a1200
 8008188:	46000000 	.word	0x46000000
 800818c:	4c742400 	.word	0x4c742400
 8008190:	4a742400 	.word	0x4a742400
 8008194:	4af42400 	.word	0x4af42400

08008198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800819e:	f7ff fe81 	bl	8007ea4 <HAL_RCC_GetSysClockFreq>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	0a1b      	lsrs	r3, r3, #8
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	490f      	ldr	r1, [pc, #60]	; (80081ec <HAL_RCC_GetHCLKFreq+0x54>)
 80081b0:	5ccb      	ldrb	r3, [r1, r3]
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	fa22 f303 	lsr.w	r3, r2, r3
 80081ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f003 030f 	and.w	r3, r3, #15
 80081c4:	4a09      	ldr	r2, [pc, #36]	; (80081ec <HAL_RCC_GetHCLKFreq+0x54>)
 80081c6:	5cd3      	ldrb	r3, [r2, r3]
 80081c8:	f003 031f 	and.w	r3, r3, #31
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	fa22 f303 	lsr.w	r3, r2, r3
 80081d2:	4a07      	ldr	r2, [pc, #28]	; (80081f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80081d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081d6:	4a07      	ldr	r2, [pc, #28]	; (80081f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80081dc:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80081de:	681b      	ldr	r3, [r3, #0]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	58024400 	.word	0x58024400
 80081ec:	0800e9c4 	.word	0x0800e9c4
 80081f0:	24000004 	.word	0x24000004
 80081f4:	24000000 	.word	0x24000000

080081f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80081fc:	f7ff ffcc 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 8008200:	4602      	mov	r2, r0
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	091b      	lsrs	r3, r3, #4
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	4904      	ldr	r1, [pc, #16]	; (8008220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800820e:	5ccb      	ldrb	r3, [r1, r3]
 8008210:	f003 031f 	and.w	r3, r3, #31
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008218:	4618      	mov	r0, r3
 800821a:	bd80      	pop	{r7, pc}
 800821c:	58024400 	.word	0x58024400
 8008220:	0800e9c4 	.word	0x0800e9c4

08008224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008228:	f7ff ffb6 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 800822c:	4602      	mov	r2, r0
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	0a1b      	lsrs	r3, r3, #8
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	4904      	ldr	r1, [pc, #16]	; (800824c <HAL_RCC_GetPCLK2Freq+0x28>)
 800823a:	5ccb      	ldrb	r3, [r1, r3]
 800823c:	f003 031f 	and.w	r3, r3, #31
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008244:	4618      	mov	r0, r3
 8008246:	bd80      	pop	{r7, pc}
 8008248:	58024400 	.word	0x58024400
 800824c:	0800e9c4 	.word	0x0800e9c4

08008250 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008254:	b0ca      	sub	sp, #296	; 0x128
 8008256:	af00      	add	r7, sp, #0
 8008258:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800825c:	2300      	movs	r3, #0
 800825e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008262:	2300      	movs	r3, #0
 8008264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800826c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008270:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008274:	2500      	movs	r5, #0
 8008276:	ea54 0305 	orrs.w	r3, r4, r5
 800827a:	d049      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800827c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008282:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008286:	d02f      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800828c:	d828      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800828e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008292:	d01a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008298:	d822      	bhi.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800829e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082a2:	d007      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80082a4:	e01c      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a6:	4bb8      	ldr	r3, [pc, #736]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	4ab7      	ldr	r2, [pc, #732]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082b2:	e01a      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b8:	3308      	adds	r3, #8
 80082ba:	2102      	movs	r1, #2
 80082bc:	4618      	mov	r0, r3
 80082be:	f002 fb61 	bl	800a984 <RCCEx_PLL2_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082c8:	e00f      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ce:	3328      	adds	r3, #40	; 0x28
 80082d0:	2102      	movs	r1, #2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f002 fc08 	bl	800aae8 <RCCEx_PLL3_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80082de:	e004      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082e6:	e000      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80082e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80082f2:	4ba5      	ldr	r3, [pc, #660]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80082fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008300:	4aa1      	ldr	r2, [pc, #644]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008302:	430b      	orrs	r3, r1
 8008304:	6513      	str	r3, [r2, #80]	; 0x50
 8008306:	e003      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800830c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800831c:	f04f 0900 	mov.w	r9, #0
 8008320:	ea58 0309 	orrs.w	r3, r8, r9
 8008324:	d047      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800832a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832c:	2b04      	cmp	r3, #4
 800832e:	d82a      	bhi.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008330:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	0800834d 	.word	0x0800834d
 800833c:	0800835b 	.word	0x0800835b
 8008340:	08008371 	.word	0x08008371
 8008344:	0800838f 	.word	0x0800838f
 8008348:	0800838f 	.word	0x0800838f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800834c:	4b8e      	ldr	r3, [pc, #568]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a8d      	ldr	r2, [pc, #564]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008358:	e01a      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800835e:	3308      	adds	r3, #8
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f002 fb0e 	bl	800a984 <RCCEx_PLL2_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800836e:	e00f      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008374:	3328      	adds	r3, #40	; 0x28
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f002 fbb5 	bl	800aae8 <RCCEx_PLL3_Config>
 800837e:	4603      	mov	r3, r0
 8008380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008384:	e004      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800838c:	e000      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800838e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008398:	4b7b      	ldr	r3, [pc, #492]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800839a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839c:	f023 0107 	bic.w	r1, r3, #7
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	4a78      	ldr	r2, [pc, #480]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083a8:	430b      	orrs	r3, r1
 80083aa:	6513      	str	r3, [r2, #80]	; 0x50
 80083ac:	e003      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80083b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80083c2:	f04f 0b00 	mov.w	fp, #0
 80083c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80083ca:	d04c      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d6:	d030      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80083d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083dc:	d829      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80083de:	2bc0      	cmp	r3, #192	; 0xc0
 80083e0:	d02d      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80083e2:	2bc0      	cmp	r3, #192	; 0xc0
 80083e4:	d825      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80083e6:	2b80      	cmp	r3, #128	; 0x80
 80083e8:	d018      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80083ea:	2b80      	cmp	r3, #128	; 0x80
 80083ec:	d821      	bhi.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d007      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80083f6:	e01c      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f8:	4b63      	ldr	r3, [pc, #396]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	4a62      	ldr	r2, [pc, #392]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008404:	e01c      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840a:	3308      	adds	r3, #8
 800840c:	2100      	movs	r1, #0
 800840e:	4618      	mov	r0, r3
 8008410:	f002 fab8 	bl	800a984 <RCCEx_PLL2_Config>
 8008414:	4603      	mov	r3, r0
 8008416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800841a:	e011      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008420:	3328      	adds	r3, #40	; 0x28
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f002 fb5f 	bl	800aae8 <RCCEx_PLL3_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008430:	e006      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008438:	e002      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800843e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10a      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008448:	4b4f      	ldr	r3, [pc, #316]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800844a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800844c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008456:	4a4c      	ldr	r2, [pc, #304]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008458:	430b      	orrs	r3, r1
 800845a:	6513      	str	r3, [r2, #80]	; 0x50
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008472:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008476:	2300      	movs	r3, #0
 8008478:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800847c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008480:	460b      	mov	r3, r1
 8008482:	4313      	orrs	r3, r2
 8008484:	d053      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800848e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008492:	d035      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008498:	d82e      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800849a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800849e:	d031      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80084a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80084a4:	d828      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80084a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084aa:	d01a      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80084ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b0:	d822      	bhi.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80084b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084ba:	d007      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80084bc:	e01c      	b.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084be:	4b32      	ldr	r3, [pc, #200]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	4a31      	ldr	r2, [pc, #196]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084ca:	e01c      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d0:	3308      	adds	r3, #8
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f002 fa55 	bl	800a984 <RCCEx_PLL2_Config>
 80084da:	4603      	mov	r3, r0
 80084dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084e0:	e011      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e6:	3328      	adds	r3, #40	; 0x28
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f002 fafc 	bl	800aae8 <RCCEx_PLL3_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084f6:	e006      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084fe:	e002      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10b      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800850e:	4b1e      	ldr	r3, [pc, #120]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008512:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800851e:	4a1a      	ldr	r2, [pc, #104]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008520:	430b      	orrs	r3, r1
 8008522:	6593      	str	r3, [r2, #88]	; 0x58
 8008524:	e003      	b.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800852a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800852e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800853a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800853e:	2300      	movs	r3, #0
 8008540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008544:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008548:	460b      	mov	r3, r1
 800854a:	4313      	orrs	r3, r2
 800854c:	d056      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800854e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008552:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800855a:	d038      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800855c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008560:	d831      	bhi.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008566:	d034      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008568:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800856c:	d82b      	bhi.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800856e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008572:	d01d      	beq.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008574:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008578:	d825      	bhi.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d006      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800857e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008582:	d00a      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008584:	e01f      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008586:	bf00      	nop
 8008588:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800858c:	4ba2      	ldr	r3, [pc, #648]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	4aa1      	ldr	r2, [pc, #644]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008598:	e01c      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800859a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859e:	3308      	adds	r3, #8
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f002 f9ee 	bl	800a984 <RCCEx_PLL2_Config>
 80085a8:	4603      	mov	r3, r0
 80085aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80085ae:	e011      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b4:	3328      	adds	r3, #40	; 0x28
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f002 fa95 	bl	800aae8 <RCCEx_PLL3_Config>
 80085be:	4603      	mov	r3, r0
 80085c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085c4:	e006      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085cc:	e002      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80085d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10b      	bne.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80085dc:	4b8e      	ldr	r3, [pc, #568]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80085e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085ec:	4a8a      	ldr	r2, [pc, #552]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085ee:	430b      	orrs	r3, r1
 80085f0:	6593      	str	r3, [r2, #88]	; 0x58
 80085f2:	e003      	b.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80085fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008612:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008616:	460b      	mov	r3, r1
 8008618:	4313      	orrs	r3, r2
 800861a:	d03a      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008622:	2b30      	cmp	r3, #48	; 0x30
 8008624:	d01f      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008626:	2b30      	cmp	r3, #48	; 0x30
 8008628:	d819      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800862a:	2b20      	cmp	r3, #32
 800862c:	d00c      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800862e:	2b20      	cmp	r3, #32
 8008630:	d815      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d019      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008636:	2b10      	cmp	r3, #16
 8008638:	d111      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800863a:	4b77      	ldr	r3, [pc, #476]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800863c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863e:	4a76      	ldr	r2, [pc, #472]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008644:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008646:	e011      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864c:	3308      	adds	r3, #8
 800864e:	2102      	movs	r1, #2
 8008650:	4618      	mov	r0, r3
 8008652:	f002 f997 	bl	800a984 <RCCEx_PLL2_Config>
 8008656:	4603      	mov	r3, r0
 8008658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800865c:	e006      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008664:	e002      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008666:	bf00      	nop
 8008668:	e000      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800866a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008674:	4b68      	ldr	r3, [pc, #416]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008678:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008682:	4a65      	ldr	r2, [pc, #404]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008684:	430b      	orrs	r3, r1
 8008686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008688:	e003      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800869e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80086a2:	2300      	movs	r3, #0
 80086a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d051      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086bc:	d035      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80086be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086c2:	d82e      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80086c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086c8:	d031      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80086ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086ce:	d828      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80086d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d4:	d01a      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80086d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086da:	d822      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80086e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e4:	d007      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80086e6:	e01c      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e8:	4b4b      	ldr	r3, [pc, #300]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a4a      	ldr	r2, [pc, #296]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80086f4:	e01c      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fa:	3308      	adds	r3, #8
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f002 f940 	bl	800a984 <RCCEx_PLL2_Config>
 8008704:	4603      	mov	r3, r0
 8008706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800870a:	e011      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800870c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008710:	3328      	adds	r3, #40	; 0x28
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f002 f9e7 	bl	800aae8 <RCCEx_PLL3_Config>
 800871a:	4603      	mov	r3, r0
 800871c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008720:	e006      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008728:	e002      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800872a:	bf00      	nop
 800872c:	e000      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800872e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008730:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008738:	4b37      	ldr	r3, [pc, #220]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800873a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008746:	4a34      	ldr	r2, [pc, #208]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008748:	430b      	orrs	r3, r1
 800874a:	6513      	str	r3, [r2, #80]	; 0x50
 800874c:	e003      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008766:	2300      	movs	r3, #0
 8008768:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800876c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008770:	460b      	mov	r3, r1
 8008772:	4313      	orrs	r3, r2
 8008774:	d056      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800877c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008780:	d033      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008786:	d82c      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008788:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800878c:	d02f      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800878e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008792:	d826      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008794:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008798:	d02b      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800879a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800879e:	d820      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a4:	d012      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80087a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087aa:	d81a      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d022      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80087b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b4:	d115      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ba:	3308      	adds	r3, #8
 80087bc:	2101      	movs	r1, #1
 80087be:	4618      	mov	r0, r3
 80087c0:	f002 f8e0 	bl	800a984 <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80087ca:	e015      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d0:	3328      	adds	r3, #40	; 0x28
 80087d2:	2101      	movs	r1, #1
 80087d4:	4618      	mov	r0, r3
 80087d6:	f002 f987 	bl	800aae8 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80087e0:	e00a      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087e8:	e006      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80087ea:	bf00      	nop
 80087ec:	e004      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80087ee:	bf00      	nop
 80087f0:	e002      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80087f2:	bf00      	nop
 80087f4:	e000      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80087f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10d      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008800:	4b05      	ldr	r3, [pc, #20]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008804:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800880e:	4a02      	ldr	r2, [pc, #8]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008810:	430b      	orrs	r3, r1
 8008812:	6513      	str	r3, [r2, #80]	; 0x50
 8008814:	e006      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008816:	bf00      	nop
 8008818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800881c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008830:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008834:	2300      	movs	r3, #0
 8008836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800883a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800883e:	460b      	mov	r3, r1
 8008840:	4313      	orrs	r3, r2
 8008842:	d055      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800884c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008850:	d033      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008856:	d82c      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885c:	d02f      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008862:	d826      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008864:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008868:	d02b      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800886a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800886e:	d820      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008874:	d012      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800887a:	d81a      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800887c:	2b00      	cmp	r3, #0
 800887e:	d022      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008884:	d115      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888a:	3308      	adds	r3, #8
 800888c:	2101      	movs	r1, #1
 800888e:	4618      	mov	r0, r3
 8008890:	f002 f878 	bl	800a984 <RCCEx_PLL2_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800889a:	e015      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800889c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a0:	3328      	adds	r3, #40	; 0x28
 80088a2:	2101      	movs	r1, #1
 80088a4:	4618      	mov	r0, r3
 80088a6:	f002 f91f 	bl	800aae8 <RCCEx_PLL3_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80088b0:	e00a      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088b8:	e006      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088ba:	bf00      	nop
 80088bc:	e004      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088be:	bf00      	nop
 80088c0:	e002      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088c2:	bf00      	nop
 80088c4:	e000      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80088c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10b      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80088d0:	4ba3      	ldr	r3, [pc, #652]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088e0:	4a9f      	ldr	r2, [pc, #636]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088e2:	430b      	orrs	r3, r1
 80088e4:	6593      	str	r3, [r2, #88]	; 0x58
 80088e6:	e003      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80088fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008906:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800890a:	460b      	mov	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	d037      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800891a:	d00e      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800891c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008920:	d816      	bhi.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d018      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800892a:	d111      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800892c:	4b8c      	ldr	r3, [pc, #560]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	4a8b      	ldr	r2, [pc, #556]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008938:	e00f      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800893a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893e:	3308      	adds	r3, #8
 8008940:	2101      	movs	r1, #1
 8008942:	4618      	mov	r0, r3
 8008944:	f002 f81e 	bl	800a984 <RCCEx_PLL2_Config>
 8008948:	4603      	mov	r3, r0
 800894a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800894e:	e004      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008956:	e000      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10a      	bne.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008962:	4b7f      	ldr	r3, [pc, #508]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008966:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800896a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008970:	4a7b      	ldr	r2, [pc, #492]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008972:	430b      	orrs	r3, r1
 8008974:	6513      	str	r3, [r2, #80]	; 0x50
 8008976:	e003      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800897c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800898c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008990:	2300      	movs	r3, #0
 8008992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008996:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800899a:	460b      	mov	r3, r1
 800899c:	4313      	orrs	r3, r2
 800899e:	d039      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80089a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d81c      	bhi.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80089aa:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80089ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b0:	080089ed 	.word	0x080089ed
 80089b4:	080089c1 	.word	0x080089c1
 80089b8:	080089cf 	.word	0x080089cf
 80089bc:	080089ed 	.word	0x080089ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c0:	4b67      	ldr	r3, [pc, #412]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4a66      	ldr	r2, [pc, #408]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80089cc:	e00f      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d2:	3308      	adds	r3, #8
 80089d4:	2102      	movs	r1, #2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f001 ffd4 	bl	800a984 <RCCEx_PLL2_Config>
 80089dc:	4603      	mov	r3, r0
 80089de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80089e2:	e004      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089ea:	e000      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80089ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10a      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80089f6:	4b5a      	ldr	r3, [pc, #360]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089fa:	f023 0103 	bic.w	r1, r3, #3
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a04:	4a56      	ldr	r2, [pc, #344]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a06:	430b      	orrs	r3, r1
 8008a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a0a:	e003      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008a20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a24:	2300      	movs	r3, #0
 8008a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f000 809f 	beq.w	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a36:	4b4b      	ldr	r3, [pc, #300]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a4a      	ldr	r2, [pc, #296]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a42:	f7f8 ff27 	bl	8001894 <HAL_GetTick>
 8008a46:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a4a:	e00b      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a4c:	f7f8 ff22 	bl	8001894 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b64      	cmp	r3, #100	; 0x64
 8008a5a:	d903      	bls.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a62:	e005      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a64:	4b3f      	ldr	r3, [pc, #252]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0ed      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d179      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008a78:	4b39      	ldr	r3, [pc, #228]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008a84:	4053      	eors	r3, r2
 8008a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d015      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008a8e:	4b34      	ldr	r3, [pc, #208]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a9a:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9e:	4a30      	ldr	r2, [pc, #192]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aa4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008aa6:	4b2e      	ldr	r3, [pc, #184]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aaa:	4a2d      	ldr	r2, [pc, #180]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ab0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ab2:	4a2b      	ldr	r2, [pc, #172]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008ab8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ac6:	d118      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac8:	f7f8 fee4 	bl	8001894 <HAL_GetTick>
 8008acc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ad0:	e00d      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ad2:	f7f8 fedf 	bl	8001894 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008adc:	1ad2      	subs	r2, r2, r3
 8008ade:	f241 3388 	movw	r3, #5000	; 0x1388
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d903      	bls.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008ae6:	2303      	movs	r3, #3
 8008ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008aec:	e005      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008aee:	4b1c      	ldr	r3, [pc, #112]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0eb      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d129      	bne.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b12:	d10e      	bne.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008b14:	4b12      	ldr	r3, [pc, #72]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b24:	091a      	lsrs	r2, r3, #4
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	4a0d      	ldr	r2, [pc, #52]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	6113      	str	r3, [r2, #16]
 8008b30:	e005      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008b32:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	4a0a      	ldr	r2, [pc, #40]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b3c:	6113      	str	r3, [r2, #16]
 8008b3e:	4b08      	ldr	r3, [pc, #32]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b4e:	4a04      	ldr	r2, [pc, #16]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b50:	430b      	orrs	r3, r1
 8008b52:	6713      	str	r3, [r2, #112]	; 0x70
 8008b54:	e00e      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008b5e:	e009      	b.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008b60:	58024400 	.word	0x58024400
 8008b64:	58024800 	.word	0x58024800
 8008b68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7c:	f002 0301 	and.w	r3, r2, #1
 8008b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008b8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4313      	orrs	r3, r2
 8008b92:	f000 8089 	beq.w	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b9c:	2b28      	cmp	r3, #40	; 0x28
 8008b9e:	d86b      	bhi.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ba0:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba6:	bf00      	nop
 8008ba8:	08008c81 	.word	0x08008c81
 8008bac:	08008c79 	.word	0x08008c79
 8008bb0:	08008c79 	.word	0x08008c79
 8008bb4:	08008c79 	.word	0x08008c79
 8008bb8:	08008c79 	.word	0x08008c79
 8008bbc:	08008c79 	.word	0x08008c79
 8008bc0:	08008c79 	.word	0x08008c79
 8008bc4:	08008c79 	.word	0x08008c79
 8008bc8:	08008c4d 	.word	0x08008c4d
 8008bcc:	08008c79 	.word	0x08008c79
 8008bd0:	08008c79 	.word	0x08008c79
 8008bd4:	08008c79 	.word	0x08008c79
 8008bd8:	08008c79 	.word	0x08008c79
 8008bdc:	08008c79 	.word	0x08008c79
 8008be0:	08008c79 	.word	0x08008c79
 8008be4:	08008c79 	.word	0x08008c79
 8008be8:	08008c63 	.word	0x08008c63
 8008bec:	08008c79 	.word	0x08008c79
 8008bf0:	08008c79 	.word	0x08008c79
 8008bf4:	08008c79 	.word	0x08008c79
 8008bf8:	08008c79 	.word	0x08008c79
 8008bfc:	08008c79 	.word	0x08008c79
 8008c00:	08008c79 	.word	0x08008c79
 8008c04:	08008c79 	.word	0x08008c79
 8008c08:	08008c81 	.word	0x08008c81
 8008c0c:	08008c79 	.word	0x08008c79
 8008c10:	08008c79 	.word	0x08008c79
 8008c14:	08008c79 	.word	0x08008c79
 8008c18:	08008c79 	.word	0x08008c79
 8008c1c:	08008c79 	.word	0x08008c79
 8008c20:	08008c79 	.word	0x08008c79
 8008c24:	08008c79 	.word	0x08008c79
 8008c28:	08008c81 	.word	0x08008c81
 8008c2c:	08008c79 	.word	0x08008c79
 8008c30:	08008c79 	.word	0x08008c79
 8008c34:	08008c79 	.word	0x08008c79
 8008c38:	08008c79 	.word	0x08008c79
 8008c3c:	08008c79 	.word	0x08008c79
 8008c40:	08008c79 	.word	0x08008c79
 8008c44:	08008c79 	.word	0x08008c79
 8008c48:	08008c81 	.word	0x08008c81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c50:	3308      	adds	r3, #8
 8008c52:	2101      	movs	r1, #1
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 fe95 	bl	800a984 <RCCEx_PLL2_Config>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008c60:	e00f      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c66:	3328      	adds	r3, #40	; 0x28
 8008c68:	2101      	movs	r1, #1
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 ff3c 	bl	800aae8 <RCCEx_PLL3_Config>
 8008c70:	4603      	mov	r3, r0
 8008c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008c76:	e004      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c7e:	e000      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008c8a:	4bbf      	ldr	r3, [pc, #764]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c98:	4abb      	ldr	r2, [pc, #748]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	6553      	str	r3, [r2, #84]	; 0x54
 8008c9e:	e003      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ca4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f002 0302 	and.w	r3, r2, #2
 8008cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008cbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	d041      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d824      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008cd2:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd8:	08008d25 	.word	0x08008d25
 8008cdc:	08008cf1 	.word	0x08008cf1
 8008ce0:	08008d07 	.word	0x08008d07
 8008ce4:	08008d25 	.word	0x08008d25
 8008ce8:	08008d25 	.word	0x08008d25
 8008cec:	08008d25 	.word	0x08008d25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 fe43 	bl	800a984 <RCCEx_PLL2_Config>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d04:	e00f      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d0a:	3328      	adds	r3, #40	; 0x28
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 feea 	bl	800aae8 <RCCEx_PLL3_Config>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008d1a:	e004      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d22:	e000      	b.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10a      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008d2e:	4b96      	ldr	r3, [pc, #600]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	f023 0107 	bic.w	r1, r3, #7
 8008d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d3c:	4a92      	ldr	r2, [pc, #584]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6553      	str	r3, [r2, #84]	; 0x54
 8008d42:	e003      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f002 0304 	and.w	r3, r2, #4
 8008d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d044      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d74:	2b05      	cmp	r3, #5
 8008d76:	d825      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008d78:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7e:	bf00      	nop
 8008d80:	08008dcd 	.word	0x08008dcd
 8008d84:	08008d99 	.word	0x08008d99
 8008d88:	08008daf 	.word	0x08008daf
 8008d8c:	08008dcd 	.word	0x08008dcd
 8008d90:	08008dcd 	.word	0x08008dcd
 8008d94:	08008dcd 	.word	0x08008dcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9c:	3308      	adds	r3, #8
 8008d9e:	2101      	movs	r1, #1
 8008da0:	4618      	mov	r0, r3
 8008da2:	f001 fdef 	bl	800a984 <RCCEx_PLL2_Config>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008dac:	e00f      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db2:	3328      	adds	r3, #40	; 0x28
 8008db4:	2101      	movs	r1, #1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 fe96 	bl	800aae8 <RCCEx_PLL3_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008dc2:	e004      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dca:	e000      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008dd6:	4b6c      	ldr	r3, [pc, #432]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dda:	f023 0107 	bic.w	r1, r3, #7
 8008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008de6:	4a68      	ldr	r2, [pc, #416]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6593      	str	r3, [r2, #88]	; 0x58
 8008dec:	e003      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008df2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f002 0320 	and.w	r3, r2, #32
 8008e02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e06:	2300      	movs	r3, #0
 8008e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e10:	460b      	mov	r3, r1
 8008e12:	4313      	orrs	r3, r2
 8008e14:	d055      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e22:	d033      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e28:	d82c      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2e:	d02f      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e34:	d826      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e3a:	d02b      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008e3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008e40:	d820      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e46:	d012      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e4c:	d81a      	bhi.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d022      	beq.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e56:	d115      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5c:	3308      	adds	r3, #8
 8008e5e:	2100      	movs	r1, #0
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 fd8f 	bl	800a984 <RCCEx_PLL2_Config>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008e6c:	e015      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e72:	3328      	adds	r3, #40	; 0x28
 8008e74:	2102      	movs	r1, #2
 8008e76:	4618      	mov	r0, r3
 8008e78:	f001 fe36 	bl	800aae8 <RCCEx_PLL3_Config>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008e82:	e00a      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e8a:	e006      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008e8c:	bf00      	nop
 8008e8e:	e004      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008e90:	bf00      	nop
 8008e92:	e002      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008e94:	bf00      	nop
 8008e96:	e000      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ea2:	4b39      	ldr	r3, [pc, #228]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb2:	4a35      	ldr	r2, [pc, #212]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	6553      	str	r3, [r2, #84]	; 0x54
 8008eb8:	e003      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ed8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	d058      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008eea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008eee:	d033      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008ef0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008ef4:	d82c      	bhi.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008efa:	d02f      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f00:	d826      	bhi.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f06:	d02b      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008f08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f0c:	d820      	bhi.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f12:	d012      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f18:	d81a      	bhi.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d022      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f22:	d115      	bne.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f28:	3308      	adds	r3, #8
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f001 fd29 	bl	800a984 <RCCEx_PLL2_Config>
 8008f32:	4603      	mov	r3, r0
 8008f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008f38:	e015      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f3e:	3328      	adds	r3, #40	; 0x28
 8008f40:	2102      	movs	r1, #2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 fdd0 	bl	800aae8 <RCCEx_PLL3_Config>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008f4e:	e00a      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f56:	e006      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f58:	bf00      	nop
 8008f5a:	e004      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f5c:	bf00      	nop
 8008f5e:	e002      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f60:	bf00      	nop
 8008f62:	e000      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10e      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008f6e:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f72:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f7e:	4a02      	ldr	r2, [pc, #8]	; (8008f88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f80:	430b      	orrs	r3, r1
 8008f82:	6593      	str	r3, [r2, #88]	; 0x58
 8008f84:	e006      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008f86:	bf00      	nop
 8008f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008faa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	d055      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fc0:	d033      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008fc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008fc6:	d82c      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fcc:	d02f      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fd2:	d826      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008fd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fd8:	d02b      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008fda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008fde:	d820      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe4:	d012      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fea:	d81a      	bhi.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d022      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff4:	d115      	bne.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 fcc0 	bl	800a984 <RCCEx_PLL2_Config>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800900a:	e015      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009010:	3328      	adds	r3, #40	; 0x28
 8009012:	2102      	movs	r1, #2
 8009014:	4618      	mov	r0, r3
 8009016:	f001 fd67 	bl	800aae8 <RCCEx_PLL3_Config>
 800901a:	4603      	mov	r3, r0
 800901c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009020:	e00a      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009028:	e006      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800902a:	bf00      	nop
 800902c:	e004      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800902e:	bf00      	nop
 8009030:	e002      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009032:	bf00      	nop
 8009034:	e000      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10b      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009040:	4ba1      	ldr	r3, [pc, #644]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009044:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009050:	4a9d      	ldr	r2, [pc, #628]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009052:	430b      	orrs	r3, r1
 8009054:	6593      	str	r3, [r2, #88]	; 0x58
 8009056:	e003      	b.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009058:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800905c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f002 0308 	and.w	r3, r2, #8
 800906c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009070:	2300      	movs	r3, #0
 8009072:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009076:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800907a:	460b      	mov	r3, r1
 800907c:	4313      	orrs	r3, r2
 800907e:	d01e      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800908c:	d10c      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009092:	3328      	adds	r3, #40	; 0x28
 8009094:	2102      	movs	r1, #2
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fd26 	bl	800aae8 <RCCEx_PLL3_Config>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80090a8:	4b87      	ldr	r3, [pc, #540]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b8:	4a83      	ldr	r2, [pc, #524]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090ba:	430b      	orrs	r3, r1
 80090bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	f002 0310 	and.w	r3, r2, #16
 80090ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090ce:	2300      	movs	r3, #0
 80090d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80090d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80090d8:	460b      	mov	r3, r1
 80090da:	4313      	orrs	r3, r2
 80090dc:	d01e      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80090de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ea:	d10c      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80090ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f0:	3328      	adds	r3, #40	; 0x28
 80090f2:	2102      	movs	r1, #2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f001 fcf7 	bl	800aae8 <RCCEx_PLL3_Config>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009106:	4b70      	ldr	r3, [pc, #448]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800910e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009116:	4a6c      	ldr	r2, [pc, #432]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009118:	430b      	orrs	r3, r1
 800911a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800911c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009128:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800912c:	2300      	movs	r3, #0
 800912e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009132:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009136:	460b      	mov	r3, r1
 8009138:	4313      	orrs	r3, r2
 800913a:	d03e      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009140:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009148:	d022      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800914a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914e:	d81b      	bhi.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009158:	d00b      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800915a:	e015      	b.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800915c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009160:	3308      	adds	r3, #8
 8009162:	2100      	movs	r1, #0
 8009164:	4618      	mov	r0, r3
 8009166:	f001 fc0d 	bl	800a984 <RCCEx_PLL2_Config>
 800916a:	4603      	mov	r3, r0
 800916c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009170:	e00f      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009176:	3328      	adds	r3, #40	; 0x28
 8009178:	2102      	movs	r1, #2
 800917a:	4618      	mov	r0, r3
 800917c:	f001 fcb4 	bl	800aae8 <RCCEx_PLL3_Config>
 8009180:	4603      	mov	r3, r0
 8009182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009186:	e004      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800918e:	e000      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009190:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800919a:	4b4b      	ldr	r3, [pc, #300]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800919c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80091aa:	4a47      	ldr	r2, [pc, #284]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091ac:	430b      	orrs	r3, r1
 80091ae:	6593      	str	r3, [r2, #88]	; 0x58
 80091b0:	e003      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80091c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80091c8:	2300      	movs	r3, #0
 80091ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80091d0:	460b      	mov	r3, r1
 80091d2:	4313      	orrs	r3, r2
 80091d4:	d03b      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80091d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091e2:	d01f      	beq.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80091e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091e8:	d818      	bhi.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80091ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ee:	d003      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80091f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091f4:	d007      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80091f6:	e011      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091f8:	4b33      	ldr	r3, [pc, #204]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	4a32      	ldr	r2, [pc, #200]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009204:	e00f      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920a:	3328      	adds	r3, #40	; 0x28
 800920c:	2101      	movs	r1, #1
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fc6a 	bl	800aae8 <RCCEx_PLL3_Config>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800921a:	e004      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009222:	e000      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10b      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800922e:	4b26      	ldr	r3, [pc, #152]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009232:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800923e:	4a22      	ldr	r2, [pc, #136]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009240:	430b      	orrs	r3, r1
 8009242:	6553      	str	r3, [r2, #84]	; 0x54
 8009244:	e003      	b.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800924a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800925a:	673b      	str	r3, [r7, #112]	; 0x70
 800925c:	2300      	movs	r3, #0
 800925e:	677b      	str	r3, [r7, #116]	; 0x74
 8009260:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009264:	460b      	mov	r3, r1
 8009266:	4313      	orrs	r3, r2
 8009268:	d034      	beq.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800926a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800926e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009278:	d007      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800927a:	e011      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800927c:	4b12      	ldr	r3, [pc, #72]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	4a11      	ldr	r2, [pc, #68]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009286:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009288:	e00e      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928e:	3308      	adds	r3, #8
 8009290:	2102      	movs	r1, #2
 8009292:	4618      	mov	r0, r3
 8009294:	f001 fb76 	bl	800a984 <RCCEx_PLL2_Config>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800929e:	e003      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10d      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80092b0:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092be:	4a02      	ldr	r2, [pc, #8]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092c0:	430b      	orrs	r3, r1
 80092c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092c4:	e006      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80092c6:	bf00      	nop
 80092c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80092d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80092e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80092e2:	2300      	movs	r3, #0
 80092e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80092ea:	460b      	mov	r3, r1
 80092ec:	4313      	orrs	r3, r2
 80092ee:	d00c      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80092f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f4:	3328      	adds	r3, #40	; 0x28
 80092f6:	2102      	movs	r1, #2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 fbf5 	bl	800aae8 <RCCEx_PLL3_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009316:	663b      	str	r3, [r7, #96]	; 0x60
 8009318:	2300      	movs	r3, #0
 800931a:	667b      	str	r3, [r7, #100]	; 0x64
 800931c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009320:	460b      	mov	r3, r1
 8009322:	4313      	orrs	r3, r2
 8009324:	d038      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800932a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800932e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009332:	d018      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009334:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009338:	d811      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800933a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800933e:	d014      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009344:	d80b      	bhi.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800934a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800934e:	d106      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009350:	4bc3      	ldr	r3, [pc, #780]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4ac2      	ldr	r2, [pc, #776]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800935a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800935c:	e008      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009364:	e004      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009366:	bf00      	nop
 8009368:	e002      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800936a:	bf00      	nop
 800936c:	e000      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800936e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10b      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009378:	4bb9      	ldr	r3, [pc, #740]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800937a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009388:	4ab5      	ldr	r2, [pc, #724]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800938a:	430b      	orrs	r3, r1
 800938c:	6553      	str	r3, [r2, #84]	; 0x54
 800938e:	e003      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009394:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80093a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80093a6:	2300      	movs	r3, #0
 80093a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80093ae:	460b      	mov	r3, r1
 80093b0:	4313      	orrs	r3, r2
 80093b2:	d009      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093b4:	4baa      	ldr	r3, [pc, #680]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80093bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093c2:	4aa7      	ldr	r2, [pc, #668]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80093d4:	653b      	str	r3, [r7, #80]	; 0x50
 80093d6:	2300      	movs	r3, #0
 80093d8:	657b      	str	r3, [r7, #84]	; 0x54
 80093da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80093de:	460b      	mov	r3, r1
 80093e0:	4313      	orrs	r3, r2
 80093e2:	d00a      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80093e4:	4b9e      	ldr	r3, [pc, #632]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80093ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093f4:	4a9a      	ldr	r2, [pc, #616]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093f6:	430b      	orrs	r3, r1
 80093f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009406:	64bb      	str	r3, [r7, #72]	; 0x48
 8009408:	2300      	movs	r3, #0
 800940a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800940c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009410:	460b      	mov	r3, r1
 8009412:	4313      	orrs	r3, r2
 8009414:	d009      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009416:	4b92      	ldr	r3, [pc, #584]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800941a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800941e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009424:	4a8e      	ldr	r2, [pc, #568]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009426:	430b      	orrs	r3, r1
 8009428:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800942a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800942e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009432:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009436:	643b      	str	r3, [r7, #64]	; 0x40
 8009438:	2300      	movs	r3, #0
 800943a:	647b      	str	r3, [r7, #68]	; 0x44
 800943c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009440:	460b      	mov	r3, r1
 8009442:	4313      	orrs	r3, r2
 8009444:	d00e      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009446:	4b86      	ldr	r3, [pc, #536]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	4a85      	ldr	r2, [pc, #532]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800944c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009450:	6113      	str	r3, [r2, #16]
 8009452:	4b83      	ldr	r3, [pc, #524]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009454:	6919      	ldr	r1, [r3, #16]
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800945a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800945e:	4a80      	ldr	r2, [pc, #512]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009460:	430b      	orrs	r3, r1
 8009462:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009470:	63bb      	str	r3, [r7, #56]	; 0x38
 8009472:	2300      	movs	r3, #0
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009476:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800947a:	460b      	mov	r3, r1
 800947c:	4313      	orrs	r3, r2
 800947e:	d009      	beq.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009480:	4b77      	ldr	r3, [pc, #476]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009484:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948e:	4a74      	ldr	r2, [pc, #464]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009490:	430b      	orrs	r3, r1
 8009492:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80094a0:	633b      	str	r3, [r7, #48]	; 0x30
 80094a2:	2300      	movs	r3, #0
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
 80094a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80094aa:	460b      	mov	r3, r1
 80094ac:	4313      	orrs	r3, r2
 80094ae:	d00a      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094b0:	4b6b      	ldr	r3, [pc, #428]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80094b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c0:	4a67      	ldr	r2, [pc, #412]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094c2:	430b      	orrs	r3, r1
 80094c4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	2100      	movs	r1, #0
 80094d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80094dc:	460b      	mov	r3, r1
 80094de:	4313      	orrs	r3, r2
 80094e0:	d011      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e6:	3308      	adds	r3, #8
 80094e8:	2100      	movs	r1, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f001 fa4a 	bl	800a984 <RCCEx_PLL2_Config>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	2100      	movs	r1, #0
 8009510:	6239      	str	r1, [r7, #32]
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	627b      	str	r3, [r7, #36]	; 0x24
 8009518:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800951c:	460b      	mov	r3, r1
 800951e:	4313      	orrs	r3, r2
 8009520:	d011      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009526:	3308      	adds	r3, #8
 8009528:	2101      	movs	r1, #1
 800952a:	4618      	mov	r0, r3
 800952c:	f001 fa2a 	bl	800a984 <RCCEx_PLL2_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800953e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	2100      	movs	r1, #0
 8009550:	61b9      	str	r1, [r7, #24]
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800955c:	460b      	mov	r3, r1
 800955e:	4313      	orrs	r3, r2
 8009560:	d011      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009566:	3308      	adds	r3, #8
 8009568:	2102      	movs	r1, #2
 800956a:	4618      	mov	r0, r3
 800956c:	f001 fa0a 	bl	800a984 <RCCEx_PLL2_Config>
 8009570:	4603      	mov	r3, r0
 8009572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800957e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958e:	2100      	movs	r1, #0
 8009590:	6139      	str	r1, [r7, #16]
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	617b      	str	r3, [r7, #20]
 8009598:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800959c:	460b      	mov	r3, r1
 800959e:	4313      	orrs	r3, r2
 80095a0:	d011      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a6:	3328      	adds	r3, #40	; 0x28
 80095a8:	2100      	movs	r1, #0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 fa9c 	bl	800aae8 <RCCEx_PLL3_Config>
 80095b0:	4603      	mov	r3, r0
 80095b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80095b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80095c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	2100      	movs	r1, #0
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	f003 0310 	and.w	r3, r3, #16
 80095d6:	60fb      	str	r3, [r7, #12]
 80095d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80095dc:	460b      	mov	r3, r1
 80095de:	4313      	orrs	r3, r2
 80095e0:	d011      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095e6:	3328      	adds	r3, #40	; 0x28
 80095e8:	2101      	movs	r1, #1
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 fa7c 	bl	800aae8 <RCCEx_PLL3_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80095f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800960a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960e:	2100      	movs	r1, #0
 8009610:	6039      	str	r1, [r7, #0]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	607b      	str	r3, [r7, #4]
 8009618:	e9d7 1200 	ldrd	r1, r2, [r7]
 800961c:	460b      	mov	r3, r1
 800961e:	4313      	orrs	r3, r2
 8009620:	d011      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009626:	3328      	adds	r3, #40	; 0x28
 8009628:	2102      	movs	r1, #2
 800962a:	4618      	mov	r0, r3
 800962c:	f001 fa5c 	bl	800aae8 <RCCEx_PLL3_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800963a:	2b00      	cmp	r3, #0
 800963c:	d003      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009646:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	e000      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
}
 8009654:	4618      	mov	r0, r3
 8009656:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800965a:	46bd      	mov	sp, r7
 800965c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009660:	58024400 	.word	0x58024400

08009664 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b090      	sub	sp, #64	; 0x40
 8009668:	af00      	add	r7, sp, #0
 800966a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800966e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009672:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009676:	430b      	orrs	r3, r1
 8009678:	f040 8094 	bne.w	80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800967c:	4b9e      	ldr	r3, [pc, #632]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800967e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009680:	f003 0307 	and.w	r3, r3, #7
 8009684:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	2b04      	cmp	r3, #4
 800968a:	f200 8087 	bhi.w	800979c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800968e:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096a9 	.word	0x080096a9
 8009698:	080096d1 	.word	0x080096d1
 800969c:	080096f9 	.word	0x080096f9
 80096a0:	08009795 	.word	0x08009795
 80096a4:	08009721 	.word	0x08009721
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096a8:	4b93      	ldr	r3, [pc, #588]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096b4:	d108      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 f810 	bl	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c4:	f000 bd45 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096cc:	f000 bd41 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096d0:	4b89      	ldr	r3, [pc, #548]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096dc:	d108      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096de:	f107 0318 	add.w	r3, r7, #24
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fd54 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ec:	f000 bd31 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096f4:	f000 bd2d 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096f8:	4b7f      	ldr	r3, [pc, #508]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009704:	d108      	bne.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009706:	f107 030c 	add.w	r3, r7, #12
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fe94 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009714:	f000 bd1d 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800971c:	f000 bd19 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009720:	4b75      	ldr	r3, [pc, #468]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009728:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800972a:	4b73      	ldr	r3, [pc, #460]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b04      	cmp	r3, #4
 8009734:	d10c      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800973c:	4b6e      	ldr	r3, [pc, #440]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	08db      	lsrs	r3, r3, #3
 8009742:	f003 0303 	and.w	r3, r3, #3
 8009746:	4a6d      	ldr	r2, [pc, #436]	; (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009748:	fa22 f303 	lsr.w	r3, r2, r3
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800974e:	e01f      	b.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009750:	4b69      	ldr	r3, [pc, #420]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800975c:	d106      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009764:	d102      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009766:	4b66      	ldr	r3, [pc, #408]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800976a:	e011      	b.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800976c:	4b62      	ldr	r3, [pc, #392]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009778:	d106      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009780:	d102      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009782:	4b60      	ldr	r3, [pc, #384]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009786:	e003      	b.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800978c:	f000 bce1 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009790:	f000 bcdf 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009794:	4b5c      	ldr	r3, [pc, #368]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009798:	f000 bcdb 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a0:	f000 bcd7 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80097a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097a8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80097ac:	430b      	orrs	r3, r1
 80097ae:	f040 80ad 	bne.w	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80097b2:	4b51      	ldr	r3, [pc, #324]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80097bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097c2:	d056      	beq.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ca:	f200 8090 	bhi.w	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	2bc0      	cmp	r3, #192	; 0xc0
 80097d2:	f000 8088 	beq.w	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	2bc0      	cmp	r3, #192	; 0xc0
 80097da:	f200 8088 	bhi.w	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	2b80      	cmp	r3, #128	; 0x80
 80097e2:	d032      	beq.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	f200 8081 	bhi.w	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d014      	beq.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80097f8:	e079      	b.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097fa:	4b3f      	ldr	r3, [pc, #252]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009806:	d108      	bne.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800980c:	4618      	mov	r0, r3
 800980e:	f000 ff67 	bl	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009816:	f000 bc9c 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800981a:	2300      	movs	r3, #0
 800981c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800981e:	f000 bc98 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009822:	4b35      	ldr	r3, [pc, #212]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800982a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800982e:	d108      	bne.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009830:	f107 0318 	add.w	r3, r7, #24
 8009834:	4618      	mov	r0, r3
 8009836:	f000 fcab 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800983e:	f000 bc88 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009842:	2300      	movs	r3, #0
 8009844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009846:	f000 bc84 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800984a:	4b2b      	ldr	r3, [pc, #172]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009856:	d108      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009858:	f107 030c 	add.w	r3, r7, #12
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fdeb 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009866:	f000 bc74 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800986e:	f000 bc70 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009872:	4b21      	ldr	r3, [pc, #132]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800987a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800987c:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0304 	and.w	r3, r3, #4
 8009884:	2b04      	cmp	r3, #4
 8009886:	d10c      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800988e:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	08db      	lsrs	r3, r3, #3
 8009894:	f003 0303 	and.w	r3, r3, #3
 8009898:	4a18      	ldr	r2, [pc, #96]	; (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800989a:	fa22 f303 	lsr.w	r3, r2, r3
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a0:	e01f      	b.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098a2:	4b15      	ldr	r3, [pc, #84]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ae:	d106      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80098b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b6:	d102      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098b8:	4b11      	ldr	r3, [pc, #68]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80098ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098bc:	e011      	b.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098be:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098ca:	d106      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80098cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d2:	d102      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098d4:	4b0b      	ldr	r3, [pc, #44]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80098d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d8:	e003      	b.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098da:	2300      	movs	r3, #0
 80098dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80098de:	f000 bc38 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098e2:	f000 bc36 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80098e6:	4b08      	ldr	r3, [pc, #32]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80098e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ea:	f000 bc32 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098f2:	f000 bc2e 	b.w	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80098f6:	bf00      	nop
 80098f8:	58024400 	.word	0x58024400
 80098fc:	03d09000 	.word	0x03d09000
 8009900:	003d0900 	.word	0x003d0900
 8009904:	007a1200 	.word	0x007a1200
 8009908:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800990c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009910:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009914:	430b      	orrs	r3, r1
 8009916:	f040 809c 	bne.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800991a:	4b9e      	ldr	r3, [pc, #632]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800991c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800991e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009922:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800992a:	d054      	beq.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009932:	f200 808b 	bhi.w	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800993c:	f000 8083 	beq.w	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009946:	f200 8081 	bhi.w	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800994a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009950:	d02f      	beq.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009958:	d878      	bhi.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009966:	d012      	beq.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009968:	e070      	b.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800996a:	4b8a      	ldr	r3, [pc, #552]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009976:	d107      	bne.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800997c:	4618      	mov	r0, r3
 800997e:	f000 feaf 	bl	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009986:	e3e4      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009988:	2300      	movs	r3, #0
 800998a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800998c:	e3e1      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800998e:	4b81      	ldr	r3, [pc, #516]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800999a:	d107      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800999c:	f107 0318 	add.w	r3, r7, #24
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 fbf5 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099aa:	e3d2      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099b0:	e3cf      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80099b2:	4b78      	ldr	r3, [pc, #480]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099be:	d107      	bne.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099c0:	f107 030c 	add.w	r3, r7, #12
 80099c4:	4618      	mov	r0, r3
 80099c6:	f000 fd37 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ce:	e3c0      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099d4:	e3bd      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099d6:	4b6f      	ldr	r3, [pc, #444]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099e0:	4b6c      	ldr	r3, [pc, #432]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0304 	and.w	r3, r3, #4
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d10c      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80099ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099f2:	4b68      	ldr	r3, [pc, #416]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	08db      	lsrs	r3, r3, #3
 80099f8:	f003 0303 	and.w	r3, r3, #3
 80099fc:	4a66      	ldr	r2, [pc, #408]	; (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80099fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a04:	e01e      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a06:	4b63      	ldr	r3, [pc, #396]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a12:	d106      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a1a:	d102      	bne.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a1c:	4b5f      	ldr	r3, [pc, #380]	; (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a20:	e010      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a22:	4b5c      	ldr	r3, [pc, #368]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a2e:	d106      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a36:	d102      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a38:	4b59      	ldr	r3, [pc, #356]	; (8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a3c:	e002      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009a42:	e386      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a44:	e385      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a46:	4b57      	ldr	r3, [pc, #348]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a4a:	e382      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a50:	e37f      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a56:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009a5a:	430b      	orrs	r3, r1
 8009a5c:	f040 80a7 	bne.w	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009a60:	4b4c      	ldr	r3, [pc, #304]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a64:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009a68:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a70:	d055      	beq.n	8009b1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a78:	f200 8096 	bhi.w	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a82:	f000 8084 	beq.w	8009b8e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a8c:	f200 808c 	bhi.w	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a96:	d030      	beq.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a9e:	f200 8083 	bhi.w	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009aae:	d012      	beq.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009ab0:	e07a      	b.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ab2:	4b38      	ldr	r3, [pc, #224]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009abe:	d107      	bne.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 fe0b 	bl	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ace:	e340      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ad4:	e33d      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ad6:	4b2f      	ldr	r3, [pc, #188]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ae2:	d107      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae4:	f107 0318 	add.w	r3, r7, #24
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fb51 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009af2:	e32e      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009af8:	e32b      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009afa:	4b26      	ldr	r3, [pc, #152]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b06:	d107      	bne.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b08:	f107 030c 	add.w	r3, r7, #12
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 fc93 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b16:	e31c      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b1c:	e319      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b1e:	4b1d      	ldr	r3, [pc, #116]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b26:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b28:	4b1a      	ldr	r3, [pc, #104]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b04      	cmp	r3, #4
 8009b32:	d10c      	bne.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b3a:	4b16      	ldr	r3, [pc, #88]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	08db      	lsrs	r3, r3, #3
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	4a14      	ldr	r2, [pc, #80]	; (8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009b46:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b4c:	e01e      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b4e:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b5a:	d106      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b62:	d102      	bne.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b68:	e010      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b6a:	4b0a      	ldr	r3, [pc, #40]	; (8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b76:	d106      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b7e:	d102      	bne.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b80:	4b07      	ldr	r3, [pc, #28]	; (8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b84:	e002      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009b8a:	e2e2      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b8c:	e2e1      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b92:	e2de      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b94:	58024400 	.word	0x58024400
 8009b98:	03d09000 	.word	0x03d09000
 8009b9c:	003d0900 	.word	0x003d0900
 8009ba0:	007a1200 	.word	0x007a1200
 8009ba4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bac:	e2d1      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009bb6:	430b      	orrs	r3, r1
 8009bb8:	f040 809c 	bne.w	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009bbc:	4b93      	ldr	r3, [pc, #588]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bc0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009bc4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bcc:	d054      	beq.n	8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bd4:	f200 808b 	bhi.w	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bde:	f000 8083 	beq.w	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009be8:	f200 8081 	bhi.w	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf2:	d02f      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bfa:	d878      	bhi.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d004      	beq.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c08:	d012      	beq.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009c0a:	e070      	b.n	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c0c:	4b7f      	ldr	r3, [pc, #508]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c18:	d107      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fd5e 	bl	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c28:	e293      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c2e:	e290      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c30:	4b76      	ldr	r3, [pc, #472]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c3c:	d107      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c3e:	f107 0318 	add.w	r3, r7, #24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 faa4 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c4c:	e281      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c52:	e27e      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c54:	4b6d      	ldr	r3, [pc, #436]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c60:	d107      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c62:	f107 030c 	add.w	r3, r7, #12
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fbe6 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c70:	e26f      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c76:	e26c      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c78:	4b64      	ldr	r3, [pc, #400]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c82:	4b62      	ldr	r3, [pc, #392]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 0304 	and.w	r3, r3, #4
 8009c8a:	2b04      	cmp	r3, #4
 8009c8c:	d10c      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c94:	4b5d      	ldr	r3, [pc, #372]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	08db      	lsrs	r3, r3, #3
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	4a5c      	ldr	r2, [pc, #368]	; (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ca6:	e01e      	b.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ca8:	4b58      	ldr	r3, [pc, #352]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb4:	d106      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cbc:	d102      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cbe:	4b55      	ldr	r3, [pc, #340]	; (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cc2:	e010      	b.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cc4:	4b51      	ldr	r3, [pc, #324]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cd0:	d106      	bne.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cd8:	d102      	bne.n	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009cda:	4b4f      	ldr	r3, [pc, #316]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cde:	e002      	b.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009ce4:	e235      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ce6:	e234      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ce8:	4b4c      	ldr	r3, [pc, #304]	; (8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cec:	e231      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cf2:	e22e      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8009cfc:	430b      	orrs	r3, r1
 8009cfe:	f040 808f 	bne.w	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009d02:	4b42      	ldr	r3, [pc, #264]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d06:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d12:	d06b      	beq.n	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d1a:	d874      	bhi.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d22:	d056      	beq.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d2a:	d86c      	bhi.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d32:	d03b      	beq.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d3a:	d864      	bhi.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d42:	d021      	beq.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d4a:	d85c      	bhi.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d004      	beq.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d58:	d004      	beq.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009d5a:	e054      	b.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009d5c:	f7fe fa4c 	bl	80081f8 <HAL_RCC_GetPCLK1Freq>
 8009d60:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d62:	e1f6      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d64:	4b29      	ldr	r3, [pc, #164]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d70:	d107      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d72:	f107 0318 	add.w	r3, r7, #24
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fa0a 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d80:	e1e7      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d86:	e1e4      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d88:	4b20      	ldr	r3, [pc, #128]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d94:	d107      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d96:	f107 030c 	add.w	r3, r7, #12
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f000 fb4c 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da4:	e1d5      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009daa:	e1d2      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dac:	4b17      	ldr	r3, [pc, #92]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d109      	bne.n	8009dcc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009db8:	4b14      	ldr	r3, [pc, #80]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	08db      	lsrs	r3, r3, #3
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	4a13      	ldr	r2, [pc, #76]	; (8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dca:	e1c2      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd0:	e1bf      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009dd2:	4b0e      	ldr	r3, [pc, #56]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dde:	d102      	bne.n	8009de6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009de0:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009de4:	e1b5      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dea:	e1b2      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009dec:	4b07      	ldr	r3, [pc, #28]	; (8009e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009df8:	d102      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009dfa:	4b07      	ldr	r3, [pc, #28]	; (8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dfe:	e1a8      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e04:	e1a5      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e0a:	e1a2      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e0c:	58024400 	.word	0x58024400
 8009e10:	03d09000 	.word	0x03d09000
 8009e14:	003d0900 	.word	0x003d0900
 8009e18:	007a1200 	.word	0x007a1200
 8009e1c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e24:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	d173      	bne.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009e2c:	4b9c      	ldr	r3, [pc, #624]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e3c:	d02f      	beq.n	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e44:	d863      	bhi.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e52:	d012      	beq.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009e54:	e05b      	b.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e56:	4b92      	ldr	r3, [pc, #584]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e62:	d107      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e64:	f107 0318 	add.w	r3, r7, #24
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f991 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e72:	e16e      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e78:	e16b      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e7a:	4b89      	ldr	r3, [pc, #548]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e86:	d107      	bne.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 fad3 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e96:	e15c      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e9c:	e159      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e9e:	4b80      	ldr	r3, [pc, #512]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ea6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ea8:	4b7d      	ldr	r3, [pc, #500]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f003 0304 	and.w	r3, r3, #4
 8009eb0:	2b04      	cmp	r3, #4
 8009eb2:	d10c      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009eba:	4b79      	ldr	r3, [pc, #484]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	08db      	lsrs	r3, r3, #3
 8009ec0:	f003 0303 	and.w	r3, r3, #3
 8009ec4:	4a77      	ldr	r2, [pc, #476]	; (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8009eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ecc:	e01e      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ece:	4b74      	ldr	r3, [pc, #464]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eda:	d106      	bne.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ee2:	d102      	bne.n	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ee4:	4b70      	ldr	r3, [pc, #448]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ee8:	e010      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009eea:	4b6d      	ldr	r3, [pc, #436]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ef6:	d106      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efe:	d102      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f00:	4b6a      	ldr	r3, [pc, #424]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f04:	e002      	b.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f06:	2300      	movs	r3, #0
 8009f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009f0a:	e122      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f0c:	e121      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f12:	e11e      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f18:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	d133      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009f20:	4b5f      	ldr	r3, [pc, #380]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d004      	beq.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f36:	d012      	beq.n	8009f5e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009f38:	e023      	b.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f3a:	4b59      	ldr	r3, [pc, #356]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f46:	d107      	bne.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 fbc7 	bl	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f56:	e0fc      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f5c:	e0f9      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f5e:	4b50      	ldr	r3, [pc, #320]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f6a:	d107      	bne.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f6c:	f107 0318 	add.w	r3, r7, #24
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 f90d 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f7a:	e0ea      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f80:	e0e7      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f86:	e0e4      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f8c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009f90:	430b      	orrs	r3, r1
 8009f92:	f040 808d 	bne.w	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009f96:	4b42      	ldr	r3, [pc, #264]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009f9e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fa6:	d06b      	beq.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fae:	d874      	bhi.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fb6:	d056      	beq.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fbe:	d86c      	bhi.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fc6:	d03b      	beq.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009fce:	d864      	bhi.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fd6:	d021      	beq.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fde:	d85c      	bhi.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d004      	beq.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fec:	d004      	beq.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009fee:	e054      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ff0:	f000 f8b8 	bl	800a164 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ff4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ff6:	e0ac      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ff8:	4b29      	ldr	r3, [pc, #164]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a004:	d107      	bne.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a006:	f107 0318 	add.w	r3, r7, #24
 800a00a:	4618      	mov	r0, r3
 800a00c:	f000 f8c0 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a014:	e09d      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a01a:	e09a      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a01c:	4b20      	ldr	r3, [pc, #128]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a028:	d107      	bne.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a02a:	f107 030c 	add.w	r3, r7, #12
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fa02 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a038:	e08b      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a03e:	e088      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a040:	4b17      	ldr	r3, [pc, #92]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b04      	cmp	r3, #4
 800a04a:	d109      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a04c:	4b14      	ldr	r3, [pc, #80]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	08db      	lsrs	r3, r3, #3
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	4a13      	ldr	r2, [pc, #76]	; (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a058:	fa22 f303 	lsr.w	r3, r2, r3
 800a05c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a05e:	e078      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a064:	e075      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a066:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a06e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a072:	d102      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a074:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a076:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a078:	e06b      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a07e:	e068      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a08c:	d102      	bne.n	800a094 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a08e:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a092:	e05e      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a094:	2300      	movs	r3, #0
 800a096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a098:	e05b      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a09e:	e058      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0a0:	58024400 	.word	0x58024400
 800a0a4:	03d09000 	.word	0x03d09000
 800a0a8:	003d0900 	.word	0x003d0900
 800a0ac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	d148      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a0bc:	4b27      	ldr	r3, [pc, #156]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0cc:	d02a      	beq.n	800a124 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0d4:	d838      	bhi.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d004      	beq.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0e2:	d00d      	beq.n	800a100 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a0e4:	e030      	b.n	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0f2:	d102      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a0f4:	4b1a      	ldr	r3, [pc, #104]	; (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0f8:	e02b      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0fe:	e028      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a100:	4b16      	ldr	r3, [pc, #88]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a10c:	d107      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a10e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a112:	4618      	mov	r0, r3
 800a114:	f000 fae4 	bl	800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a11c:	e019      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a11e:	2300      	movs	r3, #0
 800a120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a122:	e016      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a12c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a130:	d107      	bne.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a132:	f107 0318 	add.w	r3, r7, #24
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f82a 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a140:	e007      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a146:	e004      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14c:	e001      	b.n	800a152 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a154:	4618      	mov	r0, r3
 800a156:	3740      	adds	r7, #64	; 0x40
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	58024400 	.word	0x58024400
 800a160:	007a1200 	.word	0x007a1200

0800a164 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a168:	f7fe f816 	bl	8008198 <HAL_RCC_GetHCLKFreq>
 800a16c:	4602      	mov	r2, r0
 800a16e:	4b06      	ldr	r3, [pc, #24]	; (800a188 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	091b      	lsrs	r3, r3, #4
 800a174:	f003 0307 	and.w	r3, r3, #7
 800a178:	4904      	ldr	r1, [pc, #16]	; (800a18c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a17a:	5ccb      	ldrb	r3, [r1, r3]
 800a17c:	f003 031f 	and.w	r3, r3, #31
 800a180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a184:	4618      	mov	r0, r3
 800a186:	bd80      	pop	{r7, pc}
 800a188:	58024400 	.word	0x58024400
 800a18c:	0800e9c4 	.word	0x0800e9c4

0800a190 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a190:	b480      	push	{r7}
 800a192:	b089      	sub	sp, #36	; 0x24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a198:	4ba1      	ldr	r3, [pc, #644]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19c:	f003 0303 	and.w	r3, r3, #3
 800a1a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a1a2:	4b9f      	ldr	r3, [pc, #636]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a6:	0b1b      	lsrs	r3, r3, #12
 800a1a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a1ae:	4b9c      	ldr	r3, [pc, #624]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	091b      	lsrs	r3, r3, #4
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a1ba:	4b99      	ldr	r3, [pc, #612]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1be:	08db      	lsrs	r3, r3, #3
 800a1c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	fb02 f303 	mul.w	r3, r2, r3
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 8111 	beq.w	800a400 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	f000 8083 	beq.w	800a2ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	f200 80a1 	bhi.w	800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d056      	beq.n	800a2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a1fa:	e099      	b.n	800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1fc:	4b88      	ldr	r3, [pc, #544]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0320 	and.w	r3, r3, #32
 800a204:	2b00      	cmp	r3, #0
 800a206:	d02d      	beq.n	800a264 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a208:	4b85      	ldr	r3, [pc, #532]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	08db      	lsrs	r3, r3, #3
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	4a84      	ldr	r2, [pc, #528]	; (800a424 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a214:	fa22 f303 	lsr.w	r3, r2, r3
 800a218:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	ee07 3a90 	vmov	s15, r3
 800a220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	ee07 3a90 	vmov	s15, r3
 800a22a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a232:	4b7b      	ldr	r3, [pc, #492]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a242:	ed97 6a03 	vldr	s12, [r7, #12]
 800a246:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a25e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a262:	e087      	b.n	800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	ee07 3a90 	vmov	s15, r3
 800a26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a26e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a42c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a276:	4b6a      	ldr	r3, [pc, #424]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a27e:	ee07 3a90 	vmov	s15, r3
 800a282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a286:	ed97 6a03 	vldr	s12, [r7, #12]
 800a28a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2a6:	e065      	b.n	800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	ee07 3a90 	vmov	s15, r3
 800a2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ba:	4b59      	ldr	r3, [pc, #356]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2ea:	e043      	b.n	800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	ee07 3a90 	vmov	s15, r3
 800a2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a434 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2fe:	4b48      	ldr	r3, [pc, #288]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a306:	ee07 3a90 	vmov	s15, r3
 800a30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a312:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a32e:	e021      	b.n	800a374 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	ee07 3a90 	vmov	s15, r3
 800a336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a33a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a342:	4b37      	ldr	r3, [pc, #220]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a34a:	ee07 3a90 	vmov	s15, r3
 800a34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a352:	ed97 6a03 	vldr	s12, [r7, #12]
 800a356:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a428 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a372:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a374:	4b2a      	ldr	r3, [pc, #168]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a378:	0a5b      	lsrs	r3, r3, #9
 800a37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a386:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a38a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a38e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a39a:	ee17 2a90 	vmov	r2, s15
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a3a2:	4b1f      	ldr	r3, [pc, #124]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a6:	0c1b      	lsrs	r3, r3, #16
 800a3a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ac:	ee07 3a90 	vmov	s15, r3
 800a3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3c8:	ee17 2a90 	vmov	r2, s15
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a3d0:	4b13      	ldr	r3, [pc, #76]	; (800a420 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d4:	0e1b      	lsrs	r3, r3, #24
 800a3d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3da:	ee07 3a90 	vmov	s15, r3
 800a3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3f6:	ee17 2a90 	vmov	r2, s15
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a3fe:	e008      	b.n	800a412 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	609a      	str	r2, [r3, #8]
}
 800a412:	bf00      	nop
 800a414:	3724      	adds	r7, #36	; 0x24
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	58024400 	.word	0x58024400
 800a424:	03d09000 	.word	0x03d09000
 800a428:	46000000 	.word	0x46000000
 800a42c:	4c742400 	.word	0x4c742400
 800a430:	4a742400 	.word	0x4a742400
 800a434:	4af42400 	.word	0x4af42400

0800a438 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a438:	b480      	push	{r7}
 800a43a:	b089      	sub	sp, #36	; 0x24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a440:	4ba1      	ldr	r3, [pc, #644]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a444:	f003 0303 	and.w	r3, r3, #3
 800a448:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a44a:	4b9f      	ldr	r3, [pc, #636]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44e:	0d1b      	lsrs	r3, r3, #20
 800a450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a454:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a456:	4b9c      	ldr	r3, [pc, #624]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45a:	0a1b      	lsrs	r3, r3, #8
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a462:	4b99      	ldr	r3, [pc, #612]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a466:	08db      	lsrs	r3, r3, #3
 800a468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 8111 	beq.w	800a6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	f000 8083 	beq.w	800a594 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	2b02      	cmp	r3, #2
 800a492:	f200 80a1 	bhi.w	800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d056      	beq.n	800a550 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a4a2:	e099      	b.n	800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a4:	4b88      	ldr	r3, [pc, #544]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d02d      	beq.n	800a50c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b0:	4b85      	ldr	r3, [pc, #532]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	08db      	lsrs	r3, r3, #3
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	4a84      	ldr	r2, [pc, #528]	; (800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	ee07 3a90 	vmov	s15, r3
 800a4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4da:	4b7b      	ldr	r3, [pc, #492]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4e2:	ee07 3a90 	vmov	s15, r3
 800a4e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a502:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a506:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a50a:	e087      	b.n	800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	ee07 3a90 	vmov	s15, r3
 800a512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a516:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a51a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a51e:	4b6a      	ldr	r3, [pc, #424]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a526:	ee07 3a90 	vmov	s15, r3
 800a52a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a52e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a532:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a53a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a53e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a54a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a54e:	e065      	b.n	800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	ee07 3a90 	vmov	s15, r3
 800a556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a55a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a562:	4b59      	ldr	r3, [pc, #356]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a56a:	ee07 3a90 	vmov	s15, r3
 800a56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a572:	ed97 6a03 	vldr	s12, [r7, #12]
 800a576:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a58e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a592:	e043      	b.n	800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	ee07 3a90 	vmov	s15, r3
 800a59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5a6:	4b48      	ldr	r3, [pc, #288]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5d6:	e021      	b.n	800a61c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	ee07 3a90 	vmov	s15, r3
 800a5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ea:	4b37      	ldr	r3, [pc, #220]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f2:	ee07 3a90 	vmov	s15, r3
 800a5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a61a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a61c:	4b2a      	ldr	r3, [pc, #168]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a620:	0a5b      	lsrs	r3, r3, #9
 800a622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a632:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a636:	edd7 6a07 	vldr	s13, [r7, #28]
 800a63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a642:	ee17 2a90 	vmov	r2, s15
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a64a:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	0c1b      	lsrs	r3, r3, #16
 800a650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a660:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a664:	edd7 6a07 	vldr	s13, [r7, #28]
 800a668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a66c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a670:	ee17 2a90 	vmov	r2, s15
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a678:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67c:	0e1b      	lsrs	r3, r3, #24
 800a67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a68e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a692:	edd7 6a07 	vldr	s13, [r7, #28]
 800a696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a69a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69e:	ee17 2a90 	vmov	r2, s15
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a6a6:	e008      	b.n	800a6ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	609a      	str	r2, [r3, #8]
}
 800a6ba:	bf00      	nop
 800a6bc:	3724      	adds	r7, #36	; 0x24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	58024400 	.word	0x58024400
 800a6cc:	03d09000 	.word	0x03d09000
 800a6d0:	46000000 	.word	0x46000000
 800a6d4:	4c742400 	.word	0x4c742400
 800a6d8:	4a742400 	.word	0x4a742400
 800a6dc:	4af42400 	.word	0x4af42400

0800a6e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b089      	sub	sp, #36	; 0x24
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6e8:	4ba0      	ldr	r3, [pc, #640]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ec:	f003 0303 	and.w	r3, r3, #3
 800a6f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a6f2:	4b9e      	ldr	r3, [pc, #632]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f6:	091b      	lsrs	r3, r3, #4
 800a6f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a6fe:	4b9b      	ldr	r3, [pc, #620]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a708:	4b98      	ldr	r3, [pc, #608]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70c:	08db      	lsrs	r3, r3, #3
 800a70e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	fb02 f303 	mul.w	r3, r2, r3
 800a718:	ee07 3a90 	vmov	s15, r3
 800a71c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a720:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 8111 	beq.w	800a94e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	f000 8083 	beq.w	800a83a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	2b02      	cmp	r3, #2
 800a738:	f200 80a1 	bhi.w	800a87e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d056      	beq.n	800a7f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a748:	e099      	b.n	800a87e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a74a:	4b88      	ldr	r3, [pc, #544]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f003 0320 	and.w	r3, r3, #32
 800a752:	2b00      	cmp	r3, #0
 800a754:	d02d      	beq.n	800a7b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a756:	4b85      	ldr	r3, [pc, #532]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	08db      	lsrs	r3, r3, #3
 800a75c:	f003 0303 	and.w	r3, r3, #3
 800a760:	4a83      	ldr	r2, [pc, #524]	; (800a970 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a762:	fa22 f303 	lsr.w	r3, r2, r3
 800a766:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	ee07 3a90 	vmov	s15, r3
 800a778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a780:	4b7a      	ldr	r3, [pc, #488]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a788:	ee07 3a90 	vmov	s15, r3
 800a78c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a790:	ed97 6a03 	vldr	s12, [r7, #12]
 800a794:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a79c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a7b0:	e087      	b.n	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	ee07 3a90 	vmov	s15, r3
 800a7b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a978 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a7c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7c4:	4b69      	ldr	r3, [pc, #420]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7cc:	ee07 3a90 	vmov	s15, r3
 800a7d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7f4:	e065      	b.n	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	ee07 3a90 	vmov	s15, r3
 800a7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a800:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a97c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a804:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a808:	4b58      	ldr	r3, [pc, #352]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a810:	ee07 3a90 	vmov	s15, r3
 800a814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a818:	ed97 6a03 	vldr	s12, [r7, #12]
 800a81c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a820:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a824:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a828:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a82c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a830:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a834:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a838:	e043      	b.n	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	ee07 3a90 	vmov	s15, r3
 800a840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a844:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a980 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a84c:	4b47      	ldr	r3, [pc, #284]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a854:	ee07 3a90 	vmov	s15, r3
 800a858:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a85c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a860:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a864:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a868:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a86c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a870:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a874:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a878:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a87c:	e021      	b.n	800a8c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a888:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a978 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a88c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a890:	4b36      	ldr	r3, [pc, #216]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a898:	ee07 3a90 	vmov	s15, r3
 800a89c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a974 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a8c2:	4b2a      	ldr	r3, [pc, #168]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c6:	0a5b      	lsrs	r3, r3, #9
 800a8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8cc:	ee07 3a90 	vmov	s15, r3
 800a8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8e8:	ee17 2a90 	vmov	r2, s15
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a8f0:	4b1e      	ldr	r3, [pc, #120]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f4:	0c1b      	lsrs	r3, r3, #16
 800a8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8fa:	ee07 3a90 	vmov	s15, r3
 800a8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a90a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a90e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a916:	ee17 2a90 	vmov	r2, s15
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a91e:	4b13      	ldr	r3, [pc, #76]	; (800a96c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	0e1b      	lsrs	r3, r3, #24
 800a924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a928:	ee07 3a90 	vmov	s15, r3
 800a92c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a934:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a938:	edd7 6a07 	vldr	s13, [r7, #28]
 800a93c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a944:	ee17 2a90 	vmov	r2, s15
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a94c:	e008      	b.n	800a960 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	609a      	str	r2, [r3, #8]
}
 800a960:	bf00      	nop
 800a962:	3724      	adds	r7, #36	; 0x24
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	58024400 	.word	0x58024400
 800a970:	03d09000 	.word	0x03d09000
 800a974:	46000000 	.word	0x46000000
 800a978:	4c742400 	.word	0x4c742400
 800a97c:	4a742400 	.word	0x4a742400
 800a980:	4af42400 	.word	0x4af42400

0800a984 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a992:	4b53      	ldr	r3, [pc, #332]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800a994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a996:	f003 0303 	and.w	r3, r3, #3
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d101      	bne.n	800a9a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e099      	b.n	800aad6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a9a2:	4b4f      	ldr	r3, [pc, #316]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a4e      	ldr	r2, [pc, #312]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800a9a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a9ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9ae:	f7f6 ff71 	bl	8001894 <HAL_GetTick>
 800a9b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9b4:	e008      	b.n	800a9c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a9b6:	f7f6 ff6d 	bl	8001894 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d901      	bls.n	800a9c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e086      	b.n	800aad6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a9c8:	4b45      	ldr	r3, [pc, #276]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1f0      	bne.n	800a9b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a9d4:	4b42      	ldr	r3, [pc, #264]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800a9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	031b      	lsls	r3, r3, #12
 800a9e2:	493f      	ldr	r1, [pc, #252]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	628b      	str	r3, [r1, #40]	; 0x28
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	025b      	lsls	r3, r3, #9
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	041b      	lsls	r3, r3, #16
 800aa06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	061b      	lsls	r3, r3, #24
 800aa14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa18:	4931      	ldr	r1, [pc, #196]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aa1e:	4b30      	ldr	r3, [pc, #192]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	492d      	ldr	r1, [pc, #180]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aa30:	4b2b      	ldr	r3, [pc, #172]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa34:	f023 0220 	bic.w	r2, r3, #32
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	4928      	ldr	r1, [pc, #160]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aa42:	4b27      	ldr	r3, [pc, #156]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	4a26      	ldr	r2, [pc, #152]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa48:	f023 0310 	bic.w	r3, r3, #16
 800aa4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aa4e:	4b24      	ldr	r3, [pc, #144]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa52:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <RCCEx_PLL2_Config+0x160>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	69d2      	ldr	r2, [r2, #28]
 800aa5a:	00d2      	lsls	r2, r2, #3
 800aa5c:	4920      	ldr	r1, [pc, #128]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aa62:	4b1f      	ldr	r3, [pc, #124]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	4a1e      	ldr	r2, [pc, #120]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa68:	f043 0310 	orr.w	r3, r3, #16
 800aa6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aa74:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa78:	4a19      	ldr	r2, [pc, #100]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa80:	e00f      	b.n	800aaa2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d106      	bne.n	800aa96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aa88:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8c:	4a14      	ldr	r2, [pc, #80]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa94:	e005      	b.n	800aaa2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aa96:	4b12      	ldr	r3, [pc, #72]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9a:	4a11      	ldr	r2, [pc, #68]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aa9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aaa0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aaa2:	4b0f      	ldr	r3, [pc, #60]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a0e      	ldr	r2, [pc, #56]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aaa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aaac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaae:	f7f6 fef1 	bl	8001894 <HAL_GetTick>
 800aab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aab4:	e008      	b.n	800aac8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aab6:	f7f6 feed 	bl	8001894 <HAL_GetTick>
 800aaba:	4602      	mov	r2, r0
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	2b02      	cmp	r3, #2
 800aac2:	d901      	bls.n	800aac8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e006      	b.n	800aad6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aac8:	4b05      	ldr	r3, [pc, #20]	; (800aae0 <RCCEx_PLL2_Config+0x15c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d0f0      	beq.n	800aab6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	58024400 	.word	0x58024400
 800aae4:	ffff0007 	.word	0xffff0007

0800aae8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aaf6:	4b53      	ldr	r3, [pc, #332]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafa:	f003 0303 	and.w	r3, r3, #3
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d101      	bne.n	800ab06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e099      	b.n	800ac3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ab06:	4b4f      	ldr	r3, [pc, #316]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a4e      	ldr	r2, [pc, #312]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab12:	f7f6 febf 	bl	8001894 <HAL_GetTick>
 800ab16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab18:	e008      	b.n	800ab2c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab1a:	f7f6 febb 	bl	8001894 <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	d901      	bls.n	800ab2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	e086      	b.n	800ac3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ab2c:	4b45      	ldr	r3, [pc, #276]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1f0      	bne.n	800ab1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ab38:	4b42      	ldr	r3, [pc, #264]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	051b      	lsls	r3, r3, #20
 800ab46:	493f      	ldr	r1, [pc, #252]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	628b      	str	r3, [r1, #40]	; 0x28
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	025b      	lsls	r3, r3, #9
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	431a      	orrs	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	041b      	lsls	r3, r3, #16
 800ab6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab6e:	431a      	orrs	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	061b      	lsls	r3, r3, #24
 800ab78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab7c:	4931      	ldr	r1, [pc, #196]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ab82:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	492d      	ldr	r1, [pc, #180]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ab94:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ab96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	4928      	ldr	r1, [pc, #160]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aba6:	4b27      	ldr	r3, [pc, #156]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800aba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abaa:	4a26      	ldr	r2, [pc, #152]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800abb2:	4b24      	ldr	r3, [pc, #144]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abb6:	4b24      	ldr	r3, [pc, #144]	; (800ac48 <RCCEx_PLL3_Config+0x160>)
 800abb8:	4013      	ands	r3, r2
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	69d2      	ldr	r2, [r2, #28]
 800abbe:	00d2      	lsls	r2, r2, #3
 800abc0:	4920      	ldr	r1, [pc, #128]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abc2:	4313      	orrs	r3, r2
 800abc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800abc6:	4b1f      	ldr	r3, [pc, #124]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abca:	4a1e      	ldr	r2, [pc, #120]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d106      	bne.n	800abe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800abd8:	4b1a      	ldr	r3, [pc, #104]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abdc:	4a19      	ldr	r2, [pc, #100]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800abe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800abe4:	e00f      	b.n	800ac06 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d106      	bne.n	800abfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800abec:	4b15      	ldr	r3, [pc, #84]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf0:	4a14      	ldr	r2, [pc, #80]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800abf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800abf8:	e005      	b.n	800ac06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800abfa:	4b12      	ldr	r3, [pc, #72]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800abfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abfe:	4a11      	ldr	r2, [pc, #68]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ac00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a0e      	ldr	r2, [pc, #56]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ac0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac12:	f7f6 fe3f 	bl	8001894 <HAL_GetTick>
 800ac16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac18:	e008      	b.n	800ac2c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac1a:	f7f6 fe3b 	bl	8001894 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d901      	bls.n	800ac2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e006      	b.n	800ac3a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <RCCEx_PLL3_Config+0x15c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d0f0      	beq.n	800ac1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	58024400 	.word	0x58024400
 800ac48:	ffff0007 	.word	0xffff0007

0800ac4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d071      	beq.n	800ad42 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d106      	bne.n	800ac78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7f6 fb82 	bl	800137c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f003 0310 	and.w	r3, r3, #16
 800ac8a:	2b10      	cmp	r3, #16
 800ac8c:	d050      	beq.n	800ad30 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	22ca      	movs	r2, #202	; 0xca
 800ac94:	625a      	str	r2, [r3, #36]	; 0x24
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2253      	movs	r2, #83	; 0x53
 800ac9c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f9a0 	bl	800afe4 <RTC_EnterInitMode>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d124      	bne.n	800acf8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6899      	ldr	r1, [r3, #8]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <HAL_RTC_Init+0x100>)
 800acba:	400b      	ands	r3, r1
 800acbc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6899      	ldr	r1, [r3, #8]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	431a      	orrs	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	431a      	orrs	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	430a      	orrs	r2, r1
 800acda:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	0419      	lsls	r1, r3, #16
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f9ac 	bl	800b04c <RTC_ExitInitMode>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d113      	bne.n	800ad26 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 0203 	bic.w	r2, r2, #3
 800ad0c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69da      	ldr	r2, [r3, #28]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	430a      	orrs	r2, r1
 800ad24:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	22ff      	movs	r2, #255	; 0xff
 800ad2c:	625a      	str	r2, [r3, #36]	; 0x24
 800ad2e:	e001      	b.n	800ad34 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	ff8fffbf 	.word	0xff8fffbf

0800ad50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ad50:	b590      	push	{r4, r7, lr}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d101      	bne.n	800ad6a <HAL_RTC_SetTime+0x1a>
 800ad66:	2302      	movs	r3, #2
 800ad68:	e089      	b.n	800ae7e <HAL_RTC_SetTime+0x12e>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2202      	movs	r2, #2
 800ad76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	22ca      	movs	r2, #202	; 0xca
 800ad80:	625a      	str	r2, [r3, #36]	; 0x24
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2253      	movs	r2, #83	; 0x53
 800ad88:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 f92a 	bl	800afe4 <RTC_EnterInitMode>
 800ad90:	4603      	mov	r3, r0
 800ad92:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ad94:	7cfb      	ldrb	r3, [r7, #19]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d161      	bne.n	800ae5e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d126      	bne.n	800adee <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2200      	movs	r2, #0
 800adb2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f985 	bl	800b0c8 <RTC_ByteToBcd2>
 800adbe:	4603      	mov	r3, r0
 800adc0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 f97e 	bl	800b0c8 <RTC_ByteToBcd2>
 800adcc:	4603      	mov	r3, r0
 800adce:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800add0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	789b      	ldrb	r3, [r3, #2]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f976 	bl	800b0c8 <RTC_ByteToBcd2>
 800addc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800adde:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	78db      	ldrb	r3, [r3, #3]
 800ade6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ade8:	4313      	orrs	r3, r2
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	e018      	b.n	800ae20 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d102      	bne.n	800ae02 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2200      	movs	r2, #0
 800ae00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ae0e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ae14:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	78db      	ldrb	r3, [r3, #3]
 800ae1a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	6979      	ldr	r1, [r7, #20]
 800ae26:	4b18      	ldr	r3, [pc, #96]	; (800ae88 <HAL_RTC_SetTime+0x138>)
 800ae28:	400b      	ands	r3, r1
 800ae2a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	689a      	ldr	r2, [r3, #8]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ae3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6899      	ldr	r1, [r3, #8]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	68da      	ldr	r2, [r3, #12]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	430a      	orrs	r2, r1
 800ae52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 f8f9 	bl	800b04c <RTC_ExitInitMode>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	22ff      	movs	r2, #255	; 0xff
 800ae64:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ae66:	7cfb      	ldrb	r3, [r7, #19]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d103      	bne.n	800ae74 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ae7c:	7cfb      	ldrb	r3, [r7, #19]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	371c      	adds	r7, #28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd90      	pop	{r4, r7, pc}
 800ae86:	bf00      	nop
 800ae88:	007f7f7f 	.word	0x007f7f7f

0800ae8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ae8c:	b590      	push	{r4, r7, lr}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d101      	bne.n	800aea6 <HAL_RTC_SetDate+0x1a>
 800aea2:	2302      	movs	r3, #2
 800aea4:	e073      	b.n	800af8e <HAL_RTC_SetDate+0x102>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10e      	bne.n	800aeda <HAL_RTC_SetDate+0x4e>
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	785b      	ldrb	r3, [r3, #1]
 800aec0:	f003 0310 	and.w	r3, r3, #16
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d008      	beq.n	800aeda <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	785b      	ldrb	r3, [r3, #1]
 800aecc:	f023 0310 	bic.w	r3, r3, #16
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	330a      	adds	r3, #10
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d11c      	bne.n	800af1a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	78db      	ldrb	r3, [r3, #3]
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 f8ef 	bl	800b0c8 <RTC_ByteToBcd2>
 800aeea:	4603      	mov	r3, r0
 800aeec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	785b      	ldrb	r3, [r3, #1]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 f8e8 	bl	800b0c8 <RTC_ByteToBcd2>
 800aef8:	4603      	mov	r3, r0
 800aefa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800aefc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	789b      	ldrb	r3, [r3, #2]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 f8e0 	bl	800b0c8 <RTC_ByteToBcd2>
 800af08:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800af0a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af14:	4313      	orrs	r3, r2
 800af16:	617b      	str	r3, [r7, #20]
 800af18:	e00e      	b.n	800af38 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	78db      	ldrb	r3, [r3, #3]
 800af1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	785b      	ldrb	r3, [r3, #1]
 800af24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af26:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800af2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800af34:	4313      	orrs	r3, r2
 800af36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	22ca      	movs	r2, #202	; 0xca
 800af3e:	625a      	str	r2, [r3, #36]	; 0x24
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2253      	movs	r2, #83	; 0x53
 800af46:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 f84b 	bl	800afe4 <RTC_EnterInitMode>
 800af4e:	4603      	mov	r3, r0
 800af50:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800af52:	7cfb      	ldrb	r3, [r7, #19]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10a      	bne.n	800af6e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	6979      	ldr	r1, [r7, #20]
 800af5e:	4b0e      	ldr	r3, [pc, #56]	; (800af98 <HAL_RTC_SetDate+0x10c>)
 800af60:	400b      	ands	r3, r1
 800af62:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f871 	bl	800b04c <RTC_ExitInitMode>
 800af6a:	4603      	mov	r3, r0
 800af6c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	22ff      	movs	r2, #255	; 0xff
 800af74:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800af76:	7cfb      	ldrb	r3, [r7, #19]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d103      	bne.n	800af84 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2201      	movs	r2, #1
 800af80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800af8c:	7cfb      	ldrb	r3, [r7, #19]


}
 800af8e:	4618      	mov	r0, r3
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	bd90      	pop	{r4, r7, pc}
 800af96:	bf00      	nop
 800af98:	00ffff3f 	.word	0x00ffff3f

0800af9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a0d      	ldr	r2, [pc, #52]	; (800afe0 <HAL_RTC_WaitForSynchro+0x44>)
 800afaa:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800afac:	f7f6 fc72 	bl	8001894 <HAL_GetTick>
 800afb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800afb2:	e009      	b.n	800afc8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800afb4:	f7f6 fc6e 	bl	8001894 <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afc2:	d901      	bls.n	800afc8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e007      	b.n	800afd8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d0ee      	beq.n	800afb4 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	0003ff5f 	.word	0x0003ff5f

0800afe4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800affa:	2b00      	cmp	r3, #0
 800affc:	d120      	bne.n	800b040 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f04f 32ff 	mov.w	r2, #4294967295
 800b006:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b008:	f7f6 fc44 	bl	8001894 <HAL_GetTick>
 800b00c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b00e:	e00d      	b.n	800b02c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b010:	f7f6 fc40 	bl	8001894 <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b01e:	d905      	bls.n	800b02c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b020:	2303      	movs	r3, #3
 800b022:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2203      	movs	r2, #3
 800b028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <RTC_EnterInitMode+0x5c>
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	2b03      	cmp	r3, #3
 800b03e:	d1e7      	bne.n	800b010 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800b040:	7bfb      	ldrb	r3, [r7, #15]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b054:	2300      	movs	r3, #0
 800b056:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b058:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <RTC_ExitInitMode+0x78>)
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	4a19      	ldr	r2, [pc, #100]	; (800b0c4 <RTC_ExitInitMode+0x78>)
 800b05e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b062:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b064:	4b17      	ldr	r3, [pc, #92]	; (800b0c4 <RTC_ExitInitMode+0x78>)
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f003 0320 	and.w	r3, r3, #32
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10c      	bne.n	800b08a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff ff93 	bl	800af9c <HAL_RTC_WaitForSynchro>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d01e      	beq.n	800b0ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2203      	movs	r2, #3
 800b080:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	73fb      	strb	r3, [r7, #15]
 800b088:	e017      	b.n	800b0ba <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b08a:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <RTC_ExitInitMode+0x78>)
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	4a0d      	ldr	r2, [pc, #52]	; (800b0c4 <RTC_ExitInitMode+0x78>)
 800b090:	f023 0320 	bic.w	r3, r3, #32
 800b094:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f7ff ff80 	bl	800af9c <HAL_RTC_WaitForSynchro>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d005      	beq.n	800b0ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2203      	movs	r2, #3
 800b0a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <RTC_ExitInitMode+0x78>)
 800b0b0:	689b      	ldr	r3, [r3, #8]
 800b0b2:	4a04      	ldr	r2, [pc, #16]	; (800b0c4 <RTC_ExitInitMode+0x78>)
 800b0b4:	f043 0320 	orr.w	r3, r3, #32
 800b0b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	58004000 	.word	0x58004000

0800b0c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800b0d6:	79fb      	ldrb	r3, [r7, #7]
 800b0d8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800b0da:	e005      	b.n	800b0e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	3b0a      	subs	r3, #10
 800b0e6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800b0e8:	7afb      	ldrb	r3, [r7, #11]
 800b0ea:	2b09      	cmp	r3, #9
 800b0ec:	d8f6      	bhi.n	800b0dc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	011b      	lsls	r3, r3, #4
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	7afb      	ldrb	r3, [r7, #11]
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	b2db      	uxtb	r3, r3
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef * hrtc, uint32_t CalibOutput)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d101      	bne.n	800b120 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 800b11c:	2302      	movs	r3, #2
 800b11e:	e034      	b.n	800b18a <HAL_RTCEx_SetCalibrationOutPut+0x82>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	22ca      	movs	r2, #202	; 0xca
 800b136:	625a      	str	r2, [r3, #36]	; 0x24
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2253      	movs	r2, #83	; 0x53
 800b13e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	689a      	ldr	r2, [r3, #8]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800b14e:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6899      	ldr	r1, [r3, #8]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	430a      	orrs	r2, r1
 800b15e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	689a      	ldr	r2, [r3, #8]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b16e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	22ff      	movs	r2, #255	; 0xff
 800b176:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e042      	b.n	800b22e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d106      	bne.n	800b1c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7f6 f93e 	bl	800143c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2224      	movs	r2, #36	; 0x24
 800b1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f022 0201 	bic.w	r2, r2, #1
 800b1d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fce1 	bl	800bba0 <UART_SetConfig>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d101      	bne.n	800b1e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e022      	b.n	800b22e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f001 fa3d 	bl	800c670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b204:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	689a      	ldr	r2, [r3, #8]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b214:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0201 	orr.w	r2, r2, #1
 800b224:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f001 fac4 	bl	800c7b4 <UART_CheckIdleState>
 800b22c:	4603      	mov	r3, r0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b08a      	sub	sp, #40	; 0x28
 800b23a:	af02      	add	r7, sp, #8
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	60b9      	str	r1, [r7, #8]
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	4613      	mov	r3, r2
 800b244:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d17b      	bne.n	800b348 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <HAL_UART_Transmit+0x26>
 800b256:	88fb      	ldrh	r3, [r7, #6]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e074      	b.n	800b34a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2221      	movs	r2, #33	; 0x21
 800b26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b270:	f7f6 fb10 	bl	8001894 <HAL_GetTick>
 800b274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	88fa      	ldrh	r2, [r7, #6]
 800b27a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28e:	d108      	bne.n	800b2a2 <HAL_UART_Transmit+0x6c>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	691b      	ldr	r3, [r3, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d104      	bne.n	800b2a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b298:	2300      	movs	r3, #0
 800b29a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	61bb      	str	r3, [r7, #24]
 800b2a0:	e003      	b.n	800b2aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b2aa:	e030      	b.n	800b30e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	9300      	str	r3, [sp, #0]
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2180      	movs	r1, #128	; 0x80
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f001 fb26 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e03d      	b.n	800b34a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10b      	bne.n	800b2ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	3302      	adds	r3, #2
 800b2e8:	61bb      	str	r3, [r7, #24]
 800b2ea:	e007      	b.n	800b2fc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	781a      	ldrb	r2, [r3, #0]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b302:	b29b      	uxth	r3, r3
 800b304:	3b01      	subs	r3, #1
 800b306:	b29a      	uxth	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b314:	b29b      	uxth	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1c8      	bne.n	800b2ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2200      	movs	r2, #0
 800b322:	2140      	movs	r1, #64	; 0x40
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f001 faef 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2220      	movs	r2, #32
 800b334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e006      	b.n	800b34a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2220      	movs	r2, #32
 800b340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	e000      	b.n	800b34a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b348:	2302      	movs	r3, #2
  }
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3720      	adds	r7, #32
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
	...

0800b354 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b368:	2b20      	cmp	r3, #32
 800b36a:	d137      	bne.n	800b3dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d002      	beq.n	800b378 <HAL_UART_Receive_IT+0x24>
 800b372:	88fb      	ldrh	r3, [r7, #6]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d101      	bne.n	800b37c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e030      	b.n	800b3de <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a18      	ldr	r2, [pc, #96]	; (800b3e8 <HAL_UART_Receive_IT+0x94>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d01f      	beq.n	800b3cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b396:	2b00      	cmp	r3, #0
 800b398:	d018      	beq.n	800b3cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	e853 3f00 	ldrex	r3, [r3]
 800b3a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	623b      	str	r3, [r7, #32]
 800b3ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3bc:	69f9      	ldr	r1, [r7, #28]
 800b3be:	6a3a      	ldr	r2, [r7, #32]
 800b3c0:	e841 2300 	strex	r3, r2, [r1]
 800b3c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d1e6      	bne.n	800b39a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b3cc:	88fb      	ldrh	r3, [r7, #6]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	68b9      	ldr	r1, [r7, #8]
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f001 fb00 	bl	800c9d8 <UART_Start_Receive_IT>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	e000      	b.n	800b3de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3dc:	2302      	movs	r3, #2
  }
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3728      	adds	r7, #40	; 0x28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	58000c00 	.word	0x58000c00

0800b3ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b0ba      	sub	sp, #232	; 0xe8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b416:	f640 030f 	movw	r3, #2063	; 0x80f
 800b41a:	4013      	ands	r3, r2
 800b41c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11b      	bne.n	800b460 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b42c:	f003 0320 	and.w	r3, r3, #32
 800b430:	2b00      	cmp	r3, #0
 800b432:	d015      	beq.n	800b460 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b438:	f003 0320 	and.w	r3, r3, #32
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d105      	bne.n	800b44c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d009      	beq.n	800b460 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 8377 	beq.w	800bb44 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	4798      	blx	r3
      }
      return;
 800b45e:	e371      	b.n	800bb44 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8123 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b46a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b46e:	4b8d      	ldr	r3, [pc, #564]	; (800b6a4 <HAL_UART_IRQHandler+0x2b8>)
 800b470:	4013      	ands	r3, r2
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b47a:	4b8b      	ldr	r3, [pc, #556]	; (800b6a8 <HAL_UART_IRQHandler+0x2bc>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f000 8116 	beq.w	800b6b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b488:	f003 0301 	and.w	r3, r3, #1
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d011      	beq.n	800b4b4 <HAL_UART_IRQHandler+0xc8>
 800b490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00b      	beq.n	800b4b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4aa:	f043 0201 	orr.w	r2, r3, #1
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d011      	beq.n	800b4e4 <HAL_UART_IRQHandler+0xf8>
 800b4c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00b      	beq.n	800b4e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4da:	f043 0204 	orr.w	r2, r3, #4
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d011      	beq.n	800b514 <HAL_UART_IRQHandler+0x128>
 800b4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00b      	beq.n	800b514 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2204      	movs	r2, #4
 800b502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b50a:	f043 0202 	orr.w	r2, r3, #2
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b518:	f003 0308 	and.w	r3, r3, #8
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d017      	beq.n	800b550 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b524:	f003 0320 	and.w	r3, r3, #32
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d105      	bne.n	800b538 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b52c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b530:	4b5c      	ldr	r3, [pc, #368]	; (800b6a4 <HAL_UART_IRQHandler+0x2b8>)
 800b532:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b534:	2b00      	cmp	r3, #0
 800b536:	d00b      	beq.n	800b550 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2208      	movs	r2, #8
 800b53e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b546:	f043 0208 	orr.w	r2, r3, #8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d012      	beq.n	800b582 <HAL_UART_IRQHandler+0x196>
 800b55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00c      	beq.n	800b582 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b578:	f043 0220 	orr.w	r2, r3, #32
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 82dd 	beq.w	800bb48 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b592:	f003 0320 	and.w	r3, r3, #32
 800b596:	2b00      	cmp	r3, #0
 800b598:	d013      	beq.n	800b5c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b59e:	f003 0320 	and.w	r3, r3, #32
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d105      	bne.n	800b5b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d6:	2b40      	cmp	r3, #64	; 0x40
 800b5d8:	d005      	beq.n	800b5e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b5da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d054      	beq.n	800b690 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f001 fb18 	bl	800cc1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5f6:	2b40      	cmp	r3, #64	; 0x40
 800b5f8:	d146      	bne.n	800b688 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3308      	adds	r3, #8
 800b600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3308      	adds	r3, #8
 800b622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b62a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b636:	e841 2300 	strex	r3, r2, [r1]
 800b63a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b63e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1d9      	bne.n	800b5fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d017      	beq.n	800b680 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b656:	4a15      	ldr	r2, [pc, #84]	; (800b6ac <HAL_UART_IRQHandler+0x2c0>)
 800b658:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b660:	4618      	mov	r0, r3
 800b662:	f7f9 f903 	bl	800486c <HAL_DMA_Abort_IT>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d019      	beq.n	800b6a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b67a:	4610      	mov	r0, r2
 800b67c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b67e:	e00f      	b.n	800b6a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 fa77 	bl	800bb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b686:	e00b      	b.n	800b6a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fa73 	bl	800bb74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b68e:	e007      	b.n	800b6a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 fa6f 	bl	800bb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b69e:	e253      	b.n	800bb48 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6a0:	bf00      	nop
    return;
 800b6a2:	e251      	b.n	800bb48 <HAL_UART_IRQHandler+0x75c>
 800b6a4:	10000001 	.word	0x10000001
 800b6a8:	04000120 	.word	0x04000120
 800b6ac:	0800cce9 	.word	0x0800cce9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	f040 81e7 	bne.w	800ba88 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b6ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6be:	f003 0310 	and.w	r3, r3, #16
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 81e0 	beq.w	800ba88 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6cc:	f003 0310 	and.w	r3, r3, #16
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	f000 81d9 	beq.w	800ba88 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2210      	movs	r2, #16
 800b6dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e8:	2b40      	cmp	r3, #64	; 0x40
 800b6ea:	f040 8151 	bne.w	800b990 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a96      	ldr	r2, [pc, #600]	; (800b950 <HAL_UART_IRQHandler+0x564>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d068      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a93      	ldr	r2, [pc, #588]	; (800b954 <HAL_UART_IRQHandler+0x568>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d061      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a91      	ldr	r2, [pc, #580]	; (800b958 <HAL_UART_IRQHandler+0x56c>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d05a      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a8e      	ldr	r2, [pc, #568]	; (800b95c <HAL_UART_IRQHandler+0x570>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d053      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a8c      	ldr	r2, [pc, #560]	; (800b960 <HAL_UART_IRQHandler+0x574>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d04c      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a89      	ldr	r2, [pc, #548]	; (800b964 <HAL_UART_IRQHandler+0x578>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d045      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a87      	ldr	r2, [pc, #540]	; (800b968 <HAL_UART_IRQHandler+0x57c>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d03e      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a84      	ldr	r2, [pc, #528]	; (800b96c <HAL_UART_IRQHandler+0x580>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d037      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a82      	ldr	r2, [pc, #520]	; (800b970 <HAL_UART_IRQHandler+0x584>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d030      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a7f      	ldr	r2, [pc, #508]	; (800b974 <HAL_UART_IRQHandler+0x588>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d029      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a7d      	ldr	r2, [pc, #500]	; (800b978 <HAL_UART_IRQHandler+0x58c>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d022      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a7a      	ldr	r2, [pc, #488]	; (800b97c <HAL_UART_IRQHandler+0x590>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d01b      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a78      	ldr	r2, [pc, #480]	; (800b980 <HAL_UART_IRQHandler+0x594>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d014      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a75      	ldr	r2, [pc, #468]	; (800b984 <HAL_UART_IRQHandler+0x598>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d00d      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a73      	ldr	r2, [pc, #460]	; (800b988 <HAL_UART_IRQHandler+0x59c>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d006      	beq.n	800b7ce <HAL_UART_IRQHandler+0x3e2>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a70      	ldr	r2, [pc, #448]	; (800b98c <HAL_UART_IRQHandler+0x5a0>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d106      	bne.n	800b7dc <HAL_UART_IRQHandler+0x3f0>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	e005      	b.n	800b7e8 <HAL_UART_IRQHandler+0x3fc>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 81ab 	beq.w	800bb4c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b800:	429a      	cmp	r2, r3
 800b802:	f080 81a3 	bcs.w	800bb4c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b80c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b81c:	f000 8087 	beq.w	800b92e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b82c:	e853 3f00 	ldrex	r3, [r3]
 800b830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b83c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	461a      	mov	r2, r3
 800b846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b84a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b84e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1da      	bne.n	800b820 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	3308      	adds	r3, #8
 800b870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b874:	e853 3f00 	ldrex	r3, [r3]
 800b878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b87c:	f023 0301 	bic.w	r3, r3, #1
 800b880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3308      	adds	r3, #8
 800b88a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b88e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b8a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e1      	bne.n	800b86a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b8b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b8ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b8cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e3      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8fc:	f023 0310 	bic.w	r3, r3, #16
 800b900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b90e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b910:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e4      	bne.n	800b8ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f8 fc81 	bl	8004230 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2202      	movs	r2, #2
 800b932:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b940:	b29b      	uxth	r3, r3
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	b29b      	uxth	r3, r3
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f91d 	bl	800bb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b94e:	e0fd      	b.n	800bb4c <HAL_UART_IRQHandler+0x760>
 800b950:	40020010 	.word	0x40020010
 800b954:	40020028 	.word	0x40020028
 800b958:	40020040 	.word	0x40020040
 800b95c:	40020058 	.word	0x40020058
 800b960:	40020070 	.word	0x40020070
 800b964:	40020088 	.word	0x40020088
 800b968:	400200a0 	.word	0x400200a0
 800b96c:	400200b8 	.word	0x400200b8
 800b970:	40020410 	.word	0x40020410
 800b974:	40020428 	.word	0x40020428
 800b978:	40020440 	.word	0x40020440
 800b97c:	40020458 	.word	0x40020458
 800b980:	40020470 	.word	0x40020470
 800b984:	40020488 	.word	0x40020488
 800b988:	400204a0 	.word	0x400204a0
 800b98c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80cf 	beq.w	800bb50 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b9b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 80ca 	beq.w	800bb50 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9de:	647b      	str	r3, [r7, #68]	; 0x44
 800b9e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b9e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9e6:	e841 2300 	strex	r3, r2, [r1]
 800b9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e4      	bne.n	800b9bc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	e853 3f00 	ldrex	r3, [r3]
 800ba00:	623b      	str	r3, [r7, #32]
   return(result);
 800ba02:	6a3a      	ldr	r2, [r7, #32]
 800ba04:	4b55      	ldr	r3, [pc, #340]	; (800bb5c <HAL_UART_IRQHandler+0x770>)
 800ba06:	4013      	ands	r3, r2
 800ba08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3308      	adds	r3, #8
 800ba12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ba16:	633a      	str	r2, [r7, #48]	; 0x30
 800ba18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba1e:	e841 2300 	strex	r3, r2, [r1]
 800ba22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1e3      	bne.n	800b9f2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2220      	movs	r2, #32
 800ba2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	e853 3f00 	ldrex	r3, [r3]
 800ba4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 0310 	bic.w	r3, r3, #16
 800ba52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ba60:	61fb      	str	r3, [r7, #28]
 800ba62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba64:	69b9      	ldr	r1, [r7, #24]
 800ba66:	69fa      	ldr	r2, [r7, #28]
 800ba68:	e841 2300 	strex	r3, r2, [r1]
 800ba6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1e4      	bne.n	800ba3e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2202      	movs	r2, #2
 800ba78:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 f881 	bl	800bb88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba86:	e063      	b.n	800bb50 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00e      	beq.n	800bab2 <HAL_UART_IRQHandler+0x6c6>
 800ba94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d008      	beq.n	800bab2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800baa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 fe7a 	bl	800d7a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bab0:	e051      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baba:	2b00      	cmp	r3, #0
 800babc:	d014      	beq.n	800bae8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800babe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800baca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bada:	2b00      	cmp	r3, #0
 800badc:	d03a      	beq.n	800bb54 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	4798      	blx	r3
    }
    return;
 800bae6:	e035      	b.n	800bb54 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d009      	beq.n	800bb08 <HAL_UART_IRQHandler+0x71c>
 800baf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f001 f907 	bl	800cd14 <UART_EndTransmit_IT>
    return;
 800bb06:	e026      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d009      	beq.n	800bb28 <HAL_UART_IRQHandler+0x73c>
 800bb14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d003      	beq.n	800bb28 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f001 fe53 	bl	800d7cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb26:	e016      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d010      	beq.n	800bb56 <HAL_UART_IRQHandler+0x76a>
 800bb34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	da0c      	bge.n	800bb56 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 fe3b 	bl	800d7b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb42:	e008      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb44:	bf00      	nop
 800bb46:	e006      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb48:	bf00      	nop
 800bb4a:	e004      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb4c:	bf00      	nop
 800bb4e:	e002      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
      return;
 800bb50:	bf00      	nop
 800bb52:	e000      	b.n	800bb56 <HAL_UART_IRQHandler+0x76a>
    return;
 800bb54:	bf00      	nop
  }
}
 800bb56:	37e8      	adds	r7, #232	; 0xe8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	effffffe 	.word	0xeffffffe

0800bb60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb94:	bf00      	nop
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bba4:	b092      	sub	sp, #72	; 0x48
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	689a      	ldr	r2, [r3, #8]
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	431a      	orrs	r2, r3
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	431a      	orrs	r2, r3
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	69db      	ldr	r3, [r3, #28]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	4bbe      	ldr	r3, [pc, #760]	; (800bec8 <UART_SetConfig+0x328>)
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	6812      	ldr	r2, [r2, #0]
 800bbd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bbd8:	430b      	orrs	r3, r1
 800bbda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	685b      	ldr	r3, [r3, #4]
 800bbe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	68da      	ldr	r2, [r3, #12]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	430a      	orrs	r2, r1
 800bbf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4ab3      	ldr	r2, [pc, #716]	; (800becc <UART_SetConfig+0x32c>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d004      	beq.n	800bc0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689a      	ldr	r2, [r3, #8]
 800bc12:	4baf      	ldr	r3, [pc, #700]	; (800bed0 <UART_SetConfig+0x330>)
 800bc14:	4013      	ands	r3, r2
 800bc16:	697a      	ldr	r2, [r7, #20]
 800bc18:	6812      	ldr	r2, [r2, #0]
 800bc1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc1c:	430b      	orrs	r3, r1
 800bc1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc26:	f023 010f 	bic.w	r1, r3, #15
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4aa6      	ldr	r2, [pc, #664]	; (800bed4 <UART_SetConfig+0x334>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d177      	bne.n	800bd30 <UART_SetConfig+0x190>
 800bc40:	4ba5      	ldr	r3, [pc, #660]	; (800bed8 <UART_SetConfig+0x338>)
 800bc42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc48:	2b28      	cmp	r3, #40	; 0x28
 800bc4a:	d86d      	bhi.n	800bd28 <UART_SetConfig+0x188>
 800bc4c:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <UART_SetConfig+0xb4>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bcf9 	.word	0x0800bcf9
 800bc58:	0800bd29 	.word	0x0800bd29
 800bc5c:	0800bd29 	.word	0x0800bd29
 800bc60:	0800bd29 	.word	0x0800bd29
 800bc64:	0800bd29 	.word	0x0800bd29
 800bc68:	0800bd29 	.word	0x0800bd29
 800bc6c:	0800bd29 	.word	0x0800bd29
 800bc70:	0800bd29 	.word	0x0800bd29
 800bc74:	0800bd01 	.word	0x0800bd01
 800bc78:	0800bd29 	.word	0x0800bd29
 800bc7c:	0800bd29 	.word	0x0800bd29
 800bc80:	0800bd29 	.word	0x0800bd29
 800bc84:	0800bd29 	.word	0x0800bd29
 800bc88:	0800bd29 	.word	0x0800bd29
 800bc8c:	0800bd29 	.word	0x0800bd29
 800bc90:	0800bd29 	.word	0x0800bd29
 800bc94:	0800bd09 	.word	0x0800bd09
 800bc98:	0800bd29 	.word	0x0800bd29
 800bc9c:	0800bd29 	.word	0x0800bd29
 800bca0:	0800bd29 	.word	0x0800bd29
 800bca4:	0800bd29 	.word	0x0800bd29
 800bca8:	0800bd29 	.word	0x0800bd29
 800bcac:	0800bd29 	.word	0x0800bd29
 800bcb0:	0800bd29 	.word	0x0800bd29
 800bcb4:	0800bd11 	.word	0x0800bd11
 800bcb8:	0800bd29 	.word	0x0800bd29
 800bcbc:	0800bd29 	.word	0x0800bd29
 800bcc0:	0800bd29 	.word	0x0800bd29
 800bcc4:	0800bd29 	.word	0x0800bd29
 800bcc8:	0800bd29 	.word	0x0800bd29
 800bccc:	0800bd29 	.word	0x0800bd29
 800bcd0:	0800bd29 	.word	0x0800bd29
 800bcd4:	0800bd19 	.word	0x0800bd19
 800bcd8:	0800bd29 	.word	0x0800bd29
 800bcdc:	0800bd29 	.word	0x0800bd29
 800bce0:	0800bd29 	.word	0x0800bd29
 800bce4:	0800bd29 	.word	0x0800bd29
 800bce8:	0800bd29 	.word	0x0800bd29
 800bcec:	0800bd29 	.word	0x0800bd29
 800bcf0:	0800bd29 	.word	0x0800bd29
 800bcf4:	0800bd21 	.word	0x0800bd21
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfe:	e222      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd00:	2304      	movs	r3, #4
 800bd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd06:	e21e      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd08:	2308      	movs	r3, #8
 800bd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd0e:	e21a      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd10:	2310      	movs	r3, #16
 800bd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd16:	e216      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd18:	2320      	movs	r3, #32
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd1e:	e212      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd20:	2340      	movs	r3, #64	; 0x40
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd26:	e20e      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd28:	2380      	movs	r3, #128	; 0x80
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2e:	e20a      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a69      	ldr	r2, [pc, #420]	; (800bedc <UART_SetConfig+0x33c>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d130      	bne.n	800bd9c <UART_SetConfig+0x1fc>
 800bd3a:	4b67      	ldr	r3, [pc, #412]	; (800bed8 <UART_SetConfig+0x338>)
 800bd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd3e:	f003 0307 	and.w	r3, r3, #7
 800bd42:	2b05      	cmp	r3, #5
 800bd44:	d826      	bhi.n	800bd94 <UART_SetConfig+0x1f4>
 800bd46:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <UART_SetConfig+0x1ac>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bd65 	.word	0x0800bd65
 800bd50:	0800bd6d 	.word	0x0800bd6d
 800bd54:	0800bd75 	.word	0x0800bd75
 800bd58:	0800bd7d 	.word	0x0800bd7d
 800bd5c:	0800bd85 	.word	0x0800bd85
 800bd60:	0800bd8d 	.word	0x0800bd8d
 800bd64:	2300      	movs	r3, #0
 800bd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd6a:	e1ec      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd6c:	2304      	movs	r3, #4
 800bd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd72:	e1e8      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd74:	2308      	movs	r3, #8
 800bd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd7a:	e1e4      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd7c:	2310      	movs	r3, #16
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd82:	e1e0      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd84:	2320      	movs	r3, #32
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8a:	e1dc      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd8c:	2340      	movs	r3, #64	; 0x40
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd92:	e1d8      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd94:	2380      	movs	r3, #128	; 0x80
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9a:	e1d4      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a4f      	ldr	r2, [pc, #316]	; (800bee0 <UART_SetConfig+0x340>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d130      	bne.n	800be08 <UART_SetConfig+0x268>
 800bda6:	4b4c      	ldr	r3, [pc, #304]	; (800bed8 <UART_SetConfig+0x338>)
 800bda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdaa:	f003 0307 	and.w	r3, r3, #7
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	d826      	bhi.n	800be00 <UART_SetConfig+0x260>
 800bdb2:	a201      	add	r2, pc, #4	; (adr r2, 800bdb8 <UART_SetConfig+0x218>)
 800bdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb8:	0800bdd1 	.word	0x0800bdd1
 800bdbc:	0800bdd9 	.word	0x0800bdd9
 800bdc0:	0800bde1 	.word	0x0800bde1
 800bdc4:	0800bde9 	.word	0x0800bde9
 800bdc8:	0800bdf1 	.word	0x0800bdf1
 800bdcc:	0800bdf9 	.word	0x0800bdf9
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdd6:	e1b6      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bdd8:	2304      	movs	r3, #4
 800bdda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdde:	e1b2      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bde0:	2308      	movs	r3, #8
 800bde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bde6:	e1ae      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bde8:	2310      	movs	r3, #16
 800bdea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdee:	e1aa      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bdf0:	2320      	movs	r3, #32
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdf6:	e1a6      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bdf8:	2340      	movs	r3, #64	; 0x40
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdfe:	e1a2      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be00:	2380      	movs	r3, #128	; 0x80
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be06:	e19e      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a35      	ldr	r2, [pc, #212]	; (800bee4 <UART_SetConfig+0x344>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d130      	bne.n	800be74 <UART_SetConfig+0x2d4>
 800be12:	4b31      	ldr	r3, [pc, #196]	; (800bed8 <UART_SetConfig+0x338>)
 800be14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be16:	f003 0307 	and.w	r3, r3, #7
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	d826      	bhi.n	800be6c <UART_SetConfig+0x2cc>
 800be1e:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <UART_SetConfig+0x284>)
 800be20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be24:	0800be3d 	.word	0x0800be3d
 800be28:	0800be45 	.word	0x0800be45
 800be2c:	0800be4d 	.word	0x0800be4d
 800be30:	0800be55 	.word	0x0800be55
 800be34:	0800be5d 	.word	0x0800be5d
 800be38:	0800be65 	.word	0x0800be65
 800be3c:	2300      	movs	r3, #0
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be42:	e180      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be44:	2304      	movs	r3, #4
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4a:	e17c      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be4c:	2308      	movs	r3, #8
 800be4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be52:	e178      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be54:	2310      	movs	r3, #16
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5a:	e174      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be5c:	2320      	movs	r3, #32
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be62:	e170      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be64:	2340      	movs	r3, #64	; 0x40
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6a:	e16c      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be6c:	2380      	movs	r3, #128	; 0x80
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be72:	e168      	b.n	800c146 <UART_SetConfig+0x5a6>
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a1b      	ldr	r2, [pc, #108]	; (800bee8 <UART_SetConfig+0x348>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d142      	bne.n	800bf04 <UART_SetConfig+0x364>
 800be7e:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <UART_SetConfig+0x338>)
 800be80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b05      	cmp	r3, #5
 800be88:	d838      	bhi.n	800befc <UART_SetConfig+0x35c>
 800be8a:	a201      	add	r2, pc, #4	; (adr r2, 800be90 <UART_SetConfig+0x2f0>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bea9 	.word	0x0800bea9
 800be94:	0800beb1 	.word	0x0800beb1
 800be98:	0800beb9 	.word	0x0800beb9
 800be9c:	0800bec1 	.word	0x0800bec1
 800bea0:	0800beed 	.word	0x0800beed
 800bea4:	0800bef5 	.word	0x0800bef5
 800bea8:	2300      	movs	r3, #0
 800beaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beae:	e14a      	b.n	800c146 <UART_SetConfig+0x5a6>
 800beb0:	2304      	movs	r3, #4
 800beb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beb6:	e146      	b.n	800c146 <UART_SetConfig+0x5a6>
 800beb8:	2308      	movs	r3, #8
 800beba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bebe:	e142      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bec0:	2310      	movs	r3, #16
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec6:	e13e      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bec8:	cfff69f3 	.word	0xcfff69f3
 800becc:	58000c00 	.word	0x58000c00
 800bed0:	11fff4ff 	.word	0x11fff4ff
 800bed4:	40011000 	.word	0x40011000
 800bed8:	58024400 	.word	0x58024400
 800bedc:	40004400 	.word	0x40004400
 800bee0:	40004800 	.word	0x40004800
 800bee4:	40004c00 	.word	0x40004c00
 800bee8:	40005000 	.word	0x40005000
 800beec:	2320      	movs	r3, #32
 800beee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef2:	e128      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bef4:	2340      	movs	r3, #64	; 0x40
 800bef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befa:	e124      	b.n	800c146 <UART_SetConfig+0x5a6>
 800befc:	2380      	movs	r3, #128	; 0x80
 800befe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf02:	e120      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4acb      	ldr	r2, [pc, #812]	; (800c238 <UART_SetConfig+0x698>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d176      	bne.n	800bffc <UART_SetConfig+0x45c>
 800bf0e:	4bcb      	ldr	r3, [pc, #812]	; (800c23c <UART_SetConfig+0x69c>)
 800bf10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf16:	2b28      	cmp	r3, #40	; 0x28
 800bf18:	d86c      	bhi.n	800bff4 <UART_SetConfig+0x454>
 800bf1a:	a201      	add	r2, pc, #4	; (adr r2, 800bf20 <UART_SetConfig+0x380>)
 800bf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf20:	0800bfc5 	.word	0x0800bfc5
 800bf24:	0800bff5 	.word	0x0800bff5
 800bf28:	0800bff5 	.word	0x0800bff5
 800bf2c:	0800bff5 	.word	0x0800bff5
 800bf30:	0800bff5 	.word	0x0800bff5
 800bf34:	0800bff5 	.word	0x0800bff5
 800bf38:	0800bff5 	.word	0x0800bff5
 800bf3c:	0800bff5 	.word	0x0800bff5
 800bf40:	0800bfcd 	.word	0x0800bfcd
 800bf44:	0800bff5 	.word	0x0800bff5
 800bf48:	0800bff5 	.word	0x0800bff5
 800bf4c:	0800bff5 	.word	0x0800bff5
 800bf50:	0800bff5 	.word	0x0800bff5
 800bf54:	0800bff5 	.word	0x0800bff5
 800bf58:	0800bff5 	.word	0x0800bff5
 800bf5c:	0800bff5 	.word	0x0800bff5
 800bf60:	0800bfd5 	.word	0x0800bfd5
 800bf64:	0800bff5 	.word	0x0800bff5
 800bf68:	0800bff5 	.word	0x0800bff5
 800bf6c:	0800bff5 	.word	0x0800bff5
 800bf70:	0800bff5 	.word	0x0800bff5
 800bf74:	0800bff5 	.word	0x0800bff5
 800bf78:	0800bff5 	.word	0x0800bff5
 800bf7c:	0800bff5 	.word	0x0800bff5
 800bf80:	0800bfdd 	.word	0x0800bfdd
 800bf84:	0800bff5 	.word	0x0800bff5
 800bf88:	0800bff5 	.word	0x0800bff5
 800bf8c:	0800bff5 	.word	0x0800bff5
 800bf90:	0800bff5 	.word	0x0800bff5
 800bf94:	0800bff5 	.word	0x0800bff5
 800bf98:	0800bff5 	.word	0x0800bff5
 800bf9c:	0800bff5 	.word	0x0800bff5
 800bfa0:	0800bfe5 	.word	0x0800bfe5
 800bfa4:	0800bff5 	.word	0x0800bff5
 800bfa8:	0800bff5 	.word	0x0800bff5
 800bfac:	0800bff5 	.word	0x0800bff5
 800bfb0:	0800bff5 	.word	0x0800bff5
 800bfb4:	0800bff5 	.word	0x0800bff5
 800bfb8:	0800bff5 	.word	0x0800bff5
 800bfbc:	0800bff5 	.word	0x0800bff5
 800bfc0:	0800bfed 	.word	0x0800bfed
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfca:	e0bc      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bfcc:	2304      	movs	r3, #4
 800bfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd2:	e0b8      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bfd4:	2308      	movs	r3, #8
 800bfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfda:	e0b4      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bfdc:	2310      	movs	r3, #16
 800bfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe2:	e0b0      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bfe4:	2320      	movs	r3, #32
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfea:	e0ac      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bfec:	2340      	movs	r3, #64	; 0x40
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e0a8      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bff4:	2380      	movs	r3, #128	; 0x80
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e0a4      	b.n	800c146 <UART_SetConfig+0x5a6>
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a8f      	ldr	r2, [pc, #572]	; (800c240 <UART_SetConfig+0x6a0>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d130      	bne.n	800c068 <UART_SetConfig+0x4c8>
 800c006:	4b8d      	ldr	r3, [pc, #564]	; (800c23c <UART_SetConfig+0x69c>)
 800c008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c00a:	f003 0307 	and.w	r3, r3, #7
 800c00e:	2b05      	cmp	r3, #5
 800c010:	d826      	bhi.n	800c060 <UART_SetConfig+0x4c0>
 800c012:	a201      	add	r2, pc, #4	; (adr r2, 800c018 <UART_SetConfig+0x478>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c031 	.word	0x0800c031
 800c01c:	0800c039 	.word	0x0800c039
 800c020:	0800c041 	.word	0x0800c041
 800c024:	0800c049 	.word	0x0800c049
 800c028:	0800c051 	.word	0x0800c051
 800c02c:	0800c059 	.word	0x0800c059
 800c030:	2300      	movs	r3, #0
 800c032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c036:	e086      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c038:	2304      	movs	r3, #4
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c03e:	e082      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c040:	2308      	movs	r3, #8
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c046:	e07e      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c048:	2310      	movs	r3, #16
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04e:	e07a      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c050:	2320      	movs	r3, #32
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c056:	e076      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c058:	2340      	movs	r3, #64	; 0x40
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c05e:	e072      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c060:	2380      	movs	r3, #128	; 0x80
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c066:	e06e      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a75      	ldr	r2, [pc, #468]	; (800c244 <UART_SetConfig+0x6a4>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d130      	bne.n	800c0d4 <UART_SetConfig+0x534>
 800c072:	4b72      	ldr	r3, [pc, #456]	; (800c23c <UART_SetConfig+0x69c>)
 800c074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c076:	f003 0307 	and.w	r3, r3, #7
 800c07a:	2b05      	cmp	r3, #5
 800c07c:	d826      	bhi.n	800c0cc <UART_SetConfig+0x52c>
 800c07e:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <UART_SetConfig+0x4e4>)
 800c080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c084:	0800c09d 	.word	0x0800c09d
 800c088:	0800c0a5 	.word	0x0800c0a5
 800c08c:	0800c0ad 	.word	0x0800c0ad
 800c090:	0800c0b5 	.word	0x0800c0b5
 800c094:	0800c0bd 	.word	0x0800c0bd
 800c098:	0800c0c5 	.word	0x0800c0c5
 800c09c:	2300      	movs	r3, #0
 800c09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0a2:	e050      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c0a4:	2304      	movs	r3, #4
 800c0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0aa:	e04c      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c0ac:	2308      	movs	r3, #8
 800c0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0b2:	e048      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c0b4:	2310      	movs	r3, #16
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ba:	e044      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c0bc:	2320      	movs	r3, #32
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c2:	e040      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c0c4:	2340      	movs	r3, #64	; 0x40
 800c0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ca:	e03c      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c0cc:	2380      	movs	r3, #128	; 0x80
 800c0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d2:	e038      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a5b      	ldr	r2, [pc, #364]	; (800c248 <UART_SetConfig+0x6a8>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d130      	bne.n	800c140 <UART_SetConfig+0x5a0>
 800c0de:	4b57      	ldr	r3, [pc, #348]	; (800c23c <UART_SetConfig+0x69c>)
 800c0e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e2:	f003 0307 	and.w	r3, r3, #7
 800c0e6:	2b05      	cmp	r3, #5
 800c0e8:	d826      	bhi.n	800c138 <UART_SetConfig+0x598>
 800c0ea:	a201      	add	r2, pc, #4	; (adr r2, 800c0f0 <UART_SetConfig+0x550>)
 800c0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f0:	0800c109 	.word	0x0800c109
 800c0f4:	0800c111 	.word	0x0800c111
 800c0f8:	0800c119 	.word	0x0800c119
 800c0fc:	0800c121 	.word	0x0800c121
 800c100:	0800c129 	.word	0x0800c129
 800c104:	0800c131 	.word	0x0800c131
 800c108:	2302      	movs	r3, #2
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10e:	e01a      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c110:	2304      	movs	r3, #4
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c116:	e016      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c118:	2308      	movs	r3, #8
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11e:	e012      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c120:	2310      	movs	r3, #16
 800c122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c126:	e00e      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c128:	2320      	movs	r3, #32
 800c12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12e:	e00a      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c130:	2340      	movs	r3, #64	; 0x40
 800c132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c136:	e006      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c138:	2380      	movs	r3, #128	; 0x80
 800c13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13e:	e002      	b.n	800c146 <UART_SetConfig+0x5a6>
 800c140:	2380      	movs	r3, #128	; 0x80
 800c142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4a3f      	ldr	r2, [pc, #252]	; (800c248 <UART_SetConfig+0x6a8>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	f040 80f8 	bne.w	800c342 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c156:	2b20      	cmp	r3, #32
 800c158:	dc46      	bgt.n	800c1e8 <UART_SetConfig+0x648>
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	f2c0 8082 	blt.w	800c264 <UART_SetConfig+0x6c4>
 800c160:	3b02      	subs	r3, #2
 800c162:	2b1e      	cmp	r3, #30
 800c164:	d87e      	bhi.n	800c264 <UART_SetConfig+0x6c4>
 800c166:	a201      	add	r2, pc, #4	; (adr r2, 800c16c <UART_SetConfig+0x5cc>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c1ef 	.word	0x0800c1ef
 800c170:	0800c265 	.word	0x0800c265
 800c174:	0800c1f7 	.word	0x0800c1f7
 800c178:	0800c265 	.word	0x0800c265
 800c17c:	0800c265 	.word	0x0800c265
 800c180:	0800c265 	.word	0x0800c265
 800c184:	0800c207 	.word	0x0800c207
 800c188:	0800c265 	.word	0x0800c265
 800c18c:	0800c265 	.word	0x0800c265
 800c190:	0800c265 	.word	0x0800c265
 800c194:	0800c265 	.word	0x0800c265
 800c198:	0800c265 	.word	0x0800c265
 800c19c:	0800c265 	.word	0x0800c265
 800c1a0:	0800c265 	.word	0x0800c265
 800c1a4:	0800c217 	.word	0x0800c217
 800c1a8:	0800c265 	.word	0x0800c265
 800c1ac:	0800c265 	.word	0x0800c265
 800c1b0:	0800c265 	.word	0x0800c265
 800c1b4:	0800c265 	.word	0x0800c265
 800c1b8:	0800c265 	.word	0x0800c265
 800c1bc:	0800c265 	.word	0x0800c265
 800c1c0:	0800c265 	.word	0x0800c265
 800c1c4:	0800c265 	.word	0x0800c265
 800c1c8:	0800c265 	.word	0x0800c265
 800c1cc:	0800c265 	.word	0x0800c265
 800c1d0:	0800c265 	.word	0x0800c265
 800c1d4:	0800c265 	.word	0x0800c265
 800c1d8:	0800c265 	.word	0x0800c265
 800c1dc:	0800c265 	.word	0x0800c265
 800c1e0:	0800c265 	.word	0x0800c265
 800c1e4:	0800c257 	.word	0x0800c257
 800c1e8:	2b40      	cmp	r3, #64	; 0x40
 800c1ea:	d037      	beq.n	800c25c <UART_SetConfig+0x6bc>
 800c1ec:	e03a      	b.n	800c264 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c1ee:	f7fd ffb9 	bl	800a164 <HAL_RCCEx_GetD3PCLK1Freq>
 800c1f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1f4:	e03c      	b.n	800c270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fd ffc8 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c204:	e034      	b.n	800c270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c206:	f107 0318 	add.w	r3, r7, #24
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe f914 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c214:	e02c      	b.n	800c270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c216:	4b09      	ldr	r3, [pc, #36]	; (800c23c <UART_SetConfig+0x69c>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 0320 	and.w	r3, r3, #32
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d016      	beq.n	800c250 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c222:	4b06      	ldr	r3, [pc, #24]	; (800c23c <UART_SetConfig+0x69c>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	08db      	lsrs	r3, r3, #3
 800c228:	f003 0303 	and.w	r3, r3, #3
 800c22c:	4a07      	ldr	r2, [pc, #28]	; (800c24c <UART_SetConfig+0x6ac>)
 800c22e:	fa22 f303 	lsr.w	r3, r2, r3
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c234:	e01c      	b.n	800c270 <UART_SetConfig+0x6d0>
 800c236:	bf00      	nop
 800c238:	40011400 	.word	0x40011400
 800c23c:	58024400 	.word	0x58024400
 800c240:	40007800 	.word	0x40007800
 800c244:	40007c00 	.word	0x40007c00
 800c248:	58000c00 	.word	0x58000c00
 800c24c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c250:	4b9d      	ldr	r3, [pc, #628]	; (800c4c8 <UART_SetConfig+0x928>)
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c254:	e00c      	b.n	800c270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c256:	4b9d      	ldr	r3, [pc, #628]	; (800c4cc <UART_SetConfig+0x92c>)
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25a:	e009      	b.n	800c270 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c25c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c262:	e005      	b.n	800c270 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c264:	2300      	movs	r3, #0
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c26e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 81de 	beq.w	800c634 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27c:	4a94      	ldr	r2, [pc, #592]	; (800c4d0 <UART_SetConfig+0x930>)
 800c27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c282:	461a      	mov	r2, r3
 800c284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c286:	fbb3 f3f2 	udiv	r3, r3, r2
 800c28a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	4613      	mov	r3, r2
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	4413      	add	r3, r2
 800c296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c298:	429a      	cmp	r2, r3
 800c29a:	d305      	bcc.n	800c2a8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d903      	bls.n	800c2b0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c2ae:	e1c1      	b.n	800c634 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	60bb      	str	r3, [r7, #8]
 800c2b6:	60fa      	str	r2, [r7, #12]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2bc:	4a84      	ldr	r2, [pc, #528]	; (800c4d0 <UART_SetConfig+0x930>)
 800c2be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	603b      	str	r3, [r7, #0]
 800c2c8:	607a      	str	r2, [r7, #4]
 800c2ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2d2:	f7f4 f85d 	bl	8000390 <__aeabi_uldivmod>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	4610      	mov	r0, r2
 800c2dc:	4619      	mov	r1, r3
 800c2de:	f04f 0200 	mov.w	r2, #0
 800c2e2:	f04f 0300 	mov.w	r3, #0
 800c2e6:	020b      	lsls	r3, r1, #8
 800c2e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2ec:	0202      	lsls	r2, r0, #8
 800c2ee:	6979      	ldr	r1, [r7, #20]
 800c2f0:	6849      	ldr	r1, [r1, #4]
 800c2f2:	0849      	lsrs	r1, r1, #1
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	eb12 0804 	adds.w	r8, r2, r4
 800c2fe:	eb43 0905 	adc.w	r9, r3, r5
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	469a      	mov	sl, r3
 800c30a:	4693      	mov	fp, r2
 800c30c:	4652      	mov	r2, sl
 800c30e:	465b      	mov	r3, fp
 800c310:	4640      	mov	r0, r8
 800c312:	4649      	mov	r1, r9
 800c314:	f7f4 f83c 	bl	8000390 <__aeabi_uldivmod>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	4613      	mov	r3, r2
 800c31e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c326:	d308      	bcc.n	800c33a <UART_SetConfig+0x79a>
 800c328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c32e:	d204      	bcs.n	800c33a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c336:	60da      	str	r2, [r3, #12]
 800c338:	e17c      	b.n	800c634 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c340:	e178      	b.n	800c634 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	69db      	ldr	r3, [r3, #28]
 800c346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c34a:	f040 80c5 	bne.w	800c4d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c34e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c352:	2b20      	cmp	r3, #32
 800c354:	dc48      	bgt.n	800c3e8 <UART_SetConfig+0x848>
 800c356:	2b00      	cmp	r3, #0
 800c358:	db7b      	blt.n	800c452 <UART_SetConfig+0x8b2>
 800c35a:	2b20      	cmp	r3, #32
 800c35c:	d879      	bhi.n	800c452 <UART_SetConfig+0x8b2>
 800c35e:	a201      	add	r2, pc, #4	; (adr r2, 800c364 <UART_SetConfig+0x7c4>)
 800c360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c364:	0800c3ef 	.word	0x0800c3ef
 800c368:	0800c3f7 	.word	0x0800c3f7
 800c36c:	0800c453 	.word	0x0800c453
 800c370:	0800c453 	.word	0x0800c453
 800c374:	0800c3ff 	.word	0x0800c3ff
 800c378:	0800c453 	.word	0x0800c453
 800c37c:	0800c453 	.word	0x0800c453
 800c380:	0800c453 	.word	0x0800c453
 800c384:	0800c40f 	.word	0x0800c40f
 800c388:	0800c453 	.word	0x0800c453
 800c38c:	0800c453 	.word	0x0800c453
 800c390:	0800c453 	.word	0x0800c453
 800c394:	0800c453 	.word	0x0800c453
 800c398:	0800c453 	.word	0x0800c453
 800c39c:	0800c453 	.word	0x0800c453
 800c3a0:	0800c453 	.word	0x0800c453
 800c3a4:	0800c41f 	.word	0x0800c41f
 800c3a8:	0800c453 	.word	0x0800c453
 800c3ac:	0800c453 	.word	0x0800c453
 800c3b0:	0800c453 	.word	0x0800c453
 800c3b4:	0800c453 	.word	0x0800c453
 800c3b8:	0800c453 	.word	0x0800c453
 800c3bc:	0800c453 	.word	0x0800c453
 800c3c0:	0800c453 	.word	0x0800c453
 800c3c4:	0800c453 	.word	0x0800c453
 800c3c8:	0800c453 	.word	0x0800c453
 800c3cc:	0800c453 	.word	0x0800c453
 800c3d0:	0800c453 	.word	0x0800c453
 800c3d4:	0800c453 	.word	0x0800c453
 800c3d8:	0800c453 	.word	0x0800c453
 800c3dc:	0800c453 	.word	0x0800c453
 800c3e0:	0800c453 	.word	0x0800c453
 800c3e4:	0800c445 	.word	0x0800c445
 800c3e8:	2b40      	cmp	r3, #64	; 0x40
 800c3ea:	d02e      	beq.n	800c44a <UART_SetConfig+0x8aa>
 800c3ec:	e031      	b.n	800c452 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3ee:	f7fb ff03 	bl	80081f8 <HAL_RCC_GetPCLK1Freq>
 800c3f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3f4:	e033      	b.n	800c45e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3f6:	f7fb ff15 	bl	8008224 <HAL_RCC_GetPCLK2Freq>
 800c3fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3fc:	e02f      	b.n	800c45e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c402:	4618      	mov	r0, r3
 800c404:	f7fd fec4 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c40c:	e027      	b.n	800c45e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c40e:	f107 0318 	add.w	r3, r7, #24
 800c412:	4618      	mov	r0, r3
 800c414:	f7fe f810 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	e01f      	b.n	800c45e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c41e:	4b2d      	ldr	r3, [pc, #180]	; (800c4d4 <UART_SetConfig+0x934>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0320 	and.w	r3, r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	d009      	beq.n	800c43e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c42a:	4b2a      	ldr	r3, [pc, #168]	; (800c4d4 <UART_SetConfig+0x934>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	08db      	lsrs	r3, r3, #3
 800c430:	f003 0303 	and.w	r3, r3, #3
 800c434:	4a24      	ldr	r2, [pc, #144]	; (800c4c8 <UART_SetConfig+0x928>)
 800c436:	fa22 f303 	lsr.w	r3, r2, r3
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c43c:	e00f      	b.n	800c45e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c43e:	4b22      	ldr	r3, [pc, #136]	; (800c4c8 <UART_SetConfig+0x928>)
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c442:	e00c      	b.n	800c45e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c444:	4b21      	ldr	r3, [pc, #132]	; (800c4cc <UART_SetConfig+0x92c>)
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e009      	b.n	800c45e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c44a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c450:	e005      	b.n	800c45e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c45c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 80e7 	beq.w	800c634 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	4a19      	ldr	r2, [pc, #100]	; (800c4d0 <UART_SetConfig+0x930>)
 800c46c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c470:	461a      	mov	r2, r3
 800c472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c474:	fbb3 f3f2 	udiv	r3, r3, r2
 800c478:	005a      	lsls	r2, r3, #1
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	085b      	lsrs	r3, r3, #1
 800c480:	441a      	add	r2, r3
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	fbb2 f3f3 	udiv	r3, r2, r3
 800c48a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48e:	2b0f      	cmp	r3, #15
 800c490:	d916      	bls.n	800c4c0 <UART_SetConfig+0x920>
 800c492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c498:	d212      	bcs.n	800c4c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f023 030f 	bic.w	r3, r3, #15
 800c4a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	085b      	lsrs	r3, r3, #1
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	f003 0307 	and.w	r3, r3, #7
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c4bc:	60da      	str	r2, [r3, #12]
 800c4be:	e0b9      	b.n	800c634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c4c6:	e0b5      	b.n	800c634 <UART_SetConfig+0xa94>
 800c4c8:	03d09000 	.word	0x03d09000
 800c4cc:	003d0900 	.word	0x003d0900
 800c4d0:	0800e9dc 	.word	0x0800e9dc
 800c4d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	dc49      	bgt.n	800c574 <UART_SetConfig+0x9d4>
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	db7c      	blt.n	800c5de <UART_SetConfig+0xa3e>
 800c4e4:	2b20      	cmp	r3, #32
 800c4e6:	d87a      	bhi.n	800c5de <UART_SetConfig+0xa3e>
 800c4e8:	a201      	add	r2, pc, #4	; (adr r2, 800c4f0 <UART_SetConfig+0x950>)
 800c4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ee:	bf00      	nop
 800c4f0:	0800c57b 	.word	0x0800c57b
 800c4f4:	0800c583 	.word	0x0800c583
 800c4f8:	0800c5df 	.word	0x0800c5df
 800c4fc:	0800c5df 	.word	0x0800c5df
 800c500:	0800c58b 	.word	0x0800c58b
 800c504:	0800c5df 	.word	0x0800c5df
 800c508:	0800c5df 	.word	0x0800c5df
 800c50c:	0800c5df 	.word	0x0800c5df
 800c510:	0800c59b 	.word	0x0800c59b
 800c514:	0800c5df 	.word	0x0800c5df
 800c518:	0800c5df 	.word	0x0800c5df
 800c51c:	0800c5df 	.word	0x0800c5df
 800c520:	0800c5df 	.word	0x0800c5df
 800c524:	0800c5df 	.word	0x0800c5df
 800c528:	0800c5df 	.word	0x0800c5df
 800c52c:	0800c5df 	.word	0x0800c5df
 800c530:	0800c5ab 	.word	0x0800c5ab
 800c534:	0800c5df 	.word	0x0800c5df
 800c538:	0800c5df 	.word	0x0800c5df
 800c53c:	0800c5df 	.word	0x0800c5df
 800c540:	0800c5df 	.word	0x0800c5df
 800c544:	0800c5df 	.word	0x0800c5df
 800c548:	0800c5df 	.word	0x0800c5df
 800c54c:	0800c5df 	.word	0x0800c5df
 800c550:	0800c5df 	.word	0x0800c5df
 800c554:	0800c5df 	.word	0x0800c5df
 800c558:	0800c5df 	.word	0x0800c5df
 800c55c:	0800c5df 	.word	0x0800c5df
 800c560:	0800c5df 	.word	0x0800c5df
 800c564:	0800c5df 	.word	0x0800c5df
 800c568:	0800c5df 	.word	0x0800c5df
 800c56c:	0800c5df 	.word	0x0800c5df
 800c570:	0800c5d1 	.word	0x0800c5d1
 800c574:	2b40      	cmp	r3, #64	; 0x40
 800c576:	d02e      	beq.n	800c5d6 <UART_SetConfig+0xa36>
 800c578:	e031      	b.n	800c5de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c57a:	f7fb fe3d 	bl	80081f8 <HAL_RCC_GetPCLK1Freq>
 800c57e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c580:	e033      	b.n	800c5ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c582:	f7fb fe4f 	bl	8008224 <HAL_RCC_GetPCLK2Freq>
 800c586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c588:	e02f      	b.n	800c5ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c58a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fd fdfe 	bl	800a190 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c598:	e027      	b.n	800c5ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c59a:	f107 0318 	add.w	r3, r7, #24
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fd ff4a 	bl	800a438 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a8:	e01f      	b.n	800c5ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5aa:	4b2d      	ldr	r3, [pc, #180]	; (800c660 <UART_SetConfig+0xac0>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 0320 	and.w	r3, r3, #32
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d009      	beq.n	800c5ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5b6:	4b2a      	ldr	r3, [pc, #168]	; (800c660 <UART_SetConfig+0xac0>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	08db      	lsrs	r3, r3, #3
 800c5bc:	f003 0303 	and.w	r3, r3, #3
 800c5c0:	4a28      	ldr	r2, [pc, #160]	; (800c664 <UART_SetConfig+0xac4>)
 800c5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5c8:	e00f      	b.n	800c5ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c5ca:	4b26      	ldr	r3, [pc, #152]	; (800c664 <UART_SetConfig+0xac4>)
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ce:	e00c      	b.n	800c5ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5d0:	4b25      	ldr	r3, [pc, #148]	; (800c668 <UART_SetConfig+0xac8>)
 800c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d4:	e009      	b.n	800c5ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5dc:	e005      	b.n	800c5ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c5e8:	bf00      	nop
    }

    if (pclk != 0U)
 800c5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d021      	beq.n	800c634 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f4:	4a1d      	ldr	r2, [pc, #116]	; (800c66c <UART_SetConfig+0xacc>)
 800c5f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5fe:	fbb3 f2f2 	udiv	r2, r3, r2
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	085b      	lsrs	r3, r3, #1
 800c608:	441a      	add	r2, r3
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c612:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	2b0f      	cmp	r3, #15
 800c618:	d909      	bls.n	800c62e <UART_SetConfig+0xa8e>
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c620:	d205      	bcs.n	800c62e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	b29a      	uxth	r2, r3
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	60da      	str	r2, [r3, #12]
 800c62c:	e002      	b.n	800c634 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	2201      	movs	r2, #1
 800c638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2201      	movs	r2, #1
 800c640:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2200      	movs	r2, #0
 800c648:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2200      	movs	r2, #0
 800c64e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c650:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c654:	4618      	mov	r0, r3
 800c656:	3748      	adds	r7, #72	; 0x48
 800c658:	46bd      	mov	sp, r7
 800c65a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c65e:	bf00      	nop
 800c660:	58024400 	.word	0x58024400
 800c664:	03d09000 	.word	0x03d09000
 800c668:	003d0900 	.word	0x003d0900
 800c66c:	0800e9dc 	.word	0x0800e9dc

0800c670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67c:	f003 0301 	and.w	r3, r3, #1
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00a      	beq.n	800c69a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	430a      	orrs	r2, r1
 800c698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c69e:	f003 0302 	and.w	r3, r3, #2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	430a      	orrs	r2, r1
 800c6ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c0:	f003 0304 	and.w	r3, r3, #4
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00a      	beq.n	800c6de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e2:	f003 0308 	and.w	r3, r3, #8
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	430a      	orrs	r2, r1
 800c6fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c704:	f003 0310 	and.w	r3, r3, #16
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00a      	beq.n	800c722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	430a      	orrs	r2, r1
 800c720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c726:	f003 0320 	and.w	r3, r3, #32
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00a      	beq.n	800c744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	430a      	orrs	r2, r1
 800c742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d01a      	beq.n	800c786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c76e:	d10a      	bne.n	800c786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00a      	beq.n	800c7a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	605a      	str	r2, [r3, #4]
  }
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b098      	sub	sp, #96	; 0x60
 800c7b8:	af02      	add	r7, sp, #8
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7c4:	f7f5 f866 	bl	8001894 <HAL_GetTick>
 800c7c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	d12f      	bne.n	800c838 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f88e 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d022      	beq.n	800c838 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fa:	e853 3f00 	ldrex	r3, [r3]
 800c7fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c806:	653b      	str	r3, [r7, #80]	; 0x50
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c810:	647b      	str	r3, [r7, #68]	; 0x44
 800c812:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c814:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c818:	e841 2300 	strex	r3, r2, [r1]
 800c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1e6      	bne.n	800c7f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2220      	movs	r2, #32
 800c828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c834:	2303      	movs	r3, #3
 800c836:	e063      	b.n	800c900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f003 0304 	and.w	r3, r3, #4
 800c842:	2b04      	cmp	r3, #4
 800c844:	d149      	bne.n	800c8da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c846:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c84e:	2200      	movs	r2, #0
 800c850:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f857 	bl	800c908 <UART_WaitOnFlagUntilTimeout>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d03c      	beq.n	800c8da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c868:	e853 3f00 	ldrex	r3, [r3]
 800c86c:	623b      	str	r3, [r7, #32]
   return(result);
 800c86e:	6a3b      	ldr	r3, [r7, #32]
 800c870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c874:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c87e:	633b      	str	r3, [r7, #48]	; 0x30
 800c880:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c886:	e841 2300 	strex	r3, r2, [r1]
 800c88a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1e6      	bne.n	800c860 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	3308      	adds	r3, #8
 800c898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	e853 3f00 	ldrex	r3, [r3]
 800c8a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f023 0301 	bic.w	r3, r3, #1
 800c8a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8b2:	61fa      	str	r2, [r7, #28]
 800c8b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b6:	69b9      	ldr	r1, [r7, #24]
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	e841 2300 	strex	r3, r2, [r1]
 800c8be:	617b      	str	r3, [r7, #20]
   return(result);
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d1e5      	bne.n	800c892 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2220      	movs	r2, #32
 800c8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8d6:	2303      	movs	r3, #3
 800c8d8:	e012      	b.n	800c900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3758      	adds	r7, #88	; 0x58
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	60b9      	str	r1, [r7, #8]
 800c912:	603b      	str	r3, [r7, #0]
 800c914:	4613      	mov	r3, r2
 800c916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c918:	e049      	b.n	800c9ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c920:	d045      	beq.n	800c9ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c922:	f7f4 ffb7 	bl	8001894 <HAL_GetTick>
 800c926:	4602      	mov	r2, r0
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d302      	bcc.n	800c938 <UART_WaitOnFlagUntilTimeout+0x30>
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	e048      	b.n	800c9ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 0304 	and.w	r3, r3, #4
 800c946:	2b00      	cmp	r3, #0
 800c948:	d031      	beq.n	800c9ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	f003 0308 	and.w	r3, r3, #8
 800c954:	2b08      	cmp	r3, #8
 800c956:	d110      	bne.n	800c97a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2208      	movs	r2, #8
 800c95e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f000 f95b 	bl	800cc1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2208      	movs	r2, #8
 800c96a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e029      	b.n	800c9ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	69db      	ldr	r3, [r3, #28]
 800c980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c988:	d111      	bne.n	800c9ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c992:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f000 f941 	bl	800cc1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2220      	movs	r2, #32
 800c99e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e00f      	b.n	800c9ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	69da      	ldr	r2, [r3, #28]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	4013      	ands	r3, r2
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	bf0c      	ite	eq
 800c9be:	2301      	moveq	r3, #1
 800c9c0:	2300      	movne	r3, #0
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	79fb      	ldrb	r3, [r7, #7]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d0a6      	beq.n	800c91a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
	...

0800c9d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b0a3      	sub	sp, #140	; 0x8c
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	88fa      	ldrh	r2, [r7, #6]
 800c9f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	88fa      	ldrh	r2, [r7, #6]
 800c9f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca0a:	d10e      	bne.n	800ca2a <UART_Start_Receive_IT+0x52>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d105      	bne.n	800ca20 <UART_Start_Receive_IT+0x48>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ca1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca1e:	e02d      	b.n	800ca7c <UART_Start_Receive_IT+0xa4>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	22ff      	movs	r2, #255	; 0xff
 800ca24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca28:	e028      	b.n	800ca7c <UART_Start_Receive_IT+0xa4>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d10d      	bne.n	800ca4e <UART_Start_Receive_IT+0x76>
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d104      	bne.n	800ca44 <UART_Start_Receive_IT+0x6c>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	22ff      	movs	r2, #255	; 0xff
 800ca3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca42:	e01b      	b.n	800ca7c <UART_Start_Receive_IT+0xa4>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	227f      	movs	r2, #127	; 0x7f
 800ca48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca4c:	e016      	b.n	800ca7c <UART_Start_Receive_IT+0xa4>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	689b      	ldr	r3, [r3, #8]
 800ca52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca56:	d10d      	bne.n	800ca74 <UART_Start_Receive_IT+0x9c>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d104      	bne.n	800ca6a <UART_Start_Receive_IT+0x92>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	227f      	movs	r2, #127	; 0x7f
 800ca64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca68:	e008      	b.n	800ca7c <UART_Start_Receive_IT+0xa4>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	223f      	movs	r2, #63	; 0x3f
 800ca6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca72:	e003      	b.n	800ca7c <UART_Start_Receive_IT+0xa4>
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2222      	movs	r2, #34	; 0x22
 800ca88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3308      	adds	r3, #8
 800ca92:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca96:	e853 3f00 	ldrex	r3, [r3]
 800ca9a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ca9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ca9e:	f043 0301 	orr.w	r3, r3, #1
 800caa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	3308      	adds	r3, #8
 800caac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cab0:	673a      	str	r2, [r7, #112]	; 0x70
 800cab2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cab6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cab8:	e841 2300 	strex	r3, r2, [r1]
 800cabc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cabe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e3      	bne.n	800ca8c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cacc:	d14f      	bne.n	800cb6e <UART_Start_Receive_IT+0x196>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cad4:	88fa      	ldrh	r2, [r7, #6]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d349      	bcc.n	800cb6e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cae2:	d107      	bne.n	800caf4 <UART_Start_Receive_IT+0x11c>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d103      	bne.n	800caf4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4a47      	ldr	r2, [pc, #284]	; (800cc0c <UART_Start_Receive_IT+0x234>)
 800caf0:	675a      	str	r2, [r3, #116]	; 0x74
 800caf2:	e002      	b.n	800cafa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	4a46      	ldr	r2, [pc, #280]	; (800cc10 <UART_Start_Receive_IT+0x238>)
 800caf8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d01a      	beq.n	800cb38 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb24:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb26:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb2c:	e841 2300 	strex	r3, r2, [r1]
 800cb30:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1e4      	bne.n	800cb02 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb42:	e853 3f00 	ldrex	r3, [r3]
 800cb46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3308      	adds	r3, #8
 800cb56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cb58:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb60:	e841 2300 	strex	r3, r2, [r1]
 800cb64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1e5      	bne.n	800cb38 <UART_Start_Receive_IT+0x160>
 800cb6c:	e046      	b.n	800cbfc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb76:	d107      	bne.n	800cb88 <UART_Start_Receive_IT+0x1b0>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d103      	bne.n	800cb88 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4a24      	ldr	r2, [pc, #144]	; (800cc14 <UART_Start_Receive_IT+0x23c>)
 800cb84:	675a      	str	r2, [r3, #116]	; 0x74
 800cb86:	e002      	b.n	800cb8e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	4a23      	ldr	r2, [pc, #140]	; (800cc18 <UART_Start_Receive_IT+0x240>)
 800cb8c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d019      	beq.n	800cbca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb9e:	e853 3f00 	ldrex	r3, [r3]
 800cba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cbaa:	677b      	str	r3, [r7, #116]	; 0x74
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbb4:	637b      	str	r3, [r7, #52]	; 0x34
 800cbb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbbc:	e841 2300 	strex	r3, r2, [r1]
 800cbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e6      	bne.n	800cb96 <UART_Start_Receive_IT+0x1be>
 800cbc8:	e018      	b.n	800cbfc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	e853 3f00 	ldrex	r3, [r3]
 800cbd6:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	f043 0320 	orr.w	r3, r3, #32
 800cbde:	67bb      	str	r3, [r7, #120]	; 0x78
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbe8:	623b      	str	r3, [r7, #32]
 800cbea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbec:	69f9      	ldr	r1, [r7, #28]
 800cbee:	6a3a      	ldr	r2, [r7, #32]
 800cbf0:	e841 2300 	strex	r3, r2, [r1]
 800cbf4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1e6      	bne.n	800cbca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	378c      	adds	r7, #140	; 0x8c
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	0800d43d 	.word	0x0800d43d
 800cc10:	0800d0dd 	.word	0x0800d0dd
 800cc14:	0800cf25 	.word	0x0800cf25
 800cc18:	0800cd6d 	.word	0x0800cd6d

0800cc1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b095      	sub	sp, #84	; 0x54
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2c:	e853 3f00 	ldrex	r3, [r3]
 800cc30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc42:	643b      	str	r3, [r7, #64]	; 0x40
 800cc44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc4a:	e841 2300 	strex	r3, r2, [r1]
 800cc4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1e6      	bne.n	800cc24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3308      	adds	r3, #8
 800cc5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	e853 3f00 	ldrex	r3, [r3]
 800cc64:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	4b1e      	ldr	r3, [pc, #120]	; (800cce4 <UART_EndRxTransfer+0xc8>)
 800cc6a:	4013      	ands	r3, r2
 800cc6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	3308      	adds	r3, #8
 800cc74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc7e:	e841 2300 	strex	r3, r2, [r1]
 800cc82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1e5      	bne.n	800cc56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d118      	bne.n	800ccc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	e853 3f00 	ldrex	r3, [r3]
 800cc9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	f023 0310 	bic.w	r3, r3, #16
 800cca6:	647b      	str	r3, [r7, #68]	; 0x44
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	461a      	mov	r2, r3
 800ccae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccb0:	61bb      	str	r3, [r7, #24]
 800ccb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb4:	6979      	ldr	r1, [r7, #20]
 800ccb6:	69ba      	ldr	r2, [r7, #24]
 800ccb8:	e841 2300 	strex	r3, r2, [r1]
 800ccbc:	613b      	str	r3, [r7, #16]
   return(result);
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d1e6      	bne.n	800cc92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ccd8:	bf00      	nop
 800ccda:	3754      	adds	r7, #84	; 0x54
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	effffffe 	.word	0xeffffffe

0800cce8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7fe ff34 	bl	800bb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd0c:	bf00      	nop
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	e853 3f00 	ldrex	r3, [r3]
 800cd28:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd30:	61fb      	str	r3, [r7, #28]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	461a      	mov	r2, r3
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	61bb      	str	r3, [r7, #24]
 800cd3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3e:	6979      	ldr	r1, [r7, #20]
 800cd40:	69ba      	ldr	r2, [r7, #24]
 800cd42:	e841 2300 	strex	r3, r2, [r1]
 800cd46:	613b      	str	r3, [r7, #16]
   return(result);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1e6      	bne.n	800cd1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2220      	movs	r2, #32
 800cd52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f7fe feff 	bl	800bb60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd62:	bf00      	nop
 800cd64:	3720      	adds	r7, #32
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b09c      	sub	sp, #112	; 0x70
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd7a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd84:	2b22      	cmp	r3, #34	; 0x22
 800cd86:	f040 80be 	bne.w	800cf06 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cd98:	b2d9      	uxtb	r1, r3
 800cd9a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cda4:	400a      	ands	r2, r1
 800cda6:	b2d2      	uxtb	r2, r2
 800cda8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f040 80a1 	bne.w	800cf16 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cddc:	e853 3f00 	ldrex	r3, [r3]
 800cde0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cde2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cde4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cde8:	66bb      	str	r3, [r7, #104]	; 0x68
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	461a      	mov	r2, r3
 800cdf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cdf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdf4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdfa:	e841 2300 	strex	r3, r2, [r1]
 800cdfe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d1e6      	bne.n	800cdd4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3308      	adds	r3, #8
 800ce0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	e853 3f00 	ldrex	r3, [r3]
 800ce14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce18:	f023 0301 	bic.w	r3, r3, #1
 800ce1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3308      	adds	r3, #8
 800ce24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce26:	647a      	str	r2, [r7, #68]	; 0x44
 800ce28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1e5      	bne.n	800ce06 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2220      	movs	r2, #32
 800ce3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	4a33      	ldr	r2, [pc, #204]	; (800cf20 <UART_RxISR_8BIT+0x1b4>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d01f      	beq.n	800ce98 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d018      	beq.n	800ce98 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6e:	e853 3f00 	ldrex	r3, [r3]
 800ce72:	623b      	str	r3, [r7, #32]
   return(result);
 800ce74:	6a3b      	ldr	r3, [r7, #32]
 800ce76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce7a:	663b      	str	r3, [r7, #96]	; 0x60
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	461a      	mov	r2, r3
 800ce82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce84:	633b      	str	r3, [r7, #48]	; 0x30
 800ce86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce8c:	e841 2300 	strex	r3, r2, [r1]
 800ce90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1e6      	bne.n	800ce66 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d12e      	bne.n	800cefe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	e853 3f00 	ldrex	r3, [r3]
 800ceb2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f023 0310 	bic.w	r3, r3, #16
 800ceba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	461a      	mov	r2, r3
 800cec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cec4:	61fb      	str	r3, [r7, #28]
 800cec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec8:	69b9      	ldr	r1, [r7, #24]
 800ceca:	69fa      	ldr	r2, [r7, #28]
 800cecc:	e841 2300 	strex	r3, r2, [r1]
 800ced0:	617b      	str	r3, [r7, #20]
   return(result);
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1e6      	bne.n	800cea6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	69db      	ldr	r3, [r3, #28]
 800cede:	f003 0310 	and.w	r3, r3, #16
 800cee2:	2b10      	cmp	r3, #16
 800cee4:	d103      	bne.n	800ceee <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2210      	movs	r2, #16
 800ceec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7fe fe46 	bl	800bb88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cefc:	e00b      	b.n	800cf16 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7f3 fc80 	bl	8000804 <HAL_UART_RxCpltCallback>
}
 800cf04:	e007      	b.n	800cf16 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	699a      	ldr	r2, [r3, #24]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f042 0208 	orr.w	r2, r2, #8
 800cf14:	619a      	str	r2, [r3, #24]
}
 800cf16:	bf00      	nop
 800cf18:	3770      	adds	r7, #112	; 0x70
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	58000c00 	.word	0x58000c00

0800cf24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b09c      	sub	sp, #112	; 0x70
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf3c:	2b22      	cmp	r3, #34	; 0x22
 800cf3e:	f040 80be 	bne.w	800d0be <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf50:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cf52:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800cf56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf66:	1c9a      	adds	r2, r3, #2
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	3b01      	subs	r3, #1
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f040 80a1 	bne.w	800d0ce <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf94:	e853 3f00 	ldrex	r3, [r3]
 800cf98:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cf9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfa0:	667b      	str	r3, [r7, #100]	; 0x64
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfaa:	657b      	str	r3, [r7, #84]	; 0x54
 800cfac:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cfb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cfb2:	e841 2300 	strex	r3, r2, [r1]
 800cfb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1e6      	bne.n	800cf8c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	f023 0301 	bic.w	r3, r3, #1
 800cfd4:	663b      	str	r3, [r7, #96]	; 0x60
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3308      	adds	r3, #8
 800cfdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfde:	643a      	str	r2, [r7, #64]	; 0x40
 800cfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfe6:	e841 2300 	strex	r3, r2, [r1]
 800cfea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e5      	bne.n	800cfbe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2220      	movs	r2, #32
 800cff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a33      	ldr	r2, [pc, #204]	; (800d0d8 <UART_RxISR_16BIT+0x1b4>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d01f      	beq.n	800d050 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d018      	beq.n	800d050 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	e853 3f00 	ldrex	r3, [r3]
 800d02a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d02c:	69fb      	ldr	r3, [r7, #28]
 800d02e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d032:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	461a      	mov	r2, r3
 800d03a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d03c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d03e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d044:	e841 2300 	strex	r3, r2, [r1]
 800d048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e6      	bne.n	800d01e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d054:	2b01      	cmp	r3, #1
 800d056:	d12e      	bne.n	800d0b6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	e853 3f00 	ldrex	r3, [r3]
 800d06a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	f023 0310 	bic.w	r3, r3, #16
 800d072:	65bb      	str	r3, [r7, #88]	; 0x58
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	461a      	mov	r2, r3
 800d07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d07c:	61bb      	str	r3, [r7, #24]
 800d07e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d080:	6979      	ldr	r1, [r7, #20]
 800d082:	69ba      	ldr	r2, [r7, #24]
 800d084:	e841 2300 	strex	r3, r2, [r1]
 800d088:	613b      	str	r3, [r7, #16]
   return(result);
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d1e6      	bne.n	800d05e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	69db      	ldr	r3, [r3, #28]
 800d096:	f003 0310 	and.w	r3, r3, #16
 800d09a:	2b10      	cmp	r3, #16
 800d09c:	d103      	bne.n	800d0a6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2210      	movs	r2, #16
 800d0a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7fe fd6a 	bl	800bb88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d0b4:	e00b      	b.n	800d0ce <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7f3 fba4 	bl	8000804 <HAL_UART_RxCpltCallback>
}
 800d0bc:	e007      	b.n	800d0ce <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	699a      	ldr	r2, [r3, #24]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f042 0208 	orr.w	r2, r2, #8
 800d0cc:	619a      	str	r2, [r3, #24]
}
 800d0ce:	bf00      	nop
 800d0d0:	3770      	adds	r7, #112	; 0x70
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	58000c00 	.word	0x58000c00

0800d0dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b0ac      	sub	sp, #176	; 0xb0
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69db      	ldr	r3, [r3, #28]
 800d0f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d112:	2b22      	cmp	r3, #34	; 0x22
 800d114:	f040 8180 	bne.w	800d418 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d11e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d122:	e123      	b.n	800d36c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d12a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d12e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d132:	b2d9      	uxtb	r1, r3
 800d134:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d138:	b2da      	uxtb	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d13e:	400a      	ands	r2, r1
 800d140:	b2d2      	uxtb	r2, r2
 800d142:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d154:	b29b      	uxth	r3, r3
 800d156:	3b01      	subs	r3, #1
 800d158:	b29a      	uxth	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	69db      	ldr	r3, [r3, #28]
 800d166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d16a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d16e:	f003 0307 	and.w	r3, r3, #7
 800d172:	2b00      	cmp	r3, #0
 800d174:	d053      	beq.n	800d21e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d011      	beq.n	800d1a6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800d182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00b      	beq.n	800d1a6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2201      	movs	r2, #1
 800d194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d19c:	f043 0201 	orr.w	r2, r3, #1
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1aa:	f003 0302 	and.w	r3, r3, #2
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d011      	beq.n	800d1d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d1b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00b      	beq.n	800d1d6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1cc:	f043 0204 	orr.w	r2, r3, #4
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d1da:	f003 0304 	and.w	r3, r3, #4
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d011      	beq.n	800d206 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d1e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d1e6:	f003 0301 	and.w	r3, r3, #1
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00b      	beq.n	800d206 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2204      	movs	r2, #4
 800d1f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fc:	f043 0202 	orr.w	r2, r3, #2
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d006      	beq.n	800d21e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7fe fcaf 	bl	800bb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d224:	b29b      	uxth	r3, r3
 800d226:	2b00      	cmp	r3, #0
 800d228:	f040 80a0 	bne.w	800d36c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d234:	e853 3f00 	ldrex	r3, [r3]
 800d238:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d23a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d23c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	461a      	mov	r2, r3
 800d24a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d24e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d250:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d254:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d25c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e4      	bne.n	800d22c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d26c:	e853 3f00 	ldrex	r3, [r3]
 800d270:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d274:	4b6e      	ldr	r3, [pc, #440]	; (800d430 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d276:	4013      	ands	r3, r2
 800d278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3308      	adds	r3, #8
 800d282:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d286:	66ba      	str	r2, [r7, #104]	; 0x68
 800d288:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d28c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d28e:	e841 2300 	strex	r3, r2, [r1]
 800d292:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d296:	2b00      	cmp	r3, #0
 800d298:	d1e3      	bne.n	800d262 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2220      	movs	r2, #32
 800d29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a60      	ldr	r2, [pc, #384]	; (800d434 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d021      	beq.n	800d2fc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d01a      	beq.n	800d2fc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ce:	e853 3f00 	ldrex	r3, [r3]
 800d2d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d2d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d2da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d2e8:	657b      	str	r3, [r7, #84]	; 0x54
 800d2ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d2ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2f0:	e841 2300 	strex	r3, r2, [r1]
 800d2f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1e4      	bne.n	800d2c6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d300:	2b01      	cmp	r3, #1
 800d302:	d130      	bne.n	800d366 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2200      	movs	r2, #0
 800d308:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d312:	e853 3f00 	ldrex	r3, [r3]
 800d316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31a:	f023 0310 	bic.w	r3, r3, #16
 800d31e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	461a      	mov	r2, r3
 800d328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d32c:	643b      	str	r3, [r7, #64]	; 0x40
 800d32e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d334:	e841 2300 	strex	r3, r2, [r1]
 800d338:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1e4      	bne.n	800d30a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	f003 0310 	and.w	r3, r3, #16
 800d34a:	2b10      	cmp	r3, #16
 800d34c:	d103      	bne.n	800d356 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2210      	movs	r2, #16
 800d354:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f7fe fc12 	bl	800bb88 <HAL_UARTEx_RxEventCallback>
 800d364:	e002      	b.n	800d36c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7f3 fa4c 	bl	8000804 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d36c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d370:	2b00      	cmp	r3, #0
 800d372:	d006      	beq.n	800d382 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d378:	f003 0320 	and.w	r3, r3, #32
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f47f aed1 	bne.w	800d124 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d388:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d38c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d390:	2b00      	cmp	r3, #0
 800d392:	d049      	beq.n	800d428 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d39a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d242      	bcs.n	800d428 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3308      	adds	r3, #8
 800d3a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	e853 3f00 	ldrex	r3, [r3]
 800d3b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d3c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ce:	e841 2300 	strex	r3, r2, [r1]
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d1e3      	bne.n	800d3a2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4a16      	ldr	r2, [pc, #88]	; (800d438 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d3de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	e853 3f00 	ldrex	r3, [r3]
 800d3ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	f043 0320 	orr.w	r3, r3, #32
 800d3f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d402:	61bb      	str	r3, [r7, #24]
 800d404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d406:	6979      	ldr	r1, [r7, #20]
 800d408:	69ba      	ldr	r2, [r7, #24]
 800d40a:	e841 2300 	strex	r3, r2, [r1]
 800d40e:	613b      	str	r3, [r7, #16]
   return(result);
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d1e4      	bne.n	800d3e0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d416:	e007      	b.n	800d428 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	699a      	ldr	r2, [r3, #24]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f042 0208 	orr.w	r2, r2, #8
 800d426:	619a      	str	r2, [r3, #24]
}
 800d428:	bf00      	nop
 800d42a:	37b0      	adds	r7, #176	; 0xb0
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	effffffe 	.word	0xeffffffe
 800d434:	58000c00 	.word	0x58000c00
 800d438:	0800cd6d 	.word	0x0800cd6d

0800d43c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b0ae      	sub	sp, #184	; 0xb8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d44a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d472:	2b22      	cmp	r3, #34	; 0x22
 800d474:	f040 8184 	bne.w	800d780 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d47e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d482:	e127      	b.n	800d6d4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d496:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d49a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d49e:	4013      	ands	r3, r2
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ac:	1c9a      	adds	r2, r3, #2
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	b29a      	uxth	r2, r3
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d4ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4d2:	f003 0307 	and.w	r3, r3, #7
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d053      	beq.n	800d582 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d011      	beq.n	800d50a <UART_RxISR_16BIT_FIFOEN+0xce>
 800d4e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00b      	beq.n	800d50a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d500:	f043 0201 	orr.w	r2, r3, #1
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d50a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d50e:	f003 0302 	and.w	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d011      	beq.n	800d53a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d516:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d51a:	f003 0301 	and.w	r3, r3, #1
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00b      	beq.n	800d53a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2202      	movs	r2, #2
 800d528:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d530:	f043 0204 	orr.w	r2, r3, #4
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d53a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d53e:	f003 0304 	and.w	r3, r3, #4
 800d542:	2b00      	cmp	r3, #0
 800d544:	d011      	beq.n	800d56a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00b      	beq.n	800d56a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	2204      	movs	r2, #4
 800d558:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d560:	f043 0202 	orr.w	r2, r3, #2
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7fe fafd 	bl	800bb74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d588:	b29b      	uxth	r3, r3
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f040 80a2 	bne.w	800d6d4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d598:	e853 3f00 	ldrex	r3, [r3]
 800d59c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d59e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d5b6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d5ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d5be:	e841 2300 	strex	r3, r2, [r1]
 800d5c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d5c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1e2      	bne.n	800d590 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5d4:	e853 3f00 	ldrex	r3, [r3]
 800d5d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d5da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d5dc:	4b6e      	ldr	r3, [pc, #440]	; (800d798 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d5de:	4013      	ands	r3, r2
 800d5e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d5ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d5f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d5f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d5f6:	e841 2300 	strex	r3, r2, [r1]
 800d5fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1e3      	bne.n	800d5ca <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2220      	movs	r2, #32
 800d606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2200      	movs	r2, #0
 800d614:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a60      	ldr	r2, [pc, #384]	; (800d79c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d021      	beq.n	800d664 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d01a      	beq.n	800d664 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d636:	e853 3f00 	ldrex	r3, [r3]
 800d63a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d63e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d650:	65bb      	str	r3, [r7, #88]	; 0x58
 800d652:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d656:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d658:	e841 2300 	strex	r3, r2, [r1]
 800d65c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1e4      	bne.n	800d62e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d130      	bne.n	800d6ce <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67a:	e853 3f00 	ldrex	r3, [r3]
 800d67e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d682:	f023 0310 	bic.w	r3, r3, #16
 800d686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d694:	647b      	str	r3, [r7, #68]	; 0x44
 800d696:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d698:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d69a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d69c:	e841 2300 	strex	r3, r2, [r1]
 800d6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1e4      	bne.n	800d672 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	69db      	ldr	r3, [r3, #28]
 800d6ae:	f003 0310 	and.w	r3, r3, #16
 800d6b2:	2b10      	cmp	r3, #16
 800d6b4:	d103      	bne.n	800d6be <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2210      	movs	r2, #16
 800d6bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7fe fa5e 	bl	800bb88 <HAL_UARTEx_RxEventCallback>
 800d6cc:	e002      	b.n	800d6d4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7f3 f898 	bl	8000804 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6d4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d006      	beq.n	800d6ea <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d6dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d6e0:	f003 0320 	and.w	r3, r3, #32
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f47f aecd 	bne.w	800d484 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6f0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d6f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d049      	beq.n	800d790 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d702:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d706:	429a      	cmp	r2, r3
 800d708:	d242      	bcs.n	800d790 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	3308      	adds	r3, #8
 800d710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	e853 3f00 	ldrex	r3, [r3]
 800d718:	623b      	str	r3, [r7, #32]
   return(result);
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d720:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3308      	adds	r3, #8
 800d72a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d72e:	633a      	str	r2, [r7, #48]	; 0x30
 800d730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d736:	e841 2300 	strex	r3, r2, [r1]
 800d73a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1e3      	bne.n	800d70a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a16      	ldr	r2, [pc, #88]	; (800d7a0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d746:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	e853 3f00 	ldrex	r3, [r3]
 800d754:	60fb      	str	r3, [r7, #12]
   return(result);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f043 0320 	orr.w	r3, r3, #32
 800d75c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	461a      	mov	r2, r3
 800d766:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d76a:	61fb      	str	r3, [r7, #28]
 800d76c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d76e:	69b9      	ldr	r1, [r7, #24]
 800d770:	69fa      	ldr	r2, [r7, #28]
 800d772:	e841 2300 	strex	r3, r2, [r1]
 800d776:	617b      	str	r3, [r7, #20]
   return(result);
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1e4      	bne.n	800d748 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d77e:	e007      	b.n	800d790 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	699a      	ldr	r2, [r3, #24]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f042 0208 	orr.w	r2, r2, #8
 800d78e:	619a      	str	r2, [r3, #24]
}
 800d790:	bf00      	nop
 800d792:	37b8      	adds	r7, #184	; 0xb8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	effffffe 	.word	0xeffffffe
 800d79c:	58000c00 	.word	0x58000c00
 800d7a0:	0800cf25 	.word	0x0800cf25

0800d7a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d101      	bne.n	800d7f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	e027      	b.n	800d846 <HAL_UARTEx_DisableFifoMode+0x66>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2224      	movs	r2, #36	; 0x24
 800d802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f022 0201 	bic.w	r2, r2, #1
 800d81c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d824:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2220      	movs	r2, #32
 800d838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d844:	2300      	movs	r3, #0
}
 800d846:	4618      	mov	r0, r3
 800d848:	3714      	adds	r7, #20
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b084      	sub	sp, #16
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d862:	2b01      	cmp	r3, #1
 800d864:	d101      	bne.n	800d86a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d866:	2302      	movs	r3, #2
 800d868:	e02d      	b.n	800d8c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2224      	movs	r2, #36	; 0x24
 800d876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f022 0201 	bic.w	r2, r2, #1
 800d890:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	689b      	ldr	r3, [r3, #8]
 800d898:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	683a      	ldr	r2, [r7, #0]
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 f850 	bl	800d94c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2220      	movs	r2, #32
 800d8b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b084      	sub	sp, #16
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d101      	bne.n	800d8e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e02d      	b.n	800d942 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2224      	movs	r2, #36	; 0x24
 800d8f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f022 0201 	bic.w	r2, r2, #1
 800d90c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	430a      	orrs	r2, r1
 800d920:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 f812 	bl	800d94c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68fa      	ldr	r2, [r7, #12]
 800d92e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2220      	movs	r2, #32
 800d934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d940:	2300      	movs	r3, #0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b085      	sub	sp, #20
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d108      	bne.n	800d96e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d96c:	e031      	b.n	800d9d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d96e:	2310      	movs	r3, #16
 800d970:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d972:	2310      	movs	r3, #16
 800d974:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	0e5b      	lsrs	r3, r3, #25
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	f003 0307 	and.w	r3, r3, #7
 800d984:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	689b      	ldr	r3, [r3, #8]
 800d98c:	0f5b      	lsrs	r3, r3, #29
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	f003 0307 	and.w	r3, r3, #7
 800d994:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d996:	7bbb      	ldrb	r3, [r7, #14]
 800d998:	7b3a      	ldrb	r2, [r7, #12]
 800d99a:	4911      	ldr	r1, [pc, #68]	; (800d9e0 <UARTEx_SetNbDataToProcess+0x94>)
 800d99c:	5c8a      	ldrb	r2, [r1, r2]
 800d99e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d9a2:	7b3a      	ldrb	r2, [r7, #12]
 800d9a4:	490f      	ldr	r1, [pc, #60]	; (800d9e4 <UARTEx_SetNbDataToProcess+0x98>)
 800d9a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	7b7a      	ldrb	r2, [r7, #13]
 800d9b8:	4909      	ldr	r1, [pc, #36]	; (800d9e0 <UARTEx_SetNbDataToProcess+0x94>)
 800d9ba:	5c8a      	ldrb	r2, [r1, r2]
 800d9bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9c0:	7b7a      	ldrb	r2, [r7, #13]
 800d9c2:	4908      	ldr	r1, [pc, #32]	; (800d9e4 <UARTEx_SetNbDataToProcess+0x98>)
 800d9c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9d2:	bf00      	nop
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	0800e9f4 	.word	0x0800e9f4
 800d9e4:	0800e9fc 	.word	0x0800e9fc

0800d9e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b084      	sub	sp, #16
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	f107 001c 	add.w	r0, r7, #28
 800d9f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	2b01      	cmp	r3, #1
 800d9fe:	d120      	bne.n	800da42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68da      	ldr	r2, [r3, #12]
 800da10:	4b2a      	ldr	r3, [pc, #168]	; (800dabc <USB_CoreInit+0xd4>)
 800da12:	4013      	ands	r3, r2
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da26:	2b01      	cmp	r3, #1
 800da28:	d105      	bne.n	800da36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 faac 	bl	800df94 <USB_CoreReset>
 800da3c:	4603      	mov	r3, r0
 800da3e:	73fb      	strb	r3, [r7, #15]
 800da40:	e01a      	b.n	800da78 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 faa0 	bl	800df94 <USB_CoreReset>
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	639a      	str	r2, [r3, #56]	; 0x38
 800da6a:	e005      	b.n	800da78 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d116      	bne.n	800daac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da82:	b29a      	uxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da8c:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <USB_CoreInit+0xd8>)
 800da8e:	4313      	orrs	r3, r2
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	f043 0206 	orr.w	r2, r3, #6
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f043 0220 	orr.w	r2, r3, #32
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800daac:	7bfb      	ldrb	r3, [r7, #15]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dab8:	b004      	add	sp, #16
 800daba:	4770      	bx	lr
 800dabc:	ffbdffbf 	.word	0xffbdffbf
 800dac0:	03ee0000 	.word	0x03ee0000

0800dac4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	f023 0201 	bic.w	r2, r3, #1
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b084      	sub	sp, #16
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	460b      	mov	r3, r1
 800daf0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800daf2:	2300      	movs	r3, #0
 800daf4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db02:	78fb      	ldrb	r3, [r7, #3]
 800db04:	2b01      	cmp	r3, #1
 800db06:	d115      	bne.n	800db34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800db14:	2001      	movs	r0, #1
 800db16:	f7f3 fec9 	bl	80018ac <HAL_Delay>
      ms++;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3301      	adds	r3, #1
 800db1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fa29 	bl	800df78 <USB_GetMode>
 800db26:	4603      	mov	r3, r0
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d01e      	beq.n	800db6a <USB_SetCurrentMode+0x84>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2b31      	cmp	r3, #49	; 0x31
 800db30:	d9f0      	bls.n	800db14 <USB_SetCurrentMode+0x2e>
 800db32:	e01a      	b.n	800db6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db34:	78fb      	ldrb	r3, [r7, #3]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d115      	bne.n	800db66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800db46:	2001      	movs	r0, #1
 800db48:	f7f3 feb0 	bl	80018ac <HAL_Delay>
      ms++;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	3301      	adds	r3, #1
 800db50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fa10 	bl	800df78 <USB_GetMode>
 800db58:	4603      	mov	r3, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d005      	beq.n	800db6a <USB_SetCurrentMode+0x84>
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2b31      	cmp	r3, #49	; 0x31
 800db62:	d9f0      	bls.n	800db46 <USB_SetCurrentMode+0x60>
 800db64:	e001      	b.n	800db6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db66:	2301      	movs	r3, #1
 800db68:	e005      	b.n	800db76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2b32      	cmp	r3, #50	; 0x32
 800db6e:	d101      	bne.n	800db74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db70:	2301      	movs	r3, #1
 800db72:	e000      	b.n	800db76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3710      	adds	r7, #16
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db80:	b084      	sub	sp, #16
 800db82:	b580      	push	{r7, lr}
 800db84:	b086      	sub	sp, #24
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800db8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db9a:	2300      	movs	r3, #0
 800db9c:	613b      	str	r3, [r7, #16]
 800db9e:	e009      	b.n	800dbb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	3340      	adds	r3, #64	; 0x40
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4413      	add	r3, r2
 800dbaa:	2200      	movs	r2, #0
 800dbac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	613b      	str	r3, [r7, #16]
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	2b0e      	cmp	r3, #14
 800dbb8:	d9f2      	bls.n	800dba0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d11c      	bne.n	800dbfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbce:	f043 0302 	orr.w	r3, r3, #2
 800dbd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	601a      	str	r2, [r3, #0]
 800dbf8:	e005      	b.n	800dc06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	2300      	movs	r3, #0
 800dc10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc18:	4619      	mov	r1, r3
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc20:	461a      	mov	r2, r3
 800dc22:	680b      	ldr	r3, [r1, #0]
 800dc24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d10c      	bne.n	800dc46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d104      	bne.n	800dc3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc32:	2100      	movs	r1, #0
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 f965 	bl	800df04 <USB_SetDevSpeed>
 800dc3a:	e008      	b.n	800dc4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dc3c:	2101      	movs	r1, #1
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f960 	bl	800df04 <USB_SetDevSpeed>
 800dc44:	e003      	b.n	800dc4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc46:	2103      	movs	r1, #3
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 f95b 	bl	800df04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc4e:	2110      	movs	r1, #16
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f8f3 	bl	800de3c <USB_FlushTxFifo>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 f91f 	bl	800dea4 <USB_FlushRxFifo>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d001      	beq.n	800dc70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc76:	461a      	mov	r2, r3
 800dc78:	2300      	movs	r3, #0
 800dc7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc82:	461a      	mov	r2, r3
 800dc84:	2300      	movs	r3, #0
 800dc86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc8e:	461a      	mov	r2, r3
 800dc90:	2300      	movs	r3, #0
 800dc92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc94:	2300      	movs	r3, #0
 800dc96:	613b      	str	r3, [r7, #16]
 800dc98:	e043      	b.n	800dd22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	015a      	lsls	r2, r3, #5
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcb0:	d118      	bne.n	800dce4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10a      	bne.n	800dcce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	015a      	lsls	r2, r3, #5
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcca:	6013      	str	r3, [r2, #0]
 800dccc:	e013      	b.n	800dcf6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	015a      	lsls	r2, r3, #5
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcda:	461a      	mov	r2, r3
 800dcdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dce0:	6013      	str	r3, [r2, #0]
 800dce2:	e008      	b.n	800dcf6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	015a      	lsls	r2, r3, #5
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	4413      	add	r3, r2
 800dcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	015a      	lsls	r2, r3, #5
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	4413      	add	r3, r2
 800dcfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd02:	461a      	mov	r2, r3
 800dd04:	2300      	movs	r3, #0
 800dd06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	015a      	lsls	r2, r3, #5
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4413      	add	r3, r2
 800dd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd14:	461a      	mov	r2, r3
 800dd16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	3301      	adds	r3, #1
 800dd20:	613b      	str	r3, [r7, #16]
 800dd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd24:	693a      	ldr	r2, [r7, #16]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d3b7      	bcc.n	800dc9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	613b      	str	r3, [r7, #16]
 800dd2e:	e043      	b.n	800ddb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	015a      	lsls	r2, r3, #5
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4413      	add	r3, r2
 800dd38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd46:	d118      	bne.n	800dd7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10a      	bne.n	800dd64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	015a      	lsls	r2, r3, #5
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	4413      	add	r3, r2
 800dd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd60:	6013      	str	r3, [r2, #0]
 800dd62:	e013      	b.n	800dd8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	015a      	lsls	r2, r3, #5
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd70:	461a      	mov	r2, r3
 800dd72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	e008      	b.n	800dd8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	015a      	lsls	r2, r3, #5
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd86:	461a      	mov	r2, r3
 800dd88:	2300      	movs	r3, #0
 800dd8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	015a      	lsls	r2, r3, #5
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4413      	add	r3, r2
 800dd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd98:	461a      	mov	r2, r3
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	015a      	lsls	r2, r3, #5
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	4413      	add	r3, r2
 800dda6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddaa:	461a      	mov	r2, r3
 800ddac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ddb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddba:	693a      	ldr	r2, [r7, #16]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d3b7      	bcc.n	800dd30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dde0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d105      	bne.n	800ddf4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	f043 0210 	orr.w	r2, r3, #16
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	699a      	ldr	r2, [r3, #24]
 800ddf8:	4b0e      	ldr	r3, [pc, #56]	; (800de34 <USB_DevInit+0x2b4>)
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800de00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de02:	2b00      	cmp	r3, #0
 800de04:	d005      	beq.n	800de12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	f043 0208 	orr.w	r2, r3, #8
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de14:	2b01      	cmp	r3, #1
 800de16:	d105      	bne.n	800de24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	699a      	ldr	r2, [r3, #24]
 800de1c:	4b06      	ldr	r3, [pc, #24]	; (800de38 <USB_DevInit+0x2b8>)
 800de1e:	4313      	orrs	r3, r2
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de24:	7dfb      	ldrb	r3, [r7, #23]
}
 800de26:	4618      	mov	r0, r3
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de30:	b004      	add	sp, #16
 800de32:	4770      	bx	lr
 800de34:	803c3800 	.word	0x803c3800
 800de38:	40000004 	.word	0x40000004

0800de3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b085      	sub	sp, #20
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	3301      	adds	r3, #1
 800de4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	4a13      	ldr	r2, [pc, #76]	; (800dea0 <USB_FlushTxFifo+0x64>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d901      	bls.n	800de5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de58:	2303      	movs	r3, #3
 800de5a:	e01b      	b.n	800de94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	2b00      	cmp	r3, #0
 800de62:	daf2      	bge.n	800de4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de64:	2300      	movs	r3, #0
 800de66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	019b      	lsls	r3, r3, #6
 800de6c:	f043 0220 	orr.w	r2, r3, #32
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	3301      	adds	r3, #1
 800de78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	4a08      	ldr	r2, [pc, #32]	; (800dea0 <USB_FlushTxFifo+0x64>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d901      	bls.n	800de86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e006      	b.n	800de94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	f003 0320 	and.w	r3, r3, #32
 800de8e:	2b20      	cmp	r3, #32
 800de90:	d0f0      	beq.n	800de74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3714      	adds	r7, #20
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	00030d40 	.word	0x00030d40

0800dea4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800deac:	2300      	movs	r3, #0
 800deae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	3301      	adds	r3, #1
 800deb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	4a11      	ldr	r2, [pc, #68]	; (800df00 <USB_FlushRxFifo+0x5c>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d901      	bls.n	800dec2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800debe:	2303      	movs	r3, #3
 800dec0:	e018      	b.n	800def4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	691b      	ldr	r3, [r3, #16]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	daf2      	bge.n	800deb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800deca:	2300      	movs	r3, #0
 800decc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2210      	movs	r2, #16
 800ded2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	3301      	adds	r3, #1
 800ded8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	4a08      	ldr	r2, [pc, #32]	; (800df00 <USB_FlushRxFifo+0x5c>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d901      	bls.n	800dee6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dee2:	2303      	movs	r3, #3
 800dee4:	e006      	b.n	800def4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	691b      	ldr	r3, [r3, #16]
 800deea:	f003 0310 	and.w	r3, r3, #16
 800deee:	2b10      	cmp	r3, #16
 800def0:	d0f0      	beq.n	800ded4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	00030d40 	.word	0x00030d40

0800df04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	460b      	mov	r3, r1
 800df0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	78fb      	ldrb	r3, [r7, #3]
 800df1e:	68f9      	ldr	r1, [r7, #12]
 800df20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df24:	4313      	orrs	r3, r2
 800df26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df28:	2300      	movs	r3, #0
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr

0800df36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df36:	b480      	push	{r7}
 800df38:	b085      	sub	sp, #20
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df50:	f023 0303 	bic.w	r3, r3, #3
 800df54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df64:	f043 0302 	orr.w	r3, r3, #2
 800df68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3714      	adds	r7, #20
 800df70:	46bd      	mov	sp, r7
 800df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df76:	4770      	bx	lr

0800df78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	f003 0301 	and.w	r3, r3, #1
}
 800df88:	4618      	mov	r0, r3
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df9c:	2300      	movs	r3, #0
 800df9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	4a13      	ldr	r2, [pc, #76]	; (800dff8 <USB_CoreReset+0x64>)
 800dfaa:	4293      	cmp	r3, r2
 800dfac:	d901      	bls.n	800dfb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dfae:	2303      	movs	r3, #3
 800dfb0:	e01b      	b.n	800dfea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	691b      	ldr	r3, [r3, #16]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	daf2      	bge.n	800dfa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	f043 0201 	orr.w	r2, r3, #1
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	4a09      	ldr	r2, [pc, #36]	; (800dff8 <USB_CoreReset+0x64>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d901      	bls.n	800dfdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e006      	b.n	800dfea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	f003 0301 	and.w	r3, r3, #1
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d0f0      	beq.n	800dfca <USB_CoreReset+0x36>

  return HAL_OK;
 800dfe8:	2300      	movs	r3, #0
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	00030d40 	.word	0x00030d40

0800dffc <_vsniprintf_r>:
 800dffc:	b530      	push	{r4, r5, lr}
 800dffe:	4614      	mov	r4, r2
 800e000:	2c00      	cmp	r4, #0
 800e002:	b09b      	sub	sp, #108	; 0x6c
 800e004:	4605      	mov	r5, r0
 800e006:	461a      	mov	r2, r3
 800e008:	da05      	bge.n	800e016 <_vsniprintf_r+0x1a>
 800e00a:	238b      	movs	r3, #139	; 0x8b
 800e00c:	6003      	str	r3, [r0, #0]
 800e00e:	f04f 30ff 	mov.w	r0, #4294967295
 800e012:	b01b      	add	sp, #108	; 0x6c
 800e014:	bd30      	pop	{r4, r5, pc}
 800e016:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e01a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e01e:	bf14      	ite	ne
 800e020:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e024:	4623      	moveq	r3, r4
 800e026:	9302      	str	r3, [sp, #8]
 800e028:	9305      	str	r3, [sp, #20]
 800e02a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e02e:	9100      	str	r1, [sp, #0]
 800e030:	9104      	str	r1, [sp, #16]
 800e032:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e036:	4669      	mov	r1, sp
 800e038:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e03a:	f000 f99f 	bl	800e37c <_svfiprintf_r>
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	bfbc      	itt	lt
 800e042:	238b      	movlt	r3, #139	; 0x8b
 800e044:	602b      	strlt	r3, [r5, #0]
 800e046:	2c00      	cmp	r4, #0
 800e048:	d0e3      	beq.n	800e012 <_vsniprintf_r+0x16>
 800e04a:	9b00      	ldr	r3, [sp, #0]
 800e04c:	2200      	movs	r2, #0
 800e04e:	701a      	strb	r2, [r3, #0]
 800e050:	e7df      	b.n	800e012 <_vsniprintf_r+0x16>
	...

0800e054 <vsniprintf>:
 800e054:	b507      	push	{r0, r1, r2, lr}
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	4613      	mov	r3, r2
 800e05a:	460a      	mov	r2, r1
 800e05c:	4601      	mov	r1, r0
 800e05e:	4803      	ldr	r0, [pc, #12]	; (800e06c <vsniprintf+0x18>)
 800e060:	6800      	ldr	r0, [r0, #0]
 800e062:	f7ff ffcb 	bl	800dffc <_vsniprintf_r>
 800e066:	b003      	add	sp, #12
 800e068:	f85d fb04 	ldr.w	pc, [sp], #4
 800e06c:	2400005c 	.word	0x2400005c

0800e070 <memset>:
 800e070:	4402      	add	r2, r0
 800e072:	4603      	mov	r3, r0
 800e074:	4293      	cmp	r3, r2
 800e076:	d100      	bne.n	800e07a <memset+0xa>
 800e078:	4770      	bx	lr
 800e07a:	f803 1b01 	strb.w	r1, [r3], #1
 800e07e:	e7f9      	b.n	800e074 <memset+0x4>

0800e080 <__errno>:
 800e080:	4b01      	ldr	r3, [pc, #4]	; (800e088 <__errno+0x8>)
 800e082:	6818      	ldr	r0, [r3, #0]
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop
 800e088:	2400005c 	.word	0x2400005c

0800e08c <__libc_init_array>:
 800e08c:	b570      	push	{r4, r5, r6, lr}
 800e08e:	4d0d      	ldr	r5, [pc, #52]	; (800e0c4 <__libc_init_array+0x38>)
 800e090:	4c0d      	ldr	r4, [pc, #52]	; (800e0c8 <__libc_init_array+0x3c>)
 800e092:	1b64      	subs	r4, r4, r5
 800e094:	10a4      	asrs	r4, r4, #2
 800e096:	2600      	movs	r6, #0
 800e098:	42a6      	cmp	r6, r4
 800e09a:	d109      	bne.n	800e0b0 <__libc_init_array+0x24>
 800e09c:	4d0b      	ldr	r5, [pc, #44]	; (800e0cc <__libc_init_array+0x40>)
 800e09e:	4c0c      	ldr	r4, [pc, #48]	; (800e0d0 <__libc_init_array+0x44>)
 800e0a0:	f000 fc6a 	bl	800e978 <_init>
 800e0a4:	1b64      	subs	r4, r4, r5
 800e0a6:	10a4      	asrs	r4, r4, #2
 800e0a8:	2600      	movs	r6, #0
 800e0aa:	42a6      	cmp	r6, r4
 800e0ac:	d105      	bne.n	800e0ba <__libc_init_array+0x2e>
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}
 800e0b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0b4:	4798      	blx	r3
 800e0b6:	3601      	adds	r6, #1
 800e0b8:	e7ee      	b.n	800e098 <__libc_init_array+0xc>
 800e0ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0be:	4798      	blx	r3
 800e0c0:	3601      	adds	r6, #1
 800e0c2:	e7f2      	b.n	800e0aa <__libc_init_array+0x1e>
 800e0c4:	0800ea40 	.word	0x0800ea40
 800e0c8:	0800ea40 	.word	0x0800ea40
 800e0cc:	0800ea40 	.word	0x0800ea40
 800e0d0:	0800ea44 	.word	0x0800ea44

0800e0d4 <__retarget_lock_acquire_recursive>:
 800e0d4:	4770      	bx	lr

0800e0d6 <__retarget_lock_release_recursive>:
 800e0d6:	4770      	bx	lr

0800e0d8 <_free_r>:
 800e0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0da:	2900      	cmp	r1, #0
 800e0dc:	d044      	beq.n	800e168 <_free_r+0x90>
 800e0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0e2:	9001      	str	r0, [sp, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f1a1 0404 	sub.w	r4, r1, #4
 800e0ea:	bfb8      	it	lt
 800e0ec:	18e4      	addlt	r4, r4, r3
 800e0ee:	f000 f8df 	bl	800e2b0 <__malloc_lock>
 800e0f2:	4a1e      	ldr	r2, [pc, #120]	; (800e16c <_free_r+0x94>)
 800e0f4:	9801      	ldr	r0, [sp, #4]
 800e0f6:	6813      	ldr	r3, [r2, #0]
 800e0f8:	b933      	cbnz	r3, 800e108 <_free_r+0x30>
 800e0fa:	6063      	str	r3, [r4, #4]
 800e0fc:	6014      	str	r4, [r2, #0]
 800e0fe:	b003      	add	sp, #12
 800e100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e104:	f000 b8da 	b.w	800e2bc <__malloc_unlock>
 800e108:	42a3      	cmp	r3, r4
 800e10a:	d908      	bls.n	800e11e <_free_r+0x46>
 800e10c:	6825      	ldr	r5, [r4, #0]
 800e10e:	1961      	adds	r1, r4, r5
 800e110:	428b      	cmp	r3, r1
 800e112:	bf01      	itttt	eq
 800e114:	6819      	ldreq	r1, [r3, #0]
 800e116:	685b      	ldreq	r3, [r3, #4]
 800e118:	1949      	addeq	r1, r1, r5
 800e11a:	6021      	streq	r1, [r4, #0]
 800e11c:	e7ed      	b.n	800e0fa <_free_r+0x22>
 800e11e:	461a      	mov	r2, r3
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	b10b      	cbz	r3, 800e128 <_free_r+0x50>
 800e124:	42a3      	cmp	r3, r4
 800e126:	d9fa      	bls.n	800e11e <_free_r+0x46>
 800e128:	6811      	ldr	r1, [r2, #0]
 800e12a:	1855      	adds	r5, r2, r1
 800e12c:	42a5      	cmp	r5, r4
 800e12e:	d10b      	bne.n	800e148 <_free_r+0x70>
 800e130:	6824      	ldr	r4, [r4, #0]
 800e132:	4421      	add	r1, r4
 800e134:	1854      	adds	r4, r2, r1
 800e136:	42a3      	cmp	r3, r4
 800e138:	6011      	str	r1, [r2, #0]
 800e13a:	d1e0      	bne.n	800e0fe <_free_r+0x26>
 800e13c:	681c      	ldr	r4, [r3, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	6053      	str	r3, [r2, #4]
 800e142:	440c      	add	r4, r1
 800e144:	6014      	str	r4, [r2, #0]
 800e146:	e7da      	b.n	800e0fe <_free_r+0x26>
 800e148:	d902      	bls.n	800e150 <_free_r+0x78>
 800e14a:	230c      	movs	r3, #12
 800e14c:	6003      	str	r3, [r0, #0]
 800e14e:	e7d6      	b.n	800e0fe <_free_r+0x26>
 800e150:	6825      	ldr	r5, [r4, #0]
 800e152:	1961      	adds	r1, r4, r5
 800e154:	428b      	cmp	r3, r1
 800e156:	bf04      	itt	eq
 800e158:	6819      	ldreq	r1, [r3, #0]
 800e15a:	685b      	ldreq	r3, [r3, #4]
 800e15c:	6063      	str	r3, [r4, #4]
 800e15e:	bf04      	itt	eq
 800e160:	1949      	addeq	r1, r1, r5
 800e162:	6021      	streq	r1, [r4, #0]
 800e164:	6054      	str	r4, [r2, #4]
 800e166:	e7ca      	b.n	800e0fe <_free_r+0x26>
 800e168:	b003      	add	sp, #12
 800e16a:	bd30      	pop	{r4, r5, pc}
 800e16c:	240029e8 	.word	0x240029e8

0800e170 <sbrk_aligned>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	4e0e      	ldr	r6, [pc, #56]	; (800e1ac <sbrk_aligned+0x3c>)
 800e174:	460c      	mov	r4, r1
 800e176:	6831      	ldr	r1, [r6, #0]
 800e178:	4605      	mov	r5, r0
 800e17a:	b911      	cbnz	r1, 800e182 <sbrk_aligned+0x12>
 800e17c:	f000 fba6 	bl	800e8cc <_sbrk_r>
 800e180:	6030      	str	r0, [r6, #0]
 800e182:	4621      	mov	r1, r4
 800e184:	4628      	mov	r0, r5
 800e186:	f000 fba1 	bl	800e8cc <_sbrk_r>
 800e18a:	1c43      	adds	r3, r0, #1
 800e18c:	d00a      	beq.n	800e1a4 <sbrk_aligned+0x34>
 800e18e:	1cc4      	adds	r4, r0, #3
 800e190:	f024 0403 	bic.w	r4, r4, #3
 800e194:	42a0      	cmp	r0, r4
 800e196:	d007      	beq.n	800e1a8 <sbrk_aligned+0x38>
 800e198:	1a21      	subs	r1, r4, r0
 800e19a:	4628      	mov	r0, r5
 800e19c:	f000 fb96 	bl	800e8cc <_sbrk_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	d101      	bne.n	800e1a8 <sbrk_aligned+0x38>
 800e1a4:	f04f 34ff 	mov.w	r4, #4294967295
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	240029ec 	.word	0x240029ec

0800e1b0 <_malloc_r>:
 800e1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1b4:	1ccd      	adds	r5, r1, #3
 800e1b6:	f025 0503 	bic.w	r5, r5, #3
 800e1ba:	3508      	adds	r5, #8
 800e1bc:	2d0c      	cmp	r5, #12
 800e1be:	bf38      	it	cc
 800e1c0:	250c      	movcc	r5, #12
 800e1c2:	2d00      	cmp	r5, #0
 800e1c4:	4607      	mov	r7, r0
 800e1c6:	db01      	blt.n	800e1cc <_malloc_r+0x1c>
 800e1c8:	42a9      	cmp	r1, r5
 800e1ca:	d905      	bls.n	800e1d8 <_malloc_r+0x28>
 800e1cc:	230c      	movs	r3, #12
 800e1ce:	603b      	str	r3, [r7, #0]
 800e1d0:	2600      	movs	r6, #0
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e2ac <_malloc_r+0xfc>
 800e1dc:	f000 f868 	bl	800e2b0 <__malloc_lock>
 800e1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e1e4:	461c      	mov	r4, r3
 800e1e6:	bb5c      	cbnz	r4, 800e240 <_malloc_r+0x90>
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f7ff ffc0 	bl	800e170 <sbrk_aligned>
 800e1f0:	1c43      	adds	r3, r0, #1
 800e1f2:	4604      	mov	r4, r0
 800e1f4:	d155      	bne.n	800e2a2 <_malloc_r+0xf2>
 800e1f6:	f8d8 4000 	ldr.w	r4, [r8]
 800e1fa:	4626      	mov	r6, r4
 800e1fc:	2e00      	cmp	r6, #0
 800e1fe:	d145      	bne.n	800e28c <_malloc_r+0xdc>
 800e200:	2c00      	cmp	r4, #0
 800e202:	d048      	beq.n	800e296 <_malloc_r+0xe6>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	4631      	mov	r1, r6
 800e208:	4638      	mov	r0, r7
 800e20a:	eb04 0903 	add.w	r9, r4, r3
 800e20e:	f000 fb5d 	bl	800e8cc <_sbrk_r>
 800e212:	4581      	cmp	r9, r0
 800e214:	d13f      	bne.n	800e296 <_malloc_r+0xe6>
 800e216:	6821      	ldr	r1, [r4, #0]
 800e218:	1a6d      	subs	r5, r5, r1
 800e21a:	4629      	mov	r1, r5
 800e21c:	4638      	mov	r0, r7
 800e21e:	f7ff ffa7 	bl	800e170 <sbrk_aligned>
 800e222:	3001      	adds	r0, #1
 800e224:	d037      	beq.n	800e296 <_malloc_r+0xe6>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	442b      	add	r3, r5
 800e22a:	6023      	str	r3, [r4, #0]
 800e22c:	f8d8 3000 	ldr.w	r3, [r8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d038      	beq.n	800e2a6 <_malloc_r+0xf6>
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	42a2      	cmp	r2, r4
 800e238:	d12b      	bne.n	800e292 <_malloc_r+0xe2>
 800e23a:	2200      	movs	r2, #0
 800e23c:	605a      	str	r2, [r3, #4]
 800e23e:	e00f      	b.n	800e260 <_malloc_r+0xb0>
 800e240:	6822      	ldr	r2, [r4, #0]
 800e242:	1b52      	subs	r2, r2, r5
 800e244:	d41f      	bmi.n	800e286 <_malloc_r+0xd6>
 800e246:	2a0b      	cmp	r2, #11
 800e248:	d917      	bls.n	800e27a <_malloc_r+0xca>
 800e24a:	1961      	adds	r1, r4, r5
 800e24c:	42a3      	cmp	r3, r4
 800e24e:	6025      	str	r5, [r4, #0]
 800e250:	bf18      	it	ne
 800e252:	6059      	strne	r1, [r3, #4]
 800e254:	6863      	ldr	r3, [r4, #4]
 800e256:	bf08      	it	eq
 800e258:	f8c8 1000 	streq.w	r1, [r8]
 800e25c:	5162      	str	r2, [r4, r5]
 800e25e:	604b      	str	r3, [r1, #4]
 800e260:	4638      	mov	r0, r7
 800e262:	f104 060b 	add.w	r6, r4, #11
 800e266:	f000 f829 	bl	800e2bc <__malloc_unlock>
 800e26a:	f026 0607 	bic.w	r6, r6, #7
 800e26e:	1d23      	adds	r3, r4, #4
 800e270:	1af2      	subs	r2, r6, r3
 800e272:	d0ae      	beq.n	800e1d2 <_malloc_r+0x22>
 800e274:	1b9b      	subs	r3, r3, r6
 800e276:	50a3      	str	r3, [r4, r2]
 800e278:	e7ab      	b.n	800e1d2 <_malloc_r+0x22>
 800e27a:	42a3      	cmp	r3, r4
 800e27c:	6862      	ldr	r2, [r4, #4]
 800e27e:	d1dd      	bne.n	800e23c <_malloc_r+0x8c>
 800e280:	f8c8 2000 	str.w	r2, [r8]
 800e284:	e7ec      	b.n	800e260 <_malloc_r+0xb0>
 800e286:	4623      	mov	r3, r4
 800e288:	6864      	ldr	r4, [r4, #4]
 800e28a:	e7ac      	b.n	800e1e6 <_malloc_r+0x36>
 800e28c:	4634      	mov	r4, r6
 800e28e:	6876      	ldr	r6, [r6, #4]
 800e290:	e7b4      	b.n	800e1fc <_malloc_r+0x4c>
 800e292:	4613      	mov	r3, r2
 800e294:	e7cc      	b.n	800e230 <_malloc_r+0x80>
 800e296:	230c      	movs	r3, #12
 800e298:	603b      	str	r3, [r7, #0]
 800e29a:	4638      	mov	r0, r7
 800e29c:	f000 f80e 	bl	800e2bc <__malloc_unlock>
 800e2a0:	e797      	b.n	800e1d2 <_malloc_r+0x22>
 800e2a2:	6025      	str	r5, [r4, #0]
 800e2a4:	e7dc      	b.n	800e260 <_malloc_r+0xb0>
 800e2a6:	605b      	str	r3, [r3, #4]
 800e2a8:	deff      	udf	#255	; 0xff
 800e2aa:	bf00      	nop
 800e2ac:	240029e8 	.word	0x240029e8

0800e2b0 <__malloc_lock>:
 800e2b0:	4801      	ldr	r0, [pc, #4]	; (800e2b8 <__malloc_lock+0x8>)
 800e2b2:	f7ff bf0f 	b.w	800e0d4 <__retarget_lock_acquire_recursive>
 800e2b6:	bf00      	nop
 800e2b8:	240029e4 	.word	0x240029e4

0800e2bc <__malloc_unlock>:
 800e2bc:	4801      	ldr	r0, [pc, #4]	; (800e2c4 <__malloc_unlock+0x8>)
 800e2be:	f7ff bf0a 	b.w	800e0d6 <__retarget_lock_release_recursive>
 800e2c2:	bf00      	nop
 800e2c4:	240029e4 	.word	0x240029e4

0800e2c8 <__ssputs_r>:
 800e2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2cc:	688e      	ldr	r6, [r1, #8]
 800e2ce:	461f      	mov	r7, r3
 800e2d0:	42be      	cmp	r6, r7
 800e2d2:	680b      	ldr	r3, [r1, #0]
 800e2d4:	4682      	mov	sl, r0
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	4690      	mov	r8, r2
 800e2da:	d82c      	bhi.n	800e336 <__ssputs_r+0x6e>
 800e2dc:	898a      	ldrh	r2, [r1, #12]
 800e2de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2e2:	d026      	beq.n	800e332 <__ssputs_r+0x6a>
 800e2e4:	6965      	ldr	r5, [r4, #20]
 800e2e6:	6909      	ldr	r1, [r1, #16]
 800e2e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ec:	eba3 0901 	sub.w	r9, r3, r1
 800e2f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2f4:	1c7b      	adds	r3, r7, #1
 800e2f6:	444b      	add	r3, r9
 800e2f8:	106d      	asrs	r5, r5, #1
 800e2fa:	429d      	cmp	r5, r3
 800e2fc:	bf38      	it	cc
 800e2fe:	461d      	movcc	r5, r3
 800e300:	0553      	lsls	r3, r2, #21
 800e302:	d527      	bpl.n	800e354 <__ssputs_r+0x8c>
 800e304:	4629      	mov	r1, r5
 800e306:	f7ff ff53 	bl	800e1b0 <_malloc_r>
 800e30a:	4606      	mov	r6, r0
 800e30c:	b360      	cbz	r0, 800e368 <__ssputs_r+0xa0>
 800e30e:	6921      	ldr	r1, [r4, #16]
 800e310:	464a      	mov	r2, r9
 800e312:	f000 faeb 	bl	800e8ec <memcpy>
 800e316:	89a3      	ldrh	r3, [r4, #12]
 800e318:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e320:	81a3      	strh	r3, [r4, #12]
 800e322:	6126      	str	r6, [r4, #16]
 800e324:	6165      	str	r5, [r4, #20]
 800e326:	444e      	add	r6, r9
 800e328:	eba5 0509 	sub.w	r5, r5, r9
 800e32c:	6026      	str	r6, [r4, #0]
 800e32e:	60a5      	str	r5, [r4, #8]
 800e330:	463e      	mov	r6, r7
 800e332:	42be      	cmp	r6, r7
 800e334:	d900      	bls.n	800e338 <__ssputs_r+0x70>
 800e336:	463e      	mov	r6, r7
 800e338:	6820      	ldr	r0, [r4, #0]
 800e33a:	4632      	mov	r2, r6
 800e33c:	4641      	mov	r1, r8
 800e33e:	f000 faab 	bl	800e898 <memmove>
 800e342:	68a3      	ldr	r3, [r4, #8]
 800e344:	1b9b      	subs	r3, r3, r6
 800e346:	60a3      	str	r3, [r4, #8]
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	4433      	add	r3, r6
 800e34c:	6023      	str	r3, [r4, #0]
 800e34e:	2000      	movs	r0, #0
 800e350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e354:	462a      	mov	r2, r5
 800e356:	f000 fad7 	bl	800e908 <_realloc_r>
 800e35a:	4606      	mov	r6, r0
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d1e0      	bne.n	800e322 <__ssputs_r+0x5a>
 800e360:	6921      	ldr	r1, [r4, #16]
 800e362:	4650      	mov	r0, sl
 800e364:	f7ff feb8 	bl	800e0d8 <_free_r>
 800e368:	230c      	movs	r3, #12
 800e36a:	f8ca 3000 	str.w	r3, [sl]
 800e36e:	89a3      	ldrh	r3, [r4, #12]
 800e370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e374:	81a3      	strh	r3, [r4, #12]
 800e376:	f04f 30ff 	mov.w	r0, #4294967295
 800e37a:	e7e9      	b.n	800e350 <__ssputs_r+0x88>

0800e37c <_svfiprintf_r>:
 800e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e380:	4698      	mov	r8, r3
 800e382:	898b      	ldrh	r3, [r1, #12]
 800e384:	061b      	lsls	r3, r3, #24
 800e386:	b09d      	sub	sp, #116	; 0x74
 800e388:	4607      	mov	r7, r0
 800e38a:	460d      	mov	r5, r1
 800e38c:	4614      	mov	r4, r2
 800e38e:	d50e      	bpl.n	800e3ae <_svfiprintf_r+0x32>
 800e390:	690b      	ldr	r3, [r1, #16]
 800e392:	b963      	cbnz	r3, 800e3ae <_svfiprintf_r+0x32>
 800e394:	2140      	movs	r1, #64	; 0x40
 800e396:	f7ff ff0b 	bl	800e1b0 <_malloc_r>
 800e39a:	6028      	str	r0, [r5, #0]
 800e39c:	6128      	str	r0, [r5, #16]
 800e39e:	b920      	cbnz	r0, 800e3aa <_svfiprintf_r+0x2e>
 800e3a0:	230c      	movs	r3, #12
 800e3a2:	603b      	str	r3, [r7, #0]
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	e0d0      	b.n	800e54c <_svfiprintf_r+0x1d0>
 800e3aa:	2340      	movs	r3, #64	; 0x40
 800e3ac:	616b      	str	r3, [r5, #20]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b2:	2320      	movs	r3, #32
 800e3b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3bc:	2330      	movs	r3, #48	; 0x30
 800e3be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e564 <_svfiprintf_r+0x1e8>
 800e3c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3c6:	f04f 0901 	mov.w	r9, #1
 800e3ca:	4623      	mov	r3, r4
 800e3cc:	469a      	mov	sl, r3
 800e3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d2:	b10a      	cbz	r2, 800e3d8 <_svfiprintf_r+0x5c>
 800e3d4:	2a25      	cmp	r2, #37	; 0x25
 800e3d6:	d1f9      	bne.n	800e3cc <_svfiprintf_r+0x50>
 800e3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800e3dc:	d00b      	beq.n	800e3f6 <_svfiprintf_r+0x7a>
 800e3de:	465b      	mov	r3, fp
 800e3e0:	4622      	mov	r2, r4
 800e3e2:	4629      	mov	r1, r5
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	f7ff ff6f 	bl	800e2c8 <__ssputs_r>
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	f000 80a9 	beq.w	800e542 <_svfiprintf_r+0x1c6>
 800e3f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3f2:	445a      	add	r2, fp
 800e3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f000 80a1 	beq.w	800e542 <_svfiprintf_r+0x1c6>
 800e400:	2300      	movs	r3, #0
 800e402:	f04f 32ff 	mov.w	r2, #4294967295
 800e406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e40a:	f10a 0a01 	add.w	sl, sl, #1
 800e40e:	9304      	str	r3, [sp, #16]
 800e410:	9307      	str	r3, [sp, #28]
 800e412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e416:	931a      	str	r3, [sp, #104]	; 0x68
 800e418:	4654      	mov	r4, sl
 800e41a:	2205      	movs	r2, #5
 800e41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e420:	4850      	ldr	r0, [pc, #320]	; (800e564 <_svfiprintf_r+0x1e8>)
 800e422:	f7f1 ff65 	bl	80002f0 <memchr>
 800e426:	9a04      	ldr	r2, [sp, #16]
 800e428:	b9d8      	cbnz	r0, 800e462 <_svfiprintf_r+0xe6>
 800e42a:	06d0      	lsls	r0, r2, #27
 800e42c:	bf44      	itt	mi
 800e42e:	2320      	movmi	r3, #32
 800e430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e434:	0711      	lsls	r1, r2, #28
 800e436:	bf44      	itt	mi
 800e438:	232b      	movmi	r3, #43	; 0x2b
 800e43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e43e:	f89a 3000 	ldrb.w	r3, [sl]
 800e442:	2b2a      	cmp	r3, #42	; 0x2a
 800e444:	d015      	beq.n	800e472 <_svfiprintf_r+0xf6>
 800e446:	9a07      	ldr	r2, [sp, #28]
 800e448:	4654      	mov	r4, sl
 800e44a:	2000      	movs	r0, #0
 800e44c:	f04f 0c0a 	mov.w	ip, #10
 800e450:	4621      	mov	r1, r4
 800e452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e456:	3b30      	subs	r3, #48	; 0x30
 800e458:	2b09      	cmp	r3, #9
 800e45a:	d94d      	bls.n	800e4f8 <_svfiprintf_r+0x17c>
 800e45c:	b1b0      	cbz	r0, 800e48c <_svfiprintf_r+0x110>
 800e45e:	9207      	str	r2, [sp, #28]
 800e460:	e014      	b.n	800e48c <_svfiprintf_r+0x110>
 800e462:	eba0 0308 	sub.w	r3, r0, r8
 800e466:	fa09 f303 	lsl.w	r3, r9, r3
 800e46a:	4313      	orrs	r3, r2
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	46a2      	mov	sl, r4
 800e470:	e7d2      	b.n	800e418 <_svfiprintf_r+0x9c>
 800e472:	9b03      	ldr	r3, [sp, #12]
 800e474:	1d19      	adds	r1, r3, #4
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	9103      	str	r1, [sp, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	bfbb      	ittet	lt
 800e47e:	425b      	neglt	r3, r3
 800e480:	f042 0202 	orrlt.w	r2, r2, #2
 800e484:	9307      	strge	r3, [sp, #28]
 800e486:	9307      	strlt	r3, [sp, #28]
 800e488:	bfb8      	it	lt
 800e48a:	9204      	strlt	r2, [sp, #16]
 800e48c:	7823      	ldrb	r3, [r4, #0]
 800e48e:	2b2e      	cmp	r3, #46	; 0x2e
 800e490:	d10c      	bne.n	800e4ac <_svfiprintf_r+0x130>
 800e492:	7863      	ldrb	r3, [r4, #1]
 800e494:	2b2a      	cmp	r3, #42	; 0x2a
 800e496:	d134      	bne.n	800e502 <_svfiprintf_r+0x186>
 800e498:	9b03      	ldr	r3, [sp, #12]
 800e49a:	1d1a      	adds	r2, r3, #4
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	9203      	str	r2, [sp, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	bfb8      	it	lt
 800e4a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4a8:	3402      	adds	r4, #2
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e574 <_svfiprintf_r+0x1f8>
 800e4b0:	7821      	ldrb	r1, [r4, #0]
 800e4b2:	2203      	movs	r2, #3
 800e4b4:	4650      	mov	r0, sl
 800e4b6:	f7f1 ff1b 	bl	80002f0 <memchr>
 800e4ba:	b138      	cbz	r0, 800e4cc <_svfiprintf_r+0x150>
 800e4bc:	9b04      	ldr	r3, [sp, #16]
 800e4be:	eba0 000a 	sub.w	r0, r0, sl
 800e4c2:	2240      	movs	r2, #64	; 0x40
 800e4c4:	4082      	lsls	r2, r0
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	3401      	adds	r4, #1
 800e4ca:	9304      	str	r3, [sp, #16]
 800e4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d0:	4825      	ldr	r0, [pc, #148]	; (800e568 <_svfiprintf_r+0x1ec>)
 800e4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4d6:	2206      	movs	r2, #6
 800e4d8:	f7f1 ff0a 	bl	80002f0 <memchr>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d038      	beq.n	800e552 <_svfiprintf_r+0x1d6>
 800e4e0:	4b22      	ldr	r3, [pc, #136]	; (800e56c <_svfiprintf_r+0x1f0>)
 800e4e2:	bb1b      	cbnz	r3, 800e52c <_svfiprintf_r+0x1b0>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	3307      	adds	r3, #7
 800e4e8:	f023 0307 	bic.w	r3, r3, #7
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	9303      	str	r3, [sp, #12]
 800e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f2:	4433      	add	r3, r6
 800e4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f6:	e768      	b.n	800e3ca <_svfiprintf_r+0x4e>
 800e4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4fc:	460c      	mov	r4, r1
 800e4fe:	2001      	movs	r0, #1
 800e500:	e7a6      	b.n	800e450 <_svfiprintf_r+0xd4>
 800e502:	2300      	movs	r3, #0
 800e504:	3401      	adds	r4, #1
 800e506:	9305      	str	r3, [sp, #20]
 800e508:	4619      	mov	r1, r3
 800e50a:	f04f 0c0a 	mov.w	ip, #10
 800e50e:	4620      	mov	r0, r4
 800e510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e514:	3a30      	subs	r2, #48	; 0x30
 800e516:	2a09      	cmp	r2, #9
 800e518:	d903      	bls.n	800e522 <_svfiprintf_r+0x1a6>
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0c6      	beq.n	800e4ac <_svfiprintf_r+0x130>
 800e51e:	9105      	str	r1, [sp, #20]
 800e520:	e7c4      	b.n	800e4ac <_svfiprintf_r+0x130>
 800e522:	fb0c 2101 	mla	r1, ip, r1, r2
 800e526:	4604      	mov	r4, r0
 800e528:	2301      	movs	r3, #1
 800e52a:	e7f0      	b.n	800e50e <_svfiprintf_r+0x192>
 800e52c:	ab03      	add	r3, sp, #12
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	462a      	mov	r2, r5
 800e532:	4b0f      	ldr	r3, [pc, #60]	; (800e570 <_svfiprintf_r+0x1f4>)
 800e534:	a904      	add	r1, sp, #16
 800e536:	4638      	mov	r0, r7
 800e538:	f3af 8000 	nop.w
 800e53c:	1c42      	adds	r2, r0, #1
 800e53e:	4606      	mov	r6, r0
 800e540:	d1d6      	bne.n	800e4f0 <_svfiprintf_r+0x174>
 800e542:	89ab      	ldrh	r3, [r5, #12]
 800e544:	065b      	lsls	r3, r3, #25
 800e546:	f53f af2d 	bmi.w	800e3a4 <_svfiprintf_r+0x28>
 800e54a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e54c:	b01d      	add	sp, #116	; 0x74
 800e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e552:	ab03      	add	r3, sp, #12
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	462a      	mov	r2, r5
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <_svfiprintf_r+0x1f4>)
 800e55a:	a904      	add	r1, sp, #16
 800e55c:	4638      	mov	r0, r7
 800e55e:	f000 f879 	bl	800e654 <_printf_i>
 800e562:	e7eb      	b.n	800e53c <_svfiprintf_r+0x1c0>
 800e564:	0800ea04 	.word	0x0800ea04
 800e568:	0800ea0e 	.word	0x0800ea0e
 800e56c:	00000000 	.word	0x00000000
 800e570:	0800e2c9 	.word	0x0800e2c9
 800e574:	0800ea0a 	.word	0x0800ea0a

0800e578 <_printf_common>:
 800e578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e57c:	4616      	mov	r6, r2
 800e57e:	4699      	mov	r9, r3
 800e580:	688a      	ldr	r2, [r1, #8]
 800e582:	690b      	ldr	r3, [r1, #16]
 800e584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e588:	4293      	cmp	r3, r2
 800e58a:	bfb8      	it	lt
 800e58c:	4613      	movlt	r3, r2
 800e58e:	6033      	str	r3, [r6, #0]
 800e590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e594:	4607      	mov	r7, r0
 800e596:	460c      	mov	r4, r1
 800e598:	b10a      	cbz	r2, 800e59e <_printf_common+0x26>
 800e59a:	3301      	adds	r3, #1
 800e59c:	6033      	str	r3, [r6, #0]
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	0699      	lsls	r1, r3, #26
 800e5a2:	bf42      	ittt	mi
 800e5a4:	6833      	ldrmi	r3, [r6, #0]
 800e5a6:	3302      	addmi	r3, #2
 800e5a8:	6033      	strmi	r3, [r6, #0]
 800e5aa:	6825      	ldr	r5, [r4, #0]
 800e5ac:	f015 0506 	ands.w	r5, r5, #6
 800e5b0:	d106      	bne.n	800e5c0 <_printf_common+0x48>
 800e5b2:	f104 0a19 	add.w	sl, r4, #25
 800e5b6:	68e3      	ldr	r3, [r4, #12]
 800e5b8:	6832      	ldr	r2, [r6, #0]
 800e5ba:	1a9b      	subs	r3, r3, r2
 800e5bc:	42ab      	cmp	r3, r5
 800e5be:	dc26      	bgt.n	800e60e <_printf_common+0x96>
 800e5c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5c4:	1e13      	subs	r3, r2, #0
 800e5c6:	6822      	ldr	r2, [r4, #0]
 800e5c8:	bf18      	it	ne
 800e5ca:	2301      	movne	r3, #1
 800e5cc:	0692      	lsls	r2, r2, #26
 800e5ce:	d42b      	bmi.n	800e628 <_printf_common+0xb0>
 800e5d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5d4:	4649      	mov	r1, r9
 800e5d6:	4638      	mov	r0, r7
 800e5d8:	47c0      	blx	r8
 800e5da:	3001      	adds	r0, #1
 800e5dc:	d01e      	beq.n	800e61c <_printf_common+0xa4>
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	6922      	ldr	r2, [r4, #16]
 800e5e2:	f003 0306 	and.w	r3, r3, #6
 800e5e6:	2b04      	cmp	r3, #4
 800e5e8:	bf02      	ittt	eq
 800e5ea:	68e5      	ldreq	r5, [r4, #12]
 800e5ec:	6833      	ldreq	r3, [r6, #0]
 800e5ee:	1aed      	subeq	r5, r5, r3
 800e5f0:	68a3      	ldr	r3, [r4, #8]
 800e5f2:	bf0c      	ite	eq
 800e5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5f8:	2500      	movne	r5, #0
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	bfc4      	itt	gt
 800e5fe:	1a9b      	subgt	r3, r3, r2
 800e600:	18ed      	addgt	r5, r5, r3
 800e602:	2600      	movs	r6, #0
 800e604:	341a      	adds	r4, #26
 800e606:	42b5      	cmp	r5, r6
 800e608:	d11a      	bne.n	800e640 <_printf_common+0xc8>
 800e60a:	2000      	movs	r0, #0
 800e60c:	e008      	b.n	800e620 <_printf_common+0xa8>
 800e60e:	2301      	movs	r3, #1
 800e610:	4652      	mov	r2, sl
 800e612:	4649      	mov	r1, r9
 800e614:	4638      	mov	r0, r7
 800e616:	47c0      	blx	r8
 800e618:	3001      	adds	r0, #1
 800e61a:	d103      	bne.n	800e624 <_printf_common+0xac>
 800e61c:	f04f 30ff 	mov.w	r0, #4294967295
 800e620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e624:	3501      	adds	r5, #1
 800e626:	e7c6      	b.n	800e5b6 <_printf_common+0x3e>
 800e628:	18e1      	adds	r1, r4, r3
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	2030      	movs	r0, #48	; 0x30
 800e62e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e632:	4422      	add	r2, r4
 800e634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e63c:	3302      	adds	r3, #2
 800e63e:	e7c7      	b.n	800e5d0 <_printf_common+0x58>
 800e640:	2301      	movs	r3, #1
 800e642:	4622      	mov	r2, r4
 800e644:	4649      	mov	r1, r9
 800e646:	4638      	mov	r0, r7
 800e648:	47c0      	blx	r8
 800e64a:	3001      	adds	r0, #1
 800e64c:	d0e6      	beq.n	800e61c <_printf_common+0xa4>
 800e64e:	3601      	adds	r6, #1
 800e650:	e7d9      	b.n	800e606 <_printf_common+0x8e>
	...

0800e654 <_printf_i>:
 800e654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e658:	7e0f      	ldrb	r7, [r1, #24]
 800e65a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e65c:	2f78      	cmp	r7, #120	; 0x78
 800e65e:	4691      	mov	r9, r2
 800e660:	4680      	mov	r8, r0
 800e662:	460c      	mov	r4, r1
 800e664:	469a      	mov	sl, r3
 800e666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e66a:	d807      	bhi.n	800e67c <_printf_i+0x28>
 800e66c:	2f62      	cmp	r7, #98	; 0x62
 800e66e:	d80a      	bhi.n	800e686 <_printf_i+0x32>
 800e670:	2f00      	cmp	r7, #0
 800e672:	f000 80d4 	beq.w	800e81e <_printf_i+0x1ca>
 800e676:	2f58      	cmp	r7, #88	; 0x58
 800e678:	f000 80c0 	beq.w	800e7fc <_printf_i+0x1a8>
 800e67c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e684:	e03a      	b.n	800e6fc <_printf_i+0xa8>
 800e686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e68a:	2b15      	cmp	r3, #21
 800e68c:	d8f6      	bhi.n	800e67c <_printf_i+0x28>
 800e68e:	a101      	add	r1, pc, #4	; (adr r1, 800e694 <_printf_i+0x40>)
 800e690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e694:	0800e6ed 	.word	0x0800e6ed
 800e698:	0800e701 	.word	0x0800e701
 800e69c:	0800e67d 	.word	0x0800e67d
 800e6a0:	0800e67d 	.word	0x0800e67d
 800e6a4:	0800e67d 	.word	0x0800e67d
 800e6a8:	0800e67d 	.word	0x0800e67d
 800e6ac:	0800e701 	.word	0x0800e701
 800e6b0:	0800e67d 	.word	0x0800e67d
 800e6b4:	0800e67d 	.word	0x0800e67d
 800e6b8:	0800e67d 	.word	0x0800e67d
 800e6bc:	0800e67d 	.word	0x0800e67d
 800e6c0:	0800e805 	.word	0x0800e805
 800e6c4:	0800e72d 	.word	0x0800e72d
 800e6c8:	0800e7bf 	.word	0x0800e7bf
 800e6cc:	0800e67d 	.word	0x0800e67d
 800e6d0:	0800e67d 	.word	0x0800e67d
 800e6d4:	0800e827 	.word	0x0800e827
 800e6d8:	0800e67d 	.word	0x0800e67d
 800e6dc:	0800e72d 	.word	0x0800e72d
 800e6e0:	0800e67d 	.word	0x0800e67d
 800e6e4:	0800e67d 	.word	0x0800e67d
 800e6e8:	0800e7c7 	.word	0x0800e7c7
 800e6ec:	682b      	ldr	r3, [r5, #0]
 800e6ee:	1d1a      	adds	r2, r3, #4
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	602a      	str	r2, [r5, #0]
 800e6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e09f      	b.n	800e840 <_printf_i+0x1ec>
 800e700:	6820      	ldr	r0, [r4, #0]
 800e702:	682b      	ldr	r3, [r5, #0]
 800e704:	0607      	lsls	r7, r0, #24
 800e706:	f103 0104 	add.w	r1, r3, #4
 800e70a:	6029      	str	r1, [r5, #0]
 800e70c:	d501      	bpl.n	800e712 <_printf_i+0xbe>
 800e70e:	681e      	ldr	r6, [r3, #0]
 800e710:	e003      	b.n	800e71a <_printf_i+0xc6>
 800e712:	0646      	lsls	r6, r0, #25
 800e714:	d5fb      	bpl.n	800e70e <_printf_i+0xba>
 800e716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e71a:	2e00      	cmp	r6, #0
 800e71c:	da03      	bge.n	800e726 <_printf_i+0xd2>
 800e71e:	232d      	movs	r3, #45	; 0x2d
 800e720:	4276      	negs	r6, r6
 800e722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e726:	485a      	ldr	r0, [pc, #360]	; (800e890 <_printf_i+0x23c>)
 800e728:	230a      	movs	r3, #10
 800e72a:	e012      	b.n	800e752 <_printf_i+0xfe>
 800e72c:	682b      	ldr	r3, [r5, #0]
 800e72e:	6820      	ldr	r0, [r4, #0]
 800e730:	1d19      	adds	r1, r3, #4
 800e732:	6029      	str	r1, [r5, #0]
 800e734:	0605      	lsls	r5, r0, #24
 800e736:	d501      	bpl.n	800e73c <_printf_i+0xe8>
 800e738:	681e      	ldr	r6, [r3, #0]
 800e73a:	e002      	b.n	800e742 <_printf_i+0xee>
 800e73c:	0641      	lsls	r1, r0, #25
 800e73e:	d5fb      	bpl.n	800e738 <_printf_i+0xe4>
 800e740:	881e      	ldrh	r6, [r3, #0]
 800e742:	4853      	ldr	r0, [pc, #332]	; (800e890 <_printf_i+0x23c>)
 800e744:	2f6f      	cmp	r7, #111	; 0x6f
 800e746:	bf0c      	ite	eq
 800e748:	2308      	moveq	r3, #8
 800e74a:	230a      	movne	r3, #10
 800e74c:	2100      	movs	r1, #0
 800e74e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e752:	6865      	ldr	r5, [r4, #4]
 800e754:	60a5      	str	r5, [r4, #8]
 800e756:	2d00      	cmp	r5, #0
 800e758:	bfa2      	ittt	ge
 800e75a:	6821      	ldrge	r1, [r4, #0]
 800e75c:	f021 0104 	bicge.w	r1, r1, #4
 800e760:	6021      	strge	r1, [r4, #0]
 800e762:	b90e      	cbnz	r6, 800e768 <_printf_i+0x114>
 800e764:	2d00      	cmp	r5, #0
 800e766:	d04b      	beq.n	800e800 <_printf_i+0x1ac>
 800e768:	4615      	mov	r5, r2
 800e76a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e76e:	fb03 6711 	mls	r7, r3, r1, r6
 800e772:	5dc7      	ldrb	r7, [r0, r7]
 800e774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e778:	4637      	mov	r7, r6
 800e77a:	42bb      	cmp	r3, r7
 800e77c:	460e      	mov	r6, r1
 800e77e:	d9f4      	bls.n	800e76a <_printf_i+0x116>
 800e780:	2b08      	cmp	r3, #8
 800e782:	d10b      	bne.n	800e79c <_printf_i+0x148>
 800e784:	6823      	ldr	r3, [r4, #0]
 800e786:	07de      	lsls	r6, r3, #31
 800e788:	d508      	bpl.n	800e79c <_printf_i+0x148>
 800e78a:	6923      	ldr	r3, [r4, #16]
 800e78c:	6861      	ldr	r1, [r4, #4]
 800e78e:	4299      	cmp	r1, r3
 800e790:	bfde      	ittt	le
 800e792:	2330      	movle	r3, #48	; 0x30
 800e794:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e798:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e79c:	1b52      	subs	r2, r2, r5
 800e79e:	6122      	str	r2, [r4, #16]
 800e7a0:	f8cd a000 	str.w	sl, [sp]
 800e7a4:	464b      	mov	r3, r9
 800e7a6:	aa03      	add	r2, sp, #12
 800e7a8:	4621      	mov	r1, r4
 800e7aa:	4640      	mov	r0, r8
 800e7ac:	f7ff fee4 	bl	800e578 <_printf_common>
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	d14a      	bne.n	800e84a <_printf_i+0x1f6>
 800e7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b8:	b004      	add	sp, #16
 800e7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	f043 0320 	orr.w	r3, r3, #32
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	4833      	ldr	r0, [pc, #204]	; (800e894 <_printf_i+0x240>)
 800e7c8:	2778      	movs	r7, #120	; 0x78
 800e7ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e7ce:	6823      	ldr	r3, [r4, #0]
 800e7d0:	6829      	ldr	r1, [r5, #0]
 800e7d2:	061f      	lsls	r7, r3, #24
 800e7d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e7d8:	d402      	bmi.n	800e7e0 <_printf_i+0x18c>
 800e7da:	065f      	lsls	r7, r3, #25
 800e7dc:	bf48      	it	mi
 800e7de:	b2b6      	uxthmi	r6, r6
 800e7e0:	07df      	lsls	r7, r3, #31
 800e7e2:	bf48      	it	mi
 800e7e4:	f043 0320 	orrmi.w	r3, r3, #32
 800e7e8:	6029      	str	r1, [r5, #0]
 800e7ea:	bf48      	it	mi
 800e7ec:	6023      	strmi	r3, [r4, #0]
 800e7ee:	b91e      	cbnz	r6, 800e7f8 <_printf_i+0x1a4>
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	f023 0320 	bic.w	r3, r3, #32
 800e7f6:	6023      	str	r3, [r4, #0]
 800e7f8:	2310      	movs	r3, #16
 800e7fa:	e7a7      	b.n	800e74c <_printf_i+0xf8>
 800e7fc:	4824      	ldr	r0, [pc, #144]	; (800e890 <_printf_i+0x23c>)
 800e7fe:	e7e4      	b.n	800e7ca <_printf_i+0x176>
 800e800:	4615      	mov	r5, r2
 800e802:	e7bd      	b.n	800e780 <_printf_i+0x12c>
 800e804:	682b      	ldr	r3, [r5, #0]
 800e806:	6826      	ldr	r6, [r4, #0]
 800e808:	6961      	ldr	r1, [r4, #20]
 800e80a:	1d18      	adds	r0, r3, #4
 800e80c:	6028      	str	r0, [r5, #0]
 800e80e:	0635      	lsls	r5, r6, #24
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	d501      	bpl.n	800e818 <_printf_i+0x1c4>
 800e814:	6019      	str	r1, [r3, #0]
 800e816:	e002      	b.n	800e81e <_printf_i+0x1ca>
 800e818:	0670      	lsls	r0, r6, #25
 800e81a:	d5fb      	bpl.n	800e814 <_printf_i+0x1c0>
 800e81c:	8019      	strh	r1, [r3, #0]
 800e81e:	2300      	movs	r3, #0
 800e820:	6123      	str	r3, [r4, #16]
 800e822:	4615      	mov	r5, r2
 800e824:	e7bc      	b.n	800e7a0 <_printf_i+0x14c>
 800e826:	682b      	ldr	r3, [r5, #0]
 800e828:	1d1a      	adds	r2, r3, #4
 800e82a:	602a      	str	r2, [r5, #0]
 800e82c:	681d      	ldr	r5, [r3, #0]
 800e82e:	6862      	ldr	r2, [r4, #4]
 800e830:	2100      	movs	r1, #0
 800e832:	4628      	mov	r0, r5
 800e834:	f7f1 fd5c 	bl	80002f0 <memchr>
 800e838:	b108      	cbz	r0, 800e83e <_printf_i+0x1ea>
 800e83a:	1b40      	subs	r0, r0, r5
 800e83c:	6060      	str	r0, [r4, #4]
 800e83e:	6863      	ldr	r3, [r4, #4]
 800e840:	6123      	str	r3, [r4, #16]
 800e842:	2300      	movs	r3, #0
 800e844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e848:	e7aa      	b.n	800e7a0 <_printf_i+0x14c>
 800e84a:	6923      	ldr	r3, [r4, #16]
 800e84c:	462a      	mov	r2, r5
 800e84e:	4649      	mov	r1, r9
 800e850:	4640      	mov	r0, r8
 800e852:	47d0      	blx	sl
 800e854:	3001      	adds	r0, #1
 800e856:	d0ad      	beq.n	800e7b4 <_printf_i+0x160>
 800e858:	6823      	ldr	r3, [r4, #0]
 800e85a:	079b      	lsls	r3, r3, #30
 800e85c:	d413      	bmi.n	800e886 <_printf_i+0x232>
 800e85e:	68e0      	ldr	r0, [r4, #12]
 800e860:	9b03      	ldr	r3, [sp, #12]
 800e862:	4298      	cmp	r0, r3
 800e864:	bfb8      	it	lt
 800e866:	4618      	movlt	r0, r3
 800e868:	e7a6      	b.n	800e7b8 <_printf_i+0x164>
 800e86a:	2301      	movs	r3, #1
 800e86c:	4632      	mov	r2, r6
 800e86e:	4649      	mov	r1, r9
 800e870:	4640      	mov	r0, r8
 800e872:	47d0      	blx	sl
 800e874:	3001      	adds	r0, #1
 800e876:	d09d      	beq.n	800e7b4 <_printf_i+0x160>
 800e878:	3501      	adds	r5, #1
 800e87a:	68e3      	ldr	r3, [r4, #12]
 800e87c:	9903      	ldr	r1, [sp, #12]
 800e87e:	1a5b      	subs	r3, r3, r1
 800e880:	42ab      	cmp	r3, r5
 800e882:	dcf2      	bgt.n	800e86a <_printf_i+0x216>
 800e884:	e7eb      	b.n	800e85e <_printf_i+0x20a>
 800e886:	2500      	movs	r5, #0
 800e888:	f104 0619 	add.w	r6, r4, #25
 800e88c:	e7f5      	b.n	800e87a <_printf_i+0x226>
 800e88e:	bf00      	nop
 800e890:	0800ea15 	.word	0x0800ea15
 800e894:	0800ea26 	.word	0x0800ea26

0800e898 <memmove>:
 800e898:	4288      	cmp	r0, r1
 800e89a:	b510      	push	{r4, lr}
 800e89c:	eb01 0402 	add.w	r4, r1, r2
 800e8a0:	d902      	bls.n	800e8a8 <memmove+0x10>
 800e8a2:	4284      	cmp	r4, r0
 800e8a4:	4623      	mov	r3, r4
 800e8a6:	d807      	bhi.n	800e8b8 <memmove+0x20>
 800e8a8:	1e43      	subs	r3, r0, #1
 800e8aa:	42a1      	cmp	r1, r4
 800e8ac:	d008      	beq.n	800e8c0 <memmove+0x28>
 800e8ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8b6:	e7f8      	b.n	800e8aa <memmove+0x12>
 800e8b8:	4402      	add	r2, r0
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	428a      	cmp	r2, r1
 800e8be:	d100      	bne.n	800e8c2 <memmove+0x2a>
 800e8c0:	bd10      	pop	{r4, pc}
 800e8c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8ca:	e7f7      	b.n	800e8bc <memmove+0x24>

0800e8cc <_sbrk_r>:
 800e8cc:	b538      	push	{r3, r4, r5, lr}
 800e8ce:	4d06      	ldr	r5, [pc, #24]	; (800e8e8 <_sbrk_r+0x1c>)
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	4608      	mov	r0, r1
 800e8d6:	602b      	str	r3, [r5, #0]
 800e8d8:	f7f2 fef6 	bl	80016c8 <_sbrk>
 800e8dc:	1c43      	adds	r3, r0, #1
 800e8de:	d102      	bne.n	800e8e6 <_sbrk_r+0x1a>
 800e8e0:	682b      	ldr	r3, [r5, #0]
 800e8e2:	b103      	cbz	r3, 800e8e6 <_sbrk_r+0x1a>
 800e8e4:	6023      	str	r3, [r4, #0]
 800e8e6:	bd38      	pop	{r3, r4, r5, pc}
 800e8e8:	240029e0 	.word	0x240029e0

0800e8ec <memcpy>:
 800e8ec:	440a      	add	r2, r1
 800e8ee:	4291      	cmp	r1, r2
 800e8f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8f4:	d100      	bne.n	800e8f8 <memcpy+0xc>
 800e8f6:	4770      	bx	lr
 800e8f8:	b510      	push	{r4, lr}
 800e8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e902:	4291      	cmp	r1, r2
 800e904:	d1f9      	bne.n	800e8fa <memcpy+0xe>
 800e906:	bd10      	pop	{r4, pc}

0800e908 <_realloc_r>:
 800e908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e90c:	4680      	mov	r8, r0
 800e90e:	4614      	mov	r4, r2
 800e910:	460e      	mov	r6, r1
 800e912:	b921      	cbnz	r1, 800e91e <_realloc_r+0x16>
 800e914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e918:	4611      	mov	r1, r2
 800e91a:	f7ff bc49 	b.w	800e1b0 <_malloc_r>
 800e91e:	b92a      	cbnz	r2, 800e92c <_realloc_r+0x24>
 800e920:	f7ff fbda 	bl	800e0d8 <_free_r>
 800e924:	4625      	mov	r5, r4
 800e926:	4628      	mov	r0, r5
 800e928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e92c:	f000 f81b 	bl	800e966 <_malloc_usable_size_r>
 800e930:	4284      	cmp	r4, r0
 800e932:	4607      	mov	r7, r0
 800e934:	d802      	bhi.n	800e93c <_realloc_r+0x34>
 800e936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e93a:	d812      	bhi.n	800e962 <_realloc_r+0x5a>
 800e93c:	4621      	mov	r1, r4
 800e93e:	4640      	mov	r0, r8
 800e940:	f7ff fc36 	bl	800e1b0 <_malloc_r>
 800e944:	4605      	mov	r5, r0
 800e946:	2800      	cmp	r0, #0
 800e948:	d0ed      	beq.n	800e926 <_realloc_r+0x1e>
 800e94a:	42bc      	cmp	r4, r7
 800e94c:	4622      	mov	r2, r4
 800e94e:	4631      	mov	r1, r6
 800e950:	bf28      	it	cs
 800e952:	463a      	movcs	r2, r7
 800e954:	f7ff ffca 	bl	800e8ec <memcpy>
 800e958:	4631      	mov	r1, r6
 800e95a:	4640      	mov	r0, r8
 800e95c:	f7ff fbbc 	bl	800e0d8 <_free_r>
 800e960:	e7e1      	b.n	800e926 <_realloc_r+0x1e>
 800e962:	4635      	mov	r5, r6
 800e964:	e7df      	b.n	800e926 <_realloc_r+0x1e>

0800e966 <_malloc_usable_size_r>:
 800e966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e96a:	1f18      	subs	r0, r3, #4
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	bfbc      	itt	lt
 800e970:	580b      	ldrlt	r3, [r1, r0]
 800e972:	18c0      	addlt	r0, r0, r3
 800e974:	4770      	bx	lr
	...

0800e978 <_init>:
 800e978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97a:	bf00      	nop
 800e97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e97e:	bc08      	pop	{r3}
 800e980:	469e      	mov	lr, r3
 800e982:	4770      	bx	lr

0800e984 <_fini>:
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	bf00      	nop
 800e988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e98a:	bc08      	pop	{r3}
 800e98c:	469e      	mov	lr, r3
 800e98e:	4770      	bx	lr
